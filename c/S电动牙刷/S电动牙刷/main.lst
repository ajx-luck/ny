
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_ledWord
                                    1-   15     	extern	_ledPWM
                                    1-   16     	extern	_PORTBbits
                                    1-   17     	extern	_PCONbits
                                    1-   18     	extern	_BWUCONbits
                                    1-   19     	extern	_BPLCONbits
                                    1-   20     	extern	_BPHCONbits
                                    1-   21     	extern	_INTEbits
                                    1-   22     	extern	_INTFbits
                                    1-   23     	extern	_INDF
                                    1-   24     	extern	_TMR0
                                    1-   25     	extern	_PCL
                                    1-   26     	extern	_STATUS
                                    1-   27     	extern	_FSR
                                    1-   28     	extern	_PORTB
                                    1-   29     	extern	_PCON
                                    1-   30     	extern	_BWUCON
                                    1-   31     	extern	_PCHBUF
                                    1-   32     	extern	_BPLCON
                                    1-   33     	extern	_BPHCON
                                    1-   34     	extern	_INTE
                                    1-   35     	extern	_INTF
                                    1-   36     	extern	_TMR1
                                    1-   37     	extern	_T1CR1
                                    1-   38     	extern	_T1CR2
                                    1-   39     	extern	_PWM1DUTY
                                    1-   40     	extern	_PS1CV
                                    1-   41     	extern	_BZ1CR
                                    1-   42     	extern	_IRCR
                                    1-   43     	extern	_TBHP
                                    1-   44     	extern	_TBHD
                                    1-   45     	extern	_OSCCR
                                    1-   46     	extern	_IOSTB
                                    1-   47     	extern	_PS0CV
                                    1-   48     	extern	_BODCON
                                    1-   49     	extern	_PCON1
                                    1-   50     	extern	_T0MD
                                    1-   51     	extern	___sdcc_saved_fsr
                                    1-   52     	extern	___sdcc_saved_stk00
                                    1-   53     	extern	___sdcc_saved_stk01
                                    1-   54     	extern	__nyc_ny8_startup
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     ; global declarations
                                    1-   57     ;--------------------------------------------------------
                                    1-   58     	extern	_keyRead
                                    1-   59     	extern	_delay
                                    1-   60     	extern	_checkLVD
                                    1-   61     	extern	_initSys
                                    1-   62     	extern	_gotoSleep
                                    1-   63     	extern	_pwmWork
                                    1-   64     	extern	_setPWMduty
                                    1-   65     	extern	_ledCon
                                    1-   66     	extern	_keyCon
                                    1-   67     	extern	_chrgCon
                                    1-   68     	extern	_isr
                                    1-   69     	extern	_main
                                    1-   70     	extern	_INTFLAG
                                    1-   71     	extern	_workStep
                                    1-   72     	extern	_saveWorkStep
                                    1-   73     	extern	_intCount
                                    1-   74     	extern	_KeyStatus
                                    1-   75     	extern	_keyCount
                                    1-   76     	extern	_longPressFlag
                                    1-   77     	extern	_pwmHmax
                                    1-   78     	extern	_pwmLmax
                                    1-   79     	extern	_pwm2Lmax
                                    1-   80     	extern	_pwmwaitTime
                                    1-   81     	extern	_pwmStep
                                    1-   82     	extern	_pwm1L
                                    1-   83     	extern	_pwm2L
                                    1-   84     	extern	_pwmwait
                                    1-   85     	extern	_lvdFlag
                                    1-   86     	extern	_sleepDelay
                                    1-   87     	extern	_ledCount
                                    1-   88     	extern	_ledStep
                                    1-   89     	extern	_RDUTY
                                    1-   90     	extern	_workTime
                                    1-   92     	extern PSAVE
                                    1-   93     	extern SSAVE
                                    1-   94     	extern WSAVE
                                    1-   95     	extern STK12
                                    1-   96     	extern STK11
                                    1-   97     	extern STK10
                                    1-   98     	extern STK09
                                    1-   99     	extern STK08
                                    1-  100     	extern STK07
                                    1-  101     	extern STK06
                                    1-  102     	extern STK05
                                    1-  103     	extern STK04
                                    1-  104     	extern STK03
                                    1-  105     	extern STK02
                                    1-  106     	extern STK01
                                    1-  107     	extern STK00
                                    1-  109     .segment "uninit", 0x20000010
 20000010                           1-  110     PSAVE:
                                    1-  111     	.res 1
 20000011                           1-  112     SSAVE:
                                    1-  113     	.res 1
 20000012                           1-  114     WSAVE:
                                    1-  115     	.res 1
 20000013                           1-  116     STK12:
                                    1-  117     	.res 1
 20000014                           1-  118     STK11:
                                    1-  119     	.res 1
 20000015                           1-  120     STK10:
                                    1-  121     	.res 1
 20000016                           1-  122     STK09:
                                    1-  123     	.res 1
 20000017                           1-  124     STK08:
                                    1-  125     	.res 1
 20000018                           1-  126     STK07:
                                    1-  127     	.res 1
 20000019                           1-  128     STK06:
                                    1-  129     	.res 1
 2000001A                           1-  130     STK05:
                                    1-  131     	.res 1
 2000001B                           1-  132     STK04:
                                    1-  133     	.res 1
 2000001C                           1-  134     STK03:
                                    1-  135     	.res 1
 2000001D                           1-  136     STK02:
                                    1-  137     	.res 1
 2000001E                           1-  138     STK01:
                                    1-  139     	.res 1
 2000001F                           1-  140     STK00:
                                    1-  141     	.res 1
                                    1-  143     ;--------------------------------------------------------
                                    1-  144     ; global definitions
                                    1-  145     ;--------------------------------------------------------
                                    1-  146     .segment "uninit"
     0000                           1-  147     _KeyStatus:
                                    1-  148     	.res	1
                                    1-  151     ;--------------------------------------------------------
                                    1-  152     ; absolute symbol definitions
                                    1-  153     ;--------------------------------------------------------
                                    1-  154     ;--------------------------------------------------------
                                    1-  155     ; compiler-defined variables
                                    1-  156     ;--------------------------------------------------------
                                    1-  157     .segment "uninit"
     0000                           1-  158     r0x101E:
                                    1-  159     	.res	1
                                    1-  160     .segment "uninit"
     0000                           1-  161     r0x101F:
                                    1-  162     	.res	1
                                    1-  163     .segment "uninit"
     0000                           1-  164     r0x101D:
                                    1-  165     	.res	1
                                    1-  166     .segment "uninit"
     0000                           1-  167     r0x101B:
                                    1-  168     	.res	1
                                    1-  169     .segment "uninit"
     0000                           1-  170     r0x101C:
                                    1-  171     	.res	1
                                    1-  172     .segment "uninit"
     0000                           1-  173     r0x1019:
                                    1-  174     	.res	1
                                    1-  175     .segment "uninit"
     0000                           1-  176     r0x101A:
                                    1-  177     	.res	1
                                    1-  178     .segment "uninit"
     0000                           1-  179     r0x1017:
                                    1-  180     	.res	1
                                    1-  181     .segment "uninit"
     0000                           1-  182     r0x1018:
                                    1-  183     	.res	1
                                    1-  184     .segment "uninit"
     0000                           1-  185     r0x1016:
                                    1-  186     	.res	1
                                    1-  187     ;--------------------------------------------------------
                                    1-  188     ; initialized data
                                    1-  189     ;--------------------------------------------------------
                                    1-  191     .segment "idata"
     0000                           1-  192     _INTFLAG:
     0000 0000                      1-  193     	dw	0x00
                                    1-  197     .segment "idata"
     0000                           1-  198     _workStep:
     0000 0000                      1-  199     	dw	0x00
                                    1-  203     .segment "idata"
     0000                           1-  204     _saveWorkStep:
     0000 0001                      1-  205     	dw	0x01
                                    1-  209     .segment "idata"
     0000                           1-  210     _intCount:
     0000 0000                      1-  211     	dw	0x00
                                    1-  215     .segment "idata"
     0000                           1-  216     _keyCount:
     0000 0000                      1-  217     	dw	0x00
                                    1-  221     .segment "idata"
     0000                           1-  222     _longPressFlag:
     0000 0000                      1-  223     	dw	0x00
                                    1-  227     .segment "idata"
     0000                           1-  228     _pwmHmax:
     0000 0014                      1-  229     	dw	0x14
                                    1-  233     .segment "idata"
     0000                           1-  234     _pwmLmax:
     0000 0010                      1-  235     	dw	0x10
                                    1-  239     .segment "idata"
     0000                           1-  240     _pwm2Lmax:
     0000 0010                      1-  241     	dw	0x10
                                    1-  245     .segment "idata"
     0000                           1-  246     _pwmwaitTime:
     0000 0002                      1-  247     	dw	0x02
                                    1-  251     .segment "idata"
     0000                           1-  252     _pwmStep:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _pwm1L:
     0000 rrrr                      1-  259     	dw	_pwmLmax
                                    1-  263     .segment "idata"
     0000                           1-  264     _pwm2L:
     0000 rrrr                      1-  265     	dw	_pwmLmax
                                    1-  269     .segment "idata"
     0000                           1-  270     _pwmwait:
     0000 0000                      1-  271     	dw	0x00
                                    1-  275     .segment "idata"
     0000                           1-  276     _lvdFlag:
     0000 0000                      1-  277     	dw	0x00
                                    1-  281     .segment "idata"
     0000                           1-  282     _sleepDelay:
     0000 0000                      1-  283     	dw	0x00
                                    1-  287     .segment "idata"
     0000                           1-  288     _ledCount:
     0000 0000                      1-  289     	dw	0x00
                                    1-  293     .segment "idata"
     0000                           1-  294     _ledStep:
     0000 0000                      1-  295     	dw	0x00
                                    1-  299     .segment "idata"
     0000                           1-  300     _RDUTY:
     0000 0000                      1-  301     	dw	0x00
                                    1-  305     .segment "idata"
     0000                           1-  306     _workTime:
     0000 0000 0000                 1-  307     	dw	0x00, 0x00
                                    1-  310     ;--------------------------------------------------------
                                    1-  311     ; overlayable items in internal ram 
                                    1-  312     ;--------------------------------------------------------
                                    1-  313     ;	udata_ovr
                                    1-  314     ;--------------------------------------------------------
                                    1-  315     ; reset vector 
                                    1-  316     ;--------------------------------------------------------
                                    1-  317     ORG	0x0000
     0000 3rrr                      1-  318     	LGOTO	__nyc_ny8_startup
                                    1-  319     ;--------------------------------------------------------
                                    1-  320     ; interrupt and initialization code
                                    1-  321     ;--------------------------------------------------------
                                    1-  322     ORG 0x0008
     0008 3rrr                      1-  323     	lgoto	__sdcc_interrupt
                                    1-  325     .segment "code"
     0000                           1-  326     __sdcc_interrupt:
                                    1-  327     ;***
                                    1-  328     ;  pBlock Stats: dbName = I
                                    1-  329     ;***
                                    1-  330     ;functions called:
                                    1-  331     ;   _setPWMduty
                                    1-  332     ;   _pwmWork
                                    1-  333     ;   _setPWMduty
                                    1-  334     ;   _pwmWork
                                    1-  335     ;2 compiler assigned registers:
                                    1-  336     ;   STK00
                                    1-  337     ;   STK01
                                    1-  338     ;; Starting pCode block
     0000                           1-  339     _isr:
                                    1-  340     ; 0 exit points
                                    1-  341     	.line	72, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  342     	MOVAR	WSAVE
     0001 1503                      1-  343     	SWAPR	STATUS,W
     0002 0283                      1-  344     	CLRR	STATUS
     0003 00rr                      1-  345     	MOVAR	SSAVE
     0004 010A                      1-  346     	MOVR	PCHBUF,W
     0005 028A                      1-  347     	CLRR	PCHBUF
     0006 00rr                      1-  348     	MOVAR	PSAVE
     0007 0104                      1-  349     	MOVR	FSR,W
     0008 00rr                      1-  350     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  351     	MOVR	STK00,W
     000A 00rr                      1-  352     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  353     	MOVR	STK01,W
     000C 00rr                      1-  354     	MOVAR	___sdcc_saved_stk01
                                    1-  355     	.line	75, "main.c"; 	if(INTFbits.T1IF)
     000D 09rr                      1-  356     	BTRSS	_INTFbits,3
     000E 3rrr                      1-  357     	LGOTO	_00114_DS_
                                    1-  358     	.line	77, "main.c"; 	INTF= (unsigned char)~(C_INT_TMR0);	// Clear T0IF flag bit	
     000F 21FE                      1-  359     	MOVIA	0xfe
     0010 00rr                      1-  360     	MOVAR	_INTF
                                    1-  361     	.line	78, "main.c"; 	TMR1 = 0x17;							// 0.1ms中断一次 23 * (16*2/8000000) = 0.000092
     0011 2117                      1-  362     	MOVIA	0x17
     0012 002r                      1-  363     	SFUN	_TMR1
                                    1-  364     	.line	79, "main.c"; 	intCount++;
     0013 05rr                      1-  365     	INCR	_intCount,F
                                    1-  366     	.line	81, "main.c"; 	if(ledStep == 2 || ledStep == 3)		//充电中,停止工作
     0014 01rr                      1-  367     	MOVR	_ledStep,W
     0015 2402                      1-  368     	XORIA	0x02
     0016 0D03                      1-  369     	BTRSC	STATUS,2
     0017 3rrr                      1-  370     	LGOTO	_00105_DS_
     0018 01rr                      1-  371     	MOVR	_ledStep,W
     0019 2403                      1-  372     	XORIA	0x03
     001A 0903                      1-  373     	BTRSS	STATUS,2
     001B 3rrr                      1-  374     	LGOTO	_00106_DS_
     001C                           1-  375     _00105_DS_:
                                    1-  376     	.line	83, "main.c"; 	workStep = 0;
     001C 02rr                      1-  377     	CLRR	_workStep
                                    1-  378     	.line	84, "main.c"; 	setPWMduty(0x02,RDUTY);
     001D 01rr                      1-  379     	MOVR	_RDUTY,W
     001E 00rr                      1-  380     	MOVAR	STK00
     001F 2102                      1-  381     	MOVIA	0x02
     0020 2rrr                      1-  382     	LCALL	_setPWMduty
                                    1-  383     	.line	85, "main.c"; 	ledCount++;
     0021 05rr                      1-  384     	INCR	_ledCount,F
                                    1-  385     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  386     ;;unsigned compare: left >= lit (0x2=2), size=1
     0022                           1-  387     _00106_DS_:
                                    1-  388     	.line	88, "main.c"; 	if(workStep > 1&& (!lvdFlag)){
     0022 2102                      1-  389     	MOVIA	0x02
     0023 04rr                      1-  390     	SUBAR	_workStep,W
     0024 0803                      1-  391     	BTRSS	STATUS,0
     0025 3rrr                      1-  392     	LGOTO	_00109_DS_
     0026 01rr                      1-  393     	MOVR	_lvdFlag,W
     0027 0D03                      1-  394     	BTRSC	STATUS,2
                                    1-  395     	.line	89, "main.c"; 	pwmWork();
     0028 2rrr                      1-  396     	LCALL	_pwmWork
     0029                           1-  397     _00109_DS_:
                                    1-  398     	.line	91, "main.c"; 	if(intCount > 100)
     0029 2165                      1-  399     	MOVIA	0x65
     002A 04rr                      1-  400     	SUBAR	_intCount,W
     002B 0803                      1-  401     	BTRSS	STATUS,0
     002C 3rrr                      1-  402     	LGOTO	_00114_DS_
                                    1-  403     	.line	93, "main.c"; 	intCount = 0;
     002D 02rr                      1-  404     	CLRR	_intCount
                                    1-  405     	.line	94, "main.c"; 	INTFLAG = 1;
     002E 2101                      1-  406     	MOVIA	0x01
     002F 00rr                      1-  407     	MOVAR	_INTFLAG
     0030                           1-  408     _00114_DS_:
                                    1-  409     	.line	98, "main.c"; 	INTF = 0;
     0030 02rr                      1-  410     	CLRR	_INTF
                                    1-  411     	.line	100, "main.c"; 	}
     0031 01rr                      1-  412     	MOVR	___sdcc_saved_stk01,W
     0032 00rr                      1-  413     	MOVAR	STK01
     0033 01rr                      1-  414     	MOVR	___sdcc_saved_stk00,W
     0034 00rr                      1-  415     	MOVAR	STK00
     0035 01rr                      1-  416     	MOVR	___sdcc_saved_fsr,W
     0036 0084                      1-  417     	MOVAR	FSR
     0037 01rr                      1-  418     	MOVR	PSAVE,W
     0038 008A                      1-  419     	MOVAR	PCHBUF
     0039 0283                      1-  420     	CLRR	STATUS
     003A 15rr                      1-  421     	SWAPR	SSAVE,W
     003B 0083                      1-  422     	MOVAR	STATUS
     003C 15rr                      1-  423     	SWAPR	WSAVE,F
     003D 15rr                      1-  424     	SWAPR	WSAVE,W
     003E                           1-  425     END_OF_INTERRUPT:
     003E 0011                      1-  426     	RETIE	
                                    1-  428     ;--------------------------------------------------------
                                    1-  429     ; code
                                    1-  430     ;--------------------------------------------------------
                                    1-  431     ;***
                                    1-  432     ;  pBlock Stats: dbName = M
                                    1-  433     ;***
                                    1-  434     ;has an exit
                                    1-  435     ;functions called:
                                    1-  436     ;   _initSys
                                    1-  437     ;   _gotoSleep
                                    1-  438     ;   _checkLVD
                                    1-  439     ;   _ledCon
                                    1-  440     ;   _keyCon
                                    1-  441     ;   _chrgCon
                                    1-  442     ;   _gotoSleep
                                    1-  443     ;   _initSys
                                    1-  444     ;   _gotoSleep
                                    1-  445     ;   _checkLVD
                                    1-  446     ;   _ledCon
                                    1-  447     ;   _keyCon
                                    1-  448     ;   _chrgCon
                                    1-  449     ;   _gotoSleep
                                    1-  450     ;; Starting pCode block
                                    1-  451     .segment "code"; module=main, function=_main
     0000                           1-  453     _main:
                                    1-  454     ; 2 exit points
                                    1-  455     	.line	105, "main.c"; 	initSys();
     0000 2rrr                      1-  456     	LCALL	_initSys
                                    1-  457     	.line	106, "main.c"; 	gotoSleep();
     0001 2rrr                      1-  458     	LCALL	_gotoSleep
     0002                           1-  459     _00146_DS_:
                                    1-  460     	.line	109, "main.c"; 	CLRWDT();	
     0002 0002                      1-  461     	clrwdt
                                    1-  462     	.line	110, "main.c"; 	if(!INTFLAG)
     0003 01rr                      1-  463     	MOVR	_INTFLAG,W
     0004 0D03                      1-  464     	BTRSC	STATUS,2
     0005 3rrr                      1-  465     	LGOTO	_00146_DS_
                                    1-  466     	.line	112, "main.c"; 	INTFLAG = 0;
     0006 02rr                      1-  467     	CLRR	_INTFLAG
                                    1-  468     	.line	113, "main.c"; 	checkLVD(C_LVD_2P4V);
     0007 2108                      1-  469     	MOVIA	0x08
     0008 2rrr                      1-  470     	LCALL	_checkLVD
                                    1-  471     ;;unsigned compare: left < lit (0x2=2), size=1
                                    1-  472     	.line	114, "main.c"; 	if(ledStep < 2)
     0009 2102                      1-  473     	MOVIA	0x02
     000A 04rr                      1-  474     	SUBAR	_ledStep,W
     000B 0803                      1-  475     	BTRSS	STATUS,0
                                    1-  476     	.line	115, "main.c"; 	ledCon();
     000C 2rrr                      1-  477     	LCALL	_ledCon
                                    1-  478     	.line	116, "main.c"; 	keyCon();
     000D 2rrr                      1-  479     	LCALL	_keyCon
                                    1-  480     	.line	117, "main.c"; 	chrgCon();
     000E 2rrr                      1-  481     	LCALL	_chrgCon
                                    1-  482     	.line	118, "main.c"; 	if(++workTime > 3800)
     000F 05rr                      1-  483     	INCR	_workTime,F
     0010 0D03                      1-  484     	BTRSC	STATUS,2
     0011 05rr                      1-  485     	INCR	(_workTime + 1),F
                                    1-  486     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  487     ;;unsigned compare: left >= lit (0xED9=3801), size=2
     0012 210E                      1-  488     	MOVIA	0x0e
     0013 04rr                      1-  489     	SUBAR	(_workTime + 1),W
     0014 0903                      1-  490     	BTRSS	STATUS,2
     0015 3rrr                      1-  491     	LGOTO	_00166_DS_
     0016 21D9                      1-  492     	MOVIA	0xd9
     0017 04rr                      1-  493     	SUBAR	_workTime,W
     0018                           1-  494     _00166_DS_:
     0018 0803                      1-  495     	BTRSS	STATUS,0
     0019 3rrr                      1-  496     	LGOTO	_00146_DS_
                                    1-  497     	.line	120, "main.c"; 	workStep = 0;
     001A 02rr                      1-  498     	CLRR	_workStep
                                    1-  499     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  500     ;;unsigned compare: left >= lit (0xF0B=3851), size=2
                                    1-  501     	.line	121, "main.c"; 	if(workTime > 3850)
     001B 210F                      1-  502     	MOVIA	0x0f
     001C 04rr                      1-  503     	SUBAR	(_workTime + 1),W
     001D 0903                      1-  504     	BTRSS	STATUS,2
     001E 3rrr                      1-  505     	LGOTO	_00167_DS_
     001F 210B                      1-  506     	MOVIA	0x0b
     0020 04rr                      1-  507     	SUBAR	_workTime,W
     0021                           1-  508     _00167_DS_:
     0021 0803                      1-  509     	BTRSS	STATUS,0
     0022 3rrr                      1-  510     	LGOTO	_00146_DS_
                                    1-  511     	.line	123, "main.c"; 	workTime = 0;		//进入休眠
     0023 02rr                      1-  512     	CLRR	_workTime
     0024 02rr                      1-  513     	CLRR	(_workTime + 1)
                                    1-  514     	.line	124, "main.c"; 	gotoSleep();
     0025 2rrr                      1-  515     	LCALL	_gotoSleep
     0026 3rrr                      1-  516     	LGOTO	_00146_DS_
                                    1-  517     	.line	129, "main.c"; 	}
                                    1-  518     	RETURN	
     0027 0010                      3-   26 m1      ret
                                    1-  519     ; exit point of _main
                                    1-  521     ;***
                                    1-  522     ;  pBlock Stats: dbName = C
                                    1-  523     ;***
                                    1-  524     ;has an exit
                                    1-  525     ;1 compiler assigned register :
                                    1-  526     ;   r0x1016
                                    1-  527     ;; Starting pCode block
                                    1-  528     .segment "code"; module=main, function=_keyRead
                                    1-  530     ;local variable name mapping:
     0000                           1-  532     _keyRead:
                                    1-  533     ; 2 exit points
                                    1-  534     	.line	365, "main.c"; 	char keyRead(char KeyStatus)	
     0000 00rr                      1-  535     	MOVAR	r0x1016
                                    1-  536     	.line	367, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  537     	MOVR	r0x1016,W
     0002 0D03                      1-  538     	BTRSC	STATUS,2
     0003 3rrr                      1-  539     	LGOTO	_00325_DS_
                                    1-  540     	.line	369, "main.c"; 	keyCount++;
     0004 05rr                      1-  541     	INCR	_keyCount,F
                                    1-  542     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  543     	.line	370, "main.c"; 	if(keyCount >= 200)
     0005 21C8                      1-  544     	MOVIA	0xc8
     0006 04rr                      1-  545     	SUBAR	_keyCount,W
     0007 0803                      1-  546     	BTRSS	STATUS,0
     0008 3rrr                      1-  547     	LGOTO	_00326_DS_
                                    1-  548     	.line	372, "main.c"; 	keyCount = 200;
     0009 21C8                      1-  549     	MOVIA	0xc8
     000A 00rr                      1-  550     	MOVAR	_keyCount
                                    1-  551     	.line	373, "main.c"; 	if(!longPressFlag)
     000B 01rr                      1-  552     	MOVR	_longPressFlag,W
     000C 0903                      1-  553     	BTRSS	STATUS,2
     000D 3rrr                      1-  554     	LGOTO	_00326_DS_
                                    1-  555     	.line	375, "main.c"; 	longPressFlag = 1;
     000E 2101                      1-  556     	MOVIA	0x01
     000F 00rr                      1-  557     	MOVAR	_longPressFlag
                                    1-  558     	.line	376, "main.c"; 	return 2;
     0010 2102                      1-  559     	MOVIA	0x02
     0011 3rrr                      1-  560     	LGOTO	_00327_DS_
                                    1-  561     ;;unsigned compare: left < lit (0xC8=200), size=1
     0012                           1-  562     _00325_DS_:
                                    1-  563     	.line	382, "main.c"; 	if(keyCount >= 200)
     0012 21C8                      1-  564     	MOVIA	0xc8
     0013 04rr                      1-  565     	SUBAR	_keyCount,W
     0014 0803                      1-  566     	BTRSS	STATUS,0
     0015 3rrr                      1-  567     	LGOTO	_00322_DS_
                                    1-  568     	.line	384, "main.c"; 	keyCount = 0;
     0016 02rr                      1-  569     	CLRR	_keyCount
                                    1-  570     	.line	385, "main.c"; 	longPressFlag = 0;
     0017 02rr                      1-  571     	CLRR	_longPressFlag
                                    1-  572     	.line	386, "main.c"; 	return	0;
     0018 2100                      1-  573     	MOVIA	0x00
     0019 3rrr                      1-  574     	LGOTO	_00327_DS_
                                    1-  575     ;;unsigned compare: left < lit (0x8=8), size=1
     001A                           1-  576     _00322_DS_:
                                    1-  577     	.line	388, "main.c"; 	else if(keyCount >= 8)
     001A 2108                      1-  578     	MOVIA	0x08
     001B 04rr                      1-  579     	SUBAR	_keyCount,W
     001C 0803                      1-  580     	BTRSS	STATUS,0
     001D 3rrr                      1-  581     	LGOTO	_00323_DS_
                                    1-  582     	.line	390, "main.c"; 	keyCount = 0;
     001E 02rr                      1-  583     	CLRR	_keyCount
                                    1-  584     	.line	391, "main.c"; 	return	1;
     001F 2101                      1-  585     	MOVIA	0x01
     0020 3rrr                      1-  586     	LGOTO	_00327_DS_
     0021                           1-  587     _00323_DS_:
                                    1-  588     	.line	393, "main.c"; 	keyCount = 0;
     0021 02rr                      1-  589     	CLRR	_keyCount
     0022                           1-  590     _00326_DS_:
                                    1-  591     	.line	395, "main.c"; 	return 0;
     0022 2100                      1-  592     	MOVIA	0x00
     0023                           1-  593     _00327_DS_:
                                    1-  594     	.line	396, "main.c"; 	}	
                                    1-  595     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  596     ; exit point of _keyRead
                                    1-  598     ;***
                                    1-  599     ;  pBlock Stats: dbName = C
                                    1-  600     ;***
                                    1-  601     ;has an exit
                                    1-  602     ;2 compiler assigned registers:
                                    1-  603     ;   r0x1017
                                    1-  604     ;   r0x1018
                                    1-  605     ;; Starting pCode block
                                    1-  606     .segment "code"; module=main, function=_delay
                                    1-  608     ;local variable name mapping:
     0000                           1-  611     _delay:
                                    1-  612     ; 2 exit points
                                    1-  613     	.line	360, "main.c"; 	void delay(u8t time)
     0000 00rr                      1-  614     	MOVAR	r0x1017
                                    1-  615     	.line	362, "main.c"; 	for(u8t i=0;i<time;i++);
     0001 02rr                      1-  616     	CLRR	r0x1018
     0002                           1-  617     _00308_DS_:
     0002 01rr                      1-  618     	MOVR	r0x1017,W
     0003 04rr                      1-  619     	SUBAR	r0x1018,W
     0004 0C03                      1-  620     	BTRSC	STATUS,0
     0005 3rrr                      1-  621     	LGOTO	_00310_DS_
     0006 05rr                      1-  622     	INCR	r0x1018,F
     0007 3rrr                      1-  623     	LGOTO	_00308_DS_
     0008                           1-  624     _00310_DS_:
                                    1-  625     	.line	363, "main.c"; 	}
                                    1-  626     	RETURN	
     0008 0010                      3-   26 m1      ret
                                    1-  627     ; exit point of _delay
                                    1-  629     ;***
                                    1-  630     ;  pBlock Stats: dbName = C
                                    1-  631     ;***
                                    1-  632     ;has an exit
                                    1-  633     ;functions called:
                                    1-  634     ;   _delay
                                    1-  635     ;   _gotoSleep
                                    1-  636     ;   _delay
                                    1-  637     ;   _gotoSleep
                                    1-  638     ;2 compiler assigned registers:
                                    1-  639     ;   r0x1019
                                    1-  640     ;   r0x101A
                                    1-  641     ;; Starting pCode block
                                    1-  642     .segment "code"; module=main, function=_checkLVD
                                    1-  644     ;local variable name mapping:
     0000                           1-  646     _checkLVD:
                                    1-  647     ; 2 exit points
                                    1-  648     	.line	342, "main.c"; 	char checkLVD(unsigned char lvd)
     0000 00rr                      1-  649     	MOVAR	r0x1019
                                    1-  650     	.line	344, "main.c"; 	PCON1 = lvd;
     0001 000r                      1-  651     	IOST	_PCON1
                                    1-  652     	.line	345, "main.c"; 	delay(80);
     0002 2150                      1-  653     	MOVIA	0x50
     0003 2rrr                      1-  654     	LCALL	_delay
                                    1-  655     	.line	346, "main.c"; 	if((PCON1 >> 6)&1)
     0004 001r                      1-  656     	IOSTR	_PCON1
     0005 00rr                      1-  657     	MOVAR	r0x1019
     0006 2240                      1-  658     	ANDIA	0x40
     0007 0903                      1-  659     	BTRSS	STATUS,2
     0008 2101                      1-  660     	MOVIA	0x01
     0009 00rr                      1-  661     	MOVAR	r0x101A
     000A 01rr                      1-  662     	MOVR	r0x101A,W
     000B 0D03                      1-  663     	BTRSC	STATUS,2
     000C 3rrr                      1-  664     	LGOTO	_00300_DS_
                                    1-  665     	.line	348, "main.c"; 	lvdFlag = 0;
     000D 02rr                      1-  666     	CLRR	_lvdFlag
     000E 3rrr                      1-  667     	LGOTO	_00301_DS_
     000F                           1-  668     _00300_DS_:
                                    1-  669     	.line	352, "main.c"; 	lvdFlag = 1;
     000F 2101                      1-  670     	MOVIA	0x01
     0010 00rr                      1-  671     	MOVAR	_lvdFlag
                                    1-  672     	.line	353, "main.c"; 	workStep = 0;
     0011 02rr                      1-  673     	CLRR	_workStep
                                    1-  674     	.line	354, "main.c"; 	if(++sleepDelay == 200)
     0012 05rr                      1-  675     	INCR	_sleepDelay,F
     0013 01rr                      1-  676     	MOVR	_sleepDelay,W
     0014 24C8                      1-  677     	XORIA	0xc8
     0015 0D03                      1-  678     	BTRSC	STATUS,2
                                    1-  679     	.line	355, "main.c"; 	gotoSleep();
     0016 2rrr                      1-  680     	LCALL	_gotoSleep
     0017                           1-  681     _00301_DS_:
                                    1-  682     	.line	357, "main.c"; 	return lvdFlag;
     0017 01rr                      1-  683     	MOVR	_lvdFlag,W
                                    1-  684     	.line	358, "main.c"; 	}
                                    1-  685     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  686     ; exit point of _checkLVD
                                    1-  688     ;***
                                    1-  689     ;  pBlock Stats: dbName = C
                                    1-  690     ;***
                                    1-  691     ;has an exit
                                    1-  692     ;; Starting pCode block
                                    1-  693     .segment "code"; module=main, function=_initSys
     0000                           1-  695     _initSys:
                                    1-  696     ; 2 exit points
                                    1-  697     	.line	315, "main.c"; 	IOSTB = C_PB0_Input | C_PB2_Input | C_PB3_Input;		//PB输出模式
     0000 210D                      1-  698     	MOVIA	0x0d
     0001 000r                      1-  699     	IOST	_IOSTB
                                    1-  700     	.line	316, "main.c"; 	PORTB = 0x02;
     0002 2102                      1-  701     	MOVIA	0x02
     0003 00rr                      1-  702     	MOVAR	_PORTB
                                    1-  703     	.line	317, "main.c"; 	BPHCON  = 0xFE;
     0004 21FE                      1-  704     	MOVIA	0xfe
     0005 00rr                      1-  705     	MOVAR	_BPHCON
                                    1-  706     	.line	318, "main.c"; 	DISI();
     0006 0013                      1-  707     	DISI
                                    1-  708     	.line	320, "main.c"; 	PCON1 = C_TMR0_Dis;						// Disable Timer0
     0007 0200                      1-  709     	CLRA	
     0008 000r                      1-  710     	IOST	_PCON1
                                    1-  711     	.line	325, "main.c"; 	TMR1 = 0x17;							// Load 0xFF to TMR1 (Initial Timer1 register)
     0009 2117                      1-  712     	MOVIA	0x17
     000A 002r                      1-  713     	SFUN	_TMR1
                                    1-  714     	.line	326, "main.c"; 	T1CR1 = C_TMR1_Reload | C_TMR1_En;      // Enable Timer1, Initial value reloaded from TMR1, Non-stop mode 
     000B 2103                      1-  715     	MOVIA	0x03
     000C 002r                      1-  716     	SFUN	_T1CR1
                                    1-  717     	.line	327, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div16;	// Enable Prescaler1, Prescaler1 dividing rate = 1:4, Timer1 clock source is instruction clock
     000D 002r                      1-  718     	SFUN	_T1CR2
                                    1-  719     	.line	330, "main.c"; 	INTE = C_INT_WDT | C_INT_TMR1;	// Enable Timer0、Timer1、WDT overflow interrupt
     000E 2148                      1-  720     	MOVIA	0x48
     000F 00rr                      1-  721     	MOVAR	_INTE
                                    1-  722     	.line	331, "main.c"; 	INTF = 0;
     0010 02rr                      1-  723     	CLRR	_INTF
                                    1-  724     	.line	333, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0011 21A8                      1-  725     	MOVIA	0xa8
     0012 00rr                      1-  726     	MOVAR	_PCON
                                    1-  727     	.line	335, "main.c"; 	ENI();									// Enable all unmasked interrupts										// Enable all unmasked interrupts	
     0013 0004                      1-  728     	ENI
                                    1-  729     	.line	337, "main.c"; 	}
                                    1-  730     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  731     ; exit point of _initSys
                                    1-  733     ;***
                                    1-  734     ;  pBlock Stats: dbName = C
                                    1-  735     ;***
                                    1-  736     ;has an exit
                                    1-  737     ;functions called:
                                    1-  738     ;   _initSys
                                    1-  739     ;   _initSys
                                    1-  740     ;; Starting pCode block
                                    1-  741     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  743     _gotoSleep:
                                    1-  744     ; 2 exit points
                                    1-  745     	.line	294, "main.c"; 	PORTB = 0x02;
     0000 2102                      1-  746     	MOVIA	0x02
     0001 00rr                      1-  747     	MOVAR	_PORTB
                                    1-  748     	.line	295, "main.c"; 	BWUCON = 0x0D;
     0002 210D                      1-  749     	MOVIA	0x0d
     0003 00rr                      1-  750     	MOVAR	_BWUCON
                                    1-  751     	.line	296, "main.c"; 	INTE =  C_INT_TMR1 | C_INT_PBKey;
     0004 210A                      1-  752     	MOVIA	0x0a
     0005 00rr                      1-  753     	MOVAR	_INTE
                                    1-  754     	.line	297, "main.c"; 	PCON =  C_LVR_En;	
     0006 2108                      1-  755     	MOVIA	0x08
     0007 00rr                      1-  756     	MOVAR	_PCON
                                    1-  757     	.line	298, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0008 02rr                      1-  758     	CLRR	_INTF
                                    1-  759     	.line	299, "main.c"; 	CLRWDT();							// Clear WatchDog
     0009 0002                      1-  760     	clrwdt
                                    1-  761     	.line	301, "main.c"; 	UPDATE_REG(PORTB);					// Read PORTB Data buffer
     000A 01rr                      1-  762     	MOVR	_PORTB,F
                                    1-  763     	.line	303, "main.c"; 	SLEEP();
     000B 0001                      1-  764     	sleep
                                    1-  765     	.line	304, "main.c"; 	initSys();
     000C 2rrr                      1-  766     	LCALL	_initSys
                                    1-  767     	.line	307, "main.c"; 	BWUCON = 0x00;
     000D 02rr                      1-  768     	CLRR	_BWUCON
                                    1-  769     	.line	308, "main.c"; 	INTE =  C_INT_TMR1;
     000E 2108                      1-  770     	MOVIA	0x08
     000F 00rr                      1-  771     	MOVAR	_INTE
                                    1-  772     	.line	309, "main.c"; 	}
                                    1-  773     	RETURN	
     0010 0010                      3-   26 m1      ret
                                    1-  774     ; exit point of _gotoSleep
                                    1-  776     ;***
                                    1-  777     ;  pBlock Stats: dbName = C
                                    1-  778     ;***
                                    1-  779     ;has an exit
                                    1-  780     ;; Starting pCode block
                                    1-  781     .segment "code"; module=main, function=_pwmWork
     0000                           1-  783     _pwmWork:
                                    1-  784     ; 2 exit points
                                    1-  785     	.line	248, "main.c"; 	if(pwm1L)
     0000 01rr                      1-  786     	MOVR	_pwm1L,W
     0001 0D03                      1-  787     	BTRSC	STATUS,2
     0002 3rrr                      1-  788     	LGOTO	_00282_DS_
                                    1-  789     	.line	250, "main.c"; 	pwm1L--;
     0003 06rr                      1-  790     	DECR	_pwm1L,F
                                    1-  791     	.line	251, "main.c"; 	PORTB &= 0xEF;				//PB4 低电平
     0004 1Err                      1-  792     	BCR	_PORTB,4
                                    1-  793     	.line	252, "main.c"; 	PORTB |= 0x20;				//PB5 高电平
     0005 1Arr                      1-  794     	BSR	_PORTB,5
                                    1-  795     	.line	253, "main.c"; 	pwmwait = 0;
     0006 02rr                      1-  796     	CLRR	_pwmwait
                                    1-  797     	.line	254, "main.c"; 	pwm2L = 0;
     0007 02rr                      1-  798     	CLRR	_pwm2L
     0008 3rrr                      1-  799     	LGOTO	_00284_DS_
     0009                           1-  800     _00282_DS_:
                                    1-  801     	.line	256, "main.c"; 	else if(pwm2L)
     0009 01rr                      1-  802     	MOVR	_pwm2L,W
     000A 0D03                      1-  803     	BTRSC	STATUS,2
     000B 3rrr                      1-  804     	LGOTO	_00279_DS_
                                    1-  805     	.line	259, "main.c"; 	pwm2L--;
     000C 06rr                      1-  806     	DECR	_pwm2L,F
                                    1-  807     	.line	260, "main.c"; 	PORTB &= 0xDF;				//PB5 低电平
     000D 1Err                      1-  808     	BCR	_PORTB,5
                                    1-  809     	.line	261, "main.c"; 	PORTB |= 0x10;				//PB4 高电平
     000E 1Arr                      1-  810     	BSR	_PORTB,4
                                    1-  811     	.line	262, "main.c"; 	pwmwait = 0;
     000F 02rr                      1-  812     	CLRR	_pwmwait
                                    1-  813     	.line	263, "main.c"; 	pwm1L = 0;
     0010 02rr                      1-  814     	CLRR	_pwm1L
     0011 3rrr                      1-  815     	LGOTO	_00284_DS_
     0012                           1-  816     _00279_DS_:
                                    1-  817     	.line	267, "main.c"; 	PORTB &= 0xCF;
     0012 21CF                      1-  818     	MOVIA	0xcf
     0013 10rr                      1-  819     	ANDAR	_PORTB,F
                                    1-  820     	.line	268, "main.c"; 	pwmwait++;
     0014 05rr                      1-  821     	INCR	_pwmwait,F
                                    1-  822     	.line	269, "main.c"; 	if(pwmwait >= pwmwaitTime)
     0015 01rr                      1-  823     	MOVR	_pwmwaitTime,W
     0016 04rr                      1-  824     	SUBAR	_pwmwait,W
     0017 0803                      1-  825     	BTRSS	STATUS,0
     0018 3rrr                      1-  826     	LGOTO	_00284_DS_
                                    1-  827     	.line	272, "main.c"; 	if(pwmStep)
     0019 01rr                      1-  828     	MOVR	_pwmStep,W
     001A 0D03                      1-  829     	BTRSC	STATUS,2
     001B 3rrr                      1-  830     	LGOTO	_00274_DS_
                                    1-  831     	.line	274, "main.c"; 	pwm1L = pwmLmax;
     001C 01rr                      1-  832     	MOVR	_pwmLmax,W
     001D 00rr                      1-  833     	MOVAR	_pwm1L
                                    1-  834     	.line	275, "main.c"; 	pwmStep = 0;
     001E 02rr                      1-  835     	CLRR	_pwmStep
     001F 3rrr                      1-  836     	LGOTO	_00284_DS_
     0020                           1-  837     _00274_DS_:
                                    1-  838     	.line	279, "main.c"; 	pwm2L = pwm2Lmax;
     0020 01rr                      1-  839     	MOVR	_pwm2Lmax,W
     0021 00rr                      1-  840     	MOVAR	_pwm2L
                                    1-  841     	.line	280, "main.c"; 	pwmStep = 1;
     0022 2101                      1-  842     	MOVIA	0x01
     0023 00rr                      1-  843     	MOVAR	_pwmStep
     0024                           1-  844     _00284_DS_:
                                    1-  845     	.line	289, "main.c"; 	}
                                    1-  846     	RETURN	
     0024 0010                      3-   26 m1      ret
                                    1-  847     ; exit point of _pwmWork
                                    1-  849     ;***
                                    1-  850     ;  pBlock Stats: dbName = C
                                    1-  851     ;***
                                    1-  852     ;3 compiler assigned registers:
                                    1-  853     ;   r0x101B
                                    1-  854     ;   STK00
                                    1-  855     ;   r0x101C
                                    1-  856     ;; Starting pCode block
                                    1-  857     .segment "code"; module=main, function=_setPWMduty
                                    1-  859     ;local variable name mapping:
     0000                           1-  862     _setPWMduty:
                                    1-  863     ; 0 exit points
                                    1-  864     	.line	235, "main.c"; 	void setPWMduty(char portPin,char duty)
     0000 00rr                      1-  865     	MOVAR	r0x101B
     0001 01rr                      1-  866     	MOVR	STK00,W
     0002 00rr                      1-  867     	MOVAR	r0x101C
                                    1-  868     	.line	237, "main.c"; 	if(ledCount <= duty)
     0003 01rr                      1-  869     	MOVR	_ledCount,W
     0004 04rr                      1-  870     	SUBAR	r0x101C,W
     0005 0803                      1-  871     	BTRSS	STATUS,0
     0006 3rrr                      1-  872     	LGOTO	_00264_DS_
                                    1-  873     	.line	238, "main.c"; 	PORTB |= portPin;	
     0007 01rr                      1-  874     	MOVR	r0x101B,W
     0008 11rr                      1-  875     	IORAR	_PORTB,F
     0009 3rrr                      1-  876     	LGOTO	_00265_DS_
     000A                           1-  877     _00264_DS_:
                                    1-  878     	.line	240, "main.c"; 	PORTB &= (~portPin);
     000A 07rr                      1-  879     	COMR	r0x101B,W
     000B 00rr                      1-  880     	MOVAR	r0x101B
     000C 10rr                      1-  881     	ANDAR	_PORTB,F
     000D                           1-  882     _00265_DS_:
                                    1-  883     	.line	241, "main.c"; 	if(ledCount == 100)
     000D 01rr                      1-  884     	MOVR	_ledCount,W
     000E 2464                      1-  885     	XORIA	0x64
     000F 0D03                      1-  886     	BTRSC	STATUS,2
                                    1-  887     	.line	242, "main.c"; 	ledCount = 0;
     0010 02rr                      1-  888     	CLRR	_ledCount
                                    1-  889     	.line	243, "main.c"; 	}
                                    1-  890     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  892     ;***
                                    1-  893     ;  pBlock Stats: dbName = C
                                    1-  894     ;***
                                    1-  895     ;has an exit
                                    1-  896     ;; Starting pCode block
                                    1-  897     .segment "code"; module=main, function=_ledCon
     0000                           1-  899     _ledCon:
                                    1-  900     ; 2 exit points
                                    1-  901     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  902     ;;unsigned compare: left >= lit (0x5=5), size=1
                                    1-  903     	.line	206, "main.c"; 	switch(workStep)
     0000 2105                      1-  904     	MOVIA	0x05
     0001 04rr                      1-  905     	SUBAR	_workStep,W
     0002 0C03                      1-  906     	BTRSC	STATUS,0
     0003 3rrr                      1-  907     	LGOTO	_00252_DS_
     0004 21rr                      1-  908     	MOVIA	((_00258_DS_ >> 8) & 0xff)
     0005 008A                      1-  909     	MOVAR	PCHBUF
     0006 01rr                      1-  910     	MOVR	_workStep,W
     0007 25rr                      1-  911     	ADDIA	_00258_DS_
     0008 0C03                      1-  912     	BTRSC	STATUS,0
     0009 058A                      1-  913     	INCR	PCHBUF,F
     000A 0082                      1-  914     	MOVAR	PCL
     000B                           1-  915     _00258_DS_:
     000B 3rrr                      1-  916     	LGOTO	_00246_DS_
     000C 3rrr                      1-  917     	LGOTO	_00247_DS_
     000D 3rrr                      1-  918     	LGOTO	_00248_DS_
     000E 3rrr                      1-  919     	LGOTO	_00249_DS_
     000F 3rrr                      1-  920     	LGOTO	_00250_DS_
     0010                           1-  921     _00246_DS_:
                                    1-  922     	.line	209, "main.c"; 	PORTB = 0x02;		//灭灯
     0010 2102                      1-  923     	MOVIA	0x02
     0011 00rr                      1-  924     	MOVAR	_PORTB
                                    1-  925     	.line	210, "main.c"; 	break;
     0012 3rrr                      1-  926     	LGOTO	_00252_DS_
     0013                           1-  927     _00247_DS_:
                                    1-  928     	.line	212, "main.c"; 	PORTB = 0x00;		//亮LED灯
     0013 02rr                      1-  929     	CLRR	_PORTB
                                    1-  930     	.line	213, "main.c"; 	break;
     0014 3rrr                      1-  931     	LGOTO	_00252_DS_
     0015                           1-  932     _00248_DS_:
                                    1-  933     	.line	215, "main.c"; 	pwmLmax = 41;
     0015 2129                      1-  934     	MOVIA	0x29
     0016 00rr                      1-  935     	MOVAR	_pwmLmax
                                    1-  936     	.line	216, "main.c"; 	pwm2Lmax = 41;
     0017 00rr                      1-  937     	MOVAR	_pwm2Lmax
                                    1-  938     	.line	217, "main.c"; 	pwmwaitTime = 13;
     0018 210D                      1-  939     	MOVIA	0x0d
     0019 00rr                      1-  940     	MOVAR	_pwmwaitTime
                                    1-  941     	.line	218, "main.c"; 	break;
     001A 3rrr                      1-  942     	LGOTO	_00252_DS_
     001B                           1-  943     _00249_DS_:
                                    1-  944     	.line	220, "main.c"; 	pwmLmax = 30;
     001B 211E                      1-  945     	MOVIA	0x1e
     001C 00rr                      1-  946     	MOVAR	_pwmLmax
                                    1-  947     	.line	221, "main.c"; 	pwm2Lmax = 31;
     001D 211F                      1-  948     	MOVIA	0x1f
     001E 00rr                      1-  949     	MOVAR	_pwm2Lmax
                                    1-  950     	.line	222, "main.c"; 	pwmwaitTime = 13;
     001F 210D                      1-  951     	MOVIA	0x0d
     0020 00rr                      1-  952     	MOVAR	_pwmwaitTime
                                    1-  953     	.line	223, "main.c"; 	break;
     0021 3rrr                      1-  954     	LGOTO	_00252_DS_
     0022                           1-  955     _00250_DS_:
                                    1-  956     	.line	225, "main.c"; 	pwmLmax = 10;
     0022 210A                      1-  957     	MOVIA	0x0a
     0023 00rr                      1-  958     	MOVAR	_pwmLmax
                                    1-  959     	.line	226, "main.c"; 	pwm2Lmax = 11;
     0024 210B                      1-  960     	MOVIA	0x0b
     0025 00rr                      1-  961     	MOVAR	_pwm2Lmax
                                    1-  962     	.line	227, "main.c"; 	pwmwaitTime = 13;
     0026 210D                      1-  963     	MOVIA	0x0d
     0027 00rr                      1-  964     	MOVAR	_pwmwaitTime
     0028                           1-  965     _00252_DS_:
                                    1-  966     	.line	230, "main.c"; 	}
                                    1-  967     	RETURN	
     0028 0010                      3-   26 m1      ret
                                    1-  968     ; exit point of _ledCon
                                    1-  970     ;***
                                    1-  971     ;  pBlock Stats: dbName = C
                                    1-  972     ;***
                                    1-  973     ;has an exit
                                    1-  974     ;functions called:
                                    1-  975     ;   _keyRead
                                    1-  976     ;   _keyRead
                                    1-  977     ;1 compiler assigned register :
                                    1-  978     ;   r0x101D
                                    1-  979     ;; Starting pCode block
                                    1-  980     .segment "code"; module=main, function=_keyCon
                                    1-  982     ;local variable name mapping:
     0000                           1-  984     _keyCon:
                                    1-  985     ; 2 exit points
                                    1-  986     	.line	183, "main.c"; 	u8t kclick = keyRead(0x01&(~PORTB));
     0000 07rr                      1-  987     	COMR	_PORTB,W
     0001 00rr                      1-  988     	MOVAR	r0x101D
     0002 2101                      1-  989     	MOVIA	0x01
     0003 10rr                      1-  990     	ANDAR	r0x101D,F
     0004 01rr                      1-  991     	MOVR	r0x101D,W
     0005 2rrr                      1-  992     	LCALL	_keyRead
     0006 00rr                      1-  993     	MOVAR	r0x101D
                                    1-  994     ;;unsigned compare: left < lit (0x2=2), size=1
                                    1-  995     	.line	184, "main.c"; 	if(ledStep < 2)
     0007 2102                      1-  996     	MOVIA	0x02
     0008 04rr                      1-  997     	SUBAR	_ledStep,W
     0009 0C03                      1-  998     	BTRSC	STATUS,0
     000A 3rrr                      1-  999     	LGOTO	_00241_DS_
                                    1- 1000     	.line	186, "main.c"; 	if(kclick == 2 && workStep)
     000B 01rr                      1- 1001     	MOVR	r0x101D,W
     000C 2402                      1- 1002     	XORIA	0x02
     000D 0903                      1- 1003     	BTRSS	STATUS,2
     000E 3rrr                      1- 1004     	LGOTO	_00236_DS_
     000F 01rr                      1- 1005     	MOVR	_workStep,W
     0010 0D03                      1- 1006     	BTRSC	STATUS,2
     0011 3rrr                      1- 1007     	LGOTO	_00236_DS_
                                    1- 1008     	.line	188, "main.c"; 	workStep = 0;
     0012 02rr                      1- 1009     	CLRR	_workStep
     0013 3rrr                      1- 1010     	LGOTO	_00241_DS_
     0014                           1- 1011     _00236_DS_:
                                    1- 1012     	.line	190, "main.c"; 	else if(kclick)
     0014 01rr                      1- 1013     	MOVR	r0x101D,W
     0015 0D03                      1- 1014     	BTRSC	STATUS,2
     0016 3rrr                      1- 1015     	LGOTO	_00241_DS_
                                    1- 1016     	.line	192, "main.c"; 	if(++workStep > 4)
     0017 05rr                      1- 1017     	INCR	_workStep,F
                                    1- 1018     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1019     ;;unsigned compare: left >= lit (0x5=5), size=1
     0018 2105                      1- 1020     	MOVIA	0x05
     0019 04rr                      1- 1021     	SUBAR	_workStep,W
     001A 0803                      1- 1022     	BTRSS	STATUS,0
     001B 3rrr                      1- 1023     	LGOTO	_00241_DS_
                                    1- 1024     	.line	194, "main.c"; 	workStep = 1;
     001C 2101                      1- 1025     	MOVIA	0x01
     001D 00rr                      1- 1026     	MOVAR	_workStep
                                    1- 1027     	.line	195, "main.c"; 	workTime = 0;
     001E 02rr                      1- 1028     	CLRR	_workTime
     001F 02rr                      1- 1029     	CLRR	(_workTime + 1)
     0020                           1- 1030     _00241_DS_:
                                    1- 1031     	.line	199, "main.c"; 	}
                                    1- 1032     	RETURN	
     0020 0010                      3-   26 m1      ret
                                    1- 1033     ; exit point of _keyCon
                                    1- 1035     ;***
                                    1- 1036     ;  pBlock Stats: dbName = C
                                    1- 1037     ;***
                                    1- 1038     ;has an exit
                                    1- 1039     ;2 compiler assigned registers:
                                    1- 1040     ;   r0x101E
                                    1- 1041     ;   r0x101F
                                    1- 1042     ;; Starting pCode block
                                    1- 1043     .segment "code"; module=main, function=_chrgCon
     0000                           1- 1045     _chrgCon:
                                    1- 1046     ; 2 exit points
                                    1- 1047     	.line	133, "main.c"; 	if(0x04&~PORTB)
     0000 01rr                      1- 1048     	MOVR	_PORTB,W
     0001 00rr                      1- 1049     	MOVAR	r0x101E
     0002 02rr                      1- 1050     	CLRR	r0x101F
     0003 07rr                      1- 1051     	COMR	r0x101E,W
     0004 00rr                      1- 1052     	MOVAR	r0x101E
     0005 07rr                      1- 1053     	COMR	r0x101F,W
     0006 00rr                      1- 1054     	MOVAR	r0x101F
     0007 09rr                      1- 1055     	BTRSS	r0x101E,2
     0008 3rrr                      1- 1056     	LGOTO	_00194_DS_
                                    1- 1057     	.line	136, "main.c"; 	ledStep = 1;
     0009 2101                      1- 1058     	MOVIA	0x01
     000A 00rr                      1- 1059     	MOVAR	_ledStep
                                    1- 1060     	.line	137, "main.c"; 	if(0x08&PORTB)
     000B 09rr                      1- 1061     	BTRSS	_PORTB,3
     000C 3rrr                      1- 1062     	LGOTO	_00188_DS_
                                    1- 1063     	.line	139, "main.c"; 	ledStep = 2;
     000D 2102                      1- 1064     	MOVIA	0x02
     000E 00rr                      1- 1065     	MOVAR	_ledStep
                                    1- 1066     	.line	140, "main.c"; 	workStep = 0;
     000F 02rr                      1- 1067     	CLRR	_workStep
                                    1- 1068     ;;unsigned compare: left < lit (0x32=50), size=2
                                    1- 1069     	.line	141, "main.c"; 	if(workTime < 50)
     0010 2100                      1- 1070     	MOVIA	0x00
     0011 04rr                      1- 1071     	SUBAR	(_workTime + 1),W
     0012 0903                      1- 1072     	BTRSS	STATUS,2
     0013 3rrr                      1- 1073     	LGOTO	_00222_DS_
     0014 2132                      1- 1074     	MOVIA	0x32
     0015 04rr                      1- 1075     	SUBAR	_workTime,W
     0016                           1- 1076     _00222_DS_:
     0016 0C03                      1- 1077     	BTRSC	STATUS,0
     0017 3rrr                      1- 1078     	LGOTO	_00185_DS_
                                    1- 1079     	.line	142, "main.c"; 	RDUTY = 100;
     0018 2164                      1- 1080     	MOVIA	0x64
     0019 00rr                      1- 1081     	MOVAR	_RDUTY
     001A 3rrr                      1- 1082     	LGOTO	_00196_DS_
                                    1- 1083     ;;unsigned compare: left < lit (0x95=149), size=2
     001B                           1- 1084     _00185_DS_:
                                    1- 1085     	.line	143, "main.c"; 	else if(workTime < 149)
     001B 2100                      1- 1086     	MOVIA	0x00
     001C 04rr                      1- 1087     	SUBAR	(_workTime + 1),W
     001D 0903                      1- 1088     	BTRSS	STATUS,2
     001E 3rrr                      1- 1089     	LGOTO	_00223_DS_
     001F 2195                      1- 1090     	MOVIA	0x95
     0020 04rr                      1- 1091     	SUBAR	_workTime,W
     0021                           1- 1092     _00223_DS_:
     0021 0C03                      1- 1093     	BTRSC	STATUS,0
     0022 3rrr                      1- 1094     	LGOTO	_00182_DS_
                                    1- 1095     	.line	144, "main.c"; 	RDUTY--;
     0023 06rr                      1- 1096     	DECR	_RDUTY,F
     0024 3rrr                      1- 1097     	LGOTO	_00196_DS_
                                    1- 1098     ;;unsigned compare: left < lit (0xC8=200), size=2
     0025                           1- 1099     _00182_DS_:
                                    1- 1100     	.line	145, "main.c"; 	else if(workTime < 200)
     0025 2100                      1- 1101     	MOVIA	0x00
     0026 04rr                      1- 1102     	SUBAR	(_workTime + 1),W
     0027 0903                      1- 1103     	BTRSS	STATUS,2
     0028 3rrr                      1- 1104     	LGOTO	_00224_DS_
     0029 21C8                      1- 1105     	MOVIA	0xc8
     002A 04rr                      1- 1106     	SUBAR	_workTime,W
     002B                           1- 1107     _00224_DS_:
     002B 0C03                      1- 1108     	BTRSC	STATUS,0
     002C 3rrr                      1- 1109     	LGOTO	_00179_DS_
                                    1- 1110     	.line	146, "main.c"; 	RDUTY = 0;
     002D 02rr                      1- 1111     	CLRR	_RDUTY
     002E 3rrr                      1- 1112     	LGOTO	_00196_DS_
                                    1- 1113     ;;unsigned compare: left < lit (0x12B=299), size=2
     002F                           1- 1114     _00179_DS_:
                                    1- 1115     	.line	147, "main.c"; 	else if(workTime < 299)
     002F 2101                      1- 1116     	MOVIA	0x01
     0030 04rr                      1- 1117     	SUBAR	(_workTime + 1),W
     0031 0903                      1- 1118     	BTRSS	STATUS,2
     0032 3rrr                      1- 1119     	LGOTO	_00225_DS_
     0033 212B                      1- 1120     	MOVIA	0x2b
     0034 04rr                      1- 1121     	SUBAR	_workTime,W
     0035                           1- 1122     _00225_DS_:
     0035 0C03                      1- 1123     	BTRSC	STATUS,0
     0036 3rrr                      1- 1124     	LGOTO	_00176_DS_
                                    1- 1125     	.line	148, "main.c"; 	RDUTY++;
     0037 05rr                      1- 1126     	INCR	_RDUTY,F
     0038 3rrr                      1- 1127     	LGOTO	_00196_DS_
                                    1- 1128     ;;unsigned compare: left < lit (0x12C=300), size=2
     0039                           1- 1129     _00176_DS_:
                                    1- 1130     	.line	149, "main.c"; 	else if(workTime < 300)
     0039 2101                      1- 1131     	MOVIA	0x01
     003A 04rr                      1- 1132     	SUBAR	(_workTime + 1),W
     003B 0903                      1- 1133     	BTRSS	STATUS,2
     003C 3rrr                      1- 1134     	LGOTO	_00226_DS_
     003D 212C                      1- 1135     	MOVIA	0x2c
     003E 04rr                      1- 1136     	SUBAR	_workTime,W
     003F                           1- 1137     _00226_DS_:
     003F 0C03                      1- 1138     	BTRSC	STATUS,0
     0040 3rrr                      1- 1139     	LGOTO	_00173_DS_
                                    1- 1140     	.line	150, "main.c"; 	RDUTY = 100;
     0041 2164                      1- 1141     	MOVIA	0x64
     0042 00rr                      1- 1142     	MOVAR	_RDUTY
     0043 3rrr                      1- 1143     	LGOTO	_00196_DS_
     0044                           1- 1144     _00173_DS_:
                                    1- 1145     	.line	152, "main.c"; 	workTime = 0;
     0044 02rr                      1- 1146     	CLRR	_workTime
     0045 02rr                      1- 1147     	CLRR	(_workTime + 1)
     0046 3rrr                      1- 1148     	LGOTO	_00196_DS_
     0047                           1- 1149     _00188_DS_:
                                    1- 1150     	.line	156, "main.c"; 	ledStep = 1;
     0047 2101                      1- 1151     	MOVIA	0x01
     0048 00rr                      1- 1152     	MOVAR	_ledStep
     0049 3rrr                      1- 1153     	LGOTO	_00196_DS_
     004A                           1- 1154     _00194_DS_:
                                    1- 1155     	.line	163, "main.c"; 	if(0x08&PORTB)
     004A 09rr                      1- 1156     	BTRSS	_PORTB,3
     004B 3rrr                      1- 1157     	LGOTO	_00191_DS_
                                    1- 1158     	.line	165, "main.c"; 	ledStep = 3;
     004C 2103                      1- 1159     	MOVIA	0x03
     004D 00rr                      1- 1160     	MOVAR	_ledStep
                                    1- 1161     	.line	166, "main.c"; 	RDUTY = 25;
     004E 2119                      1- 1162     	MOVIA	0x19
     004F 00rr                      1- 1163     	MOVAR	_RDUTY
                                    1- 1164     	.line	167, "main.c"; 	workTime = 0;
     0050 02rr                      1- 1165     	CLRR	_workTime
     0051 02rr                      1- 1166     	CLRR	(_workTime + 1)
                                    1- 1167     	.line	168, "main.c"; 	workStep = 0;
     0052 02rr                      1- 1168     	CLRR	_workStep
     0053 3rrr                      1- 1169     	LGOTO	_00196_DS_
     0054                           1- 1170     _00191_DS_:
                                    1- 1171     	.line	172, "main.c"; 	ledStep = 1;
     0054 2101                      1- 1172     	MOVIA	0x01
     0055 00rr                      1- 1173     	MOVAR	_ledStep
     0056                           1- 1174     _00196_DS_:
                                    1- 1175     	.line	178, "main.c"; 	}
                                    1- 1176     	RETURN	
     0056 0010                      3-   26 m1      ret
                                    1- 1177     ; exit point of _chrgCon
                                    1- 1180     ;	code size estimation:
                                    1- 1181     ;	  421+    0 =   421 instructions (  842 byte)
                                    1- 1183     	end
                                    1- 1183     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00105_DS_              Label    0000001C
_00106_DS_              Label    00000022
_00109_DS_              Label    00000029
_00114_DS_              Label    00000030
_00146_DS_              Label    00000002
_00166_DS_              Label    00000018
_00167_DS_              Label    00000021
_00173_DS_              Label    00000044
_00176_DS_              Label    00000039
_00179_DS_              Label    0000002F
_00182_DS_              Label    00000025
_00185_DS_              Label    0000001B
_00188_DS_              Label    00000047
_00191_DS_              Label    00000054
_00194_DS_              Label    0000004A
_00196_DS_              Label    00000056
_00222_DS_              Label    00000016
_00223_DS_              Label    00000021
_00224_DS_              Label    0000002B
_00225_DS_              Label    00000035
_00226_DS_              Label    0000003F
_00236_DS_              Label    00000014
_00241_DS_              Label    00000020
_00246_DS_              Label    00000010
_00247_DS_              Label    00000013
_00248_DS_              Label    00000015
_00249_DS_              Label    0000001B
_00250_DS_              Label    00000022
_00252_DS_              Label    00000028
_00258_DS_              Label    0000000B
_00264_DS_              Label    0000000A
_00265_DS_              Label    0000000D
_00274_DS_              Label    00000020
_00279_DS_              Label    00000012
_00282_DS_              Label    00000009
_00284_DS_              Label    00000024
_00300_DS_              Label    0000000F
_00301_DS_              Label    00000017
_00308_DS_              Label    00000002
_00310_DS_              Label    00000008
_00322_DS_              Label    0000001A
_00323_DS_              Label    00000021
_00325_DS_              Label    00000012
_00326_DS_              Label    00000022
_00327_DS_              Label    00000023
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_chrgCon                Label    00000000
_delay                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_INTFLAG                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_KeyStatus              Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_ledPWM                 Label    00000000
_ledStep                Label    00000000
_ledWord                Label    00000000
_longPressFlag          Label    00000000
_lvdFlag                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwm1L                  Label    00000000
_pwm2L                  Label    00000000
_pwm2Lmax               Label    00000000
_pwmHmax                Label    00000000
_pwmLmax                Label    00000000
_pwmStep                Label    00000000
_pwmwait                Label    00000000
_pwmwaitTime            Label    00000000
_pwmWork                Label    00000000
_RDUTY                  Label    00000000
_saveWorkStep           Label    00000000
_setPWMduty             Label    00000000
_sleepDelay             Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workStep               Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000003E
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1016                 Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x101F                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
