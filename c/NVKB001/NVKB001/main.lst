
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_delay
                                    1-   57     	extern	_keyRead
                                    1-   58     	extern	_KeyScan
                                    1-   59     	extern	_pwmStop
                                    1-   60     	extern	_pwmStart
                                    1-   61     	extern	_checkLVD
                                    1-   62     	extern	_ledCon
                                    1-   63     	extern	_gotoSleep
                                    1-   64     	extern	_isr
                                    1-   65     	extern	_main
                                    1-   66     	extern	_KeyStatus
                                    1-   67     	extern	_keyCount
                                    1-   68     	extern	_count500ms
                                    1-   69     	extern	_count20Min
                                    1-   70     	extern	_count5Min
                                    1-   71     	extern	_intCount
                                    1-   72     	extern	_IntFlag
                                    1-   73     	extern	_lvdFlag
                                    1-   74     	extern	_workStep
                                    1-   75     	extern	_powerFlag
                                    1-   76     	extern	_LvdStep
                                    1-   77     	extern	_ledCount
                                    1-   78     	extern	_ledYellowFlag
                                    1-   79     	extern	_sleepFlag
                                    1-   80     	extern	_sleepDelay
                                    1-   81     	extern	_step2Count
                                    1-   83     	extern PSAVE
                                    1-   84     	extern SSAVE
                                    1-   85     	extern WSAVE
                                    1-   86     	extern STK12
                                    1-   87     	extern STK11
                                    1-   88     	extern STK10
                                    1-   89     	extern STK09
                                    1-   90     	extern STK08
                                    1-   91     	extern STK07
                                    1-   92     	extern STK06
                                    1-   93     	extern STK05
                                    1-   94     	extern STK04
                                    1-   95     	extern STK03
                                    1-   96     	extern STK02
                                    1-   97     	extern STK01
                                    1-   98     	extern STK00
                                    1-  100     .segment "uninit", 0x20000010
 20000010                           1-  101     PSAVE:
                                    1-  102     	.res 1
 20000011                           1-  103     SSAVE:
                                    1-  104     	.res 1
 20000012                           1-  105     WSAVE:
                                    1-  106     	.res 1
 20000013                           1-  107     STK12:
                                    1-  108     	.res 1
 20000014                           1-  109     STK11:
                                    1-  110     	.res 1
 20000015                           1-  111     STK10:
                                    1-  112     	.res 1
 20000016                           1-  113     STK09:
                                    1-  114     	.res 1
 20000017                           1-  115     STK08:
                                    1-  116     	.res 1
 20000018                           1-  117     STK07:
                                    1-  118     	.res 1
 20000019                           1-  119     STK06:
                                    1-  120     	.res 1
 2000001A                           1-  121     STK05:
                                    1-  122     	.res 1
 2000001B                           1-  123     STK04:
                                    1-  124     	.res 1
 2000001C                           1-  125     STK03:
                                    1-  126     	.res 1
 2000001D                           1-  127     STK02:
                                    1-  128     	.res 1
 2000001E                           1-  129     STK01:
                                    1-  130     	.res 1
 2000001F                           1-  131     STK00:
                                    1-  132     	.res 1
                                    1-  134     ;--------------------------------------------------------
                                    1-  135     ; global definitions
                                    1-  136     ;--------------------------------------------------------
                                    1-  137     .segment "uninit"
     0000                           1-  138     _KeyStatus:
                                    1-  139     	.res	1
                                    1-  142     ;--------------------------------------------------------
                                    1-  143     ; absolute symbol definitions
                                    1-  144     ;--------------------------------------------------------
                                    1-  145     ;--------------------------------------------------------
                                    1-  146     ; compiler-defined variables
                                    1-  147     ;--------------------------------------------------------
                                    1-  148     .segment "uninit"
     0000                           1-  149     r0x101E:
                                    1-  150     	.res	1
                                    1-  151     .segment "uninit"
     0000                           1-  152     r0x101C:
                                    1-  153     	.res	1
                                    1-  154     .segment "uninit"
     0000                           1-  155     r0x101D:
                                    1-  156     	.res	1
                                    1-  157     .segment "uninit"
     0000                           1-  158     r0x1018:
                                    1-  159     	.res	1
                                    1-  160     .segment "uninit"
     0000                           1-  161     r0x1017:
                                    1-  162     	.res	1
                                    1-  163     .segment "uninit"
     0000                           1-  164     r0x1019:
                                    1-  165     	.res	1
                                    1-  166     .segment "uninit"
     0000                           1-  167     r0x101A:
                                    1-  168     	.res	1
                                    1-  169     ;--------------------------------------------------------
                                    1-  170     ; initialized data
                                    1-  171     ;--------------------------------------------------------
                                    1-  173     .segment "idata"
     0000                           1-  174     _keyCount:
     0000 0000 0000                 1-  175     	dw	0x00, 0x00
                                    1-  179     .segment "idata"
     0000                           1-  180     _count500ms:
     0000 0000 0000                 1-  181     	dw	0x00, 0x00
                                    1-  185     .segment "idata"
     0000                           1-  186     _count20Min:
     0000 0000 0000                 1-  187     	dw	0x00, 0x00
                                    1-  191     .segment "idata"
     0000                           1-  192     _count5Min:
     0000 0000 0000                 1-  193     	dw	0x00, 0x00
                                    1-  197     .segment "idata"
     0000                           1-  198     _intCount:
     0000 0000                      1-  199     	dw	0x00
                                    1-  203     .segment "idata"
     0000                           1-  204     _IntFlag:
     0000 0000                      1-  205     	dw	0x00
                                    1-  209     .segment "idata"
     0000                           1-  210     _lvdFlag:
     0000 0000                      1-  211     	dw	0x00
                                    1-  215     .segment "idata"
     0000                           1-  216     _workStep:
     0000 0000                      1-  217     	dw	0x00
                                    1-  221     .segment "idata"
     0000                           1-  222     _powerFlag:
     0000 0000                      1-  223     	dw	0x00
                                    1-  227     .segment "idata"
     0000                           1-  228     _LvdStep:
     0000 0000                      1-  229     	dw	0x00
                                    1-  233     .segment "idata"
     0000                           1-  234     _ledCount:
     0000 0000                      1-  235     	dw	0x00
                                    1-  239     .segment "idata"
     0000                           1-  240     _ledYellowFlag:
     0000 0000                      1-  241     	dw	0x00
                                    1-  245     .segment "idata"
     0000                           1-  246     _sleepFlag:
     0000 0000                      1-  247     	dw	0x00
                                    1-  251     .segment "idata"
     0000                           1-  252     _sleepDelay:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _step2Count:
     0000 0000                      1-  259     	dw	0x00
                                    1-  262     ;--------------------------------------------------------
                                    1-  263     ; overlayable items in internal ram 
                                    1-  264     ;--------------------------------------------------------
                                    1-  265     ;	udata_ovr
                                    1-  266     ;--------------------------------------------------------
                                    1-  267     ; reset vector 
                                    1-  268     ;--------------------------------------------------------
                                    1-  269     ORG	0x0000
     0000 3rrr                      1-  270     	LGOTO	__nyc_ny8_startup
                                    1-  271     ;--------------------------------------------------------
                                    1-  272     ; interrupt and initialization code
                                    1-  273     ;--------------------------------------------------------
                                    1-  274     ORG 0x0008
     0008 3rrr                      1-  275     	lgoto	__sdcc_interrupt
                                    1-  277     .segment "code"
     0000                           1-  278     __sdcc_interrupt:
                                    1-  279     ;***
                                    1-  280     ;  pBlock Stats: dbName = I
                                    1-  281     ;***
                                    1-  282     ;2 compiler assigned registers:
                                    1-  283     ;   STK00
                                    1-  284     ;   STK01
                                    1-  285     ;; Starting pCode block
     0000                           1-  286     _isr:
                                    1-  287     ; 0 exit points
                                    1-  288     	.line	59, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  289     	MOVAR	WSAVE
     0001 1503                      1-  290     	SWAPR	STATUS,W
     0002 0283                      1-  291     	CLRR	STATUS
     0003 00rr                      1-  292     	MOVAR	SSAVE
     0004 010A                      1-  293     	MOVR	PCHBUF,W
     0005 028A                      1-  294     	CLRR	PCHBUF
     0006 00rr                      1-  295     	MOVAR	PSAVE
     0007 0104                      1-  296     	MOVR	FSR,W
     0008 00rr                      1-  297     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  298     	MOVR	STK00,W
     000A 00rr                      1-  299     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  300     	MOVR	STK01,W
     000C 00rr                      1-  301     	MOVAR	___sdcc_saved_stk01
                                    1-  302     	.line	61, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  303     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  304     	LGOTO	_00108_DS_
                                    1-  305     	.line	63, "main.c"; 	TMR0 = 55;
     000F 2137                      1-  306     	MOVIA	0x37
     0010 00rr                      1-  307     	MOVAR	_TMR0
                                    1-  308     	.line	64, "main.c"; 	intCount++;
     0011 05rr                      1-  309     	INCR	_intCount,F
                                    1-  310     	.line	65, "main.c"; 	if(intCount == 100)
     0012 01rr                      1-  311     	MOVR	_intCount,W
     0013 2464                      1-  312     	XORIA	0x64
     0014 0903                      1-  313     	BTRSS	STATUS,2
     0015 3rrr                      1-  314     	LGOTO	_00108_DS_
                                    1-  315     	.line	67, "main.c"; 	intCount = 0;
     0016 02rr                      1-  316     	CLRR	_intCount
                                    1-  317     	.line	68, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  318     	MOVIA	0x01
     0018 00rr                      1-  319     	MOVAR	_IntFlag
     0019                           1-  320     _00108_DS_:
                                    1-  321     	.line	71, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  322     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  323     	LGOTO	_00110_DS_
                                    1-  324     	.line	73, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  325     	MOVIA	0xfd
     001C 00rr                      1-  326     	MOVAR	_INTF
     001D                           1-  327     _00110_DS_:
                                    1-  328     	.line	76, "main.c"; 	if(INTFbits.WDTIF)
     001D 0Brr                      1-  329     	BTRSS	_INTFbits,6
     001E 3rrr                      1-  330     	LGOTO	_00112_DS_
                                    1-  331     	.line	78, "main.c"; 	INTF= (unsigned char)~(C_INT_WDT);	// Clear WDTIF flag bit		
     001F 21BF                      1-  332     	MOVIA	0xbf
     0020 00rr                      1-  333     	MOVAR	_INTF
     0021                           1-  334     _00112_DS_:
                                    1-  335     	.line	81, "main.c"; 	if(INTFbits.LVDIF)
     0021 0Arr                      1-  336     	BTRSS	_INTFbits,4
     0022 3rrr                      1-  337     	LGOTO	_00114_DS_
                                    1-  338     	.line	83, "main.c"; 	INTF= (unsigned char)~(C_INT_LVD);	//低电压中断
     0023 21EF                      1-  339     	MOVIA	0xef
     0024 00rr                      1-  340     	MOVAR	_INTF
                                    1-  341     	.line	84, "main.c"; 	lvdFlag = 1;	//低电压
     0025 2101                      1-  342     	MOVIA	0x01
     0026 00rr                      1-  343     	MOVAR	_lvdFlag
     0027                           1-  344     _00114_DS_:
                                    1-  345     	.line	86, "main.c"; 	INTF = 0;
     0027 02rr                      1-  346     	CLRR	_INTF
                                    1-  347     	.line	88, "main.c"; 	}
     0028 01rr                      1-  348     	MOVR	___sdcc_saved_stk01,W
     0029 00rr                      1-  349     	MOVAR	STK01
     002A 01rr                      1-  350     	MOVR	___sdcc_saved_stk00,W
     002B 00rr                      1-  351     	MOVAR	STK00
     002C 01rr                      1-  352     	MOVR	___sdcc_saved_fsr,W
     002D 0084                      1-  353     	MOVAR	FSR
     002E 01rr                      1-  354     	MOVR	PSAVE,W
     002F 008A                      1-  355     	MOVAR	PCHBUF
     0030 0283                      1-  356     	CLRR	STATUS
     0031 15rr                      1-  357     	SWAPR	SSAVE,W
     0032 0083                      1-  358     	MOVAR	STATUS
     0033 15rr                      1-  359     	SWAPR	WSAVE,F
     0034 15rr                      1-  360     	SWAPR	WSAVE,W
     0035                           1-  361     END_OF_INTERRUPT:
     0035 0011                      1-  362     	RETIE	
                                    1-  364     ;--------------------------------------------------------
                                    1-  365     ; code
                                    1-  366     ;--------------------------------------------------------
                                    1-  367     ;***
                                    1-  368     ;  pBlock Stats: dbName = M
                                    1-  369     ;***
                                    1-  370     ;has an exit
                                    1-  371     ;functions called:
                                    1-  372     ;   _gotoSleep
                                    1-  373     ;   _checkLVD
                                    1-  374     ;   _ledCon
                                    1-  375     ;   _KeyScan
                                    1-  376     ;   _keyRead
                                    1-  377     ;   _pwmStart
                                    1-  378     ;   _gotoSleep
                                    1-  379     ;   _checkLVD
                                    1-  380     ;   _ledCon
                                    1-  381     ;   _KeyScan
                                    1-  382     ;   _keyRead
                                    1-  383     ;   _pwmStart
                                    1-  384     ;1 compiler assigned register :
                                    1-  385     ;   r0x101E
                                    1-  386     ;; Starting pCode block
                                    1-  387     .segment "code"; module=main, function=_main
                                    1-  389     ;local variable name mapping:
     0000                           1-  391     _main:
                                    1-  392     ; 2 exit points
                                    1-  393     	.line	94, "main.c"; 	PORTB = 0xFB;
     0000 21FB                      1-  394     	MOVIA	0xfb
     0001 00rr                      1-  395     	MOVAR	_PORTB
                                    1-  396     	.line	95, "main.c"; 	BPHCON = 0xF6;
     0002 21F6                      1-  397     	MOVIA	0xf6
     0003 00rr                      1-  398     	MOVAR	_BPHCON
                                    1-  399     	.line	97, "main.c"; 	IOSTB =  C_PB3_Input ;	
     0004 2108                      1-  400     	MOVIA	0x08
     0005 000r                      1-  401     	IOST	_IOSTB
                                    1-  402     	.line	98, "main.c"; 	PORTB = 0xFB;                        	// PortB Data Register = 0x00
     0006 21FB                      1-  403     	MOVIA	0xfb
     0007 00rr                      1-  404     	MOVAR	_PORTB
                                    1-  405     	.line	99, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     0008 21A8                      1-  406     	MOVIA	0xa8
     0009 00rr                      1-  407     	MOVAR	_PCON
                                    1-  408     	.line	101, "main.c"; 	PCON1 = C_TMR0_Dis;
     000A 0200                      1-  409     	CLRA	
     000B 000r                      1-  410     	IOST	_PCON1
                                    1-  411     	.line	103, "main.c"; 	TMR0 = 55;
     000C 2137                      1-  412     	MOVIA	0x37
     000D 00rr                      1-  413     	MOVAR	_TMR0
                                    1-  414     	.line	104, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000E 0200                      1-  415     	CLRA	
     000F 0003                      1-  416     	T0MD	
                                    1-  417     	.line	106, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0010 2115                      1-  418     	MOVIA	0x15
     0011 000r                      1-  419     	IOST	_PCON1
                                    1-  420     	.line	108, "main.c"; 	ENI();	
     0012 0004                      1-  421     	ENI
                                    1-  422     	.line	109, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  423     	LCALL	_gotoSleep
     0014                           1-  424     _00143_DS_:
                                    1-  425     	.line	112, "main.c"; 	CLRWDT();  
     0014 0002                      1-  426     	clrwdt
                                    1-  427     	.line	113, "main.c"; 	if(!IntFlag)
     0015 01rr                      1-  428     	MOVR	_IntFlag,W
     0016 0D03                      1-  429     	BTRSC	STATUS,2
     0017 3rrr                      1-  430     	LGOTO	_00143_DS_
                                    1-  431     	.line	116, "main.c"; 	IntFlag = 0;
     0018 02rr                      1-  432     	CLRR	_IntFlag
                                    1-  433     	.line	118, "main.c"; 	checkLVD();
     0019 2rrr                      1-  434     	LCALL	_checkLVD
                                    1-  435     	.line	119, "main.c"; 	ledCon();
     001A 2rrr                      1-  436     	LCALL	_ledCon
                                    1-  437     	.line	120, "main.c"; 	KeyStatus = KeyScan() & 0x1F;	//
     001B 2rrr                      1-  438     	LCALL	_KeyScan
     001C 00rr                      1-  439     	MOVAR	r0x101E
     001D 211F                      1-  440     	MOVIA	0x1f
     001E 10rr                      1-  441     	ANDAR	r0x101E,W
     001F 00rr                      1-  442     	MOVAR	_KeyStatus
                                    1-  443     	.line	121, "main.c"; 	keyClick = keyRead();
     0020 2rrr                      1-  444     	LCALL	_keyRead
     0021 00rr                      1-  445     	MOVAR	r0x101E
                                    1-  446     	.line	123, "main.c"; 	if(keyClick == 1)
     0022 2401                      1-  447     	XORIA	0x01
     0023 0903                      1-  448     	BTRSS	STATUS,2
     0024 3rrr                      1-  449     	LGOTO	_00132_DS_
                                    1-  450     	.line	125, "main.c"; 	count5Min = 0;
     0025 02rr                      1-  451     	CLRR	_count5Min
     0026 02rr                      1-  452     	CLRR	(_count5Min + 1)
                                    1-  453     	.line	126, "main.c"; 	if(workStep == 0)
     0027 01rr                      1-  454     	MOVR	_workStep,W
     0028 0903                      1-  455     	BTRSS	STATUS,2
     0029 3rrr                      1-  456     	LGOTO	_00122_DS_
                                    1-  457     	.line	127, "main.c"; 	workStep = 1;
     002A 2101                      1-  458     	MOVIA	0x01
     002B 00rr                      1-  459     	MOVAR	_workStep
     002C 3rrr                      1-  460     	LGOTO	_00133_DS_
     002D                           1-  461     _00122_DS_:
                                    1-  462     	.line	129, "main.c"; 	workStep = 0;
     002D 02rr                      1-  463     	CLRR	_workStep
     002E 3rrr                      1-  464     	LGOTO	_00133_DS_
     002F                           1-  465     _00132_DS_:
                                    1-  466     	.line	131, "main.c"; 	else if(keyClick == 2)
     002F 01rr                      1-  467     	MOVR	r0x101E,W
     0030 2402                      1-  468     	XORIA	0x02
     0031 0903                      1-  469     	BTRSS	STATUS,2
     0032 3rrr                      1-  470     	LGOTO	_00133_DS_
                                    1-  471     	.line	133, "main.c"; 	count20Min = 0;
     0033 02rr                      1-  472     	CLRR	_count20Min
     0034 02rr                      1-  473     	CLRR	(_count20Min + 1)
                                    1-  474     	.line	134, "main.c"; 	if(lvdFlag)
     0035 01rr                      1-  475     	MOVR	_lvdFlag,W
     0036 0D03                      1-  476     	BTRSC	STATUS,2
     0037 3rrr                      1-  477     	LGOTO	_00125_DS_
                                    1-  478     	.line	135, "main.c"; 	ledYellowFlag = 1;	
     0038 2101                      1-  479     	MOVIA	0x01
     0039 00rr                      1-  480     	MOVAR	_ledYellowFlag
     003A                           1-  481     _00125_DS_:
                                    1-  482     	.line	136, "main.c"; 	if(workStep == 2)
     003A 01rr                      1-  483     	MOVR	_workStep,W
     003B 2402                      1-  484     	XORIA	0x02
     003C 0903                      1-  485     	BTRSS	STATUS,2
     003D 3rrr                      1-  486     	LGOTO	_00127_DS_
                                    1-  487     	.line	137, "main.c"; 	workStep = 0;
     003E 02rr                      1-  488     	CLRR	_workStep
     003F 3rrr                      1-  489     	LGOTO	_00133_DS_
     0040                           1-  490     _00127_DS_:
                                    1-  491     	.line	139, "main.c"; 	workStep = 2;
     0040 2102                      1-  492     	MOVIA	0x02
     0041 00rr                      1-  493     	MOVAR	_workStep
     0042                           1-  494     _00133_DS_:
                                    1-  495     	.line	147, "main.c"; 	if(lvdFlag)
     0042 01rr                      1-  496     	MOVR	_lvdFlag,W
     0043 0D03                      1-  497     	BTRSC	STATUS,2
     0044 3rrr                      1-  498     	LGOTO	_00140_DS_
                                    1-  499     	.line	149, "main.c"; 	if(keyClick)
     0045 01rr                      1-  500     	MOVR	r0x101E,W
     0046 0D03                      1-  501     	BTRSC	STATUS,2
     0047 3rrr                      1-  502     	LGOTO	_00143_DS_
                                    1-  503     	.line	151, "main.c"; 	ledYellowFlag = 1;
     0048 2101                      1-  504     	MOVIA	0x01
     0049 00rr                      1-  505     	MOVAR	_ledYellowFlag
     004A 3rrr                      1-  506     	LGOTO	_00143_DS_
     004B                           1-  507     _00140_DS_:
                                    1-  508     	.line	157, "main.c"; 	if(keyClick && workStep)
     004B 01rr                      1-  509     	MOVR	r0x101E,W
     004C 0D03                      1-  510     	BTRSC	STATUS,2
     004D 3rrr                      1-  511     	LGOTO	_00143_DS_
     004E 01rr                      1-  512     	MOVR	_workStep,W
     004F 0D03                      1-  513     	BTRSC	STATUS,2
     0050 3rrr                      1-  514     	LGOTO	_00143_DS_
                                    1-  515     	.line	159, "main.c"; 	pwmStart();
     0051 2rrr                      1-  516     	LCALL	_pwmStart
     0052 3rrr                      1-  517     	LGOTO	_00143_DS_
                                    1-  518     	.line	163, "main.c"; 	}
                                    1-  519     	RETURN	
     0053 0010                      3-   26 m1      ret
                                    1-  520     ; exit point of _main
                                    1-  522     ;***
                                    1-  523     ;  pBlock Stats: dbName = C
                                    1-  524     ;***
                                    1-  525     ;has an exit
                                    1-  526     ;5 compiler assigned registers:
                                    1-  527     ;   r0x1017
                                    1-  528     ;   STK00
                                    1-  529     ;   r0x1018
                                    1-  530     ;   r0x1019
                                    1-  531     ;   r0x101A
                                    1-  532     ;; Starting pCode block
                                    1-  533     .segment "code"; module=main, function=_delay
                                    1-  535     ;local variable name mapping:
     0000                           1-  540     _delay:
                                    1-  541     ; 2 exit points
                                    1-  542     	.line	375, "main.c"; 	void delay(u16t time)
     0000 00rr                      1-  543     	MOVAR	r0x1017
     0001 01rr                      1-  544     	MOVR	STK00,W
     0002 00rr                      1-  545     	MOVAR	r0x1018
                                    1-  546     	.line	377, "main.c"; 	for(u16t i=0;i<time;i++);
     0003 02rr                      1-  547     	CLRR	r0x1019
     0004 02rr                      1-  548     	CLRR	r0x101A
     0005                           1-  549     _00319_DS_:
     0005 01rr                      1-  550     	MOVR	r0x1017,W
     0006 04rr                      1-  551     	SUBAR	r0x101A,W
     0007 0903                      1-  552     	BTRSS	STATUS,2
     0008 3rrr                      1-  553     	LGOTO	_00330_DS_
     0009 01rr                      1-  554     	MOVR	r0x1018,W
     000A 04rr                      1-  555     	SUBAR	r0x1019,W
     000B                           1-  556     _00330_DS_:
     000B 0C03                      1-  557     	BTRSC	STATUS,0
     000C 3rrr                      1-  558     	LGOTO	_00321_DS_
     000D 05rr                      1-  559     	INCR	r0x1019,F
     000E 0D03                      1-  560     	BTRSC	STATUS,2
     000F 05rr                      1-  561     	INCR	r0x101A,F
     0010 3rrr                      1-  562     	LGOTO	_00319_DS_
     0011                           1-  563     _00321_DS_:
                                    1-  564     	.line	378, "main.c"; 	}
                                    1-  565     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  566     ; exit point of _delay
                                    1-  568     ;***
                                    1-  569     ;  pBlock Stats: dbName = C
                                    1-  570     ;***
                                    1-  571     ;has an exit
                                    1-  572     ;; Starting pCode block
                                    1-  573     .segment "code"; module=main, function=_keyRead
     0000                           1-  575     _keyRead:
                                    1-  576     ; 2 exit points
                                    1-  577     	.line	352, "main.c"; 	if (KeyStatus & 0x08)
     0000 09rr                      1-  578     	BTRSS	_KeyStatus,3
     0001 3rrr                      1-  579     	LGOTO	_00294_DS_
                                    1-  580     	.line	354, "main.c"; 	keyCount++;
     0002 05rr                      1-  581     	INCR	_keyCount,F
     0003 0D03                      1-  582     	BTRSC	STATUS,2
     0004 05rr                      1-  583     	INCR	(_keyCount + 1),F
                                    1-  584     ;;unsigned compare: left < lit (0x1F4=500), size=2
                                    1-  585     	.line	355, "main.c"; 	if(keyCount >= 500)
     0005 2101                      1-  586     	MOVIA	0x01
     0006 04rr                      1-  587     	SUBAR	(_keyCount + 1),W
     0007 0903                      1-  588     	BTRSS	STATUS,2
     0008 3rrr                      1-  589     	LGOTO	_00310_DS_
     0009 21F4                      1-  590     	MOVIA	0xf4
     000A 04rr                      1-  591     	SUBAR	_keyCount,W
     000B                           1-  592     _00310_DS_:
     000B 0803                      1-  593     	BTRSS	STATUS,0
     000C 3rrr                      1-  594     	LGOTO	_00295_DS_
                                    1-  595     	.line	356, "main.c"; 	keyCount = 500;
     000D 21F4                      1-  596     	MOVIA	0xf4
     000E 00rr                      1-  597     	MOVAR	_keyCount
     000F 2101                      1-  598     	MOVIA	0x01
     0010 00rr                      1-  599     	MOVAR	(_keyCount + 1)
     0011 3rrr                      1-  600     	LGOTO	_00295_DS_
                                    1-  601     ;;unsigned compare: left < lit (0x1F4=500), size=2
     0012                           1-  602     _00294_DS_:
                                    1-  603     	.line	360, "main.c"; 	if(keyCount >= 500)
     0012 2101                      1-  604     	MOVIA	0x01
     0013 04rr                      1-  605     	SUBAR	(_keyCount + 1),W
     0014 0903                      1-  606     	BTRSS	STATUS,2
     0015 3rrr                      1-  607     	LGOTO	_00311_DS_
     0016 21F4                      1-  608     	MOVIA	0xf4
     0017 04rr                      1-  609     	SUBAR	_keyCount,W
     0018                           1-  610     _00311_DS_:
     0018 0803                      1-  611     	BTRSS	STATUS,0
     0019 3rrr                      1-  612     	LGOTO	_00291_DS_
                                    1-  613     	.line	362, "main.c"; 	keyCount = 0;
     001A 02rr                      1-  614     	CLRR	_keyCount
     001B 02rr                      1-  615     	CLRR	(_keyCount + 1)
                                    1-  616     	.line	363, "main.c"; 	return	2;
     001C 2102                      1-  617     	MOVIA	0x02
     001D 3rrr                      1-  618     	LGOTO	_00296_DS_
                                    1-  619     ;;unsigned compare: left < lit (0xA=10), size=2
     001E                           1-  620     _00291_DS_:
                                    1-  621     	.line	365, "main.c"; 	else if(keyCount >= 10)
     001E 2100                      1-  622     	MOVIA	0x00
     001F 04rr                      1-  623     	SUBAR	(_keyCount + 1),W
     0020 0903                      1-  624     	BTRSS	STATUS,2
     0021 3rrr                      1-  625     	LGOTO	_00312_DS_
     0022 210A                      1-  626     	MOVIA	0x0a
     0023 04rr                      1-  627     	SUBAR	_keyCount,W
     0024                           1-  628     _00312_DS_:
     0024 0803                      1-  629     	BTRSS	STATUS,0
     0025 3rrr                      1-  630     	LGOTO	_00295_DS_
                                    1-  631     	.line	367, "main.c"; 	keyCount = 0;
     0026 02rr                      1-  632     	CLRR	_keyCount
     0027 02rr                      1-  633     	CLRR	(_keyCount + 1)
                                    1-  634     	.line	368, "main.c"; 	return	1;
     0028 2101                      1-  635     	MOVIA	0x01
     0029 3rrr                      1-  636     	LGOTO	_00296_DS_
     002A                           1-  637     _00295_DS_:
                                    1-  638     	.line	372, "main.c"; 	return 0;
     002A 2100                      1-  639     	MOVIA	0x00
     002B                           1-  640     _00296_DS_:
                                    1-  641     	.line	373, "main.c"; 	}
                                    1-  642     	RETURN	
     002B 0010                      3-   26 m1      ret
                                    1-  643     ; exit point of _keyRead
                                    1-  645     ;***
                                    1-  646     ;  pBlock Stats: dbName = C
                                    1-  647     ;***
                                    1-  648     ;has an exit
                                    1-  649     ;1 compiler assigned register :
                                    1-  650     ;   r0x101B
                                    1-  651     ;; Starting pCode block
                                    1-  652     .segment "code"; module=main, function=_KeyScan
                                    1-  654     ;local variable name mapping:
     0000                           1-  656     _KeyScan:
                                    1-  657     ; 2 exit points
                                    1-  658     	.line	343, "main.c"; 	KeyStatus = ~PORTB;
     0000 07rr                      1-  659     	COMR	_PORTB,W
                                    1-  660     ;;1	MOVAR	r0x101B
                                    1-  661     	.line	346, "main.c"; 	}
                                    1-  662     	RETURN	
     0001 0010                      3-   26 m1      ret
                                    1-  663     ; exit point of _KeyScan
                                    1-  665     ;***
                                    1-  666     ;  pBlock Stats: dbName = C
                                    1-  667     ;***
                                    1-  668     ;has an exit
                                    1-  669     ;; Starting pCode block
                                    1-  670     .segment "code"; module=main, function=_pwmStop
     0000                           1-  672     _pwmStop:
                                    1-  673     ; 2 exit points
                                    1-  674     	.line	331, "main.c"; 	PORTB |= 0x21;	//关闭
     0000 2121                      1-  675     	MOVIA	0x21
     0001 11rr                      1-  676     	IORAR	_PORTB,F
                                    1-  677     	.line	332, "main.c"; 	PWM1DUTY = 0;
     0002 0200                      1-  678     	CLRA	
     0003 002r                      1-  679     	SFUN	_PWM1DUTY
                                    1-  680     	.line	333, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0004 002r                      1-  681     	SFUN	_T1CR1
                                    1-  682     	.line	334, "main.c"; 	}
                                    1-  683     	RETURN	
     0005 0010                      3-   26 m1      ret
                                    1-  684     ; exit point of _pwmStop
                                    1-  686     ;***
                                    1-  687     ;  pBlock Stats: dbName = C
                                    1-  688     ;***
                                    1-  689     ;has an exit
                                    1-  690     ;; Starting pCode block
                                    1-  691     .segment "code"; module=main, function=_pwmStart
     0000                           1-  693     _pwmStart:
                                    1-  694     ; 2 exit points
                                    1-  695     	.line	322, "main.c"; 	TMR1 = 0x11;							//频率为110K
     0000 2111                      1-  696     	MOVIA	0x11
     0001 002r                      1-  697     	SFUN	_TMR1
                                    1-  698     	.line	323, "main.c"; 	PWM1DUTY = 0x07;				// 		
     0002 2107                      1-  699     	MOVIA	0x07
     0003 002r                      1-  700     	SFUN	_PWM1DUTY
                                    1-  701     	.line	325, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0004 0200                      1-  702     	CLRA	
     0005 002r                      1-  703     	SFUN	_T1CR2
                                    1-  704     	.line	326, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0006 2183                      1-  705     	MOVIA	0x83
     0007 002r                      1-  706     	SFUN	_T1CR1
                                    1-  707     	.line	327, "main.c"; 	}
                                    1-  708     	RETURN	
     0008 0010                      3-   26 m1      ret
                                    1-  709     ; exit point of _pwmStart
                                    1-  711     ;***
                                    1-  712     ;  pBlock Stats: dbName = C
                                    1-  713     ;***
                                    1-  714     ;has an exit
                                    1-  715     ;functions called:
                                    1-  716     ;   _delay
                                    1-  717     ;   _delay
                                    1-  718     ;   _delay
                                    1-  719     ;   _delay
                                    1-  720     ;   _delay
                                    1-  721     ;   _delay
                                    1-  722     ;3 compiler assigned registers:
                                    1-  723     ;   STK00
                                    1-  724     ;   r0x101C
                                    1-  725     ;   r0x101D
                                    1-  726     ;; Starting pCode block
                                    1-  727     .segment "code"; module=main, function=_checkLVD
     0000                           1-  729     _checkLVD:
                                    1-  730     ; 2 exit points
                                    1-  731     	.line	259, "main.c"; 	PCON1 = C_LVD_4P15V | C_TMR0_En;
     0000 213D                      1-  732     	MOVIA	0x3d
     0001 000r                      1-  733     	IOST	_PCON1
                                    1-  734     	.line	260, "main.c"; 	delay(80);
     0002 2150                      1-  735     	MOVIA	0x50
     0003 00rr                      1-  736     	MOVAR	STK00
     0004 2100                      1-  737     	MOVIA	0x00
     0005 2rrr                      1-  738     	LCALL	_delay
                                    1-  739     	.line	261, "main.c"; 	if((PCON1 >> 6)&1)
     0006 001r                      1-  740     	IOSTR	_PCON1
     0007 00rr                      1-  741     	MOVAR	r0x101C
     0008 2240                      1-  742     	ANDIA	0x40
     0009 0903                      1-  743     	BTRSS	STATUS,2
     000A 2101                      1-  744     	MOVIA	0x01
     000B 00rr                      1-  745     	MOVAR	r0x101D
     000C 01rr                      1-  746     	MOVR	r0x101D,W
     000D 0D03                      1-  747     	BTRSC	STATUS,2
     000E 3rrr                      1-  748     	LGOTO	_00267_DS_
                                    1-  749     	.line	263, "main.c"; 	powerFlag = 1;
     000F 2101                      1-  750     	MOVIA	0x01
     0010 00rr                      1-  751     	MOVAR	_powerFlag
                                    1-  752     	.line	264, "main.c"; 	LvdStep = 0;
     0011 02rr                      1-  753     	CLRR	_LvdStep
                                    1-  754     	.line	265, "main.c"; 	lvdFlag = 0;
     0012 02rr                      1-  755     	CLRR	_lvdFlag
                                    1-  756     	.line	266, "main.c"; 	if(workStep)
     0013 01rr                      1-  757     	MOVR	_workStep,W
     0014 0D03                      1-  758     	BTRSC	STATUS,2
     0015 3rrr                      1-  759     	LGOTO	_00269_DS_
                                    1-  760     	.line	267, "main.c"; 	PWM1DUTY = 0x05;	//28%
     0016 2105                      1-  761     	MOVIA	0x05
     0017 002r                      1-  762     	SFUN	_PWM1DUTY
     0018 3rrr                      1-  763     	LGOTO	_00269_DS_
     0019                           1-  764     _00267_DS_:
                                    1-  765     	.line	271, "main.c"; 	if(!LvdStep)
     0019 01rr                      1-  766     	MOVR	_LvdStep,W
     001A 0903                      1-  767     	BTRSS	STATUS,2
     001B 3rrr                      1-  768     	LGOTO	_00255_DS_
                                    1-  769     	.line	273, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     001C 2115                      1-  770     	MOVIA	0x15
     001D 000r                      1-  771     	IOST	_PCON1
                                    1-  772     	.line	274, "main.c"; 	delay(80);
     001E 2150                      1-  773     	MOVIA	0x50
     001F 00rr                      1-  774     	MOVAR	STK00
     0020 2100                      1-  775     	MOVIA	0x00
     0021 2rrr                      1-  776     	LCALL	_delay
                                    1-  777     	.line	276, "main.c"; 	if((PCON1 >> 6)&1)
     0022 001r                      1-  778     	IOSTR	_PCON1
     0023 00rr                      1-  779     	MOVAR	r0x101C
     0024 2240                      1-  780     	ANDIA	0x40
     0025 0903                      1-  781     	BTRSS	STATUS,2
     0026 2101                      1-  782     	MOVIA	0x01
     0027 00rr                      1-  783     	MOVAR	r0x101D
     0028 01rr                      1-  784     	MOVR	r0x101D,W
     0029 0D03                      1-  785     	BTRSC	STATUS,2
     002A 3rrr                      1-  786     	LGOTO	_00252_DS_
                                    1-  787     	.line	278, "main.c"; 	LvdStep = 0;
     002B 02rr                      1-  788     	CLRR	_LvdStep
                                    1-  789     	.line	279, "main.c"; 	lvdFlag = 0;
     002C 02rr                      1-  790     	CLRR	_lvdFlag
                                    1-  791     	.line	280, "main.c"; 	if(workStep)
     002D 01rr                      1-  792     	MOVR	_workStep,W
     002E 0D03                      1-  793     	BTRSC	STATUS,2
     002F 3rrr                      1-  794     	LGOTO	_00255_DS_
                                    1-  795     	.line	281, "main.c"; 	PWM1DUTY = 0x07;	//38%
     0030 2107                      1-  796     	MOVIA	0x07
     0031 002r                      1-  797     	SFUN	_PWM1DUTY
     0032 3rrr                      1-  798     	LGOTO	_00255_DS_
     0033                           1-  799     _00252_DS_:
                                    1-  800     	.line	285, "main.c"; 	LvdStep = 1;
     0033 2101                      1-  801     	MOVIA	0x01
     0034 00rr                      1-  802     	MOVAR	_LvdStep
                                    1-  803     	.line	286, "main.c"; 	lvdFlag = 1;
     0035 00rr                      1-  804     	MOVAR	_lvdFlag
     0036                           1-  805     _00255_DS_:
                                    1-  806     	.line	290, "main.c"; 	if(LvdStep)
     0036 01rr                      1-  807     	MOVR	_LvdStep,W
     0037 0D03                      1-  808     	BTRSC	STATUS,2
     0038 3rrr                      1-  809     	LGOTO	_00269_DS_
                                    1-  810     	.line	292, "main.c"; 	if(workStep)
     0039 01rr                      1-  811     	MOVR	_workStep,W
     003A 0D03                      1-  812     	BTRSC	STATUS,2
     003B 3rrr                      1-  813     	LGOTO	_00257_DS_
                                    1-  814     	.line	295, "main.c"; 	PCON1 = C_LVD_2P4V | C_TMR0_En;
     003C 2109                      1-  815     	MOVIA	0x09
     003D 000r                      1-  816     	IOST	_PCON1
     003E 3rrr                      1-  817     	LGOTO	_00258_DS_
     003F                           1-  818     _00257_DS_:
                                    1-  819     	.line	299, "main.c"; 	PCON1 = C_LVD_2P8V | C_TMR0_En;
     003F 210D                      1-  820     	MOVIA	0x0d
     0040 000r                      1-  821     	IOST	_PCON1
     0041                           1-  822     _00258_DS_:
                                    1-  823     	.line	301, "main.c"; 	delay(80);
     0041 2150                      1-  824     	MOVIA	0x50
     0042 00rr                      1-  825     	MOVAR	STK00
     0043 2100                      1-  826     	MOVIA	0x00
     0044 2rrr                      1-  827     	LCALL	_delay
                                    1-  828     	.line	302, "main.c"; 	if((PCON1 >> 6)&1)
     0045 001r                      1-  829     	IOSTR	_PCON1
     0046 00rr                      1-  830     	MOVAR	r0x101C
     0047 2240                      1-  831     	ANDIA	0x40
     0048 0903                      1-  832     	BTRSS	STATUS,2
     0049 2101                      1-  833     	MOVIA	0x01
     004A 00rr                      1-  834     	MOVAR	r0x101D
     004B 01rr                      1-  835     	MOVR	r0x101D,W
     004C 0D03                      1-  836     	BTRSC	STATUS,2
     004D 3rrr                      1-  837     	LGOTO	_00262_DS_
                                    1-  838     	.line	304, "main.c"; 	lvdFlag = 0;
     004E 02rr                      1-  839     	CLRR	_lvdFlag
                                    1-  840     	.line	305, "main.c"; 	LvdStep = 1;
     004F 2101                      1-  841     	MOVIA	0x01
     0050 00rr                      1-  842     	MOVAR	_LvdStep
                                    1-  843     	.line	306, "main.c"; 	if(workStep)
     0051 01rr                      1-  844     	MOVR	_workStep,W
     0052 0D03                      1-  845     	BTRSC	STATUS,2
     0053 3rrr                      1-  846     	LGOTO	_00269_DS_
                                    1-  847     	.line	307, "main.c"; 	PWM1DUTY = 0x08;	//45%
     0054 2108                      1-  848     	MOVIA	0x08
     0055 002r                      1-  849     	SFUN	_PWM1DUTY
     0056 3rrr                      1-  850     	LGOTO	_00269_DS_
     0057                           1-  851     _00262_DS_:
                                    1-  852     	.line	311, "main.c"; 	lvdFlag = 1;
     0057 2101                      1-  853     	MOVIA	0x01
     0058 00rr                      1-  854     	MOVAR	_lvdFlag
                                    1-  855     	.line	312, "main.c"; 	LvdStep = 2;
     0059 2102                      1-  856     	MOVIA	0x02
     005A 00rr                      1-  857     	MOVAR	_LvdStep
     005B                           1-  858     _00269_DS_:
                                    1-  859     	.line	316, "main.c"; 	}
                                    1-  860     	RETURN	
     005B 0010                      3-   26 m1      ret
                                    1-  861     ; exit point of _checkLVD
                                    1-  863     ;***
                                    1-  864     ;  pBlock Stats: dbName = C
                                    1-  865     ;***
                                    1-  866     ;has an exit
                                    1-  867     ;functions called:
                                    1-  868     ;   _gotoSleep
                                    1-  869     ;   _pwmStop
                                    1-  870     ;   _pwmStart
                                    1-  871     ;   _gotoSleep
                                    1-  872     ;   _gotoSleep
                                    1-  873     ;   _gotoSleep
                                    1-  874     ;   _gotoSleep
                                    1-  875     ;   _pwmStop
                                    1-  876     ;   _pwmStart
                                    1-  877     ;   _gotoSleep
                                    1-  878     ;   _gotoSleep
                                    1-  879     ;   _gotoSleep
                                    1-  880     ;; Starting pCode block
                                    1-  881     .segment "code"; module=main, function=_ledCon
     0000                           1-  883     _ledCon:
                                    1-  884     ; 2 exit points
                                    1-  885     	.line	188, "main.c"; 	if(++count500ms == 50)
     0000 05rr                      1-  886     	INCR	_count500ms,F
     0001 0D03                      1-  887     	BTRSC	STATUS,2
     0002 05rr                      1-  888     	INCR	(_count500ms + 1),F
     0003 01rr                      1-  889     	MOVR	_count500ms,W
     0004 2432                      1-  890     	XORIA	0x32
     0005 0903                      1-  891     	BTRSS	STATUS,2
     0006 3rrr                      1-  892     	LGOTO	_00159_DS_
     0007 01rr                      1-  893     	MOVR	(_count500ms + 1),W
     0008 2400                      1-  894     	XORIA	0x00
     0009 0903                      1-  895     	BTRSS	STATUS,2
     000A 3rrr                      1-  896     	LGOTO	_00159_DS_
                                    1-  897     	.line	190, "main.c"; 	count500ms = 0;
     000B 02rr                      1-  898     	CLRR	_count500ms
     000C 02rr                      1-  899     	CLRR	(_count500ms + 1)
                                    1-  900     	.line	191, "main.c"; 	if(workStep == 2)
     000D 01rr                      1-  901     	MOVR	_workStep,W
     000E 2402                      1-  902     	XORIA	0x02
     000F 0903                      1-  903     	BTRSS	STATUS,2
     0010 3rrr                      1-  904     	LGOTO	_00153_DS_
                                    1-  905     	.line	192, "main.c"; 	count20Min++;
     0011 05rr                      1-  906     	INCR	_count20Min,F
     0012 0D03                      1-  907     	BTRSC	STATUS,2
     0013 05rr                      1-  908     	INCR	(_count20Min + 1),F
     0014                           1-  909     _00153_DS_:
                                    1-  910     	.line	193, "main.c"; 	if(workStep == 1)
     0014 01rr                      1-  911     	MOVR	_workStep,W
     0015 2401                      1-  912     	XORIA	0x01
     0016 0903                      1-  913     	BTRSS	STATUS,2
     0017 3rrr                      1-  914     	LGOTO	_00155_DS_
                                    1-  915     	.line	194, "main.c"; 	count5Min++;
     0018 05rr                      1-  916     	INCR	_count5Min,F
     0019 0D03                      1-  917     	BTRSC	STATUS,2
     001A 05rr                      1-  918     	INCR	(_count5Min + 1),F
     001B                           1-  919     _00155_DS_:
                                    1-  920     	.line	195, "main.c"; 	if(workStep == 0)
     001B 01rr                      1-  921     	MOVR	_workStep,W
     001C 0903                      1-  922     	BTRSS	STATUS,2
     001D 3rrr                      1-  923     	LGOTO	_00159_DS_
                                    1-  924     	.line	197, "main.c"; 	count5Min = 0;
     001E 02rr                      1-  925     	CLRR	_count5Min
     001F 02rr                      1-  926     	CLRR	(_count5Min + 1)
                                    1-  927     	.line	198, "main.c"; 	count20Min = 0;
     0020 02rr                      1-  928     	CLRR	_count20Min
     0021 02rr                      1-  929     	CLRR	(_count20Min + 1)
     0022                           1-  930     _00159_DS_:
                                    1-  931     	.line	202, "main.c"; 	if(workStep == 1)
     0022 01rr                      1-  932     	MOVR	_workStep,W
     0023 2401                      1-  933     	XORIA	0x01
     0024 0903                      1-  934     	BTRSS	STATUS,2
     0025 3rrr                      1-  935     	LGOTO	_00177_DS_
                                    1-  936     	.line	204, "main.c"; 	PORTB &= 0xFE;
     0026 1Crr                      1-  937     	BCR	_PORTB,0
                                    1-  938     ;;unsigned compare: left < lit (0x258=600), size=2
                                    1-  939     	.line	205, "main.c"; 	if(count20Min >= 600)
     0027 2102                      1-  940     	MOVIA	0x02
     0028 04rr                      1-  941     	SUBAR	(_count20Min + 1),W
     0029 0903                      1-  942     	BTRSS	STATUS,2
     002A 3rrr                      1-  943     	LGOTO	_00240_DS_
     002B 2158                      1-  944     	MOVIA	0x58
     002C 04rr                      1-  945     	SUBAR	_count20Min,W
     002D                           1-  946     _00240_DS_:
     002D 0803                      1-  947     	BTRSS	STATUS,0
     002E 3rrr                      1-  948     	LGOTO	_00178_DS_
                                    1-  949     	.line	206, "main.c"; 	gotoSleep();
     002F 2rrr                      1-  950     	LCALL	_gotoSleep
     0030 3rrr                      1-  951     	LGOTO	_00178_DS_
     0031                           1-  952     _00177_DS_:
                                    1-  953     	.line	208, "main.c"; 	else if(workStep == 2)
     0031 01rr                      1-  954     	MOVR	_workStep,W
     0032 2402                      1-  955     	XORIA	0x02
     0033 0903                      1-  956     	BTRSS	STATUS,2
     0034 3rrr                      1-  957     	LGOTO	_00174_DS_
                                    1-  958     	.line	210, "main.c"; 	if(!count500ms)
     0035 01rr                      1-  959     	MOVR	_count500ms,W
     0036 11rr                      1-  960     	IORAR	(_count500ms + 1),W
     0037 0903                      1-  961     	BTRSS	STATUS,2
     0038 3rrr                      1-  962     	LGOTO	_00167_DS_
                                    1-  963     	.line	212, "main.c"; 	reversebit(PORTB,0);		
     0039 2101                      1-  964     	MOVIA	0x01
     003A 12rr                      1-  965     	XORAR	_PORTB,F
                                    1-  966     	.line	213, "main.c"; 	if(step2Count == 6)
     003B 01rr                      1-  967     	MOVR	_step2Count,W
     003C 2406                      1-  968     	XORIA	0x06
     003D 0D03                      1-  969     	BTRSC	STATUS,2
                                    1-  970     	.line	214, "main.c"; 	pwmStop();
     003E 2rrr                      1-  971     	LCALL	_pwmStop
                                    1-  972     	.line	215, "main.c"; 	if(step2Count >= 8)
     003F 2108                      1-  973     	MOVIA	0x08
     0040 04rr                      1-  974     	SUBAR	_step2Count,W
     0041 0803                      1-  975     	BTRSS	STATUS,0
     0042 3rrr                      1-  976     	LGOTO	_00165_DS_
                                    1-  977     	.line	217, "main.c"; 	step2Count = 0;
     0043 02rr                      1-  978     	CLRR	_step2Count
                                    1-  979     	.line	218, "main.c"; 	pwmStart();
     0044 2rrr                      1-  980     	LCALL	_pwmStart
     0045                           1-  981     _00165_DS_:
                                    1-  982     	.line	220, "main.c"; 	step2Count++;
     0045 05rr                      1-  983     	INCR	_step2Count,F
                                    1-  984     ;;unsigned compare: left < lit (0x960=2400), size=2
     0046                           1-  985     _00167_DS_:
                                    1-  986     	.line	223, "main.c"; 	if(count20Min >= 2400)
     0046 2109                      1-  987     	MOVIA	0x09
     0047 04rr                      1-  988     	SUBAR	(_count20Min + 1),W
     0048 0903                      1-  989     	BTRSS	STATUS,2
     0049 3rrr                      1-  990     	LGOTO	_00242_DS_
     004A 2160                      1-  991     	MOVIA	0x60
     004B 04rr                      1-  992     	SUBAR	_count20Min,W
     004C                           1-  993     _00242_DS_:
     004C 0803                      1-  994     	BTRSS	STATUS,0
     004D 3rrr                      1-  995     	LGOTO	_00178_DS_
                                    1-  996     	.line	224, "main.c"; 	gotoSleep();
     004E 2rrr                      1-  997     	LCALL	_gotoSleep
     004F 3rrr                      1-  998     	LGOTO	_00178_DS_
     0050                           1-  999     _00174_DS_:
                                    1- 1000     	.line	228, "main.c"; 	PORTB |= 0x20;	//关闭
     0050 1Arr                      1- 1001     	BSR	_PORTB,5
                                    1- 1002     	.line	229, "main.c"; 	if(++sleepDelay > 200 && !keyCount)
     0051 05rr                      1- 1003     	INCR	_sleepDelay,F
                                    1- 1004     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1005     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0052 21C9                      1- 1006     	MOVIA	0xc9
     0053 04rr                      1- 1007     	SUBAR	_sleepDelay,W
     0054 0803                      1- 1008     	BTRSS	STATUS,0
     0055 3rrr                      1- 1009     	LGOTO	_00178_DS_
     0056 01rr                      1- 1010     	MOVR	_keyCount,W
     0057 11rr                      1- 1011     	IORAR	(_keyCount + 1),W
     0058 0D03                      1- 1012     	BTRSC	STATUS,2
                                    1- 1013     	.line	230, "main.c"; 	gotoSleep();
     0059 2rrr                      1- 1014     	LCALL	_gotoSleep
     005A                           1- 1015     _00178_DS_:
                                    1- 1016     	.line	233, "main.c"; 	if(lvdFlag)
     005A 01rr                      1- 1017     	MOVR	_lvdFlag,W
     005B 0D03                      1- 1018     	BTRSC	STATUS,2
     005C 3rrr                      1- 1019     	LGOTO	_00187_DS_
                                    1- 1020     	.line	237, "main.c"; 	if(!count500ms)
     005D 01rr                      1- 1021     	MOVR	_count500ms,W
     005E 11rr                      1- 1022     	IORAR	(_count500ms + 1),W
     005F 0903                      1- 1023     	BTRSS	STATUS,2
     0060 3rrr                      1- 1024     	LGOTO	_00187_DS_
                                    1- 1025     	.line	239, "main.c"; 	if(ledYellowFlag)
     0061 01rr                      1- 1026     	MOVR	_ledYellowFlag,W
     0062 0D03                      1- 1027     	BTRSC	STATUS,2
     0063 3rrr                      1- 1028     	LGOTO	_00187_DS_
                                    1- 1029     	.line	241, "main.c"; 	reversebit(PORTB,6);
     0064 2140                      1- 1030     	MOVIA	0x40
     0065 12rr                      1- 1031     	XORAR	_PORTB,F
                                    1- 1032     	.line	242, "main.c"; 	ledCount++;
     0066 05rr                      1- 1033     	INCR	_ledCount,F
                                    1- 1034     	.line	243, "main.c"; 	if(ledCount == 40)
     0067 01rr                      1- 1035     	MOVR	_ledCount,W
     0068 2428                      1- 1036     	XORIA	0x28
     0069 0903                      1- 1037     	BTRSS	STATUS,2
     006A 3rrr                      1- 1038     	LGOTO	_00187_DS_
                                    1- 1039     	.line	245, "main.c"; 	ledCount = 0;
     006B 02rr                      1- 1040     	CLRR	_ledCount
                                    1- 1041     	.line	246, "main.c"; 	gotoSleep();
     006C 2rrr                      1- 1042     	LCALL	_gotoSleep
     006D                           1- 1043     _00187_DS_:
                                    1- 1044     	.line	253, "main.c"; 	}
                                    1- 1045     	RETURN	
     006D 0010                      3-   26 m1      ret
                                    1- 1046     ; exit point of _ledCon
                                    1- 1048     ;***
                                    1- 1049     ;  pBlock Stats: dbName = C
                                    1- 1050     ;***
                                    1- 1051     ;has an exit
                                    1- 1052     ;functions called:
                                    1- 1053     ;   _pwmStop
                                    1- 1054     ;   _pwmStop
                                    1- 1055     ;; Starting pCode block
                                    1- 1056     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 1058     _gotoSleep:
                                    1- 1059     ; 2 exit points
                                    1- 1060     	.line	167, "main.c"; 	count20Min = 0;
     0000 02rr                      1- 1061     	CLRR	_count20Min
     0001 02rr                      1- 1062     	CLRR	(_count20Min + 1)
                                    1- 1063     	.line	168, "main.c"; 	count5Min = 0;
     0002 02rr                      1- 1064     	CLRR	_count5Min
     0003 02rr                      1- 1065     	CLRR	(_count5Min + 1)
                                    1- 1066     	.line	169, "main.c"; 	pwmStop();
     0004 2rrr                      1- 1067     	LCALL	_pwmStop
                                    1- 1068     	.line	170, "main.c"; 	sleepDelay = 0;
     0005 02rr                      1- 1069     	CLRR	_sleepDelay
                                    1- 1070     	.line	171, "main.c"; 	workStep = 0;
     0006 02rr                      1- 1071     	CLRR	_workStep
                                    1- 1072     	.line	172, "main.c"; 	BWUCON = 0x08;
     0007 2108                      1- 1073     	MOVIA	0x08
     0008 00rr                      1- 1074     	MOVAR	_BWUCON
                                    1- 1075     	.line	173, "main.c"; 	INTE =  C_INT_TMR1 | C_INT_PBKey;
     0009 210A                      1- 1076     	MOVIA	0x0a
     000A 00rr                      1- 1077     	MOVAR	_INTE
                                    1- 1078     	.line	174, "main.c"; 	PCON =  C_LVR_En;	
     000B 2108                      1- 1079     	MOVIA	0x08
     000C 00rr                      1- 1080     	MOVAR	_PCON
                                    1- 1081     	.line	175, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000D 02rr                      1- 1082     	CLRR	_INTF
                                    1- 1083     	.line	176, "main.c"; 	CLRWDT();
     000E 0002                      1- 1084     	clrwdt
                                    1- 1085     	.line	177, "main.c"; 	sleepFlag = 1;
     000F 2101                      1- 1086     	MOVIA	0x01
     0010 00rr                      1- 1087     	MOVAR	_sleepFlag
                                    1- 1088     	.line	178, "main.c"; 	SLEEP();
     0011 0001                      1- 1089     	sleep
                                    1- 1090     	.line	179, "main.c"; 	INTE = C_INT_WDT | C_INT_TMR0 | C_INT_TMR1;	// Enable Timer0、Timer1、WDT overflow interrupt
     0012 2149                      1- 1091     	MOVIA	0x49
     0013 00rr                      1- 1092     	MOVAR	_INTE
                                    1- 1093     	.line	180, "main.c"; 	INTF = 0;
     0014 02rr                      1- 1094     	CLRR	_INTF
                                    1- 1095     	.line	182, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0015 21A8                      1- 1096     	MOVIA	0xa8
     0016 00rr                      1- 1097     	MOVAR	_PCON
                                    1- 1098     	.line	183, "main.c"; 	}
                                    1- 1099     	RETURN	
     0017 0010                      3-   26 m1      ret
                                    1- 1100     ; exit point of _gotoSleep
                                    1- 1103     ;	code size estimation:
                                    1- 1104     ;	  439+    0 =   439 instructions (  878 byte)
                                    1- 1106     	end
                                    1- 1106     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00112_DS_              Label    00000021
_00114_DS_              Label    00000027
_00122_DS_              Label    0000002D
_00125_DS_              Label    0000003A
_00127_DS_              Label    00000040
_00132_DS_              Label    0000002F
_00133_DS_              Label    00000042
_00140_DS_              Label    0000004B
_00143_DS_              Label    00000014
_00153_DS_              Label    00000014
_00155_DS_              Label    0000001B
_00159_DS_              Label    00000022
_00165_DS_              Label    00000045
_00167_DS_              Label    00000046
_00174_DS_              Label    00000050
_00177_DS_              Label    00000031
_00178_DS_              Label    0000005A
_00187_DS_              Label    0000006D
_00240_DS_              Label    0000002D
_00242_DS_              Label    0000004C
_00252_DS_              Label    00000033
_00255_DS_              Label    00000036
_00257_DS_              Label    0000003F
_00258_DS_              Label    00000041
_00262_DS_              Label    00000057
_00267_DS_              Label    00000019
_00269_DS_              Label    0000005B
_00291_DS_              Label    0000001E
_00294_DS_              Label    00000012
_00295_DS_              Label    0000002A
_00296_DS_              Label    0000002B
_00310_DS_              Label    0000000B
_00311_DS_              Label    00000018
_00312_DS_              Label    00000024
_00319_DS_              Label    00000005
_00321_DS_              Label    00000011
_00330_DS_              Label    0000000B
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_count20Min             Label    00000000
_count500ms             Label    00000000
_count5Min              Label    00000000
_delay                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_KeyStatus              Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_ledYellowFlag          Label    00000000
_lvdFlag                Label    00000000
_LvdStep                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_sleepDelay             Label    00000000
_sleepFlag              Label    00000000
_STATUS                 Label    00000000
_step2Count             Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000035
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
