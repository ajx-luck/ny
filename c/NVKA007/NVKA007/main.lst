
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A054D,c=on
                                    1-    9     	#include "ny8a054d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_delay
                                    1-   15     	extern	__moduint
                                    1-   16     	extern	__moduchar
                                    1-   17     	extern	_PORTAbits
                                    1-   18     	extern	_PORTBbits
                                    1-   19     	extern	_PCONbits
                                    1-   20     	extern	_BWUCONbits
                                    1-   21     	extern	_ABPLCONbits
                                    1-   22     	extern	_BPHCONbits
                                    1-   23     	extern	_INTEbits
                                    1-   24     	extern	_INTFbits
                                    1-   25     	extern	_AWUCONbits
                                    1-   26     	extern	_INTEDGbits
                                    1-   27     	extern	_RFCbits
                                    1-   28     	extern	_INTE2bits
                                    1-   29     	extern	_INDF
                                    1-   30     	extern	_TMR0
                                    1-   31     	extern	_PCL
                                    1-   32     	extern	_STATUS
                                    1-   33     	extern	_FSR
                                    1-   34     	extern	_PORTA
                                    1-   35     	extern	_PORTB
                                    1-   36     	extern	_PCON
                                    1-   37     	extern	_BWUCON
                                    1-   38     	extern	_PCHBUF
                                    1-   39     	extern	_ABPLCON
                                    1-   40     	extern	_BPHCON
                                    1-   41     	extern	_INTE
                                    1-   42     	extern	_INTF
                                    1-   43     	extern	_AWUCON
                                    1-   44     	extern	_INTEDG
                                    1-   45     	extern	_TMRH
                                    1-   46     	extern	_RFC
                                    1-   47     	extern	_TM34RH
                                    1-   48     	extern	_INTE2
                                    1-   49     	extern	_TMR1
                                    1-   50     	extern	_T1CR1
                                    1-   51     	extern	_T1CR2
                                    1-   52     	extern	_PWM1DUTY
                                    1-   53     	extern	_PS1CV
                                    1-   54     	extern	_BZ1CR
                                    1-   55     	extern	_IRCR
                                    1-   56     	extern	_TBHP
                                    1-   57     	extern	_TBHD
                                    1-   58     	extern	_P2CR1
                                    1-   59     	extern	_PWM2DUTY
                                    1-   60     	extern	_OSCCR
                                    1-   61     	extern	_TMR3
                                    1-   62     	extern	_T3CR1
                                    1-   63     	extern	_T3CR2
                                    1-   64     	extern	_PWM3DUTY
                                    1-   65     	extern	_PS3CV
                                    1-   66     	extern	_P4CR1
                                    1-   67     	extern	_PWM4DUTY
                                    1-   68     	extern	_P5CR1
                                    1-   69     	extern	_PWM5DUTY
                                    1-   70     	extern	_PWM5RH
                                    1-   71     	extern	_IOSTA
                                    1-   72     	extern	_IOSTB
                                    1-   73     	extern	_APHCON
                                    1-   74     	extern	_PS0CV
                                    1-   75     	extern	_BODCON
                                    1-   76     	extern	_CMPCR
                                    1-   77     	extern	_PCON1
                                    1-   78     	extern	_T0MD
                                    1-   79     	extern	___sdcc_saved_fsr
                                    1-   80     	extern	___sdcc_saved_stk00
                                    1-   81     	extern	___sdcc_saved_stk01
                                    1-   82     	extern	__nyc_ny8_startup
                                    1-   83     ;--------------------------------------------------------
                                    1-   84     ; global declarations
                                    1-   85     ;--------------------------------------------------------
                                    1-   86     	extern	_keyRead
                                    1-   87     	extern	_gotoSleep
                                    1-   88     	extern	_pwmStop
                                    1-   89     	extern	_pwmStart
                                    1-   90     	extern	_setPWMduty
                                    1-   91     	extern	_init
                                    1-   92     	extern	_Led1OFF
                                    1-   93     	extern	_Led1On
                                    1-   94     	extern	_timeCon
                                    1-   95     	extern	_startLed
                                    1-   96     	extern	_startRGBLed
                                    1-   97     	extern	_stopRGBLed
                                    1-   98     	extern	_ledCon
                                    1-   99     	extern	_pwmCon
                                    1-  100     	extern	_keyCon
                                    1-  101     	extern	_isr
                                    1-  102     	extern	_main
                                    1-  103     	extern	_count1s
                                    1-  104     	extern	_timeCount
                                    1-  105     	extern	_timeSave
                                    1-  106     	extern	_keyCount
                                    1-  107     	extern	_longPressFlag
                                    1-  108     	extern	_intCount
                                    1-  109     	extern	_IntFlag
                                    1-  110     	extern	_workStep
                                    1-  111     	extern	_ledStep
                                    1-  112     	extern	_RDUTY
                                    1-  113     	extern	_GDUTY
                                    1-  114     	extern	_BDUTY
                                    1-  115     	extern	_ledCount
                                    1-  116     	extern	_ledFlag
                                    1-  117     	extern	_ledOffCount
                                    1-  118     	extern	_pwmFlag
                                    1-  119     	extern	_pwmDuty
                                    1-  120     	extern	_startFlag
                                    1-  121     	extern	_sleepDelay
                                    1-  122     	extern	_step2Count
                                    1-  124     	extern PSAVE
                                    1-  125     	extern SSAVE
                                    1-  126     	extern WSAVE
                                    1-  127     	extern STK12
                                    1-  128     	extern STK11
                                    1-  129     	extern STK10
                                    1-  130     	extern STK09
                                    1-  131     	extern STK08
                                    1-  132     	extern STK07
                                    1-  133     	extern STK06
                                    1-  134     	extern STK05
                                    1-  135     	extern STK04
                                    1-  136     	extern STK03
                                    1-  137     	extern STK02
                                    1-  138     	extern STK01
                                    1-  139     	extern STK00
                                    1-  141     .segment "uninit", 0x20000040
 20000040                           1-  142     PSAVE:
                                    1-  143     	.res 1
 20000041                           1-  144     SSAVE:
                                    1-  145     	.res 1
 20000042                           1-  146     WSAVE:
                                    1-  147     	.res 1
 20000043                           1-  148     STK12:
                                    1-  149     	.res 1
 20000044                           1-  150     STK11:
                                    1-  151     	.res 1
 20000045                           1-  152     STK10:
                                    1-  153     	.res 1
 20000046                           1-  154     STK09:
                                    1-  155     	.res 1
 20000047                           1-  156     STK08:
                                    1-  157     	.res 1
 20000048                           1-  158     STK07:
                                    1-  159     	.res 1
 20000049                           1-  160     STK06:
                                    1-  161     	.res 1
 2000004A                           1-  162     STK05:
                                    1-  163     	.res 1
 2000004B                           1-  164     STK04:
                                    1-  165     	.res 1
 2000004C                           1-  166     STK03:
                                    1-  167     	.res 1
 2000004D                           1-  168     STK02:
                                    1-  169     	.res 1
 2000004E                           1-  170     STK01:
                                    1-  171     	.res 1
 2000004F                           1-  172     STK00:
                                    1-  173     	.res 1
                                    1-  175     ;--------------------------------------------------------
                                    1-  176     ; global definitions
                                    1-  177     ;--------------------------------------------------------
                                    1-  178     ;--------------------------------------------------------
                                    1-  179     ; absolute symbol definitions
                                    1-  180     ;--------------------------------------------------------
                                    1-  181     ;--------------------------------------------------------
                                    1-  182     ; compiler-defined variables
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     .segment "uninit"
     0000                           1-  185     r0x1024:
                                    1-  186     	.res	1
                                    1-  187     .segment "uninit"
     0000                           1-  188     r0x1025:
                                    1-  189     	.res	1
                                    1-  190     .segment "uninit"
     0000                           1-  191     r0x1022:
                                    1-  192     	.res	1
                                    1-  193     .segment "uninit"
     0000                           1-  194     r0x1023:
                                    1-  195     	.res	1
                                    1-  196     .segment "uninit"
     0000                           1-  197     r0x1021:
                                    1-  198     	.res	1
                                    1-  199     .segment "uninit"
     0000                           1-  200     r0x1020:
                                    1-  201     	.res	1
                                    1-  202     .segment "uninit"
     0000                           1-  203     r0x101E:
                                    1-  204     	.res	1
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x101F:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x101D:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x101C:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x101B:
                                    1-  216     	.res	1
                                    1-  217     ;--------------------------------------------------------
                                    1-  218     ; initialized data
                                    1-  219     ;--------------------------------------------------------
                                    1-  221     .segment "idata"
     0000                           1-  222     _count1s:
     0000 0000                      1-  223     	dw	0x00
                                    1-  227     .segment "idata"
     0000                           1-  228     _timeCount:
     0000 0000 0000                 1-  229     	dw	0x00, 0x00
                                    1-  233     .segment "idata"
     0000                           1-  234     _timeSave:
     0000 0000 0000                 1-  235     	dw	0x00, 0x00
                                    1-  239     .segment "idata"
     0000                           1-  240     _keyCount:
     0000 0000 0000                 1-  241     	dw	0x00, 0x00
                                    1-  245     .segment "idata"
     0000                           1-  246     _longPressFlag:
     0000 0000                      1-  247     	dw	0x00
                                    1-  251     .segment "idata"
     0000                           1-  252     _intCount:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _IntFlag:
     0000 0000                      1-  259     	dw	0x00
                                    1-  263     .segment "idata"
     0000                           1-  264     _workStep:
     0000 0000                      1-  265     	dw	0x00
                                    1-  269     .segment "idata"
     0000                           1-  270     _ledStep:
     0000 0000                      1-  271     	dw	0x00
                                    1-  275     .segment "idata"
     0000                           1-  276     _RDUTY:
     0000 0064                      1-  277     	dw	0x64
                                    1-  281     .segment "idata"
     0000                           1-  282     _GDUTY:
     0000 0064                      1-  283     	dw	0x64
                                    1-  287     .segment "idata"
     0000                           1-  288     _BDUTY:
     0000 0064                      1-  289     	dw	0x64
                                    1-  293     .segment "idata"
     0000                           1-  294     _ledCount:
     0000 0000                      1-  295     	dw	0x00
                                    1-  299     .segment "idata"
     0000                           1-  300     _ledFlag:
     0000 0000                      1-  301     	dw	0x00
                                    1-  305     .segment "idata"
     0000                           1-  306     _ledOffCount:
     0000 0000                      1-  307     	dw	0x00
                                    1-  311     .segment "idata"
     0000                           1-  312     _pwmFlag:
     0000 0000                      1-  313     	dw	0x00
                                    1-  317     .segment "idata"
     0000                           1-  318     _pwmDuty:
     0000 0000                      1-  319     	dw	0x00
                                    1-  323     .segment "idata"
     0000                           1-  324     _startFlag:
     0000 0000                      1-  325     	dw	0x00
                                    1-  329     .segment "idata"
     0000                           1-  330     _sleepDelay:
     0000 0000 0000                 1-  331     	dw	0x00, 0x00
                                    1-  335     .segment "idata"
     0000                           1-  336     _step2Count:
     0000 0000 0000                 1-  337     	dw	0x00, 0x00
                                    1-  340     ;--------------------------------------------------------
                                    1-  341     ; overlayable items in internal ram 
                                    1-  342     ;--------------------------------------------------------
                                    1-  343     ;	udata_ovr
                                    1-  344     ;--------------------------------------------------------
                                    1-  345     ; reset vector 
                                    1-  346     ;--------------------------------------------------------
                                    1-  347     ORG	0x0000
     0000 3rrr                      1-  348     	LGOTO	__nyc_ny8_startup
                                    1-  349     ;--------------------------------------------------------
                                    1-  350     ; interrupt and initialization code
                                    1-  351     ;--------------------------------------------------------
                                    1-  352     ORG 0x0008
     0008 3rrr                      1-  353     	lgoto	__sdcc_interrupt
                                    1-  355     .segment "code"
     0000                           1-  356     __sdcc_interrupt:
                                    1-  357     ;***
                                    1-  358     ;  pBlock Stats: dbName = I
                                    1-  359     ;***
                                    1-  360     ;functions called:
                                    1-  361     ;   _setPWMduty
                                    1-  362     ;   _setPWMduty
                                    1-  363     ;   _setPWMduty
                                    1-  364     ;   _setPWMduty
                                    1-  365     ;   _setPWMduty
                                    1-  366     ;   _setPWMduty
                                    1-  367     ;2 compiler assigned registers:
                                    1-  368     ;   STK00
                                    1-  369     ;   STK01
                                    1-  370     ;; Starting pCode block
     0000                           1-  371     _isr:
                                    1-  372     ; 0 exit points
                                    1-  373     	.line	57, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  374     	MOVAR	WSAVE
     0001 1503                      1-  375     	SWAPR	STATUS,W
     0002 0283                      1-  376     	CLRR	STATUS
     0003 00rr                      1-  377     	MOVAR	SSAVE
     0004 010A                      1-  378     	MOVR	PCHBUF,W
     0005 028A                      1-  379     	CLRR	PCHBUF
     0006 00rr                      1-  380     	MOVAR	PSAVE
     0007 0104                      1-  381     	MOVR	FSR,W
                                    1-  382     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  383     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  384     	MOVR	STK00,W
                                    1-  385     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  386     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  387     	MOVR	STK01,W
                                    1-  388     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  389     	MOVAR	___sdcc_saved_stk01
                                    1-  390     	.line	59, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  391     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  392     	LGOTO	_00110_DS_
                                    1-  393     	.line	61, "main.c"; 	TMR0 = 61;
     0012 213D                      1-  394     	MOVIA	0x3d
     0013 00rr                      1-  395     	MOVAR	_TMR0
                                    1-  396     	.line	62, "main.c"; 	intCount++;
                                    1-  397     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  398     	INCR	_intCount,F
                                    1-  399     	.line	63, "main.c"; 	if(ledFlag)
                                    1-  400     	BANKSEL	_ledFlag
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1-  401     	MOVR	_ledFlag,W
     0018 0D03                      1-  402     	BTRSC	STATUS,2
     0019 3rrr                      1-  403     	LGOTO	_00106_DS_
                                    1-  404     	.line	65, "main.c"; 	setPWMduty(0x04,RDUTY);
                                    1-  405     	BANKSEL	_RDUTY
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 01rr                      1-  406     	MOVR	_RDUTY,W
     001C 00rr                      1-  407     	MOVAR	STK00
     001D 2104                      1-  408     	MOVIA	0x04
     001E 2rrr                      1-  409     	LCALL	_setPWMduty
                                    1-  410     	.line	66, "main.c"; 	setPWMduty(0x08,GDUTY);
                                    1-  411     	BANKSEL	_GDUTY
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1-  412     	MOVR	_GDUTY,W
     0021 00rr                      1-  413     	MOVAR	STK00
     0022 2108                      1-  414     	MOVIA	0x08
     0023 2rrr                      1-  415     	LCALL	_setPWMduty
                                    1-  416     	.line	67, "main.c"; 	setPWMduty(0x10,BDUTY);
                                    1-  417     	BANKSEL	_BDUTY
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1-  418     	MOVR	_BDUTY,W
     0026 00rr                      1-  419     	MOVAR	STK00
     0027 2110                      1-  420     	MOVIA	0x10
     0028 2rrr                      1-  421     	LCALL	_setPWMduty
                                    1-  422     	.line	68, "main.c"; 	ledCount++;
                                    1-  423     	BANKSEL	_ledCount
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 05rr                      1-  424     	INCR	_ledCount,F
     002B                           1-  425     _00106_DS_:
                                    1-  426     	.line	70, "main.c"; 	if(intCount == 96)
                                    1-  427     	BANKSEL	_intCount
     002B rrrr                      3-   71 m1      .banksel ram_address
     002C 01rr                      1-  428     	MOVR	_intCount,W
     002D 2460                      1-  429     	XORIA	0x60
     002E 0903                      1-  430     	BTRSS	STATUS,2
     002F 3rrr                      1-  431     	LGOTO	_00110_DS_
                                    1-  432     	.line	72, "main.c"; 	intCount = 0;
     0030 02rr                      1-  433     	CLRR	_intCount
                                    1-  434     	.line	73, "main.c"; 	IntFlag = 1;
     0031 2101                      1-  435     	MOVIA	0x01
                                    1-  436     	BANKSEL	_IntFlag
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 00rr                      1-  437     	MOVAR	_IntFlag
     0034                           1-  438     _00110_DS_:
                                    1-  439     	.line	77, "main.c"; 	if(INTFbits.PABIF)
     0034 08rr                      1-  440     	BTRSS	_INTFbits,1
     0035 3rrr                      1-  441     	LGOTO	_00112_DS_
                                    1-  442     	.line	79, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0036 21FD                      1-  443     	MOVIA	0xfd
     0037 00rr                      1-  444     	MOVAR	_INTF
     0038                           1-  445     _00112_DS_:
                                    1-  446     	.line	82, "main.c"; 	INTF = 0;
     0038 02rr                      1-  447     	CLRR	_INTF
                                    1-  448     	.line	84, "main.c"; 	}
                                    1-  449     	BANKSEL	___sdcc_saved_stk01
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 01rr                      1-  450     	MOVR	___sdcc_saved_stk01,W
     003B 00rr                      1-  451     	MOVAR	STK01
                                    1-  452     	BANKSEL	___sdcc_saved_stk00
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 01rr                      1-  453     	MOVR	___sdcc_saved_stk00,W
     003E 00rr                      1-  454     	MOVAR	STK00
                                    1-  455     	BANKSEL	___sdcc_saved_fsr
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 01rr                      1-  456     	MOVR	___sdcc_saved_fsr,W
     0041 0084                      1-  457     	MOVAR	FSR
     0042 01rr                      1-  458     	MOVR	PSAVE,W
     0043 008A                      1-  459     	MOVAR	PCHBUF
     0044 0283                      1-  460     	CLRR	STATUS
     0045 15rr                      1-  461     	SWAPR	SSAVE,W
     0046 0083                      1-  462     	MOVAR	STATUS
     0047 15rr                      1-  463     	SWAPR	WSAVE,F
     0048 15rr                      1-  464     	SWAPR	WSAVE,W
     0049                           1-  465     END_OF_INTERRUPT:
     0049 0011                      1-  466     	RETIE	
                                    1-  468     ;--------------------------------------------------------
                                    1-  469     ; code
                                    1-  470     ;--------------------------------------------------------
                                    1-  471     ;***
                                    1-  472     ;  pBlock Stats: dbName = M
                                    1-  473     ;***
                                    1-  474     ;has an exit
                                    1-  475     ;functions called:
                                    1-  476     ;   _init
                                    1-  477     ;   _timeCon
                                    1-  478     ;   _startLed
                                    1-  479     ;   _keyCon
                                    1-  480     ;   _ledCon
                                    1-  481     ;   _pwmCon
                                    1-  482     ;   _init
                                    1-  483     ;   _timeCon
                                    1-  484     ;   _startLed
                                    1-  485     ;   _keyCon
                                    1-  486     ;   _ledCon
                                    1-  487     ;   _pwmCon
                                    1-  488     ;; Starting pCode block
                                    1-  489     .segment "code"; module=main, function=_main
     0000                           1-  491     _main:
                                    1-  492     ; 2 exit points
                                    1-  493     	.line	91, "main.c"; 	init();
     0000 2rrr                      1-  494     	LCALL	_init
                                    1-  495     	.line	92, "main.c"; 	startFlag = 1;
     0001 2101                      1-  496     	MOVIA	0x01
                                    1-  497     	BANKSEL	_startFlag
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 00rr                      1-  498     	MOVAR	_startFlag
     0004                           1-  499     _00122_DS_:
                                    1-  500     	.line	95, "main.c"; 	CLRWDT();
     0004 0002                      1-  501     	clrwdt
                                    1-  502     	.line	97, "main.c"; 	if(!IntFlag)
                                    1-  503     	BANKSEL	_IntFlag
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 01rr                      1-  504     	MOVR	_IntFlag,W
     0007 0D03                      1-  505     	BTRSC	STATUS,2
     0008 3rrr                      1-  506     	LGOTO	_00122_DS_
                                    1-  507     	.line	99, "main.c"; 	IntFlag = 0;
     0009 02rr                      1-  508     	CLRR	_IntFlag
                                    1-  509     	.line	100, "main.c"; 	timeCon();
     000A 2rrr                      1-  510     	LCALL	_timeCon
                                    1-  511     	.line	101, "main.c"; 	if(startFlag)			//上电
                                    1-  512     	BANKSEL	_startFlag
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 01rr                      1-  513     	MOVR	_startFlag,W
     000D 0D03                      1-  514     	BTRSC	STATUS,2
     000E 3rrr                      1-  515     	LGOTO	_00120_DS_
                                    1-  516     	.line	103, "main.c"; 	startLed();
     000F 2rrr                      1-  517     	LCALL	_startLed
                                    1-  518     	.line	104, "main.c"; 	continue;
     0010 3rrr                      1-  519     	LGOTO	_00122_DS_
     0011                           1-  520     _00120_DS_:
                                    1-  521     	.line	106, "main.c"; 	keyCon();
     0011 2rrr                      1-  522     	LCALL	_keyCon
                                    1-  523     	.line	107, "main.c"; 	ledCon();
     0012 2rrr                      1-  524     	LCALL	_ledCon
                                    1-  525     	.line	108, "main.c"; 	pwmCon();
     0013 2rrr                      1-  526     	LCALL	_pwmCon
     0014 3rrr                      1-  527     	LGOTO	_00122_DS_
                                    1-  528     	.line	110, "main.c"; 	}
                                    1-  529     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  530     ; exit point of _main
                                    1-  532     ;***
                                    1-  533     ;  pBlock Stats: dbName = C
                                    1-  534     ;***
                                    1-  535     ;has an exit
                                    1-  536     ;1 compiler assigned register :
                                    1-  537     ;   r0x101B
                                    1-  538     ;; Starting pCode block
                                    1-  539     .segment "code"; module=main, function=_keyRead
                                    1-  541     ;local variable name mapping:
     0000                           1-  543     _keyRead:
                                    1-  544     ; 2 exit points
                                    1-  545     	.line	388, "main.c"; 	char keyRead(char KeyStatus)	
                                    1-  546     	BANKSEL	r0x101B
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  547     	MOVAR	r0x101B
                                    1-  548     	.line	390, "main.c"; 	if (KeyStatus)
     0002 01rr                      1-  549     	MOVR	r0x101B,W
     0003 0D03                      1-  550     	BTRSC	STATUS,2
     0004 3rrr                      1-  551     	LGOTO	_00381_DS_
                                    1-  552     	.line	392, "main.c"; 	keyCount++;
                                    1-  553     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  554     	INCR	_keyCount,F
     0007 0D03                      1-  555     	BTRSC	STATUS,2
     0008 05rr                      1-  556     	INCR	(_keyCount + 1),F
                                    1-  557     ;;unsigned compare: left < lit (0xC8=200), size=2
                                    1-  558     	.line	393, "main.c"; 	if(keyCount >= 200)
     0009 2100                      1-  559     	MOVIA	0x00
     000A 04rr                      1-  560     	SUBAR	(_keyCount + 1),W
     000B 0903                      1-  561     	BTRSS	STATUS,2
     000C 3rrr                      1-  562     	LGOTO	_00400_DS_
     000D 21C8                      1-  563     	MOVIA	0xc8
     000E 04rr                      1-  564     	SUBAR	_keyCount,W
     000F                           1-  565     _00400_DS_:
     000F 0803                      1-  566     	BTRSS	STATUS,0
     0010 3rrr                      1-  567     	LGOTO	_00382_DS_
                                    1-  568     	.line	395, "main.c"; 	keyCount = 200;
     0011 21C8                      1-  569     	MOVIA	0xc8
                                    1-  570     	BANKSEL	_keyCount
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 00rr                      1-  571     	MOVAR	_keyCount
     0014 02rr                      1-  572     	CLRR	(_keyCount + 1)
                                    1-  573     	.line	396, "main.c"; 	if(!longPressFlag)
                                    1-  574     	BANKSEL	_longPressFlag
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1-  575     	MOVR	_longPressFlag,W
     0017 0903                      1-  576     	BTRSS	STATUS,2
     0018 3rrr                      1-  577     	LGOTO	_00382_DS_
                                    1-  578     	.line	398, "main.c"; 	longPressFlag = 1;
     0019 2101                      1-  579     	MOVIA	0x01
     001A 00rr                      1-  580     	MOVAR	_longPressFlag
                                    1-  581     	.line	399, "main.c"; 	return 2;
     001B 2102                      1-  582     	MOVIA	0x02
     001C 3rrr                      1-  583     	LGOTO	_00383_DS_
                                    1-  584     ;;unsigned compare: left < lit (0xC8=200), size=2
     001D                           1-  585     _00381_DS_:
                                    1-  586     	.line	405, "main.c"; 	if(keyCount >= 200)
     001D 2100                      1-  587     	MOVIA	0x00
                                    1-  588     	BANKSEL	_keyCount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 04rr                      1-  589     	SUBAR	(_keyCount + 1),W
     0020 0903                      1-  590     	BTRSS	STATUS,2
     0021 3rrr                      1-  591     	LGOTO	_00401_DS_
     0022 21C8                      1-  592     	MOVIA	0xc8
     0023 04rr                      1-  593     	SUBAR	_keyCount,W
     0024                           1-  594     _00401_DS_:
     0024 0803                      1-  595     	BTRSS	STATUS,0
     0025 3rrr                      1-  596     	LGOTO	_00378_DS_
                                    1-  597     	.line	407, "main.c"; 	keyCount = 0;
                                    1-  598     	BANKSEL	_keyCount
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 02rr                      1-  599     	CLRR	_keyCount
     0028 02rr                      1-  600     	CLRR	(_keyCount + 1)
                                    1-  601     	.line	408, "main.c"; 	longPressFlag = 0;
                                    1-  602     	BANKSEL	_longPressFlag
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 02rr                      1-  603     	CLRR	_longPressFlag
                                    1-  604     	.line	409, "main.c"; 	return	0;
     002B 2100                      1-  605     	MOVIA	0x00
     002C 3rrr                      1-  606     	LGOTO	_00383_DS_
                                    1-  607     ;;unsigned compare: left < lit (0x8=8), size=2
     002D                           1-  608     _00378_DS_:
                                    1-  609     	.line	411, "main.c"; 	else if(keyCount >= 8)
     002D 2100                      1-  610     	MOVIA	0x00
                                    1-  611     	BANKSEL	_keyCount
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 04rr                      1-  612     	SUBAR	(_keyCount + 1),W
     0030 0903                      1-  613     	BTRSS	STATUS,2
     0031 3rrr                      1-  614     	LGOTO	_00402_DS_
     0032 2108                      1-  615     	MOVIA	0x08
     0033 04rr                      1-  616     	SUBAR	_keyCount,W
     0034                           1-  617     _00402_DS_:
     0034 0803                      1-  618     	BTRSS	STATUS,0
     0035 3rrr                      1-  619     	LGOTO	_00379_DS_
                                    1-  620     	.line	413, "main.c"; 	keyCount = 0;
                                    1-  621     	BANKSEL	_keyCount
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 02rr                      1-  622     	CLRR	_keyCount
     0038 02rr                      1-  623     	CLRR	(_keyCount + 1)
                                    1-  624     	.line	414, "main.c"; 	return	1;
     0039 2101                      1-  625     	MOVIA	0x01
     003A 3rrr                      1-  626     	LGOTO	_00383_DS_
     003B                           1-  627     _00379_DS_:
                                    1-  628     	.line	416, "main.c"; 	keyCount = 0;
                                    1-  629     	BANKSEL	_keyCount
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 02rr                      1-  630     	CLRR	_keyCount
     003D 02rr                      1-  631     	CLRR	(_keyCount + 1)
     003E                           1-  632     _00382_DS_:
                                    1-  633     	.line	418, "main.c"; 	return 0;
     003E 2100                      1-  634     	MOVIA	0x00
     003F                           1-  635     _00383_DS_:
                                    1-  636     	.line	419, "main.c"; 	}
                                    1-  637     	RETURN	
     003F 0010                      3-   26 m1      ret
                                    1-  638     ; exit point of _keyRead
                                    1-  640     ;***
                                    1-  641     ;  pBlock Stats: dbName = C
                                    1-  642     ;***
                                    1-  643     ;has an exit
                                    1-  644     ;functions called:
                                    1-  645     ;   _pwmStop
                                    1-  646     ;   _pwmStop
                                    1-  647     ;; Starting pCode block
                                    1-  648     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  650     _gotoSleep:
                                    1-  651     ; 2 exit points
                                    1-  652     	.line	373, "main.c"; 	pwmStop();
     0000 2rrr                      1-  653     	LCALL	_pwmStop
                                    1-  654     	.line	374, "main.c"; 	sleepDelay = 0;
                                    1-  655     	BANKSEL	_sleepDelay
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 02rr                      1-  656     	CLRR	_sleepDelay
     0003 02rr                      1-  657     	CLRR	(_sleepDelay + 1)
                                    1-  658     	.line	375, "main.c"; 	BWUCON = 0x09;
     0004 2109                      1-  659     	MOVIA	0x09
     0005 00rr                      1-  660     	MOVAR	_BWUCON
                                    1-  661     	.line	376, "main.c"; 	INTE =  C_INT_TMR1 | C_INT_PABKey;
     0006 210A                      1-  662     	MOVIA	0x0a
     0007 00rr                      1-  663     	MOVAR	_INTE
                                    1-  664     	.line	377, "main.c"; 	PCON =  C_LVR_En;	
     0008 2108                      1-  665     	MOVIA	0x08
     0009 00rr                      1-  666     	MOVAR	_PCON
                                    1-  667     	.line	378, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000A 02rr                      1-  668     	CLRR	_INTF
                                    1-  669     	.line	379, "main.c"; 	CLRWDT();
     000B 0002                      1-  670     	clrwdt
                                    1-  671     	.line	380, "main.c"; 	SLEEP();
     000C 0001                      1-  672     	sleep
                                    1-  673     	.line	381, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2109                      1-  674     	MOVIA	0x09
     000E 00rr                      1-  675     	MOVAR	_INTE
                                    1-  676     	.line	382, "main.c"; 	INTF = 0;
     000F 02rr                      1-  677     	CLRR	_INTF
                                    1-  678     	.line	384, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0010 21A8                      1-  679     	MOVIA	0xa8
     0011 00rr                      1-  680     	MOVAR	_PCON
                                    1-  681     	.line	385, "main.c"; 	}
                                    1-  682     	RETURN	
     0012 0010                      3-   26 m1      ret
                                    1-  683     ; exit point of _gotoSleep
                                    1-  685     ;***
                                    1-  686     ;  pBlock Stats: dbName = C
                                    1-  687     ;***
                                    1-  688     ;has an exit
                                    1-  689     ;functions called:
                                    1-  690     ;   __moduchar
                                    1-  691     ;   __moduchar
                                    1-  692     ;2 compiler assigned registers:
                                    1-  693     ;   STK00
                                    1-  694     ;   r0x101C
                                    1-  695     ;; Starting pCode block
                                    1-  696     .segment "code"; module=main, function=_pwmStop
     0000                           1-  698     _pwmStop:
                                    1-  699     ; 2 exit points
                                    1-  700     	.line	351, "main.c"; 	if(pwmDuty)
                                    1-  701     	BANKSEL	_pwmDuty
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  702     	MOVR	_pwmDuty,W
     0002 0D03                      1-  703     	BTRSC	STATUS,2
     0003 3rrr                      1-  704     	LGOTO	_00361_DS_
                                    1-  705     	.line	353, "main.c"; 	if(count1s%3 == 0)
     0004 2103                      1-  706     	MOVIA	0x03
     0005 00rr                      1-  707     	MOVAR	STK00
                                    1-  708     	BANKSEL	_count1s
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 01rr                      1-  709     	MOVR	_count1s,W
     0008 2rrr                      1-  710     	LCALL	__moduchar
                                    1-  711     	BANKSEL	r0x101C
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1-  712     	MOVAR	r0x101C
     000B 01rr                      1-  713     	MOVR	r0x101C,W
     000C 0903                      1-  714     	BTRSS	STATUS,2
     000D 3rrr                      1-  715     	LGOTO	_00359_DS_
                                    1-  716     	.line	355, "main.c"; 	pwmDuty--;
                                    1-  717     	BANKSEL	_pwmDuty
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 06rr                      1-  718     	DECR	_pwmDuty,F
                                    1-  719     	.line	356, "main.c"; 	PWM5DUTY = pwmDuty;				// 		
     0010 01rr                      1-  720     	MOVR	_pwmDuty,W
     0011 00rr                      1-  721     	SFUN	_PWM5DUTY
                                    1-  722     	.line	357, "main.c"; 	PWM5RH = 0;
     0012 0200                      1-  723     	CLRA	
     0013 00rr                      1-  724     	SFUN	_PWM5RH
     0014                           1-  725     _00359_DS_:
                                    1-  726     	.line	359, "main.c"; 	return;
     0014 3rrr                      1-  727     	LGOTO	_00362_DS_
     0015                           1-  728     _00361_DS_:
                                    1-  729     	.line	361, "main.c"; 	P5CR1 = 0x00;
     0015 0200                      1-  730     	CLRA	
     0016 00rr                      1-  731     	SFUN	_P5CR1
                                    1-  732     	.line	362, "main.c"; 	PWM5DUTY = 0x00;				// 	
     0017 00rr                      1-  733     	SFUN	_PWM5DUTY
                                    1-  734     	.line	363, "main.c"; 	PWM5RH = 0;
     0018 00rr                      1-  735     	SFUN	_PWM5RH
                                    1-  736     	.line	364, "main.c"; 	PORTB &= 0xFE;	//关闭
     0019 1Crr                      1-  737     	BCR	_PORTB,0
                                    1-  738     	.line	365, "main.c"; 	pwmFlag = 0;
                                    1-  739     	BANKSEL	_pwmFlag
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 02rr                      1-  740     	CLRR	_pwmFlag
     001C                           1-  741     _00362_DS_:
                                    1-  742     	.line	366, "main.c"; 	}
                                    1-  743     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  744     ; exit point of _pwmStop
                                    1-  746     ;***
                                    1-  747     ;  pBlock Stats: dbName = C
                                    1-  748     ;***
                                    1-  749     ;has an exit
                                    1-  750     ;functions called:
                                    1-  751     ;   __moduchar
                                    1-  752     ;   __moduchar
                                    1-  753     ;2 compiler assigned registers:
                                    1-  754     ;   STK00
                                    1-  755     ;   r0x101D
                                    1-  756     ;; Starting pCode block
                                    1-  757     .segment "code"; module=main, function=_pwmStart
     0000                           1-  759     _pwmStart:
                                    1-  760     ; 2 exit points
                                    1-  761     ;;unsigned compare: left < lit (0x8=8), size=1
                                    1-  762     	.line	332, "main.c"; 	if(pwmDuty < 8 && count1s%3 == 0)
     0000 2108                      1-  763     	MOVIA	0x08
                                    1-  764     	BANKSEL	_pwmDuty
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 04rr                      1-  765     	SUBAR	_pwmDuty,W
     0003 0C03                      1-  766     	BTRSC	STATUS,0
     0004 3rrr                      1-  767     	LGOTO	_00001_DS_
     0005 2103                      1-  768     	MOVIA	0x03
     0006 00rr                      1-  769     	MOVAR	STK00
                                    1-  770     	BANKSEL	_count1s
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 01rr                      1-  771     	MOVR	_count1s,W
     0009 2rrr                      1-  772     	LCALL	__moduchar
                                    1-  773     	BANKSEL	r0x101D
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1-  774     	MOVAR	r0x101D
     000C 01rr                      1-  775     	MOVR	r0x101D,W
     000D 0903                      1-  776     	BTRSS	STATUS,2
     000E 3rrr                      1-  777     	LGOTO	_00001_DS_
                                    1-  778     	.line	334, "main.c"; 	pwmDuty++;
                                    1-  779     	BANKSEL	_pwmDuty
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 05rr                      1-  780     	INCR	_pwmDuty,F
     0011                           1-  781     _00001_DS_:
                                    1-  782     	.line	337, "main.c"; 	TM34RH = 0x00;
     0011 02rr                      1-  783     	CLRR	_TM34RH
                                    1-  784     	.line	338, "main.c"; 	TMR3 = 0x11;							//频率为110K
     0012 2111                      1-  785     	MOVIA	0x11
     0013 00rr                      1-  786     	SFUN	_TMR3
                                    1-  787     	.line	340, "main.c"; 	PWM5DUTY = pwmDuty;				// 		
                                    1-  788     	BANKSEL	_pwmDuty
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1-  789     	MOVR	_pwmDuty,W
     0016 00rr                      1-  790     	SFUN	_PWM5DUTY
                                    1-  791     	.line	341, "main.c"; 	PWM5RH = 0;
     0017 0200                      1-  792     	CLRA	
     0018 00rr                      1-  793     	SFUN	_PWM5RH
                                    1-  794     	.line	343, "main.c"; 	T3CR1 = 0x03;
     0019 2103                      1-  795     	MOVIA	0x03
     001A 00rr                      1-  796     	SFUN	_T3CR1
                                    1-  797     	.line	344, "main.c"; 	T3CR2 = 0x00;			//Prescaler1 dividing rate = 1:2
     001B 0200                      1-  798     	CLRA	
     001C 00rr                      1-  799     	SFUN	_T3CR2
                                    1-  800     	.line	345, "main.c"; 	P5CR1 = 0x83;
     001D 2183                      1-  801     	MOVIA	0x83
     001E 00rr                      1-  802     	SFUN	_P5CR1
                                    1-  803     	.line	346, "main.c"; 	pwmFlag = 1;
     001F 2101                      1-  804     	MOVIA	0x01
                                    1-  805     	BANKSEL	_pwmFlag
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1-  806     	MOVAR	_pwmFlag
                                    1-  807     	.line	347, "main.c"; 	}
                                    1-  808     	RETURN	
     0022 0010                      3-   26 m1      ret
                                    1-  809     ; exit point of _pwmStart
                                    1-  811     ;***
                                    1-  812     ;  pBlock Stats: dbName = C
                                    1-  813     ;***
                                    1-  814     ;3 compiler assigned registers:
                                    1-  815     ;   r0x101E
                                    1-  816     ;   STK00
                                    1-  817     ;   r0x101F
                                    1-  818     ;; Starting pCode block
                                    1-  819     .segment "code"; module=main, function=_setPWMduty
                                    1-  821     ;local variable name mapping:
     0000                           1-  824     _setPWMduty:
                                    1-  825     ; 0 exit points
                                    1-  826     	.line	318, "main.c"; 	void setPWMduty(char portPin,char duty)
                                    1-  827     	BANKSEL	r0x101E
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  828     	MOVAR	r0x101E
     0002 01rr                      1-  829     	MOVR	STK00,W
                                    1-  830     	BANKSEL	r0x101F
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  831     	MOVAR	r0x101F
                                    1-  832     	.line	320, "main.c"; 	if(ledCount <= duty)
                                    1-  833     	BANKSEL	_ledCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 01rr                      1-  834     	MOVR	_ledCount,W
                                    1-  835     	BANKSEL	r0x101F
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 04rr                      1-  836     	SUBAR	r0x101F,W
     0009 0803                      1-  837     	BTRSS	STATUS,0
     000A 3rrr                      1-  838     	LGOTO	_00343_DS_
                                    1-  839     	.line	321, "main.c"; 	PORTA &= (~portPin);
                                    1-  840     	BANKSEL	r0x101E
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 07rr                      1-  841     	COMR	r0x101E,W
                                    1-  842     	BANKSEL	r0x101F
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 00rr                      1-  843     	MOVAR	r0x101F
     000F 10rr                      1-  844     	ANDAR	_PORTA,F
     0010 3rrr                      1-  845     	LGOTO	_00344_DS_
     0011                           1-  846     _00343_DS_:
                                    1-  847     	.line	323, "main.c"; 	PORTA |= portPin;
                                    1-  848     	BANKSEL	r0x101E
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1-  849     	MOVR	r0x101E,W
     0013 11rr                      1-  850     	IORAR	_PORTA,F
     0014                           1-  851     _00344_DS_:
                                    1-  852     	.line	324, "main.c"; 	if(ledCount == 100)
                                    1-  853     	BANKSEL	_ledCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1-  854     	MOVR	_ledCount,W
     0016 2464                      1-  855     	XORIA	0x64
     0017 0D03                      1-  856     	BTRSC	STATUS,2
                                    1-  857     	.line	325, "main.c"; 	ledCount = 0;
     0018 02rr                      1-  858     	CLRR	_ledCount
                                    1-  859     	.line	326, "main.c"; 	}
                                    1-  860     	RETURN	
     0019 0010                      3-   26 m1      ret
                                    1-  862     ;***
                                    1-  863     ;  pBlock Stats: dbName = C
                                    1-  864     ;***
                                    1-  865     ;has an exit
                                    1-  866     ;; Starting pCode block
                                    1-  867     .segment "code"; module=main, function=_init
     0000                           1-  869     _init:
                                    1-  870     ; 2 exit points
                                    1-  871     	.line	291, "main.c"; 	PORTA = 0xFF;
     0000 21FF                      1-  872     	MOVIA	0xff
     0001 00rr                      1-  873     	MOVAR	_PORTA
                                    1-  874     	.line	292, "main.c"; 	PORTB = 0xFE;
     0002 21FE                      1-  875     	MOVIA	0xfe
     0003 00rr                      1-  876     	MOVAR	_PORTB
                                    1-  877     	.line	293, "main.c"; 	BPHCON = 0xF6;
     0004 21F6                      1-  878     	MOVIA	0xf6
     0005 00rr                      1-  879     	MOVAR	_BPHCON
                                    1-  880     	.line	295, "main.c"; 	IOSTA =  C_PA0_Input;
     0006 2101                      1-  881     	MOVIA	0x01
     0007 000r                      1-  882     	IOST	_IOSTA
                                    1-  883     	.line	296, "main.c"; 	IOSTB =  C_PB2_Input | C_PB5_Input;	
     0008 2124                      1-  884     	MOVIA	0x24
     0009 000r                      1-  885     	IOST	_IOSTB
                                    1-  886     	.line	297, "main.c"; 	APHCON = 0xFE;
     000A 21FE                      1-  887     	MOVIA	0xfe
     000B 000r                      1-  888     	IOST	_APHCON
                                    1-  889     	.line	298, "main.c"; 	BPHCON = 0xDB;
     000C 21DB                      1-  890     	MOVIA	0xdb
     000D 00rr                      1-  891     	MOVAR	_BPHCON
                                    1-  892     	.line	299, "main.c"; 	PORTA = 0xFF;
     000E 21FF                      1-  893     	MOVIA	0xff
     000F 00rr                      1-  894     	MOVAR	_PORTA
                                    1-  895     	.line	300, "main.c"; 	PORTB = 0xFE;                        	// PortB Data Register = 0x00
     0010 21FE                      1-  896     	MOVIA	0xfe
     0011 00rr                      1-  897     	MOVAR	_PORTB
                                    1-  898     	.line	301, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     0012 2188                      1-  899     	MOVIA	0x88
     0013 00rr                      1-  900     	MOVAR	_PCON
                                    1-  901     	.line	303, "main.c"; 	PCON1 = C_TMR0_Dis;
     0014 0200                      1-  902     	CLRA	
     0015 000r                      1-  903     	IOST	_PCON1
                                    1-  904     	.line	305, "main.c"; 	TMR0 = 55;
     0016 2137                      1-  905     	MOVIA	0x37
     0017 00rr                      1-  906     	MOVAR	_TMR0
                                    1-  907     	.line	306, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0018 0200                      1-  908     	CLRA	
     0019 0003                      1-  909     	T0MD	
                                    1-  910     	.line	308, "main.c"; 	PCON1 =  C_TMR0_En;
     001A 2101                      1-  911     	MOVIA	0x01
     001B 000r                      1-  912     	IOST	_PCON1
                                    1-  913     	.line	309, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1;	// Enable Timer0、Timer1、WDT overflow interrupt
     001C 2109                      1-  914     	MOVIA	0x09
     001D 00rr                      1-  915     	MOVAR	_INTE
                                    1-  916     	.line	310, "main.c"; 	INTF = 0;
     001E 02rr                      1-  917     	CLRR	_INTF
                                    1-  918     	.line	311, "main.c"; 	ENI();
     001F 0004                      1-  919     	ENI
                                    1-  920     	.line	313, "main.c"; 	}
                                    1-  921     	RETURN	
     0020 0010                      3-   26 m1      ret
                                    1-  922     ; exit point of _init
                                    1-  924     ;***
                                    1-  925     ;  pBlock Stats: dbName = C
                                    1-  926     ;***
                                    1-  927     ;has an exit
                                    1-  928     ;; Starting pCode block
                                    1-  929     .segment "code"; module=main, function=_Led1OFF
     0000                           1-  931     _Led1OFF:
                                    1-  932     ; 2 exit points
                                    1-  933     	.line	286, "main.c"; 	PORTB |= 0x02;
     0000 18rr                      1-  934     	BSR	_PORTB,1
                                    1-  935     	.line	287, "main.c"; 	}
                                    1-  936     	RETURN	
     0001 0010                      3-   26 m1      ret
                                    1-  937     ; exit point of _Led1OFF
                                    1-  939     ;***
                                    1-  940     ;  pBlock Stats: dbName = C
                                    1-  941     ;***
                                    1-  942     ;has an exit
                                    1-  943     ;; Starting pCode block
                                    1-  944     .segment "code"; module=main, function=_Led1On
     0000                           1-  946     _Led1On:
                                    1-  947     ; 2 exit points
                                    1-  948     	.line	281, "main.c"; 	PORTB &= 0xFD;
     0000 1Crr                      1-  949     	BCR	_PORTB,1
                                    1-  950     	.line	282, "main.c"; 	}
                                    1-  951     	RETURN	
     0001 0010                      3-   26 m1      ret
                                    1-  952     ; exit point of _Led1On
                                    1-  954     ;***
                                    1-  955     ;  pBlock Stats: dbName = C
                                    1-  956     ;***
                                    1-  957     ;has an exit
                                    1-  958     ;; Starting pCode block
                                    1-  959     .segment "code"; module=main, function=_timeCon
     0000                           1-  961     _timeCon:
                                    1-  962     ; 2 exit points
                                    1-  963     	.line	271, "main.c"; 	if(++count1s == 100)
                                    1-  964     	BANKSEL	_count1s
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 05rr                      1-  965     	INCR	_count1s,F
     0002 01rr                      1-  966     	MOVR	_count1s,W
     0003 2464                      1-  967     	XORIA	0x64
     0004 0903                      1-  968     	BTRSS	STATUS,2
     0005 3rrr                      1-  969     	LGOTO	_00325_DS_
                                    1-  970     	.line	273, "main.c"; 	count1s = 0;
     0006 02rr                      1-  971     	CLRR	_count1s
                                    1-  972     	.line	274, "main.c"; 	timeCount++;
                                    1-  973     	BANKSEL	_timeCount
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 05rr                      1-  974     	INCR	_timeCount,F
     0009 0D03                      1-  975     	BTRSC	STATUS,2
     000A 05rr                      1-  976     	INCR	(_timeCount + 1),F
     000B                           1-  977     _00325_DS_:
                                    1-  978     	.line	277, "main.c"; 	}
                                    1-  979     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1-  980     ; exit point of _timeCon
                                    1-  982     ;***
                                    1-  983     ;  pBlock Stats: dbName = C
                                    1-  984     ;***
                                    1-  985     ;has an exit
                                    1-  986     ;functions called:
                                    1-  987     ;   _Led1On
                                    1-  988     ;   _Led1OFF
                                    1-  989     ;   _Led1On
                                    1-  990     ;   _Led1OFF
                                    1-  991     ;; Starting pCode block
                                    1-  992     .segment "code"; module=main, function=_startLed
     0000                           1-  994     _startLed:
                                    1-  995     ; 2 exit points
                                    1-  996     	.line	258, "main.c"; 	if(timeCount == 0)
                                    1-  997     	BANKSEL	_timeCount
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  998     	MOVR	_timeCount,W
     0002 11rr                      1-  999     	IORAR	(_timeCount + 1),W
     0003 0903                      1- 1000     	BTRSS	STATUS,2
     0004 3rrr                      1- 1001     	LGOTO	_00308_DS_
                                    1- 1002     	.line	260, "main.c"; 	Led1On();
     0005 2rrr                      1- 1003     	LCALL	_Led1On
     0006 3rrr                      1- 1004     	LGOTO	_00310_DS_
                                    1- 1005     ;;unsigned compare: left < lit (0x1=1), size=2
     0007                           1- 1006     _00308_DS_:
                                    1- 1007     	.line	262, "main.c"; 	else if(timeCount >= 1)
     0007 2100                      1- 1008     	MOVIA	0x00
                                    1- 1009     	BANKSEL	_timeCount
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 04rr                      1- 1010     	SUBAR	(_timeCount + 1),W
     000A 0903                      1- 1011     	BTRSS	STATUS,2
     000B 3rrr                      1- 1012     	LGOTO	_00318_DS_
     000C 2101                      1- 1013     	MOVIA	0x01
     000D 04rr                      1- 1014     	SUBAR	_timeCount,W
     000E                           1- 1015     _00318_DS_:
     000E 0803                      1- 1016     	BTRSS	STATUS,0
     000F 3rrr                      1- 1017     	LGOTO	_00310_DS_
                                    1- 1018     	.line	264, "main.c"; 	Led1OFF();
     0010 2rrr                      1- 1019     	LCALL	_Led1OFF
                                    1- 1020     	.line	265, "main.c"; 	startFlag = 0;
                                    1- 1021     	BANKSEL	_startFlag
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 02rr                      1- 1022     	CLRR	_startFlag
     0013                           1- 1023     _00310_DS_:
                                    1- 1024     	.line	267, "main.c"; 	}
                                    1- 1025     	RETURN	
     0013 0010                      3-   26 m1      ret
                                    1- 1026     ; exit point of _startLed
                                    1- 1028     ;***
                                    1- 1029     ;  pBlock Stats: dbName = C
                                    1- 1030     ;***
                                    1- 1031     ;1 compiler assigned register :
                                    1- 1032     ;   r0x1020
                                    1- 1033     ;; Starting pCode block
                                    1- 1034     .segment "code"; module=main, function=_startRGBLed
     0000                           1- 1036     _startRGBLed:
                                    1- 1037     ; 0 exit points
                                    1- 1038     	.line	234, "main.c"; 	ledFlag = 1;
     0000 2101                      1- 1039     	MOVIA	0x01
                                    1- 1040     	BANKSEL	_ledFlag
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1041     	MOVAR	_ledFlag
                                    1- 1042     	.line	235, "main.c"; 	if(BDUTY == 100 && RDUTY == 100)
                                    1- 1043     	BANKSEL	_BDUTY
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1- 1044     	MOVR	_BDUTY,W
     0005 2464                      1- 1045     	XORIA	0x64
     0006 0903                      1- 1046     	BTRSS	STATUS,2
     0007 3rrr                      1- 1047     	LGOTO	_00002_DS_
                                    1- 1048     	BANKSEL	_RDUTY
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 01rr                      1- 1049     	MOVR	_RDUTY,W
     000A 2464                      1- 1050     	XORIA	0x64
     000B 0903                      1- 1051     	BTRSS	STATUS,2
     000C 3rrr                      1- 1052     	LGOTO	_00002_DS_
                                    1- 1053     	.line	236, "main.c"; 	GDUTY--;		//灭绿灯
                                    1- 1054     	BANKSEL	_GDUTY
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 06rr                      1- 1055     	DECR	_GDUTY,F
     000F                           1- 1056     _00002_DS_:
                                    1- 1057     	.line	237, "main.c"; 	if(GDUTY == 0 && RDUTY == 100)
                                    1- 1058     	BANKSEL	_GDUTY
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 1059     	MOVR	_GDUTY,W
     0011 0903                      1- 1060     	BTRSS	STATUS,2
     0012 3rrr                      1- 1061     	LGOTO	_00003_DS_
                                    1- 1062     	BANKSEL	_RDUTY
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 01rr                      1- 1063     	MOVR	_RDUTY,W
     0015 2464                      1- 1064     	XORIA	0x64
     0016 0903                      1- 1065     	BTRSS	STATUS,2
     0017 3rrr                      1- 1066     	LGOTO	_00003_DS_
                                    1- 1067     	.line	239, "main.c"; 	BDUTY--;		//灭蓝灯
                                    1- 1068     	BANKSEL	_BDUTY
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 06rr                      1- 1069     	DECR	_BDUTY,F
     001A                           1- 1070     _00003_DS_:
                                    1- 1071     	.line	241, "main.c"; 	if(BDUTY == 0 && RDUTY == 100)
                                    1- 1072     	BANKSEL	_BDUTY
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 01rr                      1- 1073     	MOVR	_BDUTY,W
     001C 0903                      1- 1074     	BTRSS	STATUS,2
     001D 3rrr                      1- 1075     	LGOTO	_00004_DS_
                                    1- 1076     	BANKSEL	_RDUTY
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1- 1077     	MOVR	_RDUTY,W
     0020 2464                      1- 1078     	XORIA	0x64
     0021 0903                      1- 1079     	BTRSS	STATUS,2
     0022 3rrr                      1- 1080     	LGOTO	_00004_DS_
                                    1- 1081     	.line	243, "main.c"; 	GDUTY++;
                                    1- 1082     	BANKSEL	_GDUTY
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 05rr                      1- 1083     	INCR	_GDUTY,F
     0025                           1- 1084     _00004_DS_:
                                    1- 1085     	.line	245, "main.c"; 	if(GDUTY == 100 && BDUTY == 0)
                                    1- 1086     	BANKSEL	r0x1020
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 02rr                      1- 1087     	CLRR	r0x1020
                                    1- 1088     	BANKSEL	_GDUTY
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 01rr                      1- 1089     	MOVR	_GDUTY,W
     0029 2464                      1- 1090     	XORIA	0x64
     002A 0903                      1- 1091     	BTRSS	STATUS,2
     002B 3rrr                      1- 1092     	LGOTO	_00005_DS_
                                    1- 1093     	BANKSEL	r0x1020
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 05rr                      1- 1094     	INCR	r0x1020,F
     002E                           1- 1095     _00005_DS_:
                                    1- 1096     	BANKSEL	r0x1020
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 01rr                      1- 1097     	MOVR	r0x1020,W
     0030 0D03                      1- 1098     	BTRSC	STATUS,2
     0031 3rrr                      1- 1099     	LGOTO	_00006_DS_
                                    1- 1100     	BANKSEL	_BDUTY
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1- 1101     	MOVR	_BDUTY,W
     0034 0903                      1- 1102     	BTRSS	STATUS,2
     0035 3rrr                      1- 1103     	LGOTO	_00006_DS_
                                    1- 1104     	.line	247, "main.c"; 	RDUTY--;		
                                    1- 1105     	BANKSEL	_RDUTY
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 06rr                      1- 1106     	DECR	_RDUTY,F
     0038                           1- 1107     _00006_DS_:
                                    1- 1108     	.line	249, "main.c"; 	if(RDUTY == 0 && GDUTY == 100)
                                    1- 1109     	BANKSEL	_RDUTY
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 01rr                      1- 1110     	MOVR	_RDUTY,W
     003A 0903                      1- 1111     	BTRSS	STATUS,2
     003B 3rrr                      1- 1112     	LGOTO	_00007_DS_
                                    1- 1113     	BANKSEL	r0x1020
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 01rr                      1- 1114     	MOVR	r0x1020,W
     003E 0D03                      1- 1115     	BTRSC	STATUS,2
     003F 3rrr                      1- 1116     	LGOTO	_00007_DS_
                                    1- 1117     	.line	250, "main.c"; 	BDUTY++;
                                    1- 1118     	BANKSEL	_BDUTY
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 05rr                      1- 1119     	INCR	_BDUTY,F
     0042                           1- 1120     _00007_DS_:
                                    1- 1121     	.line	251, "main.c"; 	if(BDUTY == 100 && GDUTY == 100)
                                    1- 1122     	BANKSEL	_BDUTY
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 01rr                      1- 1123     	MOVR	_BDUTY,W
     0044 2464                      1- 1124     	XORIA	0x64
     0045 0903                      1- 1125     	BTRSS	STATUS,2
     0046 3rrr                      1- 1126     	LGOTO	_00008_DS_
                                    1- 1127     	BANKSEL	r0x1020
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 01rr                      1- 1128     	MOVR	r0x1020,W
     0049 0D03                      1- 1129     	BTRSC	STATUS,2
     004A 3rrr                      1- 1130     	LGOTO	_00008_DS_
                                    1- 1131     	.line	252, "main.c"; 	RDUTY++;
                                    1- 1132     	BANKSEL	_RDUTY
     004B rrrr                      3-   71 m1      .banksel ram_address
     004C 05rr                      1- 1133     	INCR	_RDUTY,F
     004D                           1- 1134     _00008_DS_:
                                    1- 1135     	.line	254, "main.c"; 	}
                                    1- 1136     	RETURN	
     004D 0010                      3-   26 m1      ret
                                    1- 1138     ;***
                                    1- 1139     ;  pBlock Stats: dbName = C
                                    1- 1140     ;***
                                    1- 1141     ;has an exit
                                    1- 1142     ;; Starting pCode block
                                    1- 1143     .segment "code"; module=main, function=_stopRGBLed
     0000                           1- 1145     _stopRGBLed:
                                    1- 1146     ; 2 exit points
                                    1- 1147     	.line	227, "main.c"; 	ledFlag = 0;
                                    1- 1148     	BANKSEL	_ledFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1149     	CLRR	_ledFlag
                                    1- 1150     	.line	228, "main.c"; 	PORTA |= 0x1C;
     0002 211C                      1- 1151     	MOVIA	0x1c
     0003 11rr                      1- 1152     	IORAR	_PORTA,F
                                    1- 1153     	.line	229, "main.c"; 	}
                                    1- 1154     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1- 1155     ; exit point of _stopRGBLed
                                    1- 1157     ;***
                                    1- 1158     ;  pBlock Stats: dbName = C
                                    1- 1159     ;***
                                    1- 1160     ;functions called:
                                    1- 1161     ;   _stopRGBLed
                                    1- 1162     ;   __moduchar
                                    1- 1163     ;   _startRGBLed
                                    1- 1164     ;   _stopRGBLed
                                    1- 1165     ;   __moduchar
                                    1- 1166     ;   _startRGBLed
                                    1- 1167     ;2 compiler assigned registers:
                                    1- 1168     ;   STK00
                                    1- 1169     ;   r0x1021
                                    1- 1170     ;; Starting pCode block
                                    1- 1171     .segment "code"; module=main, function=_ledCon
     0000                           1- 1173     _ledCon:
                                    1- 1174     ; 0 exit points
                                    1- 1175     	.line	191, "main.c"; 	if(ledOffCount > 0)
                                    1- 1176     	BANKSEL	_ledOffCount
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1177     	MOVR	_ledOffCount,W
     0002 0D03                      1- 1178     	BTRSC	STATUS,2
     0003 3rrr                      1- 1179     	LGOTO	_00215_DS_
                                    1- 1180     	.line	193, "main.c"; 	ledOffCount--;
     0004 06rr                      1- 1181     	DECR	_ledOffCount,F
                                    1- 1182     	.line	194, "main.c"; 	ledFlag = 0;
                                    1- 1183     	BANKSEL	_ledFlag
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1- 1184     	CLRR	_ledFlag
                                    1- 1185     	.line	195, "main.c"; 	PORTA |= 0x1C;
     0007 211C                      1- 1186     	MOVIA	0x1c
     0008 11rr                      1- 1187     	IORAR	_PORTA,F
                                    1- 1188     	.line	196, "main.c"; 	return;
     0009 3rrr                      1- 1189     	LGOTO	_00223_DS_
                                    1- 1190     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1191     ;;unsigned compare: left >= lit (0x4=4), size=1
     000A                           1- 1192     _00215_DS_:
                                    1- 1193     	.line	199, "main.c"; 	switch(ledStep)
     000A 2104                      1- 1194     	MOVIA	0x04
                                    1- 1195     	BANKSEL	_ledStep
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1- 1196     	SUBAR	_ledStep,W
     000D 0C03                      1- 1197     	BTRSC	STATUS,0
     000E 3rrr                      1- 1198     	LGOTO	_00223_DS_
     000F 21rr                      1- 1199     	MOVIA	((_00235_DS_ >> 8) & 0xff)
     0010 008A                      1- 1200     	MOVAR	PCHBUF
     0011 01rr                      1- 1201     	MOVR	_ledStep,W
     0012 25rr                      1- 1202     	ADDIA	_00235_DS_
     0013 0C03                      1- 1203     	BTRSC	STATUS,0
     0014 058A                      1- 1204     	INCR	PCHBUF,F
     0015 0082                      1- 1205     	MOVAR	PCL
     0016                           1- 1206     _00235_DS_:
     0016 3rrr                      1- 1207     	LGOTO	_00216_DS_
     0017 3rrr                      1- 1208     	LGOTO	_00217_DS_
     0018 3rrr                      1- 1209     	LGOTO	_00218_DS_
     0019 3rrr                      1- 1210     	LGOTO	_00219_DS_
     001A                           1- 1211     _00216_DS_:
                                    1- 1212     	.line	202, "main.c"; 	stopRGBLed();
     001A 2rrr                      1- 1213     	LCALL	_stopRGBLed
                                    1- 1214     	.line	203, "main.c"; 	break;
     001B 3rrr                      1- 1215     	LGOTO	_00223_DS_
     001C                           1- 1216     _00217_DS_:
                                    1- 1217     	.line	206, "main.c"; 	ledStep = 3;
     001C 2103                      1- 1218     	MOVIA	0x03
                                    1- 1219     	BANKSEL	_ledStep
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1220     	MOVAR	_ledStep
                                    1- 1221     	.line	207, "main.c"; 	RDUTY = 100;
     001F 2164                      1- 1222     	MOVIA	0x64
                                    1- 1223     	BANKSEL	_RDUTY
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1224     	MOVAR	_RDUTY
                                    1- 1225     	.line	208, "main.c"; 	GDUTY = 100;
                                    1- 1226     	BANKSEL	_GDUTY
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 00rr                      1- 1227     	MOVAR	_GDUTY
                                    1- 1228     	.line	209, "main.c"; 	BDUTY = 100;
                                    1- 1229     	BANKSEL	_BDUTY
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 00rr                      1- 1230     	MOVAR	_BDUTY
                                    1- 1231     	.line	210, "main.c"; 	break;
     0026 3rrr                      1- 1232     	LGOTO	_00223_DS_
     0027                           1- 1233     _00218_DS_:
                                    1- 1234     	.line	213, "main.c"; 	ledFlag = 1;
     0027 2101                      1- 1235     	MOVIA	0x01
                                    1- 1236     	BANKSEL	_ledFlag
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 00rr                      1- 1237     	MOVAR	_ledFlag
                                    1- 1238     	.line	214, "main.c"; 	break;
     002A 3rrr                      1- 1239     	LGOTO	_00223_DS_
     002B                           1- 1240     _00219_DS_:
                                    1- 1241     	.line	217, "main.c"; 	if(count1s % 10 == 0)
     002B 210A                      1- 1242     	MOVIA	0x0a
     002C 00rr                      1- 1243     	MOVAR	STK00
                                    1- 1244     	BANKSEL	_count1s
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 01rr                      1- 1245     	MOVR	_count1s,W
     002F 2rrr                      1- 1246     	LCALL	__moduchar
                                    1- 1247     	BANKSEL	r0x1021
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 00rr                      1- 1248     	MOVAR	r0x1021
     0032 01rr                      1- 1249     	MOVR	r0x1021,W
     0033 0D03                      1- 1250     	BTRSC	STATUS,2
                                    1- 1251     	.line	218, "main.c"; 	startRGBLed();				//Led灯光控制
     0034 2rrr                      1- 1252     	LCALL	_startRGBLed
     0035                           1- 1253     _00223_DS_:
                                    1- 1254     	.line	222, "main.c"; 	}
                                    1- 1255     	RETURN	
     0035 0010                      3-   26 m1      ret
                                    1- 1257     ;***
                                    1- 1258     ;  pBlock Stats: dbName = C
                                    1- 1259     ;***
                                    1- 1260     ;has an exit
                                    1- 1261     ;functions called:
                                    1- 1262     ;   _pwmStop
                                    1- 1263     ;   _stopRGBLed
                                    1- 1264     ;   _gotoSleep
                                    1- 1265     ;   _pwmStop
                                    1- 1266     ;   _stopRGBLed
                                    1- 1267     ;   _gotoSleep
                                    1- 1268     ;2 compiler assigned registers:
                                    1- 1269     ;   r0x1022
                                    1- 1270     ;   r0x1023
                                    1- 1271     ;; Starting pCode block
                                    1- 1272     .segment "code"; module=main, function=_pwmCon
     0000                           1- 1274     _pwmCon:
                                    1- 1275     ; 2 exit points
                                    1- 1276     	.line	177, "main.c"; 	if(timeCount - timeSave > 7200)
                                    1- 1277     	BANKSEL	_timeSave
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1278     	MOVR	_timeSave,W
                                    1- 1279     	BANKSEL	_timeCount
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 04rr                      1- 1280     	SUBAR	_timeCount,W
                                    1- 1281     	BANKSEL	r0x1022
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 00rr                      1- 1282     	MOVAR	r0x1022
                                    1- 1283     	BANKSEL	_timeSave
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 01rr                      1- 1284     	MOVR	(_timeSave + 1),W
     0008 0803                      1- 1285     	BTRSS	STATUS,0
     0009 05rr                      1- 1286     	INCR	(_timeSave + 1),W
                                    1- 1287     	BANKSEL	_timeCount
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 04rr                      1- 1288     	SUBAR	(_timeCount + 1),W
                                    1- 1289     	BANKSEL	r0x1023
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1- 1290     	MOVAR	r0x1023
                                    1- 1291     ;;swapping arguments (AOP_TYPEs 1/2)
                                    1- 1292     ;;unsigned compare: left >= lit (0x1C21=7201), size=2
     000E 211C                      1- 1293     	MOVIA	0x1c
     000F 04rr                      1- 1294     	SUBAR	r0x1023,W
     0010 0903                      1- 1295     	BTRSS	STATUS,2
     0011 3rrr                      1- 1296     	LGOTO	_00209_DS_
     0012 2121                      1- 1297     	MOVIA	0x21
                                    1- 1298     	BANKSEL	r0x1022
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 04rr                      1- 1299     	SUBAR	r0x1022,W
     0015                           1- 1300     _00209_DS_:
     0015 0803                      1- 1301     	BTRSS	STATUS,0
     0016 3rrr                      1- 1302     	LGOTO	_00204_DS_
                                    1- 1303     	.line	179, "main.c"; 	pwmStop();
     0017 2rrr                      1- 1304     	LCALL	_pwmStop
                                    1- 1305     	.line	180, "main.c"; 	stopRGBLed();
     0018 2rrr                      1- 1306     	LCALL	_stopRGBLed
                                    1- 1307     	.line	181, "main.c"; 	PORTB |= 0x01;
     0019 18rr                      1- 1308     	BSR	_PORTB,0
                                    1- 1309     	.line	182, "main.c"; 	gotoSleep();
     001A 2rrr                      1- 1310     	LCALL	_gotoSleep
     001B                           1- 1311     _00204_DS_:
                                    1- 1312     	.line	185, "main.c"; 	}
                                    1- 1313     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1- 1314     ; exit point of _pwmCon
                                    1- 1316     ;***
                                    1- 1317     ;  pBlock Stats: dbName = C
                                    1- 1318     ;***
                                    1- 1319     ;has an exit
                                    1- 1320     ;functions called:
                                    1- 1321     ;   _pwmStart
                                    1- 1322     ;   _Led1On
                                    1- 1323     ;   __moduint
                                    1- 1324     ;   _pwmStart
                                    1- 1325     ;   _pwmStop
                                    1- 1326     ;   _pwmStop
                                    1- 1327     ;   _Led1OFF
                                    1- 1328     ;   _keyRead
                                    1- 1329     ;   _pwmStart
                                    1- 1330     ;   _Led1On
                                    1- 1331     ;   __moduint
                                    1- 1332     ;   _pwmStart
                                    1- 1333     ;   _pwmStop
                                    1- 1334     ;   _pwmStop
                                    1- 1335     ;   _Led1OFF
                                    1- 1336     ;   _keyRead
                                    1- 1337     ;5 compiler assigned registers:
                                    1- 1338     ;   r0x1024
                                    1- 1339     ;   r0x1025
                                    1- 1340     ;   STK02
                                    1- 1341     ;   STK01
                                    1- 1342     ;   STK00
                                    1- 1343     ;; Starting pCode block
                                    1- 1344     .segment "code"; module=main, function=_keyCon
                                    1- 1346     ;local variable name mapping:
     0000                           1- 1348     _keyCon:
                                    1- 1349     ; 2 exit points
                                    1- 1350     	.line	116, "main.c"; 	if(0x20&~PORTB)
     0000 01rr                      1- 1351     	MOVR	_PORTB,W
                                    1- 1352     	BANKSEL	r0x1024
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1353     	MOVAR	r0x1024
                                    1- 1354     	BANKSEL	r0x1025
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 02rr                      1- 1355     	CLRR	r0x1025
                                    1- 1356     	BANKSEL	r0x1024
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 07rr                      1- 1357     	COMR	r0x1024,W
     0007 00rr                      1- 1358     	MOVAR	r0x1024
                                    1- 1359     	BANKSEL	r0x1025
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 07rr                      1- 1360     	COMR	r0x1025,W
     000A 00rr                      1- 1361     	MOVAR	r0x1025
                                    1- 1362     	BANKSEL	r0x1024
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 0Arr                      1- 1363     	BTRSS	r0x1024,5
     000D 3rrr                      1- 1364     	LGOTO	_00142_DS_
                                    1- 1365     	.line	118, "main.c"; 	if(!pwmFlag)
                                    1- 1366     	BANKSEL	_pwmFlag
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 01rr                      1- 1367     	MOVR	_pwmFlag,W
     0010 0D03                      1- 1368     	BTRSC	STATUS,2
                                    1- 1369     	.line	119, "main.c"; 	pwmStart();
     0011 2rrr                      1- 1370     	LCALL	_pwmStart
                                    1- 1371     	.line	120, "main.c"; 	Led1On();
     0012 2rrr                      1- 1372     	LCALL	_Led1On
     0013 3rrr                      1- 1373     	LGOTO	_00143_DS_
     0014                           1- 1374     _00142_DS_:
                                    1- 1375     	.line	123, "main.c"; 	else if(0x01&~PORTA)
     0014 01rr                      1- 1376     	MOVR	_PORTA,W
                                    1- 1377     	BANKSEL	r0x1024
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 00rr                      1- 1378     	MOVAR	r0x1024
                                    1- 1379     	BANKSEL	r0x1025
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 02rr                      1- 1380     	CLRR	r0x1025
                                    1- 1381     	BANKSEL	r0x1024
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 07rr                      1- 1382     	COMR	r0x1024,W
     001B 00rr                      1- 1383     	MOVAR	r0x1024
                                    1- 1384     	BANKSEL	r0x1025
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 07rr                      1- 1385     	COMR	r0x1025,W
     001E 00rr                      1- 1386     	MOVAR	r0x1025
                                    1- 1387     	BANKSEL	r0x1024
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 08rr                      1- 1388     	BTRSS	r0x1024,0
     0021 3rrr                      1- 1389     	LGOTO	_00139_DS_
                                    1- 1390     	.line	126, "main.c"; 	if(step2Count % 100 == 0)
     0022 2164                      1- 1391     	MOVIA	0x64
     0023 00rr                      1- 1392     	MOVAR	STK02
     0024 2100                      1- 1393     	MOVIA	0x00
     0025 00rr                      1- 1394     	MOVAR	STK01
                                    1- 1395     	BANKSEL	_step2Count
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1396     	MOVR	_step2Count,W
     0028 00rr                      1- 1397     	MOVAR	STK00
     0029 01rr                      1- 1398     	MOVR	(_step2Count + 1),W
     002A 2rrr                      1- 1399     	LCALL	__moduint
                                    1- 1400     	BANKSEL	r0x1025
     002B rrrr                      3-   71 m1      .banksel ram_address
     002C 00rr                      1- 1401     	MOVAR	r0x1025
     002D 01rr                      1- 1402     	MOVR	STK00,W
                                    1- 1403     	BANKSEL	r0x1024
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 00rr                      1- 1404     	MOVAR	r0x1024
                                    1- 1405     	BANKSEL	r0x1025
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 11rr                      1- 1406     	IORAR	r0x1025,W
     0032 0903                      1- 1407     	BTRSS	STATUS,2
     0033 3rrr                      1- 1408     	LGOTO	_00130_DS_
                                    1- 1409     	.line	128, "main.c"; 	reversebit(PORTB,1);
     0034 2102                      1- 1410     	MOVIA	0x02
     0035 12rr                      1- 1411     	XORAR	_PORTB,F
                                    1- 1412     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1413     ;;unsigned compare: left >= lit (0x321=801), size=2
     0036                           1- 1414     _00130_DS_:
                                    1- 1415     	.line	130, "main.c"; 	if(step2Count <= 800)
     0036 2103                      1- 1416     	MOVIA	0x03
                                    1- 1417     	BANKSEL	_step2Count
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 04rr                      1- 1418     	SUBAR	(_step2Count + 1),W
     0039 0903                      1- 1419     	BTRSS	STATUS,2
     003A 3rrr                      1- 1420     	LGOTO	_00195_DS_
     003B 2121                      1- 1421     	MOVIA	0x21
     003C 04rr                      1- 1422     	SUBAR	_step2Count,W
     003D                           1- 1423     _00195_DS_:
     003D 0C03                      1- 1424     	BTRSC	STATUS,0
     003E 3rrr                      1- 1425     	LGOTO	_00134_DS_
                                    1- 1426     	.line	132, "main.c"; 	pwmStart();	
     003F 2rrr                      1- 1427     	LCALL	_pwmStart
     0040 3rrr                      1- 1428     	LGOTO	_00135_DS_
                                    1- 1429     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1430     ;;unsigned compare: left >= lit (0x641=1601), size=2
     0041                           1- 1431     _00134_DS_:
                                    1- 1432     	.line	134, "main.c"; 	else if(step2Count <= 1600)
     0041 2106                      1- 1433     	MOVIA	0x06
                                    1- 1434     	BANKSEL	_step2Count
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 04rr                      1- 1435     	SUBAR	(_step2Count + 1),W
     0044 0903                      1- 1436     	BTRSS	STATUS,2
     0045 3rrr                      1- 1437     	LGOTO	_00196_DS_
     0046 2141                      1- 1438     	MOVIA	0x41
     0047 04rr                      1- 1439     	SUBAR	_step2Count,W
     0048                           1- 1440     _00196_DS_:
     0048 0C03                      1- 1441     	BTRSC	STATUS,0
     0049 3rrr                      1- 1442     	LGOTO	_00135_DS_
                                    1- 1443     	.line	135, "main.c"; 	pwmStop();
     004A 2rrr                      1- 1444     	LCALL	_pwmStop
     004B                           1- 1445     _00135_DS_:
                                    1- 1446     	.line	136, "main.c"; 	if(++step2Count >= 1600)
                                    1- 1447     	BANKSEL	_step2Count
     004B rrrr                      3-   71 m1      .banksel ram_address
     004C 05rr                      1- 1448     	INCR	_step2Count,F
     004D 0D03                      1- 1449     	BTRSC	STATUS,2
     004E 05rr                      1- 1450     	INCR	(_step2Count + 1),F
                                    1- 1451     ;;unsigned compare: left < lit (0x640=1600), size=2
     004F 2106                      1- 1452     	MOVIA	0x06
     0050 04rr                      1- 1453     	SUBAR	(_step2Count + 1),W
     0051 0903                      1- 1454     	BTRSS	STATUS,2
     0052 3rrr                      1- 1455     	LGOTO	_00197_DS_
     0053 2140                      1- 1456     	MOVIA	0x40
     0054 04rr                      1- 1457     	SUBAR	_step2Count,W
     0055                           1- 1458     _00197_DS_:
     0055 0803                      1- 1459     	BTRSS	STATUS,0
     0056 3rrr                      1- 1460     	LGOTO	_00143_DS_
                                    1- 1461     	.line	138, "main.c"; 	step2Count = 0;
                                    1- 1462     	BANKSEL	_step2Count
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 02rr                      1- 1463     	CLRR	_step2Count
     0059 02rr                      1- 1464     	CLRR	(_step2Count + 1)
     005A 3rrr                      1- 1465     	LGOTO	_00143_DS_
     005B                           1- 1466     _00139_DS_:
                                    1- 1467     	.line	143, "main.c"; 	pwmStop();
     005B 2rrr                      1- 1468     	LCALL	_pwmStop
                                    1- 1469     	.line	144, "main.c"; 	Led1OFF();
     005C 2rrr                      1- 1470     	LCALL	_Led1OFF
     005D                           1- 1471     _00143_DS_:
                                    1- 1472     	.line	148, "main.c"; 	u8t keyClick = keyRead(0x04&(~PORTB));
     005D 07rr                      1- 1473     	COMR	_PORTB,W
                                    1- 1474     	BANKSEL	r0x1024
     005E rrrr                      3-   71 m1      .banksel ram_address
     005F 00rr                      1- 1475     	MOVAR	r0x1024
     0060 2104                      1- 1476     	MOVIA	0x04
     0061 10rr                      1- 1477     	ANDAR	r0x1024,F
     0062 01rr                      1- 1478     	MOVR	r0x1024,W
     0063 2rrr                      1- 1479     	LCALL	_keyRead
                                    1- 1480     	BANKSEL	r0x1024
     0064 rrrr                      3-   71 m1      .banksel ram_address
     0065 00rr                      1- 1481     	MOVAR	r0x1024
                                    1- 1482     	.line	149, "main.c"; 	if(keyClick == 1)
     0066 2401                      1- 1483     	XORIA	0x01
     0067 0903                      1- 1484     	BTRSS	STATUS,2
     0068 3rrr                      1- 1485     	LGOTO	_00155_DS_
                                    1- 1486     	.line	152, "main.c"; 	if(ledStep == 0)
                                    1- 1487     	BANKSEL	_ledStep
     0069 rrrr                      3-   71 m1      .banksel ram_address
     006A 01rr                      1- 1488     	MOVR	_ledStep,W
     006B 0903                      1- 1489     	BTRSS	STATUS,2
     006C 3rrr                      1- 1490     	LGOTO	_00145_DS_
                                    1- 1491     	.line	153, "main.c"; 	ledStep = 1;
     006D 2101                      1- 1492     	MOVIA	0x01
     006E 00rr                      1- 1493     	MOVAR	_ledStep
     006F 3rrr                      1- 1494     	LGOTO	_00157_DS_
     0070                           1- 1495     _00145_DS_:
                                    1- 1496     	.line	155, "main.c"; 	ledStep = 0;
                                    1- 1497     	BANKSEL	_ledStep
     0070 rrrr                      3-   71 m1      .banksel ram_address
     0071 02rr                      1- 1498     	CLRR	_ledStep
     0072 3rrr                      1- 1499     	LGOTO	_00157_DS_
     0073                           1- 1500     _00155_DS_:
                                    1- 1501     	.line	157, "main.c"; 	else if(keyClick == 2)
                                    1- 1502     	BANKSEL	r0x1024
     0073 rrrr                      3-   71 m1      .banksel ram_address
     0074 01rr                      1- 1503     	MOVR	r0x1024,W
     0075 2402                      1- 1504     	XORIA	0x02
     0076 0903                      1- 1505     	BTRSS	STATUS,2
     0077 3rrr                      1- 1506     	LGOTO	_00157_DS_
                                    1- 1507     	.line	159, "main.c"; 	ledOffCount = 30;
     0078 211E                      1- 1508     	MOVIA	0x1e
                                    1- 1509     	BANKSEL	_ledOffCount
     0079 rrrr                      3-   71 m1      .banksel ram_address
     007A 00rr                      1- 1510     	MOVAR	_ledOffCount
                                    1- 1511     	.line	161, "main.c"; 	if(ledStep == 2)
                                    1- 1512     	BANKSEL	_ledStep
     007B rrrr                      3-   71 m1      .banksel ram_address
     007C 01rr                      1- 1513     	MOVR	_ledStep,W
     007D 2402                      1- 1514     	XORIA	0x02
     007E 0903                      1- 1515     	BTRSS	STATUS,2
     007F 3rrr                      1- 1516     	LGOTO	_00150_DS_
                                    1- 1517     	.line	163, "main.c"; 	ledStep = 3;
     0080 2103                      1- 1518     	MOVIA	0x03
     0081 00rr                      1- 1519     	MOVAR	_ledStep
     0082 3rrr                      1- 1520     	LGOTO	_00157_DS_
     0083                           1- 1521     _00150_DS_:
                                    1- 1522     	.line	165, "main.c"; 	else if(ledStep == 3)
                                    1- 1523     	BANKSEL	_ledStep
     0083 rrrr                      3-   71 m1      .banksel ram_address
     0084 01rr                      1- 1524     	MOVR	_ledStep,W
     0085 2403                      1- 1525     	XORIA	0x03
     0086 0903                      1- 1526     	BTRSS	STATUS,2
     0087 3rrr                      1- 1527     	LGOTO	_00157_DS_
                                    1- 1528     	.line	167, "main.c"; 	ledStep = 2;
     0088 2102                      1- 1529     	MOVIA	0x02
     0089 00rr                      1- 1530     	MOVAR	_ledStep
     008A                           1- 1531     _00157_DS_:
                                    1- 1532     	.line	172, "main.c"; 	}
                                    1- 1533     	RETURN	
     008A 0010                      3-   26 m1      ret
                                    1- 1534     ; exit point of _keyCon
                                    1- 1537     ;	code size estimation:
                                    1- 1538     ;	  519+  119 =   638 instructions ( 1514 byte)
                                    1- 1540     	end
                                    1- 1540     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__moduchar              Label    00000000
__moduint               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00800543
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000011
_00002_DS_              Label    0000000F
_00003_DS_              Label    0000001A
_00004_DS_              Label    00000025
_00005_DS_              Label    0000002E
_00006_DS_              Label    00000038
_00007_DS_              Label    00000042
_00008_DS_              Label    0000004D
_00106_DS_              Label    0000002B
_00110_DS_              Label    00000034
_00112_DS_              Label    00000038
_00120_DS_              Label    00000011
_00122_DS_              Label    00000004
_00130_DS_              Label    00000036
_00134_DS_              Label    00000041
_00135_DS_              Label    0000004B
_00139_DS_              Label    0000005B
_00142_DS_              Label    00000014
_00143_DS_              Label    0000005D
_00145_DS_              Label    00000070
_00150_DS_              Label    00000083
_00155_DS_              Label    00000073
_00157_DS_              Label    0000008A
_00195_DS_              Label    0000003D
_00196_DS_              Label    00000048
_00197_DS_              Label    00000055
_00204_DS_              Label    0000001B
_00209_DS_              Label    00000015
_00215_DS_              Label    0000000A
_00216_DS_              Label    0000001A
_00217_DS_              Label    0000001C
_00218_DS_              Label    00000027
_00219_DS_              Label    0000002B
_00223_DS_              Label    00000035
_00235_DS_              Label    00000016
_00308_DS_              Label    00000007
_00310_DS_              Label    00000013
_00318_DS_              Label    0000000E
_00325_DS_              Label    0000000B
_00343_DS_              Label    00000011
_00344_DS_              Label    00000014
_00359_DS_              Label    00000014
_00361_DS_              Label    00000015
_00362_DS_              Label    0000001C
_00378_DS_              Label    0000002D
_00379_DS_              Label    0000003B
_00381_DS_              Label    0000001D
_00382_DS_              Label    0000003E
_00383_DS_              Label    0000003F
_00400_DS_              Label    0000000F
_00401_DS_              Label    00000024
_00402_DS_              Label    00000034
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BDUTY                  Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_CMPCR                  Label    00000000
_count1s                Label    00000000
_delay                  Label    00000000
_FSR                    Label    00000000
_GDUTY                  Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_Led1OFF                Label    00000000
_Led1On                 Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_ledFlag                Label    00000000
_ledOffCount            Label    00000000
_ledStep                Label    00000000
_longPressFlag          Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_P2CR1                  Label    00000000
_P4CR1                  Label    00000000
_P5CR1                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_PWM4DUTY               Label    00000000
_PWM5DUTY               Label    00000000
_PWM5RH                 Label    00000000
_pwmCon                 Label    00000000
_pwmDuty                Label    00000000
_pwmFlag                Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_RDUTY                  Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_setPWMduty             Label    00000000
_sleepDelay             Label    00000000
_startFlag              Label    00000000
_startLed               Label    00000000
_startRGBLed            Label    00000000
_STATUS                 Label    00000000
_step2Count             Label    00000000
_stopRGBLed             Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_timeCon                Label    00000000
_timeCount              Label    00000000
_timeSave               Label    00000000
_TM34RH                 Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000049
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x101B                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x101F                 Label    00000000
r0x1020                 Label    00000000
r0x1021                 Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a054d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A054D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
