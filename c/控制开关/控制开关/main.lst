
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A050D,c=on
                                    1-    9     	#include "ny8a050d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_read_14bit_rom
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_BPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_INDF
                                    1-   23     	extern	_TMR0
                                    1-   24     	extern	_PCL
                                    1-   25     	extern	_STATUS
                                    1-   26     	extern	_FSR
                                    1-   27     	extern	_PORTB
                                    1-   28     	extern	_PCON
                                    1-   29     	extern	_BWUCON
                                    1-   30     	extern	_PCHBUF
                                    1-   31     	extern	_BPLCON
                                    1-   32     	extern	_BPHCON
                                    1-   33     	extern	_INTE
                                    1-   34     	extern	_INTF
                                    1-   35     	extern	_TBHP
                                    1-   36     	extern	_TBHD
                                    1-   37     	extern	_OSCCR
                                    1-   38     	extern	_IOSTB
                                    1-   39     	extern	_PS0CV
                                    1-   40     	extern	_BODCON
                                    1-   41     	extern	_PCON1
                                    1-   42     	extern	_T0MD
                                    1-   43     	extern	___sdcc_saved_fsr
                                    1-   44     	extern	___sdcc_saved_stk00
                                    1-   45     	extern	___sdcc_saved_stk01
                                    1-   46     	extern	__nyc_ny8_startup
                                    1-   47     ;--------------------------------------------------------
                                    1-   48     ; global declarations
                                    1-   49     ;--------------------------------------------------------
                                    1-   50     	extern	_gotoSleep
                                    1-   51     	extern	_keyRead
                                    1-   52     	extern	_init
                                    1-   53     	extern	_processKey
                                    1-   54     	extern	_outCon
                                    1-   55     	extern	_isr
                                    1-   56     	extern	_main
                                    1-   57     	extern	_intCount
                                    1-   58     	extern	_IntFlag
                                    1-   59     	extern	_keyClick
                                    1-   60     	extern	_workStep
                                    1-   61     	extern	_keyCount
                                    1-   62     	extern	_longPressFlag
                                    1-   63     	extern	_count
                                    1-   64     	extern	_timeCount
                                    1-   66     	extern PSAVE
                                    1-   67     	extern SSAVE
                                    1-   68     	extern WSAVE
                                    1-   69     	extern STK12
                                    1-   70     	extern STK11
                                    1-   71     	extern STK10
                                    1-   72     	extern STK09
                                    1-   73     	extern STK08
                                    1-   74     	extern STK07
                                    1-   75     	extern STK06
                                    1-   76     	extern STK05
                                    1-   77     	extern STK04
                                    1-   78     	extern STK03
                                    1-   79     	extern STK02
                                    1-   80     	extern STK01
                                    1-   81     	extern STK00
                                    1-   83     .segment "uninit", 0x20000010
 20000010                           1-   84     PSAVE:
                                    1-   85     	.res 1
 20000011                           1-   86     SSAVE:
                                    1-   87     	.res 1
 20000012                           1-   88     WSAVE:
                                    1-   89     	.res 1
 20000013                           1-   90     STK12:
                                    1-   91     	.res 1
 20000014                           1-   92     STK11:
                                    1-   93     	.res 1
 20000015                           1-   94     STK10:
                                    1-   95     	.res 1
 20000016                           1-   96     STK09:
                                    1-   97     	.res 1
 20000017                           1-   98     STK08:
                                    1-   99     	.res 1
 20000018                           1-  100     STK07:
                                    1-  101     	.res 1
 20000019                           1-  102     STK06:
                                    1-  103     	.res 1
 2000001A                           1-  104     STK05:
                                    1-  105     	.res 1
 2000001B                           1-  106     STK04:
                                    1-  107     	.res 1
 2000001C                           1-  108     STK03:
                                    1-  109     	.res 1
 2000001D                           1-  110     STK02:
                                    1-  111     	.res 1
 2000001E                           1-  112     STK01:
                                    1-  113     	.res 1
 2000001F                           1-  114     STK00:
                                    1-  115     	.res 1
                                    1-  117     ;--------------------------------------------------------
                                    1-  118     ; global definitions
                                    1-  119     ;--------------------------------------------------------
                                    1-  120     ;--------------------------------------------------------
                                    1-  121     ; absolute symbol definitions
                                    1-  122     ;--------------------------------------------------------
                                    1-  123     ;--------------------------------------------------------
                                    1-  124     ; compiler-defined variables
                                    1-  125     ;--------------------------------------------------------
                                    1-  126     .segment "uninit"
     0000                           1-  127     r0x100E:
                                    1-  128     	.res	1
                                    1-  129     .segment "uninit"
     0000                           1-  130     r0x100D:
                                    1-  131     	.res	1
                                    1-  132     ;--------------------------------------------------------
                                    1-  133     ; initialized data
                                    1-  134     ;--------------------------------------------------------
                                    1-  136     .segment "idata"
     0000                           1-  137     _intCount:
     0000 0000                      1-  138     	dw	0x00
                                    1-  142     .segment "idata"
     0000                           1-  143     _IntFlag:
     0000 0000                      1-  144     	dw	0x00
                                    1-  148     .segment "idata"
     0000                           1-  149     _keyClick:
     0000 0000                      1-  150     	dw	0x00
                                    1-  154     .segment "idata"
     0000                           1-  155     _workStep:
     0000 0000                      1-  156     	dw	0x00
                                    1-  160     .segment "idata"
     0000                           1-  161     _keyCount:
     0000 0000 0000                 1-  162     	dw	0x00, 0x00
                                    1-  166     .segment "idata"
     0000                           1-  167     _longPressFlag:
     0000 0000                      1-  168     	dw	0x00
                                    1-  172     .segment "idata"
     0000                           1-  173     _count:
     0000 0000 0000                 1-  174     	dw	0x00, 0x00
                                    1-  178     .segment "idata"
     0000                           1-  179     _timeCount:
     0000 0000                      1-  180     	dw	0x00
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ; overlayable items in internal ram 
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     ;	udata_ovr
                                    1-  187     ;--------------------------------------------------------
                                    1-  188     ; reset vector 
                                    1-  189     ;--------------------------------------------------------
                                    1-  190     ORG	0x0000
     0000 3rrr                      1-  191     	LGOTO	__nyc_ny8_startup
                                    1-  192     ;--------------------------------------------------------
                                    1-  193     ; interrupt and initialization code
                                    1-  194     ;--------------------------------------------------------
                                    1-  195     ORG 0x0008
     0008 3rrr                      1-  196     	lgoto	__sdcc_interrupt
                                    1-  198     .segment "code"
     0000                           1-  199     __sdcc_interrupt:
                                    1-  200     ;***
                                    1-  201     ;  pBlock Stats: dbName = I
                                    1-  202     ;***
                                    1-  203     ;2 compiler assigned registers:
                                    1-  204     ;   STK00
                                    1-  205     ;   STK01
                                    1-  206     ;; Starting pCode block
     0000                           1-  207     _isr:
                                    1-  208     ; 0 exit points
                                    1-  209     	.line	24, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  210     	MOVAR	WSAVE
     0001 1503                      1-  211     	SWAPR	STATUS,W
     0002 0283                      1-  212     	CLRR	STATUS
     0003 00rr                      1-  213     	MOVAR	SSAVE
     0004 010A                      1-  214     	MOVR	PCHBUF,W
     0005 028A                      1-  215     	CLRR	PCHBUF
     0006 00rr                      1-  216     	MOVAR	PSAVE
     0007 0104                      1-  217     	MOVR	FSR,W
     0008 00rr                      1-  218     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  219     	MOVR	STK00,W
     000A 00rr                      1-  220     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  221     	MOVR	STK01,W
     000C 00rr                      1-  222     	MOVAR	___sdcc_saved_stk01
                                    1-  223     	.line	26, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  224     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  225     	LGOTO	_00108_DS_
                                    1-  226     	.line	28, "main.c"; 	TMR0 = 65;
     000F 2141                      1-  227     	MOVIA	0x41
     0010 00rr                      1-  228     	MOVAR	_TMR0
                                    1-  229     	.line	29, "main.c"; 	intCount++;
     0011 05rr                      1-  230     	INCR	_intCount,F
                                    1-  231     	.line	30, "main.c"; 	if(intCount == 100)
     0012 01rr                      1-  232     	MOVR	_intCount,W
     0013 2464                      1-  233     	XORIA	0x64
     0014 0903                      1-  234     	BTRSS	STATUS,2
     0015 3rrr                      1-  235     	LGOTO	_00108_DS_
                                    1-  236     	.line	32, "main.c"; 	intCount = 0;
     0016 02rr                      1-  237     	CLRR	_intCount
                                    1-  238     	.line	33, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  239     	MOVIA	0x01
     0018 00rr                      1-  240     	MOVAR	_IntFlag
     0019                           1-  241     _00108_DS_:
                                    1-  242     	.line	36, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  243     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  244     	LGOTO	_00110_DS_
                                    1-  245     	.line	38, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  246     	MOVIA	0xfd
     001C 00rr                      1-  247     	MOVAR	_INTF
     001D                           1-  248     _00110_DS_:
                                    1-  249     	.line	41, "main.c"; 	INTF = 0;
     001D 02rr                      1-  250     	CLRR	_INTF
                                    1-  251     	.line	43, "main.c"; 	}
     001E 01rr                      1-  252     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  253     	MOVAR	STK01
     0020 01rr                      1-  254     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  255     	MOVAR	STK00
     0022 01rr                      1-  256     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  257     	MOVAR	FSR
     0024 01rr                      1-  258     	MOVR	PSAVE,W
     0025 008A                      1-  259     	MOVAR	PCHBUF
     0026 0283                      1-  260     	CLRR	STATUS
     0027 15rr                      1-  261     	SWAPR	SSAVE,W
     0028 0083                      1-  262     	MOVAR	STATUS
     0029 15rr                      1-  263     	SWAPR	WSAVE,F
     002A 15rr                      1-  264     	SWAPR	WSAVE,W
     002B                           1-  265     END_OF_INTERRUPT:
     002B 0011                      1-  266     	RETIE	
                                    1-  268     ;--------------------------------------------------------
                                    1-  269     ; code
                                    1-  270     ;--------------------------------------------------------
                                    1-  271     ;***
                                    1-  272     ;  pBlock Stats: dbName = M
                                    1-  273     ;***
                                    1-  274     ;has an exit
                                    1-  275     ;functions called:
                                    1-  276     ;   _init
                                    1-  277     ;   _processKey
                                    1-  278     ;   _outCon
                                    1-  279     ;   _init
                                    1-  280     ;   _processKey
                                    1-  281     ;   _outCon
                                    1-  282     ;; Starting pCode block
                                    1-  283     .segment "code"; module=main, function=_main
     0000                           1-  285     _main:
                                    1-  286     ; 2 exit points
                                    1-  287     	.line	48, "main.c"; 	init();
     0000 2rrr                      1-  288     	LCALL	_init
     0001                           1-  289     _00118_DS_:
                                    1-  290     	.line	52, "main.c"; 	CLRWDT(); 
     0001 0002                      1-  291     	clrwdt
                                    1-  292     	.line	53, "main.c"; 	if(!IntFlag)
     0002 01rr                      1-  293     	MOVR	_IntFlag,W
     0003 0D03                      1-  294     	BTRSC	STATUS,2
     0004 3rrr                      1-  295     	LGOTO	_00118_DS_
                                    1-  296     	.line	55, "main.c"; 	IntFlag = 0;
     0005 02rr                      1-  297     	CLRR	_IntFlag
                                    1-  298     	.line	56, "main.c"; 	processKey();
     0006 2rrr                      1-  299     	LCALL	_processKey
                                    1-  300     	.line	57, "main.c"; 	outCon();
     0007 2rrr                      1-  301     	LCALL	_outCon
     0008 3rrr                      1-  302     	LGOTO	_00118_DS_
                                    1-  303     	.line	61, "main.c"; 	}
                                    1-  304     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1-  305     ; exit point of _main
                                    1-  307     ;***
                                    1-  308     ;  pBlock Stats: dbName = C
                                    1-  309     ;***
                                    1-  310     ;has an exit
                                    1-  311     ;; Starting pCode block
                                    1-  312     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  314     _gotoSleep:
                                    1-  315     ; 2 exit points
                                    1-  316     	.line	216, "main.c"; 	PORTB = 0x01; 
     0000 2101                      1-  317     	MOVIA	0x01
     0001 00rr                      1-  318     	MOVAR	_PORTB
                                    1-  319     	.line	217, "main.c"; 	keyCount = 0;
     0002 02rr                      1-  320     	CLRR	_keyCount
     0003 02rr                      1-  321     	CLRR	(_keyCount + 1)
                                    1-  322     	.line	218, "main.c"; 	count = 0;
     0004 02rr                      1-  323     	CLRR	_count
     0005 02rr                      1-  324     	CLRR	(_count + 1)
                                    1-  325     	.line	219, "main.c"; 	BWUCON = 0x01;		//PB0唤醒
     0006 2101                      1-  326     	MOVIA	0x01
     0007 00rr                      1-  327     	MOVAR	_BWUCON
                                    1-  328     	.line	220, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0008 2103                      1-  329     	MOVIA	0x03
     0009 00rr                      1-  330     	MOVAR	_INTE
                                    1-  331     	.line	221, "main.c"; 	PCON =  C_LVR_En;	
     000A 2108                      1-  332     	MOVIA	0x08
     000B 00rr                      1-  333     	MOVAR	_PCON
                                    1-  334     	.line	222, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000C 02rr                      1-  335     	CLRR	_INTF
                                    1-  336     	.line	223, "main.c"; 	CLRWDT();
     000D 0002                      1-  337     	clrwdt
                                    1-  338     	.line	224, "main.c"; 	SLEEP();
     000E 0001                      1-  339     	sleep
                                    1-  340     	.line	225, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000F 2101                      1-  341     	MOVIA	0x01
     0010 00rr                      1-  342     	MOVAR	_INTE
                                    1-  343     	.line	226, "main.c"; 	INTF = 0;
     0011 02rr                      1-  344     	CLRR	_INTF
                                    1-  345     	.line	228, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0012 2188                      1-  346     	MOVIA	0x88
     0013 00rr                      1-  347     	MOVAR	_PCON
                                    1-  348     	.line	229, "main.c"; 	PCON |= 0x10;			//PA5关闭上拉
     0014 1Arr                      1-  349     	BSR	_PCON,4
                                    1-  350     	.line	230, "main.c"; 	}
                                    1-  351     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  352     ; exit point of _gotoSleep
                                    1-  354     ;***
                                    1-  355     ;  pBlock Stats: dbName = C
                                    1-  356     ;***
                                    1-  357     ;has an exit
                                    1-  358     ;1 compiler assigned register :
                                    1-  359     ;   r0x100D
                                    1-  360     ;; Starting pCode block
                                    1-  361     .segment "code"; module=main, function=_keyRead
                                    1-  363     ;local variable name mapping:
     0000                           1-  365     _keyRead:
                                    1-  366     ; 2 exit points
                                    1-  367     	.line	174, "main.c"; 	char keyRead(char KeyStatus)	
     0000 00rr                      1-  368     	MOVAR	r0x100D
                                    1-  369     	.line	176, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  370     	MOVR	r0x100D,W
     0002 0D03                      1-  371     	BTRSC	STATUS,2
     0003 3rrr                      1-  372     	LGOTO	_00273_DS_
                                    1-  373     	.line	178, "main.c"; 	keyCount++;
     0004 05rr                      1-  374     	INCR	_keyCount,F
     0005 0D03                      1-  375     	BTRSC	STATUS,2
     0006 05rr                      1-  376     	INCR	(_keyCount + 1),F
                                    1-  377     ;;unsigned compare: left < lit (0x12C=300), size=2
                                    1-  378     	.line	179, "main.c"; 	if(keyCount >= 300)
     0007 2101                      1-  379     	MOVIA	0x01
     0008 04rr                      1-  380     	SUBAR	(_keyCount + 1),W
     0009 0903                      1-  381     	BTRSS	STATUS,2
     000A 3rrr                      1-  382     	LGOTO	_00295_DS_
     000B 212C                      1-  383     	MOVIA	0x2c
     000C 04rr                      1-  384     	SUBAR	_keyCount,W
     000D                           1-  385     _00295_DS_:
     000D 0803                      1-  386     	BTRSS	STATUS,0
     000E 3rrr                      1-  387     	LGOTO	_00274_DS_
                                    1-  388     ;;unsigned compare: left < lit (0xBB8=3000), size=2
                                    1-  389     	.line	181, "main.c"; 	if(keyCount >= 3000)
     000F 210B                      1-  390     	MOVIA	0x0b
     0010 04rr                      1-  391     	SUBAR	(_keyCount + 1),W
     0011 0903                      1-  392     	BTRSS	STATUS,2
     0012 3rrr                      1-  393     	LGOTO	_00296_DS_
     0013 21B8                      1-  394     	MOVIA	0xb8
     0014 04rr                      1-  395     	SUBAR	_keyCount,W
     0015                           1-  396     _00296_DS_:
     0015 0803                      1-  397     	BTRSS	STATUS,0
     0016 3rrr                      1-  398     	LGOTO	_00262_DS_
                                    1-  399     	.line	183, "main.c"; 	keyCount = 0;
     0017 02rr                      1-  400     	CLRR	_keyCount
     0018 02rr                      1-  401     	CLRR	(_keyCount + 1)
                                    1-  402     	.line	184, "main.c"; 	longPressFlag = 0;
     0019 02rr                      1-  403     	CLRR	_longPressFlag
                                    1-  404     	.line	185, "main.c"; 	return 3;	//30S超时
     001A 2103                      1-  405     	MOVIA	0x03
     001B 3rrr                      1-  406     	LGOTO	_00275_DS_
     001C                           1-  407     _00262_DS_:
                                    1-  408     	.line	187, "main.c"; 	if(!longPressFlag)
     001C 01rr                      1-  409     	MOVR	_longPressFlag,W
     001D 0903                      1-  410     	BTRSS	STATUS,2
     001E 3rrr                      1-  411     	LGOTO	_00274_DS_
                                    1-  412     	.line	189, "main.c"; 	longPressFlag = 1;
     001F 2101                      1-  413     	MOVIA	0x01
     0020 00rr                      1-  414     	MOVAR	_longPressFlag
                                    1-  415     	.line	190, "main.c"; 	return 2;
     0021 2102                      1-  416     	MOVIA	0x02
     0022 3rrr                      1-  417     	LGOTO	_00275_DS_
                                    1-  418     ;;unsigned compare: left < lit (0x12C=300), size=2
     0023                           1-  419     _00273_DS_:
                                    1-  420     	.line	196, "main.c"; 	if(keyCount >= 300)
     0023 2101                      1-  421     	MOVIA	0x01
     0024 04rr                      1-  422     	SUBAR	(_keyCount + 1),W
     0025 0903                      1-  423     	BTRSS	STATUS,2
     0026 3rrr                      1-  424     	LGOTO	_00297_DS_
     0027 212C                      1-  425     	MOVIA	0x2c
     0028 04rr                      1-  426     	SUBAR	_keyCount,W
     0029                           1-  427     _00297_DS_:
     0029 0803                      1-  428     	BTRSS	STATUS,0
     002A 3rrr                      1-  429     	LGOTO	_00270_DS_
                                    1-  430     	.line	198, "main.c"; 	keyCount = 0;
     002B 02rr                      1-  431     	CLRR	_keyCount
     002C 02rr                      1-  432     	CLRR	(_keyCount + 1)
                                    1-  433     	.line	199, "main.c"; 	return	0;
     002D 2100                      1-  434     	MOVIA	0x00
     002E 3rrr                      1-  435     	LGOTO	_00275_DS_
                                    1-  436     ;;unsigned compare: left < lit (0x8=8), size=2
     002F                           1-  437     _00270_DS_:
                                    1-  438     	.line	201, "main.c"; 	else if(keyCount >= 8)
     002F 2100                      1-  439     	MOVIA	0x00
     0030 04rr                      1-  440     	SUBAR	(_keyCount + 1),W
     0031 0903                      1-  441     	BTRSS	STATUS,2
     0032 3rrr                      1-  442     	LGOTO	_00298_DS_
     0033 2108                      1-  443     	MOVIA	0x08
     0034 04rr                      1-  444     	SUBAR	_keyCount,W
     0035                           1-  445     _00298_DS_:
     0035 0803                      1-  446     	BTRSS	STATUS,0
     0036 3rrr                      1-  447     	LGOTO	_00271_DS_
                                    1-  448     	.line	203, "main.c"; 	keyCount = 0;
     0037 02rr                      1-  449     	CLRR	_keyCount
     0038 02rr                      1-  450     	CLRR	(_keyCount + 1)
                                    1-  451     	.line	204, "main.c"; 	return	1;
     0039 2101                      1-  452     	MOVIA	0x01
     003A 3rrr                      1-  453     	LGOTO	_00275_DS_
     003B                           1-  454     _00271_DS_:
                                    1-  455     	.line	206, "main.c"; 	keyCount = 0;
     003B 02rr                      1-  456     	CLRR	_keyCount
     003C 02rr                      1-  457     	CLRR	(_keyCount + 1)
                                    1-  458     	.line	207, "main.c"; 	longPressFlag = 0;
     003D 02rr                      1-  459     	CLRR	_longPressFlag
     003E                           1-  460     _00274_DS_:
                                    1-  461     	.line	209, "main.c"; 	return 0;
     003E 2100                      1-  462     	MOVIA	0x00
     003F                           1-  463     _00275_DS_:
                                    1-  464     	.line	210, "main.c"; 	}
                                    1-  465     	RETURN	
     003F 0010                      3-   26 m1      ret
                                    1-  466     ; exit point of _keyRead
                                    1-  468     ;***
                                    1-  469     ;  pBlock Stats: dbName = C
                                    1-  470     ;***
                                    1-  471     ;has an exit
                                    1-  472     ;; Starting pCode block
                                    1-  473     .segment "code"; module=main, function=_init
     0000                           1-  475     _init:
                                    1-  476     ; 2 exit points
                                    1-  477     	.line	150, "main.c"; 	PORTB = 0x00;         
     0000 02rr                      1-  478     	CLRR	_PORTB
                                    1-  479     	.line	151, "main.c"; 	IOSTB =  C_PB0_Input;								// Set PB to output mode
     0001 2101                      1-  480     	MOVIA	0x01
     0002 000r                      1-  481     	IOST	_IOSTB
                                    1-  482     	.line	152, "main.c"; 	BPHCON = 0xFE;
     0003 21FE                      1-  483     	MOVIA	0xfe
     0004 00rr                      1-  484     	MOVAR	_BPHCON
                                    1-  485     	.line	153, "main.c"; 	BPLCON = 0xFF;
     0005 21FF                      1-  486     	MOVIA	0xff
     0006 00rr                      1-  487     	MOVAR	_BPLCON
                                    1-  488     	.line	154, "main.c"; 	PORTB = 0x01;                           	
     0007 2101                      1-  489     	MOVIA	0x01
     0008 00rr                      1-  490     	MOVAR	_PORTB
                                    1-  491     	.line	158, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     0009 2188                      1-  492     	MOVIA	0x88
     000A 00rr                      1-  493     	MOVAR	_PCON
                                    1-  494     	.line	159, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000B 2101                      1-  495     	MOVIA	0x01
     000C 00rr                      1-  496     	MOVAR	_INTE
                                    1-  497     	.line	160, "main.c"; 	INTF = 0;
     000D 02rr                      1-  498     	CLRR	_INTF
                                    1-  499     	.line	163, "main.c"; 	PCON1 = C_TMR0_Dis;
     000E 0200                      1-  500     	CLRA	
     000F 000r                      1-  501     	IOST	_PCON1
                                    1-  502     	.line	165, "main.c"; 	TMR0 = 55;
     0010 2137                      1-  503     	MOVIA	0x37
     0011 00rr                      1-  504     	MOVAR	_TMR0
                                    1-  505     	.line	166, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0012 0200                      1-  506     	CLRA	
     0013 0003                      1-  507     	T0MD	
                                    1-  508     	.line	168, "main.c"; 	PCON1 = C_TMR0_En;
     0014 2101                      1-  509     	MOVIA	0x01
     0015 000r                      1-  510     	IOST	_PCON1
                                    1-  511     	.line	170, "main.c"; 	ENI();
     0016 0004                      1-  512     	ENI
                                    1-  513     	.line	171, "main.c"; 	}
                                    1-  514     	RETURN	
     0017 0010                      3-   26 m1      ret
                                    1-  515     ; exit point of _init
                                    1-  517     ;***
                                    1-  518     ;  pBlock Stats: dbName = C
                                    1-  519     ;***
                                    1-  520     ;has an exit
                                    1-  521     ;functions called:
                                    1-  522     ;   _keyRead
                                    1-  523     ;   _gotoSleep
                                    1-  524     ;   _gotoSleep
                                    1-  525     ;   _keyRead
                                    1-  526     ;   _gotoSleep
                                    1-  527     ;   _gotoSleep
                                    1-  528     ;1 compiler assigned register :
                                    1-  529     ;   r0x100E
                                    1-  530     ;; Starting pCode block
                                    1-  531     .segment "code"; module=main, function=_processKey
     0000                           1-  533     _processKey:
                                    1-  534     ; 2 exit points
                                    1-  535     	.line	116, "main.c"; 	keyClick = keyRead((~PORTB)&0x01);
     0000 07rr                      1-  536     	COMR	_PORTB,W
     0001 00rr                      1-  537     	MOVAR	r0x100E
     0002 2101                      1-  538     	MOVIA	0x01
     0003 10rr                      1-  539     	ANDAR	r0x100E,F
     0004 01rr                      1-  540     	MOVR	r0x100E,W
     0005 2rrr                      1-  541     	LCALL	_keyRead
     0006 00rr                      1-  542     	MOVAR	_keyClick
                                    1-  543     	.line	117, "main.c"; 	if(keyClick == 1 && workStep)
     0007 2401                      1-  544     	XORIA	0x01
     0008 0903                      1-  545     	BTRSS	STATUS,2
     0009 3rrr                      1-  546     	LGOTO	_00249_DS_
     000A 01rr                      1-  547     	MOVR	_workStep,W
     000B 0D03                      1-  548     	BTRSC	STATUS,2
     000C 3rrr                      1-  549     	LGOTO	_00249_DS_
                                    1-  550     	.line	119, "main.c"; 	count = 0;
     000D 02rr                      1-  551     	CLRR	_count
     000E 02rr                      1-  552     	CLRR	(_count + 1)
                                    1-  553     	.line	120, "main.c"; 	PORTB &= ~0x32;
     000F 21CD                      1-  554     	MOVIA	0xcd
     0010 10rr                      1-  555     	ANDAR	_PORTB,F
                                    1-  556     	.line	121, "main.c"; 	if(++workStep >= 4)
     0011 05rr                      1-  557     	INCR	_workStep,F
                                    1-  558     ;;unsigned compare: left < lit (0x4=4), size=1
     0012 2104                      1-  559     	MOVIA	0x04
     0013 04rr                      1-  560     	SUBAR	_workStep,W
     0014 0803                      1-  561     	BTRSS	STATUS,0
     0015 3rrr                      1-  562     	LGOTO	_00252_DS_
                                    1-  563     	.line	123, "main.c"; 	workStep = 1;
     0016 2101                      1-  564     	MOVIA	0x01
     0017 00rr                      1-  565     	MOVAR	_workStep
     0018 3rrr                      1-  566     	LGOTO	_00252_DS_
     0019                           1-  567     _00249_DS_:
                                    1-  568     	.line	127, "main.c"; 	else if(keyClick == 2)
     0019 01rr                      1-  569     	MOVR	_keyClick,W
     001A 2402                      1-  570     	XORIA	0x02
     001B 0903                      1-  571     	BTRSS	STATUS,2
     001C 3rrr                      1-  572     	LGOTO	_00246_DS_
                                    1-  573     	.line	129, "main.c"; 	if(workStep)
     001D 01rr                      1-  574     	MOVR	_workStep,W
     001E 0D03                      1-  575     	BTRSC	STATUS,2
     001F 3rrr                      1-  576     	LGOTO	_00241_DS_
                                    1-  577     	.line	131, "main.c"; 	workStep = 0;	//关机
     0020 02rr                      1-  578     	CLRR	_workStep
                                    1-  579     	.line	132, "main.c"; 	gotoSleep();
     0021 2rrr                      1-  580     	LCALL	_gotoSleep
     0022 3rrr                      1-  581     	LGOTO	_00252_DS_
     0023                           1-  582     _00241_DS_:
                                    1-  583     	.line	136, "main.c"; 	workStep = 10;//预热模式
     0023 210A                      1-  584     	MOVIA	0x0a
     0024 00rr                      1-  585     	MOVAR	_workStep
                                    1-  586     	.line	137, "main.c"; 	count = 0;
     0025 02rr                      1-  587     	CLRR	_count
     0026 02rr                      1-  588     	CLRR	(_count + 1)
                                    1-  589     	.line	138, "main.c"; 	timeCount = 0;
     0027 02rr                      1-  590     	CLRR	_timeCount
     0028 3rrr                      1-  591     	LGOTO	_00252_DS_
     0029                           1-  592     _00246_DS_:
                                    1-  593     	.line	141, "main.c"; 	else if(keyClick == 3)
     0029 01rr                      1-  594     	MOVR	_keyClick,W
     002A 2403                      1-  595     	XORIA	0x03
     002B 0903                      1-  596     	BTRSS	STATUS,2
     002C 3rrr                      1-  597     	LGOTO	_00252_DS_
                                    1-  598     	.line	143, "main.c"; 	workStep = 0;	//超时关机
     002D 02rr                      1-  599     	CLRR	_workStep
                                    1-  600     	.line	144, "main.c"; 	gotoSleep();
     002E 2rrr                      1-  601     	LCALL	_gotoSleep
     002F                           1-  602     _00252_DS_:
                                    1-  603     	.line	146, "main.c"; 	}
                                    1-  604     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1-  605     ; exit point of _processKey
                                    1-  607     ;***
                                    1-  608     ;  pBlock Stats: dbName = C
                                    1-  609     ;***
                                    1-  610     ;has an exit
                                    1-  611     ;functions called:
                                    1-  612     ;   _gotoSleep
                                    1-  613     ;   _gotoSleep
                                    1-  614     ;; Starting pCode block
                                    1-  615     .segment "code"; module=main, function=_outCon
     0000                           1-  617     _outCon:
                                    1-  618     ; 2 exit points
                                    1-  619     	.line	66, "main.c"; 	if(workStep == 10)
     0000 01rr                      1-  620     	MOVR	_workStep,W
     0001 240A                      1-  621     	XORIA	0x0a
     0002 0903                      1-  622     	BTRSS	STATUS,2
     0003 3rrr                      1-  623     	LGOTO	_00126_DS_
                                    1-  624     ;;unsigned compare: left < lit (0x2D=45), size=1
                                    1-  625     	.line	68, "main.c"; 	if(timeCount >= 45)
     0004 212D                      1-  626     	MOVIA	0x2d
     0005 04rr                      1-  627     	SUBAR	_timeCount,W
     0006 0803                      1-  628     	BTRSS	STATUS,0
     0007 3rrr                      1-  629     	LGOTO	_00126_DS_
                                    1-  630     	.line	70, "main.c"; 	workStep = 2;	//3分钟后进入中档	
     0008 2102                      1-  631     	MOVIA	0x02
     0009 00rr                      1-  632     	MOVAR	_workStep
     000A                           1-  633     _00126_DS_:
                                    1-  634     	.line	74, "main.c"; 	if(++count >= 400)
     000A 05rr                      1-  635     	INCR	_count,F
     000B 0D03                      1-  636     	BTRSC	STATUS,2
     000C 05rr                      1-  637     	INCR	(_count + 1),F
                                    1-  638     ;;unsigned compare: left < lit (0x190=400), size=2
     000D 2101                      1-  639     	MOVIA	0x01
     000E 04rr                      1-  640     	SUBAR	(_count + 1),W
     000F 0903                      1-  641     	BTRSS	STATUS,2
     0010 3rrr                      1-  642     	LGOTO	_00221_DS_
     0011 2190                      1-  643     	MOVIA	0x90
     0012 04rr                      1-  644     	SUBAR	_count,W
     0013                           1-  645     _00221_DS_:
     0013 0803                      1-  646     	BTRSS	STATUS,0
     0014 3rrr                      1-  647     	LGOTO	_00130_DS_
                                    1-  648     	.line	76, "main.c"; 	count = 0;
     0015 02rr                      1-  649     	CLRR	_count
     0016 02rr                      1-  650     	CLRR	(_count + 1)
                                    1-  651     	.line	77, "main.c"; 	PORTB |= 0x04;	//PB2输出为高
     0017 19rr                      1-  652     	BSR	_PORTB,2
                                    1-  653     	.line	78, "main.c"; 	if(workStep == 10)
     0018 01rr                      1-  654     	MOVR	_workStep,W
     0019 240A                      1-  655     	XORIA	0x0a
     001A 0D03                      1-  656     	BTRSC	STATUS,2
                                    1-  657     	.line	79, "main.c"; 	timeCount++;
     001B 05rr                      1-  658     	INCR	_timeCount,F
     001C                           1-  659     _00130_DS_:
                                    1-  660     	.line	82, "main.c"; 	switch(workStep)
     001C 01rr                      1-  661     	MOVR	_workStep,W
     001D 0D03                      1-  662     	BTRSC	STATUS,2
     001E 3rrr                      1-  663     	LGOTO	_00131_DS_
     001F 01rr                      1-  664     	MOVR	_workStep,W
     0020 2401                      1-  665     	XORIA	0x01
     0021 0D03                      1-  666     	BTRSC	STATUS,2
     0022 3rrr                      1-  667     	LGOTO	_00135_DS_
     0023 01rr                      1-  668     	MOVR	_workStep,W
     0024 2402                      1-  669     	XORIA	0x02
     0025 0D03                      1-  670     	BTRSC	STATUS,2
     0026 3rrr                      1-  671     	LGOTO	_00138_DS_
     0027 01rr                      1-  672     	MOVR	_workStep,W
     0028 2403                      1-  673     	XORIA	0x03
     0029 0D03                      1-  674     	BTRSC	STATUS,2
     002A 3rrr                      1-  675     	LGOTO	_00141_DS_
     002B 01rr                      1-  676     	MOVR	_workStep,W
     002C 240A                      1-  677     	XORIA	0x0a
     002D 0D03                      1-  678     	BTRSC	STATUS,2
     002E 3rrr                      1-  679     	LGOTO	_00144_DS_
     002F 3rrr                      1-  680     	LGOTO	_00155_DS_
     0030                           1-  681     _00131_DS_:
                                    1-  682     	.line	85, "main.c"; 	if((!keyCount) &&count >= 200)
     0030 01rr                      1-  683     	MOVR	_keyCount,W
     0031 11rr                      1-  684     	IORAR	(_keyCount + 1),W
     0032 0903                      1-  685     	BTRSS	STATUS,2
     0033 3rrr                      1-  686     	LGOTO	_00155_DS_
                                    1-  687     ;;unsigned compare: left < lit (0xC8=200), size=2
     0034 2100                      1-  688     	MOVIA	0x00
     0035 04rr                      1-  689     	SUBAR	(_count + 1),W
     0036 0903                      1-  690     	BTRSS	STATUS,2
     0037 3rrr                      1-  691     	LGOTO	_00227_DS_
     0038 21C8                      1-  692     	MOVIA	0xc8
     0039 04rr                      1-  693     	SUBAR	_count,W
     003A                           1-  694     _00227_DS_:
     003A 0803                      1-  695     	BTRSS	STATUS,0
     003B 3rrr                      1-  696     	LGOTO	_00155_DS_
                                    1-  697     	.line	86, "main.c"; 	gotoSleep();
     003C 2rrr                      1-  698     	LCALL	_gotoSleep
                                    1-  699     	.line	87, "main.c"; 	break;
     003D 3rrr                      1-  700     	LGOTO	_00155_DS_
     003E                           1-  701     _00135_DS_:
                                    1-  702     	.line	89, "main.c"; 	PORTB |= 0x20;
     003E 1Arr                      1-  703     	BSR	_PORTB,5
                                    1-  704     	.line	90, "main.c"; 	if(count == 300)
     003F 01rr                      1-  705     	MOVR	_count,W
     0040 242C                      1-  706     	XORIA	0x2c
     0041 0903                      1-  707     	BTRSS	STATUS,2
     0042 3rrr                      1-  708     	LGOTO	_00155_DS_
     0043 01rr                      1-  709     	MOVR	(_count + 1),W
     0044 2401                      1-  710     	XORIA	0x01
     0045 0903                      1-  711     	BTRSS	STATUS,2
     0046 3rrr                      1-  712     	LGOTO	_00155_DS_
                                    1-  713     	.line	91, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     0047 1Drr                      1-  714     	BCR	_PORTB,2
                                    1-  715     	.line	92, "main.c"; 	break;
     0048 3rrr                      1-  716     	LGOTO	_00155_DS_
     0049                           1-  717     _00138_DS_:
                                    1-  718     	.line	94, "main.c"; 	PORTB |= 0x10;
     0049 1Arr                      1-  719     	BSR	_PORTB,4
                                    1-  720     	.line	95, "main.c"; 	if(count == 200)
     004A 01rr                      1-  721     	MOVR	_count,W
     004B 24C8                      1-  722     	XORIA	0xc8
     004C 0903                      1-  723     	BTRSS	STATUS,2
     004D 3rrr                      1-  724     	LGOTO	_00155_DS_
     004E 01rr                      1-  725     	MOVR	(_count + 1),W
     004F 2400                      1-  726     	XORIA	0x00
     0050 0903                      1-  727     	BTRSS	STATUS,2
     0051 3rrr                      1-  728     	LGOTO	_00155_DS_
                                    1-  729     	.line	96, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     0052 1Drr                      1-  730     	BCR	_PORTB,2
                                    1-  731     	.line	97, "main.c"; 	break;
     0053 3rrr                      1-  732     	LGOTO	_00155_DS_
     0054                           1-  733     _00141_DS_:
                                    1-  734     	.line	99, "main.c"; 	PORTB |= 0x02;
     0054 18rr                      1-  735     	BSR	_PORTB,1
                                    1-  736     	.line	100, "main.c"; 	if(count == 100)
     0055 01rr                      1-  737     	MOVR	_count,W
     0056 2464                      1-  738     	XORIA	0x64
     0057 0903                      1-  739     	BTRSS	STATUS,2
     0058 3rrr                      1-  740     	LGOTO	_00155_DS_
     0059 01rr                      1-  741     	MOVR	(_count + 1),W
     005A 2400                      1-  742     	XORIA	0x00
     005B 0903                      1-  743     	BTRSS	STATUS,2
     005C 3rrr                      1-  744     	LGOTO	_00155_DS_
                                    1-  745     	.line	101, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     005D 1Drr                      1-  746     	BCR	_PORTB,2
                                    1-  747     	.line	102, "main.c"; 	break;
     005E 3rrr                      1-  748     	LGOTO	_00155_DS_
     005F                           1-  749     _00144_DS_:
                                    1-  750     	.line	104, "main.c"; 	PORTB |= 0x04;	//PB2输出为高
     005F 19rr                      1-  751     	BSR	_PORTB,2
                                    1-  752     	.line	105, "main.c"; 	if(count == 50 || count == 0  || count == 100 || count == 150 || count == 200 || count == 250 || count == 300 || count == 350)
     0060 01rr                      1-  753     	MOVR	_count,W
     0061 2432                      1-  754     	XORIA	0x32
     0062 0903                      1-  755     	BTRSS	STATUS,2
     0063 3rrr                      1-  756     	LGOTO	_00228_DS_
     0064 01rr                      1-  757     	MOVR	(_count + 1),W
     0065 2400                      1-  758     	XORIA	0x00
     0066 0D03                      1-  759     	BTRSC	STATUS,2
     0067 3rrr                      1-  760     	LGOTO	_00145_DS_
     0068                           1-  761     _00228_DS_:
     0068 01rr                      1-  762     	MOVR	_count,W
     0069 11rr                      1-  763     	IORAR	(_count + 1),W
     006A 0D03                      1-  764     	BTRSC	STATUS,2
     006B 3rrr                      1-  765     	LGOTO	_00145_DS_
     006C 01rr                      1-  766     	MOVR	_count,W
     006D 2464                      1-  767     	XORIA	0x64
     006E 0903                      1-  768     	BTRSS	STATUS,2
     006F 3rrr                      1-  769     	LGOTO	_00229_DS_
     0070 01rr                      1-  770     	MOVR	(_count + 1),W
     0071 2400                      1-  771     	XORIA	0x00
     0072 0D03                      1-  772     	BTRSC	STATUS,2
     0073 3rrr                      1-  773     	LGOTO	_00145_DS_
     0074                           1-  774     _00229_DS_:
     0074 01rr                      1-  775     	MOVR	_count,W
     0075 2496                      1-  776     	XORIA	0x96
     0076 0903                      1-  777     	BTRSS	STATUS,2
     0077 3rrr                      1-  778     	LGOTO	_00230_DS_
     0078 01rr                      1-  779     	MOVR	(_count + 1),W
     0079 2400                      1-  780     	XORIA	0x00
     007A 0D03                      1-  781     	BTRSC	STATUS,2
     007B 3rrr                      1-  782     	LGOTO	_00145_DS_
     007C                           1-  783     _00230_DS_:
     007C 01rr                      1-  784     	MOVR	_count,W
     007D 24C8                      1-  785     	XORIA	0xc8
     007E 0903                      1-  786     	BTRSS	STATUS,2
     007F 3rrr                      1-  787     	LGOTO	_00231_DS_
     0080 01rr                      1-  788     	MOVR	(_count + 1),W
     0081 2400                      1-  789     	XORIA	0x00
     0082 0D03                      1-  790     	BTRSC	STATUS,2
     0083 3rrr                      1-  791     	LGOTO	_00145_DS_
     0084                           1-  792     _00231_DS_:
     0084 01rr                      1-  793     	MOVR	_count,W
     0085 24FA                      1-  794     	XORIA	0xfa
     0086 0903                      1-  795     	BTRSS	STATUS,2
     0087 3rrr                      1-  796     	LGOTO	_00232_DS_
     0088 01rr                      1-  797     	MOVR	(_count + 1),W
     0089 2400                      1-  798     	XORIA	0x00
     008A 0D03                      1-  799     	BTRSC	STATUS,2
     008B 3rrr                      1-  800     	LGOTO	_00145_DS_
     008C                           1-  801     _00232_DS_:
     008C 01rr                      1-  802     	MOVR	_count,W
     008D 242C                      1-  803     	XORIA	0x2c
     008E 0903                      1-  804     	BTRSS	STATUS,2
     008F 3rrr                      1-  805     	LGOTO	_00233_DS_
     0090 01rr                      1-  806     	MOVR	(_count + 1),W
     0091 2401                      1-  807     	XORIA	0x01
     0092 0D03                      1-  808     	BTRSC	STATUS,2
     0093 3rrr                      1-  809     	LGOTO	_00145_DS_
     0094                           1-  810     _00233_DS_:
     0094 01rr                      1-  811     	MOVR	_count,W
     0095 245E                      1-  812     	XORIA	0x5e
     0096 0903                      1-  813     	BTRSS	STATUS,2
     0097 3rrr                      1-  814     	LGOTO	_00155_DS_
     0098 01rr                      1-  815     	MOVR	(_count + 1),W
     0099 2401                      1-  816     	XORIA	0x01
     009A 0903                      1-  817     	BTRSS	STATUS,2
     009B 3rrr                      1-  818     	LGOTO	_00155_DS_
     009C                           1-  819     _00145_DS_:
                                    1-  820     	.line	106, "main.c"; 	PORTB ^= 0x20;
     009C 2120                      1-  821     	MOVIA	0x20
     009D 12rr                      1-  822     	XORAR	_PORTB,F
     009E                           1-  823     _00155_DS_:
                                    1-  824     	.line	111, "main.c"; 	}
                                    1-  825     	RETURN	
     009E 0010                      3-   26 m1      ret
                                    1-  826     ; exit point of _outCon
                                    1-  829     ;	code size estimation:
                                    1-  830     ;	  367+    0 =   367 instructions (  734 byte)
                                    1-  832     	end
                                    1-  832     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800503
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00118_DS_              Label    00000001
_00126_DS_              Label    0000000A
_00130_DS_              Label    0000001C
_00131_DS_              Label    00000030
_00135_DS_              Label    0000003E
_00138_DS_              Label    00000049
_00141_DS_              Label    00000054
_00144_DS_              Label    0000005F
_00145_DS_              Label    0000009C
_00155_DS_              Label    0000009E
_00221_DS_              Label    00000013
_00227_DS_              Label    0000003A
_00228_DS_              Label    00000068
_00229_DS_              Label    00000074
_00230_DS_              Label    0000007C
_00231_DS_              Label    00000084
_00232_DS_              Label    0000008C
_00233_DS_              Label    00000094
_00241_DS_              Label    00000023
_00246_DS_              Label    00000029
_00249_DS_              Label    00000019
_00252_DS_              Label    0000002F
_00262_DS_              Label    0000001C
_00270_DS_              Label    0000002F
_00271_DS_              Label    0000003B
_00273_DS_              Label    00000023
_00274_DS_              Label    0000003E
_00275_DS_              Label    0000003F
_00295_DS_              Label    0000000D
_00296_DS_              Label    00000015
_00297_DS_              Label    00000029
_00298_DS_              Label    00000035
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_count                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_longPressFlag          Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_outCon                 Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_processKey             Label    00000000
_PS0CV                  Label    00000000
_read_14bit_rom         Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_timeCount              Label    00000000
_TMR0                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a050d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A050D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000001FF
DATA ROM     = 0x00000000 - 0x000001FF
RESERVED MEM = 0x00000200 - 0x00000210
SRAM / SFR   = 0x00000000 - 0x00000000
