
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A050D,c=on
                                    1-    9     	#include "ny8a050d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_read_14bit_rom
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_BPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_INDF
                                    1-   23     	extern	_TMR0
                                    1-   24     	extern	_PCL
                                    1-   25     	extern	_STATUS
                                    1-   26     	extern	_FSR
                                    1-   27     	extern	_PORTB
                                    1-   28     	extern	_PCON
                                    1-   29     	extern	_BWUCON
                                    1-   30     	extern	_PCHBUF
                                    1-   31     	extern	_BPLCON
                                    1-   32     	extern	_BPHCON
                                    1-   33     	extern	_INTE
                                    1-   34     	extern	_INTF
                                    1-   35     	extern	_TBHP
                                    1-   36     	extern	_TBHD
                                    1-   37     	extern	_OSCCR
                                    1-   38     	extern	_IOSTB
                                    1-   39     	extern	_PS0CV
                                    1-   40     	extern	_BODCON
                                    1-   41     	extern	_PCON1
                                    1-   42     	extern	_T0MD
                                    1-   43     	extern	___sdcc_saved_fsr
                                    1-   44     	extern	___sdcc_saved_stk00
                                    1-   45     	extern	___sdcc_saved_stk01
                                    1-   46     	extern	__nyc_ny8_startup
                                    1-   47     ;--------------------------------------------------------
                                    1-   48     ; global declarations
                                    1-   49     ;--------------------------------------------------------
                                    1-   50     	extern	_gotoSleep
                                    1-   51     	extern	_keyRead
                                    1-   52     	extern	_init
                                    1-   53     	extern	_processKey
                                    1-   54     	extern	_outCon
                                    1-   55     	extern	_isr
                                    1-   56     	extern	_main
                                    1-   57     	extern	_intCount
                                    1-   58     	extern	_IntFlag
                                    1-   59     	extern	_keyClick
                                    1-   60     	extern	_workStep
                                    1-   61     	extern	_keyCount
                                    1-   62     	extern	_longPressFlag
                                    1-   63     	extern	_count
                                    1-   65     	extern PSAVE
                                    1-   66     	extern SSAVE
                                    1-   67     	extern WSAVE
                                    1-   68     	extern STK12
                                    1-   69     	extern STK11
                                    1-   70     	extern STK10
                                    1-   71     	extern STK09
                                    1-   72     	extern STK08
                                    1-   73     	extern STK07
                                    1-   74     	extern STK06
                                    1-   75     	extern STK05
                                    1-   76     	extern STK04
                                    1-   77     	extern STK03
                                    1-   78     	extern STK02
                                    1-   79     	extern STK01
                                    1-   80     	extern STK00
                                    1-   82     .segment "uninit", 0x20000010
 20000010                           1-   83     PSAVE:
                                    1-   84     	.res 1
 20000011                           1-   85     SSAVE:
                                    1-   86     	.res 1
 20000012                           1-   87     WSAVE:
                                    1-   88     	.res 1
 20000013                           1-   89     STK12:
                                    1-   90     	.res 1
 20000014                           1-   91     STK11:
                                    1-   92     	.res 1
 20000015                           1-   93     STK10:
                                    1-   94     	.res 1
 20000016                           1-   95     STK09:
                                    1-   96     	.res 1
 20000017                           1-   97     STK08:
                                    1-   98     	.res 1
 20000018                           1-   99     STK07:
                                    1-  100     	.res 1
 20000019                           1-  101     STK06:
                                    1-  102     	.res 1
 2000001A                           1-  103     STK05:
                                    1-  104     	.res 1
 2000001B                           1-  105     STK04:
                                    1-  106     	.res 1
 2000001C                           1-  107     STK03:
                                    1-  108     	.res 1
 2000001D                           1-  109     STK02:
                                    1-  110     	.res 1
 2000001E                           1-  111     STK01:
                                    1-  112     	.res 1
 2000001F                           1-  113     STK00:
                                    1-  114     	.res 1
                                    1-  116     ;--------------------------------------------------------
                                    1-  117     ; global definitions
                                    1-  118     ;--------------------------------------------------------
                                    1-  119     ;--------------------------------------------------------
                                    1-  120     ; absolute symbol definitions
                                    1-  121     ;--------------------------------------------------------
                                    1-  122     ;--------------------------------------------------------
                                    1-  123     ; compiler-defined variables
                                    1-  124     ;--------------------------------------------------------
                                    1-  125     .segment "uninit"
     0000                           1-  126     r0x100E:
                                    1-  127     	.res	1
                                    1-  128     .segment "uninit"
     0000                           1-  129     r0x100D:
                                    1-  130     	.res	1
                                    1-  131     ;--------------------------------------------------------
                                    1-  132     ; initialized data
                                    1-  133     ;--------------------------------------------------------
                                    1-  135     .segment "idata"
     0000                           1-  136     _intCount:
     0000 0000                      1-  137     	dw	0x00
                                    1-  141     .segment "idata"
     0000                           1-  142     _IntFlag:
     0000 0000                      1-  143     	dw	0x00
                                    1-  147     .segment "idata"
     0000                           1-  148     _keyClick:
     0000 0000 0000                 1-  149     	dw	0x00, 0x00
                                    1-  153     .segment "idata"
     0000                           1-  154     _workStep:
     0000 0000                      1-  155     	dw	0x00
                                    1-  159     .segment "idata"
     0000                           1-  160     _keyCount:
     0000 0000 0000                 1-  161     	dw	0x00, 0x00
                                    1-  165     .segment "idata"
     0000                           1-  166     _longPressFlag:
     0000 0000                      1-  167     	dw	0x00
                                    1-  171     .segment "idata"
     0000                           1-  172     _count:
     0000 0000 0000                 1-  173     	dw	0x00, 0x00
                                    1-  176     ;--------------------------------------------------------
                                    1-  177     ; overlayable items in internal ram 
                                    1-  178     ;--------------------------------------------------------
                                    1-  179     ;	udata_ovr
                                    1-  180     ;--------------------------------------------------------
                                    1-  181     ; reset vector 
                                    1-  182     ;--------------------------------------------------------
                                    1-  183     ORG	0x0000
     0000 3rrr                      1-  184     	LGOTO	__nyc_ny8_startup
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     ; interrupt and initialization code
                                    1-  187     ;--------------------------------------------------------
                                    1-  188     ORG 0x0008
     0008 3rrr                      1-  189     	lgoto	__sdcc_interrupt
                                    1-  191     .segment "code"
     0000                           1-  192     __sdcc_interrupt:
                                    1-  193     ;***
                                    1-  194     ;  pBlock Stats: dbName = I
                                    1-  195     ;***
                                    1-  196     ;2 compiler assigned registers:
                                    1-  197     ;   STK00
                                    1-  198     ;   STK01
                                    1-  199     ;; Starting pCode block
     0000                           1-  200     _isr:
                                    1-  201     ; 0 exit points
                                    1-  202     	.line	23, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  203     	MOVAR	WSAVE
     0001 1503                      1-  204     	SWAPR	STATUS,W
     0002 0283                      1-  205     	CLRR	STATUS
     0003 00rr                      1-  206     	MOVAR	SSAVE
     0004 010A                      1-  207     	MOVR	PCHBUF,W
     0005 028A                      1-  208     	CLRR	PCHBUF
     0006 00rr                      1-  209     	MOVAR	PSAVE
     0007 0104                      1-  210     	MOVR	FSR,W
     0008 00rr                      1-  211     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  212     	MOVR	STK00,W
     000A 00rr                      1-  213     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  214     	MOVR	STK01,W
     000C 00rr                      1-  215     	MOVAR	___sdcc_saved_stk01
                                    1-  216     	.line	25, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  217     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  218     	LGOTO	_00108_DS_
                                    1-  219     	.line	27, "main.c"; 	TMR0 = 65;
     000F 2141                      1-  220     	MOVIA	0x41
     0010 00rr                      1-  221     	MOVAR	_TMR0
                                    1-  222     	.line	28, "main.c"; 	intCount++;
     0011 05rr                      1-  223     	INCR	_intCount,F
                                    1-  224     	.line	29, "main.c"; 	if(intCount == 100)
     0012 01rr                      1-  225     	MOVR	_intCount,W
     0013 2464                      1-  226     	XORIA	0x64
     0014 0903                      1-  227     	BTRSS	STATUS,2
     0015 3rrr                      1-  228     	LGOTO	_00108_DS_
                                    1-  229     	.line	31, "main.c"; 	intCount = 0;
     0016 02rr                      1-  230     	CLRR	_intCount
                                    1-  231     	.line	32, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  232     	MOVIA	0x01
     0018 00rr                      1-  233     	MOVAR	_IntFlag
     0019                           1-  234     _00108_DS_:
                                    1-  235     	.line	35, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  236     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  237     	LGOTO	_00110_DS_
                                    1-  238     	.line	37, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  239     	MOVIA	0xfd
     001C 00rr                      1-  240     	MOVAR	_INTF
     001D                           1-  241     _00110_DS_:
                                    1-  242     	.line	40, "main.c"; 	INTF = 0;
     001D 02rr                      1-  243     	CLRR	_INTF
                                    1-  244     	.line	42, "main.c"; 	}
     001E 01rr                      1-  245     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  246     	MOVAR	STK01
     0020 01rr                      1-  247     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  248     	MOVAR	STK00
     0022 01rr                      1-  249     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  250     	MOVAR	FSR
     0024 01rr                      1-  251     	MOVR	PSAVE,W
     0025 008A                      1-  252     	MOVAR	PCHBUF
     0026 0283                      1-  253     	CLRR	STATUS
     0027 15rr                      1-  254     	SWAPR	SSAVE,W
     0028 0083                      1-  255     	MOVAR	STATUS
     0029 15rr                      1-  256     	SWAPR	WSAVE,F
     002A 15rr                      1-  257     	SWAPR	WSAVE,W
     002B                           1-  258     END_OF_INTERRUPT:
     002B 0011                      1-  259     	RETIE	
                                    1-  261     ;--------------------------------------------------------
                                    1-  262     ; code
                                    1-  263     ;--------------------------------------------------------
                                    1-  264     ;***
                                    1-  265     ;  pBlock Stats: dbName = M
                                    1-  266     ;***
                                    1-  267     ;has an exit
                                    1-  268     ;functions called:
                                    1-  269     ;   _init
                                    1-  270     ;   _processKey
                                    1-  271     ;   _outCon
                                    1-  272     ;   _init
                                    1-  273     ;   _processKey
                                    1-  274     ;   _outCon
                                    1-  275     ;; Starting pCode block
                                    1-  276     .segment "code"; module=main, function=_main
     0000                           1-  278     _main:
                                    1-  279     ; 2 exit points
                                    1-  280     	.line	47, "main.c"; 	init();
     0000 2rrr                      1-  281     	LCALL	_init
     0001                           1-  282     _00118_DS_:
                                    1-  283     	.line	51, "main.c"; 	CLRWDT(); 
     0001 0002                      1-  284     	clrwdt
                                    1-  285     	.line	52, "main.c"; 	if(!IntFlag)
     0002 01rr                      1-  286     	MOVR	_IntFlag,W
     0003 0D03                      1-  287     	BTRSC	STATUS,2
     0004 3rrr                      1-  288     	LGOTO	_00118_DS_
                                    1-  289     	.line	54, "main.c"; 	IntFlag = 0;
     0005 02rr                      1-  290     	CLRR	_IntFlag
                                    1-  291     	.line	55, "main.c"; 	processKey();
     0006 2rrr                      1-  292     	LCALL	_processKey
                                    1-  293     	.line	56, "main.c"; 	outCon();
     0007 2rrr                      1-  294     	LCALL	_outCon
     0008 3rrr                      1-  295     	LGOTO	_00118_DS_
                                    1-  296     	.line	60, "main.c"; 	}
                                    1-  297     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1-  298     ; exit point of _main
                                    1-  300     ;***
                                    1-  301     ;  pBlock Stats: dbName = C
                                    1-  302     ;***
                                    1-  303     ;has an exit
                                    1-  304     ;; Starting pCode block
                                    1-  305     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  307     _gotoSleep:
                                    1-  308     ; 2 exit points
                                    1-  309     	.line	209, "main.c"; 	PORTB = 0x01; 
     0000 2101                      1-  310     	MOVIA	0x01
     0001 00rr                      1-  311     	MOVAR	_PORTB
                                    1-  312     	.line	210, "main.c"; 	keyCount = 0;
     0002 02rr                      1-  313     	CLRR	_keyCount
     0003 02rr                      1-  314     	CLRR	(_keyCount + 1)
                                    1-  315     	.line	211, "main.c"; 	count = 0;
     0004 02rr                      1-  316     	CLRR	_count
     0005 02rr                      1-  317     	CLRR	(_count + 1)
                                    1-  318     	.line	212, "main.c"; 	BWUCON = 0x01;		//PB0唤醒
     0006 2101                      1-  319     	MOVIA	0x01
     0007 00rr                      1-  320     	MOVAR	_BWUCON
                                    1-  321     	.line	213, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0008 2103                      1-  322     	MOVIA	0x03
     0009 00rr                      1-  323     	MOVAR	_INTE
                                    1-  324     	.line	214, "main.c"; 	PCON =  C_LVR_En;	
     000A 2108                      1-  325     	MOVIA	0x08
     000B 00rr                      1-  326     	MOVAR	_PCON
                                    1-  327     	.line	215, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000C 02rr                      1-  328     	CLRR	_INTF
                                    1-  329     	.line	216, "main.c"; 	CLRWDT();
     000D 0002                      1-  330     	clrwdt
                                    1-  331     	.line	217, "main.c"; 	SLEEP();
     000E 0001                      1-  332     	sleep
                                    1-  333     	.line	218, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000F 2101                      1-  334     	MOVIA	0x01
     0010 00rr                      1-  335     	MOVAR	_INTE
                                    1-  336     	.line	219, "main.c"; 	INTF = 0;
     0011 02rr                      1-  337     	CLRR	_INTF
                                    1-  338     	.line	221, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0012 2188                      1-  339     	MOVIA	0x88
     0013 00rr                      1-  340     	MOVAR	_PCON
                                    1-  341     	.line	222, "main.c"; 	PCON |= 0x10;			//PA5关闭上拉
     0014 1Arr                      1-  342     	BSR	_PCON,4
                                    1-  343     	.line	223, "main.c"; 	}
                                    1-  344     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  345     ; exit point of _gotoSleep
                                    1-  347     ;***
                                    1-  348     ;  pBlock Stats: dbName = C
                                    1-  349     ;***
                                    1-  350     ;has an exit
                                    1-  351     ;1 compiler assigned register :
                                    1-  352     ;   r0x100D
                                    1-  353     ;; Starting pCode block
                                    1-  354     .segment "code"; module=main, function=_keyRead
                                    1-  356     ;local variable name mapping:
     0000                           1-  358     _keyRead:
                                    1-  359     ; 2 exit points
                                    1-  360     	.line	169, "main.c"; 	char keyRead(char KeyStatus)	
     0000 00rr                      1-  361     	MOVAR	r0x100D
                                    1-  362     	.line	171, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  363     	MOVR	r0x100D,W
     0002 0D03                      1-  364     	BTRSC	STATUS,2
     0003 3rrr                      1-  365     	LGOTO	_00232_DS_
                                    1-  366     	.line	173, "main.c"; 	keyCount++;
     0004 05rr                      1-  367     	INCR	_keyCount,F
     0005 0D03                      1-  368     	BTRSC	STATUS,2
     0006 05rr                      1-  369     	INCR	(_keyCount + 1),F
                                    1-  370     ;;unsigned compare: left < lit (0x12C=300), size=2
                                    1-  371     	.line	174, "main.c"; 	if(keyCount >= 300)
     0007 2101                      1-  372     	MOVIA	0x01
     0008 04rr                      1-  373     	SUBAR	(_keyCount + 1),W
     0009 0903                      1-  374     	BTRSS	STATUS,2
     000A 3rrr                      1-  375     	LGOTO	_00254_DS_
     000B 212C                      1-  376     	MOVIA	0x2c
     000C 04rr                      1-  377     	SUBAR	_keyCount,W
     000D                           1-  378     _00254_DS_:
     000D 0803                      1-  379     	BTRSS	STATUS,0
     000E 3rrr                      1-  380     	LGOTO	_00233_DS_
                                    1-  381     ;;unsigned compare: left < lit (0xBB8=3000), size=2
                                    1-  382     	.line	176, "main.c"; 	if(keyCount >= 3000)
     000F 210B                      1-  383     	MOVIA	0x0b
     0010 04rr                      1-  384     	SUBAR	(_keyCount + 1),W
     0011 0903                      1-  385     	BTRSS	STATUS,2
     0012 3rrr                      1-  386     	LGOTO	_00255_DS_
     0013 21B8                      1-  387     	MOVIA	0xb8
     0014 04rr                      1-  388     	SUBAR	_keyCount,W
     0015                           1-  389     _00255_DS_:
     0015 0803                      1-  390     	BTRSS	STATUS,0
     0016 3rrr                      1-  391     	LGOTO	_00221_DS_
                                    1-  392     	.line	178, "main.c"; 	return 3;	//30S超时
     0017 2103                      1-  393     	MOVIA	0x03
     0018 3rrr                      1-  394     	LGOTO	_00234_DS_
     0019                           1-  395     _00221_DS_:
                                    1-  396     	.line	180, "main.c"; 	if(!longPressFlag)
     0019 01rr                      1-  397     	MOVR	_longPressFlag,W
     001A 0903                      1-  398     	BTRSS	STATUS,2
     001B 3rrr                      1-  399     	LGOTO	_00233_DS_
                                    1-  400     	.line	182, "main.c"; 	longPressFlag = 1;
     001C 2101                      1-  401     	MOVIA	0x01
     001D 00rr                      1-  402     	MOVAR	_longPressFlag
                                    1-  403     	.line	183, "main.c"; 	return 2;
     001E 2102                      1-  404     	MOVIA	0x02
     001F 3rrr                      1-  405     	LGOTO	_00234_DS_
                                    1-  406     ;;unsigned compare: left < lit (0x12C=300), size=2
     0020                           1-  407     _00232_DS_:
                                    1-  408     	.line	189, "main.c"; 	if(keyCount >= 300)
     0020 2101                      1-  409     	MOVIA	0x01
     0021 04rr                      1-  410     	SUBAR	(_keyCount + 1),W
     0022 0903                      1-  411     	BTRSS	STATUS,2
     0023 3rrr                      1-  412     	LGOTO	_00256_DS_
     0024 212C                      1-  413     	MOVIA	0x2c
     0025 04rr                      1-  414     	SUBAR	_keyCount,W
     0026                           1-  415     _00256_DS_:
     0026 0803                      1-  416     	BTRSS	STATUS,0
     0027 3rrr                      1-  417     	LGOTO	_00229_DS_
                                    1-  418     	.line	191, "main.c"; 	keyCount = 0;
     0028 02rr                      1-  419     	CLRR	_keyCount
     0029 02rr                      1-  420     	CLRR	(_keyCount + 1)
                                    1-  421     	.line	192, "main.c"; 	longPressFlag = 0;
     002A 02rr                      1-  422     	CLRR	_longPressFlag
                                    1-  423     	.line	193, "main.c"; 	return	0;
     002B 2100                      1-  424     	MOVIA	0x00
     002C 3rrr                      1-  425     	LGOTO	_00234_DS_
                                    1-  426     ;;unsigned compare: left < lit (0x8=8), size=2
     002D                           1-  427     _00229_DS_:
                                    1-  428     	.line	195, "main.c"; 	else if(keyCount >= 8)
     002D 2100                      1-  429     	MOVIA	0x00
     002E 04rr                      1-  430     	SUBAR	(_keyCount + 1),W
     002F 0903                      1-  431     	BTRSS	STATUS,2
     0030 3rrr                      1-  432     	LGOTO	_00257_DS_
     0031 2108                      1-  433     	MOVIA	0x08
     0032 04rr                      1-  434     	SUBAR	_keyCount,W
     0033                           1-  435     _00257_DS_:
     0033 0803                      1-  436     	BTRSS	STATUS,0
     0034 3rrr                      1-  437     	LGOTO	_00230_DS_
                                    1-  438     	.line	197, "main.c"; 	keyCount = 0;
     0035 02rr                      1-  439     	CLRR	_keyCount
     0036 02rr                      1-  440     	CLRR	(_keyCount + 1)
                                    1-  441     	.line	198, "main.c"; 	return	1;
     0037 2101                      1-  442     	MOVIA	0x01
     0038 3rrr                      1-  443     	LGOTO	_00234_DS_
     0039                           1-  444     _00230_DS_:
                                    1-  445     	.line	200, "main.c"; 	keyCount = 0;
     0039 02rr                      1-  446     	CLRR	_keyCount
     003A 02rr                      1-  447     	CLRR	(_keyCount + 1)
     003B                           1-  448     _00233_DS_:
                                    1-  449     	.line	202, "main.c"; 	return 0;
     003B 2100                      1-  450     	MOVIA	0x00
     003C                           1-  451     _00234_DS_:
                                    1-  452     	.line	203, "main.c"; 	}
                                    1-  453     	RETURN	
     003C 0010                      3-   26 m1      ret
                                    1-  454     ; exit point of _keyRead
                                    1-  456     ;***
                                    1-  457     ;  pBlock Stats: dbName = C
                                    1-  458     ;***
                                    1-  459     ;has an exit
                                    1-  460     ;; Starting pCode block
                                    1-  461     .segment "code"; module=main, function=_init
     0000                           1-  463     _init:
                                    1-  464     ; 2 exit points
                                    1-  465     	.line	145, "main.c"; 	PORTB = 0x00;         
     0000 02rr                      1-  466     	CLRR	_PORTB
                                    1-  467     	.line	146, "main.c"; 	IOSTB =  C_PB0_Input;								// Set PB to output mode
     0001 2101                      1-  468     	MOVIA	0x01
     0002 000r                      1-  469     	IOST	_IOSTB
                                    1-  470     	.line	147, "main.c"; 	BPHCON = 0xFE;
     0003 21FE                      1-  471     	MOVIA	0xfe
     0004 00rr                      1-  472     	MOVAR	_BPHCON
                                    1-  473     	.line	148, "main.c"; 	BPLCON = 0xFF;
     0005 21FF                      1-  474     	MOVIA	0xff
     0006 00rr                      1-  475     	MOVAR	_BPLCON
                                    1-  476     	.line	149, "main.c"; 	PORTB = 0x01;                           	
     0007 2101                      1-  477     	MOVIA	0x01
     0008 00rr                      1-  478     	MOVAR	_PORTB
                                    1-  479     	.line	153, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     0009 2188                      1-  480     	MOVIA	0x88
     000A 00rr                      1-  481     	MOVAR	_PCON
                                    1-  482     	.line	154, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000B 2101                      1-  483     	MOVIA	0x01
     000C 00rr                      1-  484     	MOVAR	_INTE
                                    1-  485     	.line	155, "main.c"; 	INTF = 0;
     000D 02rr                      1-  486     	CLRR	_INTF
                                    1-  487     	.line	158, "main.c"; 	PCON1 = C_TMR0_Dis;
     000E 0200                      1-  488     	CLRA	
     000F 000r                      1-  489     	IOST	_PCON1
                                    1-  490     	.line	160, "main.c"; 	TMR0 = 55;
     0010 2137                      1-  491     	MOVIA	0x37
     0011 00rr                      1-  492     	MOVAR	_TMR0
                                    1-  493     	.line	161, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0012 0200                      1-  494     	CLRA	
     0013 0003                      1-  495     	T0MD	
                                    1-  496     	.line	163, "main.c"; 	PCON1 = C_TMR0_En;
     0014 2101                      1-  497     	MOVIA	0x01
     0015 000r                      1-  498     	IOST	_PCON1
                                    1-  499     	.line	165, "main.c"; 	ENI();
     0016 0004                      1-  500     	ENI
                                    1-  501     	.line	166, "main.c"; 	}
                                    1-  502     	RETURN	
     0017 0010                      3-   26 m1      ret
                                    1-  503     ; exit point of _init
                                    1-  505     ;***
                                    1-  506     ;  pBlock Stats: dbName = C
                                    1-  507     ;***
                                    1-  508     ;has an exit
                                    1-  509     ;functions called:
                                    1-  510     ;   _keyRead
                                    1-  511     ;   _gotoSleep
                                    1-  512     ;   _gotoSleep
                                    1-  513     ;   _keyRead
                                    1-  514     ;   _gotoSleep
                                    1-  515     ;   _gotoSleep
                                    1-  516     ;1 compiler assigned register :
                                    1-  517     ;   r0x100E
                                    1-  518     ;; Starting pCode block
                                    1-  519     .segment "code"; module=main, function=_processKey
     0000                           1-  521     _processKey:
                                    1-  522     ; 2 exit points
                                    1-  523     	.line	104, "main.c"; 	keyClick = keyRead((~PORTB)&0x01);
     0000 07rr                      1-  524     	COMR	_PORTB,W
     0001 00rr                      1-  525     	MOVAR	r0x100E
     0002 2101                      1-  526     	MOVIA	0x01
     0003 10rr                      1-  527     	ANDAR	r0x100E,F
     0004 01rr                      1-  528     	MOVR	r0x100E,W
     0005 2rrr                      1-  529     	LCALL	_keyRead
     0006 00rr                      1-  530     	MOVAR	r0x100E
     0007 00rr                      1-  531     	MOVAR	_keyClick
     0008 02rr                      1-  532     	CLRR	(_keyClick + 1)
                                    1-  533     	.line	105, "main.c"; 	if(workStep == 10)
     0009 01rr                      1-  534     	MOVR	_workStep,W
     000A 240A                      1-  535     	XORIA	0x0a
     000B 0903                      1-  536     	BTRSS	STATUS,2
     000C 3rrr                      1-  537     	LGOTO	_00196_DS_
                                    1-  538     	.line	107, "main.c"; 	PORTB &= ~0x32;
     000D 21CD                      1-  539     	MOVIA	0xcd
     000E 10rr                      1-  540     	ANDAR	_PORTB,F
                                    1-  541     	.line	108, "main.c"; 	if(--count == 0)
     000F 21FF                      1-  542     	MOVIA	0xff
     0010 03rr                      1-  543     	ADDAR	_count,F
     0011 0803                      1-  544     	BTRSS	STATUS,0
     0012 06rr                      1-  545     	DECR	(_count + 1),F
     0013 01rr                      1-  546     	MOVR	_count,W
     0014 11rr                      1-  547     	IORAR	(_count + 1),W
     0015 0903                      1-  548     	BTRSS	STATUS,2
     0016 3rrr                      1-  549     	LGOTO	_00196_DS_
                                    1-  550     	.line	110, "main.c"; 	workStep = 2;	//3分钟后进入中档
     0017 2102                      1-  551     	MOVIA	0x02
     0018 00rr                      1-  552     	MOVAR	_workStep
     0019                           1-  553     _00196_DS_:
                                    1-  554     	.line	113, "main.c"; 	if(keyClick == 1 && workStep)
     0019 01rr                      1-  555     	MOVR	_keyClick,W
     001A 2401                      1-  556     	XORIA	0x01
     001B 0903                      1-  557     	BTRSS	STATUS,2
     001C 3rrr                      1-  558     	LGOTO	_00208_DS_
     001D 01rr                      1-  559     	MOVR	(_keyClick + 1),W
     001E 2400                      1-  560     	XORIA	0x00
     001F 0903                      1-  561     	BTRSS	STATUS,2
     0020 3rrr                      1-  562     	LGOTO	_00208_DS_
     0021 01rr                      1-  563     	MOVR	_workStep,W
     0022 0D03                      1-  564     	BTRSC	STATUS,2
     0023 3rrr                      1-  565     	LGOTO	_00208_DS_
                                    1-  566     	.line	115, "main.c"; 	count = 0;
     0024 02rr                      1-  567     	CLRR	_count
     0025 02rr                      1-  568     	CLRR	(_count + 1)
                                    1-  569     	.line	116, "main.c"; 	PORTB &= ~0x32;
     0026 21CD                      1-  570     	MOVIA	0xcd
     0027 10rr                      1-  571     	ANDAR	_PORTB,F
                                    1-  572     	.line	117, "main.c"; 	if(++workStep >= 4)
     0028 05rr                      1-  573     	INCR	_workStep,F
                                    1-  574     ;;unsigned compare: left < lit (0x4=4), size=1
     0029 2104                      1-  575     	MOVIA	0x04
     002A 04rr                      1-  576     	SUBAR	_workStep,W
     002B 0803                      1-  577     	BTRSS	STATUS,0
     002C 3rrr                      1-  578     	LGOTO	_00211_DS_
                                    1-  579     	.line	119, "main.c"; 	workStep = 1;
     002D 2101                      1-  580     	MOVIA	0x01
     002E 00rr                      1-  581     	MOVAR	_workStep
     002F 3rrr                      1-  582     	LGOTO	_00211_DS_
     0030                           1-  583     _00208_DS_:
                                    1-  584     	.line	123, "main.c"; 	else if(keyClick == 2)
     0030 01rr                      1-  585     	MOVR	_keyClick,W
     0031 2402                      1-  586     	XORIA	0x02
     0032 0903                      1-  587     	BTRSS	STATUS,2
     0033 3rrr                      1-  588     	LGOTO	_00205_DS_
     0034 01rr                      1-  589     	MOVR	(_keyClick + 1),W
     0035 2400                      1-  590     	XORIA	0x00
     0036 0903                      1-  591     	BTRSS	STATUS,2
     0037 3rrr                      1-  592     	LGOTO	_00205_DS_
                                    1-  593     	.line	125, "main.c"; 	if(workStep)
     0038 01rr                      1-  594     	MOVR	_workStep,W
     0039 0D03                      1-  595     	BTRSC	STATUS,2
     003A 3rrr                      1-  596     	LGOTO	_00200_DS_
                                    1-  597     	.line	127, "main.c"; 	workStep = 0;	//关机
     003B 02rr                      1-  598     	CLRR	_workStep
                                    1-  599     	.line	128, "main.c"; 	gotoSleep();
     003C 2rrr                      1-  600     	LCALL	_gotoSleep
     003D 3rrr                      1-  601     	LGOTO	_00211_DS_
     003E                           1-  602     _00200_DS_:
                                    1-  603     	.line	132, "main.c"; 	workStep = 10;//预热模式
     003E 210A                      1-  604     	MOVIA	0x0a
     003F 00rr                      1-  605     	MOVAR	_workStep
                                    1-  606     	.line	133, "main.c"; 	count = 18000;
     0040 2150                      1-  607     	MOVIA	0x50
     0041 00rr                      1-  608     	MOVAR	_count
     0042 2146                      1-  609     	MOVIA	0x46
     0043 00rr                      1-  610     	MOVAR	(_count + 1)
     0044 3rrr                      1-  611     	LGOTO	_00211_DS_
     0045                           1-  612     _00205_DS_:
                                    1-  613     	.line	136, "main.c"; 	else if(keyClick == 3)
     0045 01rr                      1-  614     	MOVR	_keyClick,W
     0046 2403                      1-  615     	XORIA	0x03
     0047 0903                      1-  616     	BTRSS	STATUS,2
     0048 3rrr                      1-  617     	LGOTO	_00211_DS_
     0049 01rr                      1-  618     	MOVR	(_keyClick + 1),W
     004A 2400                      1-  619     	XORIA	0x00
     004B 0903                      1-  620     	BTRSS	STATUS,2
     004C 3rrr                      1-  621     	LGOTO	_00211_DS_
                                    1-  622     	.line	138, "main.c"; 	workStep = 0;	//超时关机
     004D 02rr                      1-  623     	CLRR	_workStep
                                    1-  624     	.line	139, "main.c"; 	gotoSleep();
     004E 2rrr                      1-  625     	LCALL	_gotoSleep
     004F                           1-  626     _00211_DS_:
                                    1-  627     	.line	141, "main.c"; 	}
                                    1-  628     	RETURN	
     004F 0010                      3-   26 m1      ret
                                    1-  629     ; exit point of _processKey
                                    1-  631     ;***
                                    1-  632     ;  pBlock Stats: dbName = C
                                    1-  633     ;***
                                    1-  634     ;has an exit
                                    1-  635     ;functions called:
                                    1-  636     ;   _gotoSleep
                                    1-  637     ;   _gotoSleep
                                    1-  638     ;; Starting pCode block
                                    1-  639     .segment "code"; module=main, function=_outCon
     0000                           1-  641     _outCon:
                                    1-  642     ; 2 exit points
                                    1-  643     	.line	65, "main.c"; 	switch(workStep)
     0000 01rr                      1-  644     	MOVR	_workStep,W
     0001 0D03                      1-  645     	BTRSC	STATUS,2
     0002 3rrr                      1-  646     	LGOTO	_00123_DS_
     0003 01rr                      1-  647     	MOVR	_workStep,W
     0004 2401                      1-  648     	XORIA	0x01
     0005 0D03                      1-  649     	BTRSC	STATUS,2
     0006 3rrr                      1-  650     	LGOTO	_00127_DS_
     0007 01rr                      1-  651     	MOVR	_workStep,W
     0008 2402                      1-  652     	XORIA	0x02
     0009 0D03                      1-  653     	BTRSC	STATUS,2
     000A 3rrr                      1-  654     	LGOTO	_00130_DS_
     000B 01rr                      1-  655     	MOVR	_workStep,W
     000C 2403                      1-  656     	XORIA	0x03
     000D 0D03                      1-  657     	BTRSC	STATUS,2
     000E 3rrr                      1-  658     	LGOTO	_00133_DS_
     000F 01rr                      1-  659     	MOVR	_workStep,W
     0010 240A                      1-  660     	XORIA	0x0a
     0011 0D03                      1-  661     	BTRSC	STATUS,2
     0012 3rrr                      1-  662     	LGOTO	_00136_DS_
     0013 3rrr                      1-  663     	LGOTO	_00137_DS_
     0014                           1-  664     _00123_DS_:
                                    1-  665     	.line	68, "main.c"; 	if((!keyCount) &&++count == 200)
     0014 01rr                      1-  666     	MOVR	_keyCount,W
     0015 11rr                      1-  667     	IORAR	(_keyCount + 1),W
     0016 0903                      1-  668     	BTRSS	STATUS,2
     0017 3rrr                      1-  669     	LGOTO	_00137_DS_
     0018 05rr                      1-  670     	INCR	_count,F
     0019 0D03                      1-  671     	BTRSC	STATUS,2
     001A 05rr                      1-  672     	INCR	(_count + 1),F
     001B 01rr                      1-  673     	MOVR	_count,W
     001C 24C8                      1-  674     	XORIA	0xc8
     001D 0903                      1-  675     	BTRSS	STATUS,2
     001E 3rrr                      1-  676     	LGOTO	_00137_DS_
     001F 01rr                      1-  677     	MOVR	(_count + 1),W
     0020 2400                      1-  678     	XORIA	0x00
     0021 0903                      1-  679     	BTRSS	STATUS,2
     0022 3rrr                      1-  680     	LGOTO	_00137_DS_
                                    1-  681     	.line	69, "main.c"; 	gotoSleep();
     0023 2rrr                      1-  682     	LCALL	_gotoSleep
                                    1-  683     	.line	70, "main.c"; 	break;
     0024 3rrr                      1-  684     	LGOTO	_00137_DS_
     0025                           1-  685     _00127_DS_:
                                    1-  686     	.line	72, "main.c"; 	PORTB |= 0x20;
     0025 1Arr                      1-  687     	BSR	_PORTB,5
                                    1-  688     	.line	73, "main.c"; 	if(count == 300)
     0026 01rr                      1-  689     	MOVR	_count,W
     0027 242C                      1-  690     	XORIA	0x2c
     0028 0903                      1-  691     	BTRSS	STATUS,2
     0029 3rrr                      1-  692     	LGOTO	_00137_DS_
     002A 01rr                      1-  693     	MOVR	(_count + 1),W
     002B 2401                      1-  694     	XORIA	0x01
     002C 0903                      1-  695     	BTRSS	STATUS,2
     002D 3rrr                      1-  696     	LGOTO	_00137_DS_
                                    1-  697     	.line	74, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     002E 1Drr                      1-  698     	BCR	_PORTB,2
                                    1-  699     	.line	75, "main.c"; 	break;
     002F 3rrr                      1-  700     	LGOTO	_00137_DS_
     0030                           1-  701     _00130_DS_:
                                    1-  702     	.line	77, "main.c"; 	PORTB |= 0x10;
     0030 1Arr                      1-  703     	BSR	_PORTB,4
                                    1-  704     	.line	78, "main.c"; 	if(count == 200)
     0031 01rr                      1-  705     	MOVR	_count,W
     0032 24C8                      1-  706     	XORIA	0xc8
     0033 0903                      1-  707     	BTRSS	STATUS,2
     0034 3rrr                      1-  708     	LGOTO	_00137_DS_
     0035 01rr                      1-  709     	MOVR	(_count + 1),W
     0036 2400                      1-  710     	XORIA	0x00
     0037 0903                      1-  711     	BTRSS	STATUS,2
     0038 3rrr                      1-  712     	LGOTO	_00137_DS_
                                    1-  713     	.line	79, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     0039 1Drr                      1-  714     	BCR	_PORTB,2
                                    1-  715     	.line	80, "main.c"; 	break;
     003A 3rrr                      1-  716     	LGOTO	_00137_DS_
     003B                           1-  717     _00133_DS_:
                                    1-  718     	.line	82, "main.c"; 	PORTB |= 0x02;
     003B 18rr                      1-  719     	BSR	_PORTB,1
                                    1-  720     	.line	83, "main.c"; 	if(count == 100)
     003C 01rr                      1-  721     	MOVR	_count,W
     003D 2464                      1-  722     	XORIA	0x64
     003E 0903                      1-  723     	BTRSS	STATUS,2
     003F 3rrr                      1-  724     	LGOTO	_00137_DS_
     0040 01rr                      1-  725     	MOVR	(_count + 1),W
     0041 2400                      1-  726     	XORIA	0x00
     0042 0903                      1-  727     	BTRSS	STATUS,2
     0043 3rrr                      1-  728     	LGOTO	_00137_DS_
                                    1-  729     	.line	84, "main.c"; 	PORTB &= 0xFB;	//PB2输出低
     0044 1Drr                      1-  730     	BCR	_PORTB,2
                                    1-  731     	.line	85, "main.c"; 	break;
     0045 3rrr                      1-  732     	LGOTO	_00137_DS_
     0046                           1-  733     _00136_DS_:
                                    1-  734     	.line	87, "main.c"; 	PORTB |= 0x04;	//PB2输出为高
     0046 19rr                      1-  735     	BSR	_PORTB,2
     0047                           1-  736     _00137_DS_:
                                    1-  737     	.line	91, "main.c"; 	if(workStep > 0 && workStep < 4)
     0047 01rr                      1-  738     	MOVR	_workStep,W
     0048 0D03                      1-  739     	BTRSC	STATUS,2
     0049 3rrr                      1-  740     	LGOTO	_00143_DS_
                                    1-  741     ;;unsigned compare: left < lit (0x4=4), size=1
     004A 2104                      1-  742     	MOVIA	0x04
     004B 04rr                      1-  743     	SUBAR	_workStep,W
     004C 0C03                      1-  744     	BTRSC	STATUS,0
     004D 3rrr                      1-  745     	LGOTO	_00143_DS_
                                    1-  746     	.line	93, "main.c"; 	if(++count == 400)
     004E 05rr                      1-  747     	INCR	_count,F
     004F 0D03                      1-  748     	BTRSC	STATUS,2
     0050 05rr                      1-  749     	INCR	(_count + 1),F
     0051 01rr                      1-  750     	MOVR	_count,W
     0052 2490                      1-  751     	XORIA	0x90
     0053 0903                      1-  752     	BTRSS	STATUS,2
     0054 3rrr                      1-  753     	LGOTO	_00143_DS_
     0055 01rr                      1-  754     	MOVR	(_count + 1),W
     0056 2401                      1-  755     	XORIA	0x01
     0057 0903                      1-  756     	BTRSS	STATUS,2
     0058 3rrr                      1-  757     	LGOTO	_00143_DS_
                                    1-  758     	.line	95, "main.c"; 	count = 0;
     0059 02rr                      1-  759     	CLRR	_count
     005A 02rr                      1-  760     	CLRR	(_count + 1)
                                    1-  761     	.line	96, "main.c"; 	PORTB |= 0x04;	//PB2输出为高
     005B 19rr                      1-  762     	BSR	_PORTB,2
     005C                           1-  763     _00143_DS_:
                                    1-  764     	.line	99, "main.c"; 	}
                                    1-  765     	RETURN	
     005C 0010                      3-   26 m1      ret
                                    1-  766     ; exit point of _outCon
                                    1-  769     ;	code size estimation:
                                    1-  770     ;	  330+    0 =   330 instructions (  660 byte)
                                    1-  772     	end
                                    1-  772     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800503
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00118_DS_              Label    00000001
_00123_DS_              Label    00000014
_00127_DS_              Label    00000025
_00130_DS_              Label    00000030
_00133_DS_              Label    0000003B
_00136_DS_              Label    00000046
_00137_DS_              Label    00000047
_00143_DS_              Label    0000005C
_00196_DS_              Label    00000019
_00200_DS_              Label    0000003E
_00205_DS_              Label    00000045
_00208_DS_              Label    00000030
_00211_DS_              Label    0000004F
_00221_DS_              Label    00000019
_00229_DS_              Label    0000002D
_00230_DS_              Label    00000039
_00232_DS_              Label    00000020
_00233_DS_              Label    0000003B
_00234_DS_              Label    0000003C
_00254_DS_              Label    0000000D
_00255_DS_              Label    00000015
_00256_DS_              Label    00000026
_00257_DS_              Label    00000033
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_count                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_longPressFlag          Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_outCon                 Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_processKey             Label    00000000
_PS0CV                  Label    00000000
_read_14bit_rom         Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a050d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A050D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000001FF
DATA ROM     = 0x00000000 - 0x000001FF
RESERVED MEM = 0x00000200 - 0x00000210
SRAM / SFR   = 0x00000000 - 0x00000000
