
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_checkV
                                    1-   15     	extern	_F_AIN7_Convert
                                    1-   16     	extern	_PORTAbits
                                    1-   17     	extern	_PORTBbits
                                    1-   18     	extern	_PCONbits
                                    1-   19     	extern	_BWUCONbits
                                    1-   20     	extern	_ABPLCONbits
                                    1-   21     	extern	_BPHCONbits
                                    1-   22     	extern	_INTEbits
                                    1-   23     	extern	_INTFbits
                                    1-   24     	extern	_ADMDbits
                                    1-   25     	extern	_ADRbits
                                    1-   26     	extern	_ADVREFHbits
                                    1-   27     	extern	_ADCRbits
                                    1-   28     	extern	_AWUCONbits
                                    1-   29     	extern	_PACONbits
                                    1-   30     	extern	_INTEDGbits
                                    1-   31     	extern	_ANAENbits
                                    1-   32     	extern	_RFCbits
                                    1-   33     	extern	_INTE2bits
                                    1-   34     	extern	_INDF
                                    1-   35     	extern	_TMR0
                                    1-   36     	extern	_PCL
                                    1-   37     	extern	_STATUS
                                    1-   38     	extern	_FSR
                                    1-   39     	extern	_PORTA
                                    1-   40     	extern	_PORTB
                                    1-   41     	extern	_PCON
                                    1-   42     	extern	_BWUCON
                                    1-   43     	extern	_PCHBUF
                                    1-   44     	extern	_ABPLCON
                                    1-   45     	extern	_BPHCON
                                    1-   46     	extern	_INTE
                                    1-   47     	extern	_INTF
                                    1-   48     	extern	_ADMD
                                    1-   49     	extern	_ADR
                                    1-   50     	extern	_ADD
                                    1-   51     	extern	_ADVREFH
                                    1-   52     	extern	_ADCR
                                    1-   53     	extern	_AWUCON
                                    1-   54     	extern	_PACON
                                    1-   55     	extern	_INTEDG
                                    1-   56     	extern	_TMRH
                                    1-   57     	extern	_ANAEN
                                    1-   58     	extern	_RFC
                                    1-   59     	extern	_TM3RH
                                    1-   60     	extern	_INTE2
                                    1-   61     	extern	_TMR1
                                    1-   62     	extern	_T1CR1
                                    1-   63     	extern	_T1CR2
                                    1-   64     	extern	_PWM1DUTY
                                    1-   65     	extern	_PS1CV
                                    1-   66     	extern	_BZ1CR
                                    1-   67     	extern	_IRCR
                                    1-   68     	extern	_TBHP
                                    1-   69     	extern	_TBHD
                                    1-   70     	extern	_TMR2
                                    1-   71     	extern	_T2CR1
                                    1-   72     	extern	_T2CR2
                                    1-   73     	extern	_PWM2DUTY
                                    1-   74     	extern	_PS2CV
                                    1-   75     	extern	_BZ2CR
                                    1-   76     	extern	_OSCCR
                                    1-   77     	extern	_TMR3
                                    1-   78     	extern	_T3CR1
                                    1-   79     	extern	_T3CR2
                                    1-   80     	extern	_PWM3DUTY
                                    1-   81     	extern	_PS3CV
                                    1-   82     	extern	_BZ3CR
                                    1-   83     	extern	_IOSTA
                                    1-   84     	extern	_IOSTB
                                    1-   85     	extern	_APHCON
                                    1-   86     	extern	_PS0CV
                                    1-   87     	extern	_BODCON
                                    1-   88     	extern	_CMPCR
                                    1-   89     	extern	_PCON1
                                    1-   90     	extern	_T0MD
                                    1-   91     	extern	___sdcc_saved_fsr
                                    1-   92     	extern	___sdcc_saved_stk00
                                    1-   93     	extern	___sdcc_saved_stk01
                                    1-   94     	extern	__nyc_ny8_startup
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     ; global declarations
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     	extern	_closeChrg
                                    1-   99     	extern	_halfChrg
                                    1-  100     	extern	_fullChrg
                                    1-  101     	extern	_delay
                                    1-  102     	extern	_F_wait_eoc
                                    1-  103     	extern	_F_AIN0_Convert
                                    1-  104     	extern	_checkA
                                    1-  105     	extern	_initAD
                                    1-  106     	extern	_ledCtr
                                    1-  107     	extern	_pwmStart
                                    1-  108     	extern	_ledCon
                                    1-  109     	extern	_initTimer0
                                    1-  110     	extern	_workCon
                                    1-  111     	extern	_setDuty
                                    1-  112     	extern	_isr
                                    1-  113     	extern	_main
                                    1-  114     	extern	_pwmStop
                                    1-  115     	extern	_keyClick
                                    1-  116     	extern	_intCount
                                    1-  117     	extern	_IntFlag
                                    1-  118     	extern	_ledCount
                                    1-  119     	extern	_R_AIN0_DATA
                                    1-  120     	extern	_R_AIN0_DATA_LB
                                    1-  121     	extern	_R_AIN7_DATA
                                    1-  122     	extern	_R_AIN7_DATA_LB
                                    1-  123     	extern	_workStep
                                    1-  124     	extern	_ledStep
                                    1-  125     	extern	_sleepCount
                                    1-  126     	extern	_chrgCount
                                    1-  127     	extern	_startFlag
                                    1-  128     	extern	_count1S
                                    1-  129     	extern	_fullFlag
                                    1-  130     	extern	_fullCount
                                    1-  131     	extern	_ledMin
                                    1-  132     	extern	_ledMax
                                    1-  133     	extern	_ledLock
                                    1-  134     	extern	_preA
                                    1-  135     	extern	_duty
                                    1-  136     	extern	_addFlag
                                    1-  137     	extern	_dutyFlag
                                    1-  139     	extern PSAVE
                                    1-  140     	extern SSAVE
                                    1-  141     	extern WSAVE
                                    1-  142     	extern STK12
                                    1-  143     	extern STK11
                                    1-  144     	extern STK10
                                    1-  145     	extern STK09
                                    1-  146     	extern STK08
                                    1-  147     	extern STK07
                                    1-  148     	extern STK06
                                    1-  149     	extern STK05
                                    1-  150     	extern STK04
                                    1-  151     	extern STK03
                                    1-  152     	extern STK02
                                    1-  153     	extern STK01
                                    1-  154     	extern STK00
                                    1-  156     .segment "uninit", 0x20000040
 20000040                           1-  157     PSAVE:
                                    1-  158     	.res 1
 20000041                           1-  159     SSAVE:
                                    1-  160     	.res 1
 20000042                           1-  161     WSAVE:
                                    1-  162     	.res 1
 20000043                           1-  163     STK12:
                                    1-  164     	.res 1
 20000044                           1-  165     STK11:
                                    1-  166     	.res 1
 20000045                           1-  167     STK10:
                                    1-  168     	.res 1
 20000046                           1-  169     STK09:
                                    1-  170     	.res 1
 20000047                           1-  171     STK08:
                                    1-  172     	.res 1
 20000048                           1-  173     STK07:
                                    1-  174     	.res 1
 20000049                           1-  175     STK06:
                                    1-  176     	.res 1
 2000004A                           1-  177     STK05:
                                    1-  178     	.res 1
 2000004B                           1-  179     STK04:
                                    1-  180     	.res 1
 2000004C                           1-  181     STK03:
                                    1-  182     	.res 1
 2000004D                           1-  183     STK02:
                                    1-  184     	.res 1
 2000004E                           1-  185     STK01:
                                    1-  186     	.res 1
 2000004F                           1-  187     STK00:
                                    1-  188     	.res 1
                                    1-  190     ;--------------------------------------------------------
                                    1-  191     ; global definitions
                                    1-  192     ;--------------------------------------------------------
                                    1-  193     .segment "uninit"
     0000                           1-  194     _R_AIN0_DATA:
                                    1-  195     	.res	2
                                    1-  198     .segment "uninit"
     0000                           1-  199     _R_AIN0_DATA_LB:
                                    1-  200     	.res	1
                                    1-  203     .segment "uninit"
     0000                           1-  204     _R_AIN7_DATA:
                                    1-  205     	.res	2
                                    1-  208     .segment "uninit"
     0000                           1-  209     _R_AIN7_DATA_LB:
                                    1-  210     	.res	1
                                    1-  213     .segment "uninit"
     0000                           1-  214     _preA:
                                    1-  215     	.res	2
                                    1-  218     ;--------------------------------------------------------
                                    1-  219     ; absolute symbol definitions
                                    1-  220     ;--------------------------------------------------------
                                    1-  221     ;--------------------------------------------------------
                                    1-  222     ; compiler-defined variables
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     .segment "uninit"
     0000                           1-  225     r0x102D:
                                    1-  226     	.res	1
                                    1-  227     .segment "uninit"
     0000                           1-  228     r0x102E:
                                    1-  229     	.res	1
                                    1-  230     .segment "uninit"
     0000                           1-  231     r0x102B:
                                    1-  232     	.res	1
                                    1-  233     .segment "uninit"
     0000                           1-  234     r0x102C:
                                    1-  235     	.res	1
                                    1-  236     .segment "uninit"
     0000                           1-  237     r0x1029:
                                    1-  238     	.res	1
                                    1-  239     .segment "uninit"
     0000                           1-  240     r0x102A:
                                    1-  241     	.res	1
                                    1-  242     .segment "uninit"
     0000                           1-  243     r0x1021:
                                    1-  244     	.res	1
                                    1-  245     .segment "uninit"
     0000                           1-  246     r0x1022:
                                    1-  247     	.res	1
                                    1-  248     .segment "uninit"
     0000                           1-  249     r0x1023:
                                    1-  250     	.res	1
                                    1-  251     .segment "uninit"
     0000                           1-  252     r0x1026:
                                    1-  253     	.res	1
                                    1-  254     .segment "uninit"
     0000                           1-  255     r0x101E:
                                    1-  256     	.res	1
                                    1-  257     .segment "uninit"
     0000                           1-  258     r0x101D:
                                    1-  259     	.res	1
                                    1-  260     .segment "uninit"
     0000                           1-  261     r0x101F:
                                    1-  262     	.res	1
                                    1-  263     .segment "uninit"
     0000                           1-  264     r0x1020:
                                    1-  265     	.res	1
                                    1-  266     ;--------------------------------------------------------
                                    1-  267     ; initialized data
                                    1-  268     ;--------------------------------------------------------
                                    1-  270     .segment "idata"
     0000                           1-  271     _keyClick:
     0000 0000                      1-  272     	dw	0x00
                                    1-  276     .segment "idata"
     0000                           1-  277     _intCount:
     0000 0000                      1-  278     	dw	0x00
                                    1-  282     .segment "idata"
     0000                           1-  283     _IntFlag:
     0000 0000                      1-  284     	dw	0x00
                                    1-  288     .segment "idata"
     0000                           1-  289     _ledCount:
     0000 0000 0000                 1-  290     	dw	0x00, 0x00
                                    1-  294     .segment "idata"
     0000                           1-  295     _workStep:
     0000 0003                      1-  296     	dw	0x03
                                    1-  300     .segment "idata"
     0000                           1-  301     _ledStep:
     0000 0000                      1-  302     	dw	0x00
                                    1-  306     .segment "idata"
     0000                           1-  307     _sleepCount:
     0000 0000 0000                 1-  308     	dw	0x00, 0x00
                                    1-  312     .segment "idata"
     0000                           1-  313     _chrgCount:
     0000 0000 0000                 1-  314     	dw	0x00, 0x00
                                    1-  318     .segment "idata"
     0000                           1-  319     _startFlag:
     0000 0000                      1-  320     	dw	0x00
                                    1-  324     .segment "idata"
     0000                           1-  325     _count1S:
     0000 0000                      1-  326     	dw	0x00
                                    1-  330     .segment "idata"
     0000                           1-  331     _fullFlag:
     0000 0000                      1-  332     	dw	0x00
                                    1-  336     .segment "idata"
     0000                           1-  337     _fullCount:
     0000 0000                      1-  338     	dw	0x00
                                    1-  342     .segment "idata"
     0000                           1-  343     _ledMin:
     0000 0000                      1-  344     	dw	0x00
                                    1-  348     .segment "idata"
     0000                           1-  349     _ledMax:
     0000 0036 0001                 1-  350     	dw	0x36, 0x01
                                    1-  354     .segment "idata"
     0000                           1-  355     _ledLock:
     0000 0000                      1-  356     	dw	0x00
                                    1-  360     .segment "idata"
     0000                           1-  361     _duty:
     0000 007E                      1-  362     	dw	0x7e
                                    1-  366     .segment "idata"
     0000                           1-  367     _addFlag:
     0000 0000                      1-  368     	dw	0x00
                                    1-  372     .segment "idata"
     0000                           1-  373     _dutyFlag:
     0000 0000                      1-  374     	dw	0x00
                                    1-  377     ;--------------------------------------------------------
                                    1-  378     ; overlayable items in internal ram 
                                    1-  379     ;--------------------------------------------------------
                                    1-  380     ;	udata_ovr
                                    1-  381     ;--------------------------------------------------------
                                    1-  382     ; reset vector 
                                    1-  383     ;--------------------------------------------------------
                                    1-  384     ORG	0x0000
     0000 3rrr                      1-  385     	LGOTO	__nyc_ny8_startup
                                    1-  386     ;--------------------------------------------------------
                                    1-  387     ; interrupt and initialization code
                                    1-  388     ;--------------------------------------------------------
                                    1-  389     ORG 0x0008
     0008 3rrr                      1-  390     	lgoto	__sdcc_interrupt
                                    1-  392     .segment "code"
     0000                           1-  393     __sdcc_interrupt:
                                    1-  394     ;***
                                    1-  395     ;  pBlock Stats: dbName = I
                                    1-  396     ;***
                                    1-  397     ;2 compiler assigned registers:
                                    1-  398     ;   STK00
                                    1-  399     ;   STK01
                                    1-  400     ;; Starting pCode block
     0000                           1-  401     _isr:
                                    1-  402     ; 0 exit points
                                    1-  403     	.line	55, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  404     	MOVAR	WSAVE
     0001 1503                      1-  405     	SWAPR	STATUS,W
     0002 0283                      1-  406     	CLRR	STATUS
     0003 00rr                      1-  407     	MOVAR	SSAVE
     0004 010A                      1-  408     	MOVR	PCHBUF,W
     0005 028A                      1-  409     	CLRR	PCHBUF
     0006 00rr                      1-  410     	MOVAR	PSAVE
     0007 0104                      1-  411     	MOVR	FSR,W
                                    1-  412     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  413     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  414     	MOVR	STK00,W
                                    1-  415     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  416     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  417     	MOVR	STK01,W
                                    1-  418     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  419     	MOVAR	___sdcc_saved_stk01
                                    1-  420     	.line	57, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  421     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  422     	LGOTO	_00113_DS_
                                    1-  423     	.line	59, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  424     	MOVIA	0x37
     0013 03rr                      1-  425     	ADDAR	_TMR0,F
                                    1-  426     	.line	60, "main.c"; 	intCount++;
                                    1-  427     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  428     	INCR	_intCount,F
                                    1-  429     	.line	61, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  430     	MOVR	_intCount,W
     0017 2464                      1-  431     	XORIA	0x64
     0018 0903                      1-  432     	BTRSS	STATUS,2
     0019 3rrr                      1-  433     	LGOTO	_00113_DS_
                                    1-  434     	.line	63, "main.c"; 	intCount = 0;
     001A 02rr                      1-  435     	CLRR	_intCount
                                    1-  436     	.line	64, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  437     	MOVIA	0x01
                                    1-  438     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  439     	MOVAR	_IntFlag
                                    1-  440     	.line	65, "main.c"; 	ledCount++; 
                                    1-  441     	BANKSEL	_ledCount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 05rr                      1-  442     	INCR	_ledCount,F
     0020 0D03                      1-  443     	BTRSC	STATUS,2
     0021 05rr                      1-  444     	INCR	(_ledCount + 1),F
                                    1-  445     	.line	66, "main.c"; 	if(++count1S >= 100)
                                    1-  446     	BANKSEL	_count1S
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 05rr                      1-  447     	INCR	_count1S,F
                                    1-  448     ;;unsigned compare: left < lit (0x64=100), size=1
     0024 2164                      1-  449     	MOVIA	0x64
     0025 04rr                      1-  450     	SUBAR	_count1S,W
     0026 0803                      1-  451     	BTRSS	STATUS,0
     0027 3rrr                      1-  452     	LGOTO	_00113_DS_
                                    1-  453     	.line	68, "main.c"; 	count1S = 0;
     0028 02rr                      1-  454     	CLRR	_count1S
                                    1-  455     	.line	69, "main.c"; 	chrgCount++;
                                    1-  456     	BANKSEL	_chrgCount
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 05rr                      1-  457     	INCR	_chrgCount,F
     002B 0D03                      1-  458     	BTRSC	STATUS,2
     002C 05rr                      1-  459     	INCR	(_chrgCount + 1),F
                                    1-  460     	.line	70, "main.c"; 	if(startFlag)
                                    1-  461     	BANKSEL	_startFlag
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 01rr                      1-  462     	MOVR	_startFlag,W
     002F 0D03                      1-  463     	BTRSC	STATUS,2
     0030 3rrr                      1-  464     	LGOTO	_00106_DS_
                                    1-  465     	.line	72, "main.c"; 	sleepCount++;
                                    1-  466     	BANKSEL	_sleepCount
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 05rr                      1-  467     	INCR	_sleepCount,F
     0033 0D03                      1-  468     	BTRSC	STATUS,2
     0034 05rr                      1-  469     	INCR	(_sleepCount + 1),F
     0035 3rrr                      1-  470     	LGOTO	_00113_DS_
     0036                           1-  471     _00106_DS_:
                                    1-  472     	.line	75, "main.c"; 	sleepCount = 0;
                                    1-  473     	BANKSEL	_sleepCount
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 02rr                      1-  474     	CLRR	_sleepCount
     0038 02rr                      1-  475     	CLRR	(_sleepCount + 1)
     0039                           1-  476     _00113_DS_:
                                    1-  477     	.line	81, "main.c"; 	INTF = 0;
     0039 02rr                      1-  478     	CLRR	_INTF
                                    1-  479     	.line	83, "main.c"; 	}
                                    1-  480     	BANKSEL	___sdcc_saved_stk01
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 01rr                      1-  481     	MOVR	___sdcc_saved_stk01,W
     003C 00rr                      1-  482     	MOVAR	STK01
                                    1-  483     	BANKSEL	___sdcc_saved_stk00
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1-  484     	MOVR	___sdcc_saved_stk00,W
     003F 00rr                      1-  485     	MOVAR	STK00
                                    1-  486     	BANKSEL	___sdcc_saved_fsr
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 01rr                      1-  487     	MOVR	___sdcc_saved_fsr,W
     0042 0084                      1-  488     	MOVAR	FSR
     0043 01rr                      1-  489     	MOVR	PSAVE,W
     0044 008A                      1-  490     	MOVAR	PCHBUF
     0045 0283                      1-  491     	CLRR	STATUS
     0046 15rr                      1-  492     	SWAPR	SSAVE,W
     0047 0083                      1-  493     	MOVAR	STATUS
     0048 15rr                      1-  494     	SWAPR	WSAVE,F
     0049 15rr                      1-  495     	SWAPR	WSAVE,W
     004A                           1-  496     END_OF_INTERRUPT:
     004A 0011                      1-  497     	RETIE	
                                    1-  499     ;--------------------------------------------------------
                                    1-  500     ; code
                                    1-  501     ;--------------------------------------------------------
                                    1-  502     ;***
                                    1-  503     ;  pBlock Stats: dbName = M
                                    1-  504     ;***
                                    1-  505     ;has an exit
                                    1-  506     ;functions called:
                                    1-  507     ;   _initTimer0
                                    1-  508     ;   _initAD
                                    1-  509     ;   _pwmStart
                                    1-  510     ;   _closeChrg
                                    1-  511     ;   _checkA
                                    1-  512     ;   _fullChrg
                                    1-  513     ;   _halfChrg
                                    1-  514     ;   _workCon
                                    1-  515     ;   _ledCtr
                                    1-  516     ;   _ledCon
                                    1-  517     ;   _initTimer0
                                    1-  518     ;   _initAD
                                    1-  519     ;   _pwmStart
                                    1-  520     ;   _closeChrg
                                    1-  521     ;   _checkA
                                    1-  522     ;   _fullChrg
                                    1-  523     ;   _halfChrg
                                    1-  524     ;   _workCon
                                    1-  525     ;   _ledCtr
                                    1-  526     ;   _ledCon
                                    1-  527     ;1 compiler assigned register :
                                    1-  528     ;   r0x1030
                                    1-  529     ;; Starting pCode block
                                    1-  530     .segment "code"; module=main, function=_main
     0000                           1-  532     _main:
                                    1-  533     ; 2 exit points
                                    1-  534     	.line	87, "main.c"; 	initTimer0();
     0000 2rrr                      1-  535     	LCALL	_initTimer0
                                    1-  536     	.line	88, "main.c"; 	initAD();
     0001 2rrr                      1-  537     	LCALL	_initAD
                                    1-  538     	.line	89, "main.c"; 	pwmStart();
     0002 2rrr                      1-  539     	LCALL	_pwmStart
     0003                           1-  540     _00126_DS_:
                                    1-  541     	.line	92, "main.c"; 	CLRWDT(); 
     0003 0002                      1-  542     	clrwdt
                                    1-  543     	.line	93, "main.c"; 	if(!IntFlag)
                                    1-  544     	BANKSEL	_IntFlag
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 01rr                      1-  545     	MOVR	_IntFlag,W
     0006 0D03                      1-  546     	BTRSC	STATUS,2
     0007 3rrr                      1-  547     	LGOTO	_00126_DS_
                                    1-  548     	.line	95, "main.c"; 	IntFlag = 0;
     0008 02rr                      1-  549     	CLRR	_IntFlag
                                    1-  550     	.line	96, "main.c"; 	if(fullFlag)
                                    1-  551     	BANKSEL	_fullFlag
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  552     	MOVR	_fullFlag,W
     000B 0D03                      1-  553     	BTRSC	STATUS,2
     000C 3rrr                      1-  554     	LGOTO	_00121_DS_
                                    1-  555     	.line	98, "main.c"; 	PORTA &= (~0x5C);			//灯全灭
     000D 21A3                      1-  556     	MOVIA	0xa3
     000E 10rr                      1-  557     	ANDAR	_PORTA,F
                                    1-  558     	.line	99, "main.c"; 	PORTB &= (~0x03);
     000F 21FC                      1-  559     	MOVIA	0xfc
     0010 10rr                      1-  560     	ANDAR	_PORTB,F
                                    1-  561     	.line	100, "main.c"; 	closeChrg();
     0011 2rrr                      1-  562     	LCALL	_closeChrg
                                    1-  563     	.line	101, "main.c"; 	resetbit(PORTA,6);		//关闭风扇
     0012 1Frr                      1-  564     	BCR	_PORTA,6
                                    1-  565     	.line	102, "main.c"; 	continue;
     0013 3rrr                      1-  566     	LGOTO	_00126_DS_
     0014                           1-  567     _00121_DS_:
                                    1-  568     	.line	104, "main.c"; 	checkA();
     0014 2rrr                      1-  569     	LCALL	_checkA
                                    1-  570     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  571     ;;unsigned compare: left >= lit (0x7F=127), size=2
                                    1-  572     	.line	105, "main.c"; 	if(chrgCount <= 126)
     0015 2100                      1-  573     	MOVIA	0x00
                                    1-  574     	BANKSEL	_chrgCount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 04rr                      1-  575     	SUBAR	(_chrgCount + 1),W
     0018 0903                      1-  576     	BTRSS	STATUS,2
     0019 3rrr                      1-  577     	LGOTO	_00142_DS_
     001A 217F                      1-  578     	MOVIA	0x7f
     001B 04rr                      1-  579     	SUBAR	_chrgCount,W
     001C                           1-  580     _00142_DS_:
     001C 0C03                      1-  581     	BTRSC	STATUS,0
     001D 3rrr                      1-  582     	LGOTO	_00123_DS_
                                    1-  583     	.line	107, "main.c"; 	setbit(PORTA,6);		//打开风扇
     001E 1Brr                      1-  584     	BSR	_PORTA,6
                                    1-  585     	.line	108, "main.c"; 	fullChrg();
     001F 2rrr                      1-  586     	LCALL	_fullChrg
                                    1-  587     	.line	109, "main.c"; 	duty = chrgCount;
                                    1-  588     	BANKSEL	_chrgCount
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1-  589     	MOVR	_chrgCount,W
                                    1-  590     	BANKSEL	_duty
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 00rr                      1-  591     	MOVAR	_duty
                                    1-  592     	.line	110, "main.c"; 	PWM2DUTY = duty - 1;
     0024 06rr                      1-  593     	DECR	_duty,W
                                    1-  594     ;;1	MOVAR	r0x1030
     0025 00rr                      1-  595     	SFUN	_PWM2DUTY
     0026 3rrr                      1-  596     	LGOTO	_00124_DS_
     0027                           1-  597     _00123_DS_:
                                    1-  598     	.line	114, "main.c"; 	resetbit(PORTA,6);		//关闭风扇
     0027 1Frr                      1-  599     	BCR	_PORTA,6
                                    1-  600     	.line	115, "main.c"; 	halfChrg();
     0028 2rrr                      1-  601     	LCALL	_halfChrg
     0029                           1-  602     _00124_DS_:
                                    1-  603     	.line	124, "main.c"; 	workCon();
     0029 2rrr                      1-  604     	LCALL	_workCon
                                    1-  605     	.line	125, "main.c"; 	ledCtr();
     002A 2rrr                      1-  606     	LCALL	_ledCtr
                                    1-  607     	.line	126, "main.c"; 	ledCon();
     002B 2rrr                      1-  608     	LCALL	_ledCon
     002C 3rrr                      1-  609     	LGOTO	_00126_DS_
                                    1-  610     	.line	128, "main.c"; 	}
                                    1-  611     	RETURN	
     002D 0010                      3-   26 m1      ret
                                    1-  612     ; exit point of _main
                                    1-  614     ;***
                                    1-  615     ;  pBlock Stats: dbName = C
                                    1-  616     ;***
                                    1-  617     ;has an exit
                                    1-  618     ;; Starting pCode block
                                    1-  619     .segment "code"; module=main, function=_closeChrg
     0000                           1-  621     _closeChrg:
                                    1-  622     ; 2 exit points
                                    1-  623     	.line	415, "main.c"; 	setbit(PORTB,3);		//3 5脚高电平，关闭充电
     0000 19rr                      1-  624     	BSR	_PORTB,3
                                    1-  625     	.line	416, "main.c"; 	setbit(PORTA,7);
     0001 1Brr                      1-  626     	BSR	_PORTA,7
                                    1-  627     	.line	417, "main.c"; 	}
                                    1-  628     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  629     ; exit point of _closeChrg
                                    1-  631     ;***
                                    1-  632     ;  pBlock Stats: dbName = C
                                    1-  633     ;***
                                    1-  634     ;has an exit
                                    1-  635     ;; Starting pCode block
                                    1-  636     .segment "code"; module=main, function=_halfChrg
     0000                           1-  638     _halfChrg:
                                    1-  639     ; 2 exit points
                                    1-  640     	.line	410, "main.c"; 	setbit(PORTB,3);		//5脚高电平，降压涓充
     0000 19rr                      1-  641     	BSR	_PORTB,3
                                    1-  642     	.line	411, "main.c"; 	resetbit(PORTA,7);
     0001 1Frr                      1-  643     	BCR	_PORTA,7
                                    1-  644     	.line	412, "main.c"; 	}
                                    1-  645     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  646     ; exit point of _halfChrg
                                    1-  648     ;***
                                    1-  649     ;  pBlock Stats: dbName = C
                                    1-  650     ;***
                                    1-  651     ;has an exit
                                    1-  652     ;; Starting pCode block
                                    1-  653     .segment "code"; module=main, function=_fullChrg
     0000                           1-  655     _fullChrg:
                                    1-  656     ; 2 exit points
                                    1-  657     	.line	405, "main.c"; 	resetbit(PORTB,3);		
     0000 1Drr                      1-  658     	BCR	_PORTB,3
                                    1-  659     	.line	406, "main.c"; 	resetbit(PORTA,7);
     0001 1Frr                      1-  660     	BCR	_PORTA,7
                                    1-  661     	.line	407, "main.c"; 	}
                                    1-  662     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  663     ; exit point of _fullChrg
                                    1-  665     ;***
                                    1-  666     ;  pBlock Stats: dbName = C
                                    1-  667     ;***
                                    1-  668     ;has an exit
                                    1-  669     ;5 compiler assigned registers:
                                    1-  670     ;   r0x101D
                                    1-  671     ;   STK00
                                    1-  672     ;   r0x101E
                                    1-  673     ;   r0x101F
                                    1-  674     ;   r0x1020
                                    1-  675     ;; Starting pCode block
                                    1-  676     .segment "code"; module=main, function=_delay
                                    1-  678     ;local variable name mapping:
     0000                           1-  683     _delay:
                                    1-  684     ; 2 exit points
                                    1-  685     	.line	397, "main.c"; 	void delay(uint16_t time)
                                    1-  686     	BANKSEL	r0x101D
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  687     	MOVAR	r0x101D
     0002 01rr                      1-  688     	MOVR	STK00,W
                                    1-  689     	BANKSEL	r0x101E
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  690     	MOVAR	r0x101E
                                    1-  691     	.line	399, "main.c"; 	for(uint16_t i=0;i<time;i++);
                                    1-  692     	BANKSEL	r0x101F
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  693     	CLRR	r0x101F
                                    1-  694     	BANKSEL	r0x1020
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  695     	CLRR	r0x1020
     0009                           1-  696     _00375_DS_:
                                    1-  697     	BANKSEL	r0x101D
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  698     	MOVR	r0x101D,W
                                    1-  699     	BANKSEL	r0x1020
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  700     	SUBAR	r0x1020,W
     000D 0903                      1-  701     	BTRSS	STATUS,2
     000E 3rrr                      1-  702     	LGOTO	_00386_DS_
                                    1-  703     	BANKSEL	r0x101E
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  704     	MOVR	r0x101E,W
                                    1-  705     	BANKSEL	r0x101F
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1-  706     	SUBAR	r0x101F,W
     0013                           1-  707     _00386_DS_:
     0013 0C03                      1-  708     	BTRSC	STATUS,0
     0014 3rrr                      1-  709     	LGOTO	_00377_DS_
                                    1-  710     	BANKSEL	r0x101F
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  711     	INCR	r0x101F,F
     0017 0903                      1-  712     	BTRSS	STATUS,2
     0018 3rrr                      1-  713     	LGOTO	_00001_DS_
                                    1-  714     	BANKSEL	r0x1020
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1-  715     	INCR	r0x1020,F
     001B                           1-  716     _00001_DS_:
     001B 3rrr                      1-  717     	LGOTO	_00375_DS_
     001C                           1-  718     _00377_DS_:
                                    1-  719     	.line	400, "main.c"; 	}
                                    1-  720     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  721     ; exit point of _delay
                                    1-  723     ;***
                                    1-  724     ;  pBlock Stats: dbName = C
                                    1-  725     ;***
                                    1-  726     ;has an exit
                                    1-  727     ;; Starting pCode block
                                    1-  728     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  730     _F_wait_eoc:
                                    1-  731     ; 2 exit points
     0000                           1-  732     _00368_DS_:
                                    1-  733     	.line	393, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  734     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  735     	LGOTO	_00368_DS_
                                    1-  736     	.line	395, "main.c"; 	}
                                    1-  737     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  738     ; exit point of _F_wait_eoc
                                    1-  740     ;***
                                    1-  741     ;  pBlock Stats: dbName = C
                                    1-  742     ;***
                                    1-  743     ;has an exit
                                    1-  744     ;functions called:
                                    1-  745     ;   _delay
                                    1-  746     ;   _F_wait_eoc
                                    1-  747     ;   _delay
                                    1-  748     ;   _F_wait_eoc
                                    1-  749     ;7 compiler assigned registers:
                                    1-  750     ;   r0x1021
                                    1-  751     ;   STK00
                                    1-  752     ;   r0x1022
                                    1-  753     ;   r0x1023
                                    1-  754     ;   r0x1024
                                    1-  755     ;   r0x1025
                                    1-  756     ;   r0x1026
                                    1-  757     ;; Starting pCode block
                                    1-  758     .segment "code"; module=main, function=_F_AIN0_Convert
                                    1-  760     ;local variable name mapping:
     0000                           1-  763     _F_AIN0_Convert:
                                    1-  764     ; 2 exit points
                                    1-  765     	.line	377, "main.c"; 	void F_AIN0_Convert(char count)
                                    1-  766     	BANKSEL	r0x1021
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  767     	MOVAR	r0x1021
                                    1-  768     	.line	381, "main.c"; 	delay(100);
     0002 2164                      1-  769     	MOVIA	0x64
     0003 00rr                      1-  770     	MOVAR	STK00
     0004 2100                      1-  771     	MOVIA	0x00
     0005 2rrr                      1-  772     	LCALL	_delay
                                    1-  773     	.line	382, "main.c"; 	for(i=1;i<=count;i++)
     0006 2101                      1-  774     	MOVIA	0x01
                                    1-  775     	BANKSEL	r0x1022
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  776     	MOVAR	r0x1022
     0009                           1-  777     _00361_DS_:
                                    1-  778     	BANKSEL	r0x1022
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  779     	MOVR	r0x1022,W
                                    1-  780     	BANKSEL	r0x1021
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  781     	SUBAR	r0x1021,W
     000D 0803                      1-  782     	BTRSS	STATUS,0
     000E 3rrr                      1-  783     	LGOTO	_00363_DS_
                                    1-  784     	.line	384, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000F 1Brr                      1-  785     	BSR	_ADMDbits,6
                                    1-  786     	.line	385, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0010 2rrr                      1-  787     	LCALL	_F_wait_eoc
                                    1-  788     	.line	386, "main.c"; 	R_AIN0_DATA_LB += ( 0x0F & ADR); 
     0011 210F                      1-  789     	MOVIA	0x0f
     0012 10rr                      1-  790     	ANDAR	_ADR,W
                                    1-  791     ;;3	MOVAR	r0x1023
                                    1-  792     	BANKSEL	_R_AIN0_DATA_LB
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 03rr                      1-  793     	ADDAR	_R_AIN0_DATA_LB,F
                                    1-  794     	.line	387, "main.c"; 	R_AIN0_DATA    += ADD; 
     0015 01rr                      1-  795     	MOVR	_ADD,W
                                    1-  796     	BANKSEL	r0x1023
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 00rr                      1-  797     	MOVAR	r0x1023
                                    1-  798     ;;1	CLRR	r0x1024
                                    1-  799     ;;102	MOVR	r0x1023,W
                                    1-  800     ;;100	MOVAR	r0x1025
     0018 2100                      1-  801     	MOVIA	0x00
                                    1-  802     	BANKSEL	r0x1026
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  803     	MOVAR	r0x1026
                                    1-  804     ;;101	MOVR	r0x1025,W
                                    1-  805     	BANKSEL	r0x1023
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1-  806     	MOVR	r0x1023,W
                                    1-  807     	BANKSEL	_R_AIN0_DATA
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 03rr                      1-  808     	ADDAR	_R_AIN0_DATA,F
                                    1-  809     	BANKSEL	r0x1026
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1-  810     	MOVR	r0x1026,W
     0021 0C03                      1-  811     	BTRSC	STATUS,0
     0022 05rr                      1-  812     	INCR	r0x1026,W
     0023 0D03                      1-  813     	BTRSC	STATUS,2
     0024 3rrr                      1-  814     	LGOTO	_00002_DS_
                                    1-  815     	BANKSEL	_R_AIN0_DATA
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 03rr                      1-  816     	ADDAR	(_R_AIN0_DATA + 1),F
     0027                           1-  817     _00002_DS_:
                                    1-  818     	.line	382, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  819     	BANKSEL	r0x1022
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 05rr                      1-  820     	INCR	r0x1022,F
     0029 3rrr                      1-  821     	LGOTO	_00361_DS_
     002A                           1-  822     _00363_DS_:
                                    1-  823     	.line	389, "main.c"; 	}
                                    1-  824     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1-  825     ; exit point of _F_AIN0_Convert
                                    1-  827     ;***
                                    1-  828     ;  pBlock Stats: dbName = C
                                    1-  829     ;***
                                    1-  830     ;has an exit
                                    1-  831     ;functions called:
                                    1-  832     ;   _F_AIN0_Convert
                                    1-  833     ;   _F_AIN0_Convert
                                    1-  834     ;4 compiler assigned registers:
                                    1-  835     ;   r0x1027
                                    1-  836     ;   r0x1028
                                    1-  837     ;   r0x1029
                                    1-  838     ;   r0x102A
                                    1-  839     ;; Starting pCode block
                                    1-  840     .segment "code"; module=main, function=_checkA
     0000                           1-  842     _checkA:
                                    1-  843     ; 2 exit points
                                    1-  844     	.line	350, "main.c"; 	PACON = C_PA0_AIN0;
     0000 2101                      1-  845     	MOVIA	0x01
     0001 00rr                      1-  846     	MOVAR	_PACON
                                    1-  847     	.line	351, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;
                                    1-  848     	BANKSEL	_R_AIN0_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  849     	CLRR	_R_AIN0_DATA_LB
                                    1-  850     	BANKSEL	_R_AIN0_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  851     	CLRR	_R_AIN0_DATA
     0006 02rr                      1-  852     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  853     	.line	352, "main.c"; 	F_AIN0_Convert(8);					// execute AIN0 ADC converting 8 times
     0007 2108                      1-  854     	MOVIA	0x08
     0008 2rrr                      1-  855     	LCALL	_F_AIN0_Convert
                                    1-  856     	.line	353, "main.c"; 	R_AIN0_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  857     	BANKSEL	_R_AIN0_DATA
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 15rr                      1-  858     	SWAPR	(_R_AIN0_DATA + 1),W
     000B 22F0                      1-  859     	ANDIA	0xf0
     000C 00rr                      1-  860     	MOVAR	(_R_AIN0_DATA + 1)
     000D 15rr                      1-  861     	SWAPR	_R_AIN0_DATA,W
     000E 00rr                      1-  862     	MOVAR	_R_AIN0_DATA
     000F 220F                      1-  863     	ANDIA	0x0f
     0010 11rr                      1-  864     	IORAR	(_R_AIN0_DATA + 1),F
     0011 12rr                      1-  865     	XORAR	_R_AIN0_DATA,F
                                    1-  866     	.line	354, "main.c"; 	R_AIN0_DATA_LB &= 0xF0;				// Only get Bit7~4
     0012 21F0                      1-  867     	MOVIA	0xf0
                                    1-  868     	BANKSEL	_R_AIN0_DATA_LB
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 10rr                      1-  869     	ANDAR	_R_AIN0_DATA_LB,F
                                    1-  870     	.line	355, "main.c"; 	R_AIN0_DATA += R_AIN0_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0015 01rr                      1-  871     	MOVR	_R_AIN0_DATA_LB,W
                                    1-  872     	BANKSEL	r0x1029
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 00rr                      1-  873     	MOVAR	r0x1029
                                    1-  874     ;;1	MOVAR	r0x1027
                                    1-  875     ;;1	CLRR	r0x1028
                                    1-  876     ;;99	MOVR	r0x1027,W
     0018 2100                      1-  877     	MOVIA	0x00
                                    1-  878     	BANKSEL	r0x102A
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  879     	MOVAR	r0x102A
                                    1-  880     	BANKSEL	r0x1029
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1-  881     	MOVR	r0x1029,W
                                    1-  882     	BANKSEL	_R_AIN0_DATA
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 03rr                      1-  883     	ADDAR	_R_AIN0_DATA,F
                                    1-  884     	BANKSEL	r0x102A
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1-  885     	MOVR	r0x102A,W
     0021 0C03                      1-  886     	BTRSC	STATUS,0
     0022 05rr                      1-  887     	INCR	r0x102A,W
     0023 0D03                      1-  888     	BTRSC	STATUS,2
     0024 3rrr                      1-  889     	LGOTO	_00003_DS_
                                    1-  890     	BANKSEL	_R_AIN0_DATA
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 03rr                      1-  891     	ADDAR	(_R_AIN0_DATA + 1),F
                                    1-  892     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0027                           1-  893     _00003_DS_:
                                    1-  894     	.line	356, "main.c"; 	R_AIN0_DATA >>=3;					// R_AIN0_DATA divided 8
     0027 1C03                      1-  895     	BCR	STATUS,0
                                    1-  896     	BANKSEL	_R_AIN0_DATA
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 13rr                      1-  897     	RRR	(_R_AIN0_DATA + 1),F
     002A 13rr                      1-  898     	RRR	_R_AIN0_DATA,F
                                    1-  899     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002B 1C03                      1-  900     	BCR	STATUS,0
     002C 13rr                      1-  901     	RRR	(_R_AIN0_DATA + 1),F
     002D 13rr                      1-  902     	RRR	_R_AIN0_DATA,F
                                    1-  903     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002E 1C03                      1-  904     	BCR	STATUS,0
     002F 13rr                      1-  905     	RRR	(_R_AIN0_DATA + 1),F
     0030 13rr                      1-  906     	RRR	_R_AIN0_DATA,F
                                    1-  907     	.line	357, "main.c"; 	preA = R_AIN0_DATA;
     0031 01rr                      1-  908     	MOVR	_R_AIN0_DATA,W
                                    1-  909     	BANKSEL	_preA
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 00rr                      1-  910     	MOVAR	_preA
                                    1-  911     	BANKSEL	_R_AIN0_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 01rr                      1-  912     	MOVR	(_R_AIN0_DATA + 1),W
                                    1-  913     	BANKSEL	_preA
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 00rr                      1-  914     	MOVAR	(_preA + 1)
                                    1-  915     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  916     ;;unsigned compare: left >= lit (0x236=566), size=2
                                    1-  917     	.line	359, "main.c"; 	if(preA > 565)				//电流大于2.76A
     0038 2102                      1-  918     	MOVIA	0x02
     0039 04rr                      1-  919     	SUBAR	(_preA + 1),W
     003A 0903                      1-  920     	BTRSS	STATUS,2
     003B 3rrr                      1-  921     	LGOTO	_00353_DS_
     003C 2136                      1-  922     	MOVIA	0x36
     003D 04rr                      1-  923     	SUBAR	_preA,W
     003E                           1-  924     _00353_DS_:
     003E 0803                      1-  925     	BTRSS	STATUS,0
     003F 3rrr                      1-  926     	LGOTO	_00343_DS_
                                    1-  927     	.line	361, "main.c"; 	addFlag = 2;
     0040 2102                      1-  928     	MOVIA	0x02
                                    1-  929     	BANKSEL	_addFlag
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 00rr                      1-  930     	MOVAR	_addFlag
     0043 3rrr                      1-  931     	LGOTO	_00345_DS_
                                    1-  932     ;;unsigned compare: left < lit (0x212=530), size=2
     0044                           1-  933     _00343_DS_:
                                    1-  934     	.line	363, "main.c"; 	else if(preA < 530)
     0044 2102                      1-  935     	MOVIA	0x02
                                    1-  936     	BANKSEL	_preA
     0045 rrrr                      3-   71 m1      .banksel ram_address
     0046 04rr                      1-  937     	SUBAR	(_preA + 1),W
     0047 0903                      1-  938     	BTRSS	STATUS,2
     0048 3rrr                      1-  939     	LGOTO	_00354_DS_
     0049 2112                      1-  940     	MOVIA	0x12
     004A 04rr                      1-  941     	SUBAR	_preA,W
     004B                           1-  942     _00354_DS_:
     004B 0C03                      1-  943     	BTRSC	STATUS,0
     004C 3rrr                      1-  944     	LGOTO	_00340_DS_
                                    1-  945     	.line	365, "main.c"; 	addFlag = 1;
     004D 2101                      1-  946     	MOVIA	0x01
                                    1-  947     	BANKSEL	_addFlag
     004E rrrr                      3-   71 m1      .banksel ram_address
     004F 00rr                      1-  948     	MOVAR	_addFlag
     0050 3rrr                      1-  949     	LGOTO	_00345_DS_
     0051                           1-  950     _00340_DS_:
                                    1-  951     	.line	369, "main.c"; 	addFlag = 0;
                                    1-  952     	BANKSEL	_addFlag
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 02rr                      1-  953     	CLRR	_addFlag
     0053                           1-  954     _00345_DS_:
                                    1-  955     	.line	372, "main.c"; 	}
                                    1-  956     	RETURN	
     0053 0010                      3-   26 m1      ret
                                    1-  957     ; exit point of _checkA
                                    1-  959     ;***
                                    1-  960     ;  pBlock Stats: dbName = C
                                    1-  961     ;***
                                    1-  962     ;has an exit
                                    1-  963     ;functions called:
                                    1-  964     ;   _delay
                                    1-  965     ;   _delay
                                    1-  966     ;1 compiler assigned register :
                                    1-  967     ;   STK00
                                    1-  968     ;; Starting pCode block
                                    1-  969     .segment "code"; module=main, function=_initAD
     0000                           1-  971     _initAD:
                                    1-  972     ; 2 exit points
                                    1-  973     	.line	326, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA0 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2180                      1-  974     	MOVIA	0x80
     0001 00rr                      1-  975     	MOVAR	_ADMD
                                    1-  976     	.line	329, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 02rr                      1-  977     	CLRR	_ADVREFH
                                    1-  978     	.line	336, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1-  979     	MOVIA	0x10
     0004 00rr                      1-  980     	MOVAR	_ADR
                                    1-  981     	.line	338, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1-  982     	MOVIA	0x03
     0006 00rr                      1-  983     	MOVAR	_ADCR
                                    1-  984     	.line	341, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1-  985     	BSR	_ADMDbits,4
                                    1-  986     	.line	342, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1-  987     	MOVIA	0x64
     0009 00rr                      1-  988     	MOVAR	STK00
     000A 2100                      1-  989     	MOVIA	0x00
     000B 2rrr                      1-  990     	LCALL	_delay
                                    1-  991     	.line	345, "main.c"; 	}
                                    1-  992     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1-  993     ; exit point of _initAD
                                    1-  995     ;***
                                    1-  996     ;  pBlock Stats: dbName = C
                                    1-  997     ;***
                                    1-  998     ;has an exit
                                    1-  999     ;2 compiler assigned registers:
                                    1- 1000     ;   r0x102B
                                    1- 1001     ;   r0x102C
                                    1- 1002     ;; Starting pCode block
                                    1- 1003     .segment "code"; module=main, function=_ledCtr
     0000                           1- 1005     _ledCtr:
                                    1- 1006     ; 2 exit points
                                    1- 1007     	.line	294, "main.c"; 	if(ledLock)
                                    1- 1008     	BANKSEL	_ledLock
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1009     	MOVR	_ledLock,W
     0002 0903                      1- 1010     	BTRSS	STATUS,2
                                    1- 1011     	.line	296, "main.c"; 	return;
     0003 3rrr                      1- 1012     	LGOTO	_00317_DS_
                                    1- 1013     	.line	298, "main.c"; 	switch(ledStep)
     0004 2106                      1- 1014     	MOVIA	0x06
                                    1- 1015     	BANKSEL	_ledStep
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 04rr                      1- 1016     	SUBAR	_ledStep,W
     0007 0C03                      1- 1017     	BTRSC	STATUS,0
     0008 3rrr                      1- 1018     	LGOTO	_00314_DS_
     0009 21rr                      1- 1019     	MOVIA	((_00329_DS_ >> 8) & 0xff)
     000A 008A                      1- 1020     	MOVAR	PCHBUF
     000B 01rr                      1- 1021     	MOVR	_ledStep,W
     000C 25rr                      1- 1022     	ADDIA	_00329_DS_
     000D 0C03                      1- 1023     	BTRSC	STATUS,0
     000E 058A                      1- 1024     	INCR	PCHBUF,F
     000F 0082                      1- 1025     	MOVAR	PCL
     0010                           1- 1026     _00329_DS_:
     0010 3rrr                      1- 1027     	LGOTO	_00308_DS_
     0011 3rrr                      1- 1028     	LGOTO	_00309_DS_
     0012 3rrr                      1- 1029     	LGOTO	_00310_DS_
     0013 3rrr                      1- 1030     	LGOTO	_00311_DS_
     0014 3rrr                      1- 1031     	LGOTO	_00312_DS_
     0015 3rrr                      1- 1032     	LGOTO	_00313_DS_
     0016                           1- 1033     _00308_DS_:
                                    1- 1034     	.line	301, "main.c"; 	ledMin = 250;
     0016 21FA                      1- 1035     	MOVIA	0xfa
                                    1- 1036     	BANKSEL	_ledMin
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1037     	MOVAR	_ledMin
                                    1- 1038     	.line	302, "main.c"; 	break;
     0019 3rrr                      1- 1039     	LGOTO	_00314_DS_
     001A                           1- 1040     _00309_DS_:
                                    1- 1041     	.line	304, "main.c"; 	ledMin = 200;
     001A 21C8                      1- 1042     	MOVIA	0xc8
                                    1- 1043     	BANKSEL	_ledMin
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1- 1044     	MOVAR	_ledMin
                                    1- 1045     	.line	305, "main.c"; 	break;
     001D 3rrr                      1- 1046     	LGOTO	_00314_DS_
     001E                           1- 1047     _00310_DS_:
                                    1- 1048     	.line	307, "main.c"; 	ledMin = 150;
     001E 2196                      1- 1049     	MOVIA	0x96
                                    1- 1050     	BANKSEL	_ledMin
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 00rr                      1- 1051     	MOVAR	_ledMin
                                    1- 1052     	.line	308, "main.c"; 	break;
     0021 3rrr                      1- 1053     	LGOTO	_00314_DS_
     0022                           1- 1054     _00311_DS_:
                                    1- 1055     	.line	310, "main.c"; 	ledMin = 100;
     0022 2164                      1- 1056     	MOVIA	0x64
                                    1- 1057     	BANKSEL	_ledMin
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1- 1058     	MOVAR	_ledMin
                                    1- 1059     	.line	311, "main.c"; 	break;
     0025 3rrr                      1- 1060     	LGOTO	_00314_DS_
     0026                           1- 1061     _00312_DS_:
                                    1- 1062     	.line	313, "main.c"; 	ledMin = 50;
     0026 2132                      1- 1063     	MOVIA	0x32
                                    1- 1064     	BANKSEL	_ledMin
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 00rr                      1- 1065     	MOVAR	_ledMin
                                    1- 1066     	.line	314, "main.c"; 	break;
     0029 3rrr                      1- 1067     	LGOTO	_00314_DS_
     002A                           1- 1068     _00313_DS_:
                                    1- 1069     	.line	316, "main.c"; 	ledMin = 0;
                                    1- 1070     	BANKSEL	_ledMin
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 02rr                      1- 1071     	CLRR	_ledMin
     002C                           1- 1072     _00314_DS_:
                                    1- 1073     	.line	319, "main.c"; 	if(ledCount < ledMin)
                                    1- 1074     	BANKSEL	_ledMin
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1- 1075     	MOVR	_ledMin,W
                                    1- 1076     	BANKSEL	r0x102B
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 00rr                      1- 1077     	MOVAR	r0x102B
                                    1- 1078     	BANKSEL	r0x102C
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 02rr                      1- 1079     	CLRR	r0x102C
     0032 2100                      1- 1080     	MOVIA	0x00
                                    1- 1081     	BANKSEL	_ledCount
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 04rr                      1- 1082     	SUBAR	(_ledCount + 1),W
     0035 0903                      1- 1083     	BTRSS	STATUS,2
     0036 3rrr                      1- 1084     	LGOTO	_00330_DS_
                                    1- 1085     	BANKSEL	r0x102B
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 01rr                      1- 1086     	MOVR	r0x102B,W
                                    1- 1087     	BANKSEL	_ledCount
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 04rr                      1- 1088     	SUBAR	_ledCount,W
     003B                           1- 1089     _00330_DS_:
     003B 0C03                      1- 1090     	BTRSC	STATUS,0
     003C 3rrr                      1- 1091     	LGOTO	_00317_DS_
                                    1- 1092     	.line	320, "main.c"; 	ledCount = ledMin;
                                    1- 1093     	BANKSEL	r0x102B
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1- 1094     	MOVR	r0x102B,W
                                    1- 1095     	BANKSEL	_ledCount
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 00rr                      1- 1096     	MOVAR	_ledCount
                                    1- 1097     	BANKSEL	r0x102C
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 01rr                      1- 1098     	MOVR	r0x102C,W
                                    1- 1099     	BANKSEL	_ledCount
     0043 rrrr                      3-   71 m1      .banksel ram_address
     0044 00rr                      1- 1100     	MOVAR	(_ledCount + 1)
     0045                           1- 1101     _00317_DS_:
                                    1- 1102     	.line	321, "main.c"; 	}
                                    1- 1103     	RETURN	
     0045 0010                      3-   26 m1      ret
                                    1- 1104     ; exit point of _ledCtr
                                    1- 1106     ;***
                                    1- 1107     ;  pBlock Stats: dbName = C
                                    1- 1108     ;***
                                    1- 1109     ;has an exit
                                    1- 1110     ;; Starting pCode block
                                    1- 1111     .segment "code"; module=main, function=_pwmStop
     0000                           1- 1113     _pwmStop:
                                    1- 1114     ; 2 exit points
                                    1- 1115     	.line	289, "main.c"; 	PWM2DUTY = 0;
     0000 0200                      1- 1116     	CLRA	
     0001 00rr                      1- 1117     	SFUN	_PWM2DUTY
                                    1- 1118     	.line	290, "main.c"; 	}
                                    1- 1119     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1120     ; exit point of _pwmStop
                                    1- 1122     ;***
                                    1- 1123     ;  pBlock Stats: dbName = C
                                    1- 1124     ;***
                                    1- 1125     ;has an exit
                                    1- 1126     ;; Starting pCode block
                                    1- 1127     .segment "code"; module=main, function=_pwmStart
     0000                           1- 1129     _pwmStart:
                                    1- 1130     ; 2 exit points
                                    1- 1131     	.line	280, "main.c"; 	TMRH = 0;
     0000 02rr                      1- 1132     	CLRR	_TMRH
                                    1- 1133     	.line	281, "main.c"; 	TMR2 = 127;
     0001 217F                      1- 1134     	MOVIA	0x7f
     0002 00rr                      1- 1135     	SFUN	_TMR2
                                    1- 1136     	.line	282, "main.c"; 	PWM2DUTY = 64;
     0003 2140                      1- 1137     	MOVIA	0x40
     0004 00rr                      1- 1138     	SFUN	_PWM2DUTY
                                    1- 1139     	.line	283, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	    //reloaded from TMR2, non-stop mode
     0005 2183                      1- 1140     	MOVIA	0x83
     0006 00rr                      1- 1141     	SFUN	_T2CR1
                                    1- 1142     	.line	284, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler2, Prescaler2 dividing rate = 1:2, Timer2 clock source is instruction clock 
     0007 0200                      1- 1143     	CLRA	
     0008 00rr                      1- 1144     	SFUN	_T2CR2
                                    1- 1145     	.line	285, "main.c"; 	}
                                    1- 1146     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1147     ; exit point of _pwmStart
                                    1- 1149     ;***
                                    1- 1150     ;  pBlock Stats: dbName = C
                                    1- 1151     ;***
                                    1- 1152     ;has an exit
                                    1- 1153     ;2 compiler assigned registers:
                                    1- 1154     ;   r0x102D
                                    1- 1155     ;   r0x102E
                                    1- 1156     ;; Starting pCode block
                                    1- 1157     .segment "code"; module=main, function=_ledCon
     0000                           1- 1159     _ledCon:
                                    1- 1160     ; 2 exit points
                                    1- 1161     	.line	261, "main.c"; 	if(ledCount < ledMin)
                                    1- 1162     	BANKSEL	_ledMin
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1163     	MOVR	_ledMin,W
                                    1- 1164     	BANKSEL	r0x102D
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 00rr                      1- 1165     	MOVAR	r0x102D
                                    1- 1166     	BANKSEL	r0x102E
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1167     	CLRR	r0x102E
     0006 2100                      1- 1168     	MOVIA	0x00
                                    1- 1169     	BANKSEL	_ledCount
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 04rr                      1- 1170     	SUBAR	(_ledCount + 1),W
     0009 0903                      1- 1171     	BTRSS	STATUS,2
     000A 3rrr                      1- 1172     	LGOTO	_00286_DS_
                                    1- 1173     	BANKSEL	r0x102D
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 01rr                      1- 1174     	MOVR	r0x102D,W
                                    1- 1175     	BANKSEL	_ledCount
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 04rr                      1- 1176     	SUBAR	_ledCount,W
     000F                           1- 1177     _00286_DS_:
     000F 0C03                      1- 1178     	BTRSC	STATUS,0
     0010 3rrr                      1- 1179     	LGOTO	_00245_DS_
                                    1- 1180     	.line	262, "main.c"; 	ledCount = ledMin;
                                    1- 1181     	BANKSEL	r0x102D
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1182     	MOVR	r0x102D,W
                                    1- 1183     	BANKSEL	_ledCount
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1- 1184     	MOVAR	_ledCount
                                    1- 1185     	BANKSEL	r0x102E
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1- 1186     	MOVR	r0x102E,W
                                    1- 1187     	BANKSEL	_ledCount
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1188     	MOVAR	(_ledCount + 1)
     0019                           1- 1189     _00245_DS_:
                                    1- 1190     	.line	263, "main.c"; 	ledLock = 1;		//锁定
     0019 2101                      1- 1191     	MOVIA	0x01
                                    1- 1192     	BANKSEL	_ledLock
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 00rr                      1- 1193     	MOVAR	_ledLock
                                    1- 1194     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1195     ;;unsigned compare: left >= lit (0x33=51), size=2
                                    1- 1196     	.line	264, "main.c"; 	ledCount > 50 ? (setbit(PORTB,1)) : (resetbit(PORTB,1));
     001C 2100                      1- 1197     	MOVIA	0x00
                                    1- 1198     	BANKSEL	_ledCount
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 04rr                      1- 1199     	SUBAR	(_ledCount + 1),W
     001F 0903                      1- 1200     	BTRSS	STATUS,2
     0020 3rrr                      1- 1201     	LGOTO	_00287_DS_
     0021 2133                      1- 1202     	MOVIA	0x33
     0022 04rr                      1- 1203     	SUBAR	_ledCount,W
     0023                           1- 1204     _00287_DS_:
     0023 0803                      1- 1205     	BTRSS	STATUS,0
     0024 3rrr                      1- 1206     	LGOTO	_00252_DS_
     0025 18rr                      1- 1207     	BSR	_PORTB,1
     0026 3rrr                      1- 1208     	LGOTO	_00253_DS_
     0027                           1- 1209     _00252_DS_:
     0027 1Crr                      1- 1210     	BCR	_PORTB,1
                                    1- 1211     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1212     ;;unsigned compare: left >= lit (0x65=101), size=2
     0028                           1- 1213     _00253_DS_:
                                    1- 1214     	.line	265, "main.c"; 	ledCount > 100 ? (setbit(PORTB,0)) : (resetbit(PORTB,0));
     0028 2100                      1- 1215     	MOVIA	0x00
                                    1- 1216     	BANKSEL	_ledCount
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 04rr                      1- 1217     	SUBAR	(_ledCount + 1),W
     002B 0903                      1- 1218     	BTRSS	STATUS,2
     002C 3rrr                      1- 1219     	LGOTO	_00288_DS_
     002D 2165                      1- 1220     	MOVIA	0x65
     002E 04rr                      1- 1221     	SUBAR	_ledCount,W
     002F                           1- 1222     _00288_DS_:
     002F 0803                      1- 1223     	BTRSS	STATUS,0
     0030 3rrr                      1- 1224     	LGOTO	_00254_DS_
     0031 18rr                      1- 1225     	BSR	_PORTB,0
     0032 3rrr                      1- 1226     	LGOTO	_00255_DS_
     0033                           1- 1227     _00254_DS_:
     0033 1Crr                      1- 1228     	BCR	_PORTB,0
                                    1- 1229     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1230     ;;unsigned compare: left >= lit (0x97=151), size=2
     0034                           1- 1231     _00255_DS_:
                                    1- 1232     	.line	266, "main.c"; 	ledCount > 150 ? (setbit(PORTA,2)) : (resetbit(PORTA,2));
     0034 2100                      1- 1233     	MOVIA	0x00
                                    1- 1234     	BANKSEL	_ledCount
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 04rr                      1- 1235     	SUBAR	(_ledCount + 1),W
     0037 0903                      1- 1236     	BTRSS	STATUS,2
     0038 3rrr                      1- 1237     	LGOTO	_00289_DS_
     0039 2197                      1- 1238     	MOVIA	0x97
     003A 04rr                      1- 1239     	SUBAR	_ledCount,W
     003B                           1- 1240     _00289_DS_:
     003B 0803                      1- 1241     	BTRSS	STATUS,0
     003C 3rrr                      1- 1242     	LGOTO	_00256_DS_
     003D 19rr                      1- 1243     	BSR	_PORTA,2
     003E 3rrr                      1- 1244     	LGOTO	_00257_DS_
     003F                           1- 1245     _00256_DS_:
     003F 1Drr                      1- 1246     	BCR	_PORTA,2
                                    1- 1247     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1248     ;;unsigned compare: left >= lit (0xC9=201), size=2
     0040                           1- 1249     _00257_DS_:
                                    1- 1250     	.line	267, "main.c"; 	ledCount > 200 ? (setbit(PORTA,3)) : (resetbit(PORTA,3));
     0040 2100                      1- 1251     	MOVIA	0x00
                                    1- 1252     	BANKSEL	_ledCount
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 04rr                      1- 1253     	SUBAR	(_ledCount + 1),W
     0043 0903                      1- 1254     	BTRSS	STATUS,2
     0044 3rrr                      1- 1255     	LGOTO	_00290_DS_
     0045 21C9                      1- 1256     	MOVIA	0xc9
     0046 04rr                      1- 1257     	SUBAR	_ledCount,W
     0047                           1- 1258     _00290_DS_:
     0047 0803                      1- 1259     	BTRSS	STATUS,0
     0048 3rrr                      1- 1260     	LGOTO	_00258_DS_
     0049 19rr                      1- 1261     	BSR	_PORTA,3
     004A 3rrr                      1- 1262     	LGOTO	_00259_DS_
     004B                           1- 1263     _00258_DS_:
     004B 1Drr                      1- 1264     	BCR	_PORTA,3
                                    1- 1265     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1266     ;;unsigned compare: left >= lit (0xFB=251), size=2
     004C                           1- 1267     _00259_DS_:
                                    1- 1268     	.line	268, "main.c"; 	ledCount > 250 ? (setbit(PORTA,4)) : (resetbit(PORTA,4));
     004C 2100                      1- 1269     	MOVIA	0x00
                                    1- 1270     	BANKSEL	_ledCount
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 04rr                      1- 1271     	SUBAR	(_ledCount + 1),W
     004F 0903                      1- 1272     	BTRSS	STATUS,2
     0050 3rrr                      1- 1273     	LGOTO	_00291_DS_
     0051 21FB                      1- 1274     	MOVIA	0xfb
     0052 04rr                      1- 1275     	SUBAR	_ledCount,W
     0053                           1- 1276     _00291_DS_:
     0053 0803                      1- 1277     	BTRSS	STATUS,0
     0054 3rrr                      1- 1278     	LGOTO	_00260_DS_
     0055 1Arr                      1- 1279     	BSR	_PORTA,4
     0056 3rrr                      1- 1280     	LGOTO	_00261_DS_
     0057                           1- 1281     _00260_DS_:
     0057 1Err                      1- 1282     	BCR	_PORTA,4
                                    1- 1283     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1284     ;;unsigned compare: left >= lit (0x12D=301), size=2
     0058                           1- 1285     _00261_DS_:
                                    1- 1286     	.line	269, "main.c"; 	if(ledCount > 300)
     0058 2101                      1- 1287     	MOVIA	0x01
                                    1- 1288     	BANKSEL	_ledCount
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 04rr                      1- 1289     	SUBAR	(_ledCount + 1),W
     005B 0903                      1- 1290     	BTRSS	STATUS,2
     005C 3rrr                      1- 1291     	LGOTO	_00292_DS_
     005D 212D                      1- 1292     	MOVIA	0x2d
     005E 04rr                      1- 1293     	SUBAR	_ledCount,W
     005F                           1- 1294     _00292_DS_:
     005F 0803                      1- 1295     	BTRSS	STATUS,0
     0060 3rrr                      1- 1296     	LGOTO	_00250_DS_
                                    1- 1297     	.line	271, "main.c"; 	if(ledCount > ledMax)
                                    1- 1298     	BANKSEL	_ledCount
     0061 rrrr                      3-   71 m1      .banksel ram_address
     0062 01rr                      1- 1299     	MOVR	(_ledCount + 1),W
                                    1- 1300     	BANKSEL	_ledMax
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 04rr                      1- 1301     	SUBAR	(_ledMax + 1),W
     0065 0903                      1- 1302     	BTRSS	STATUS,2
     0066 3rrr                      1- 1303     	LGOTO	_00293_DS_
                                    1- 1304     	BANKSEL	_ledCount
     0067 rrrr                      3-   71 m1      .banksel ram_address
     0068 01rr                      1- 1305     	MOVR	_ledCount,W
                                    1- 1306     	BANKSEL	_ledMax
     0069 rrrr                      3-   71 m1      .banksel ram_address
     006A 04rr                      1- 1307     	SUBAR	_ledMax,W
     006B                           1- 1308     _00293_DS_:
     006B 0C03                      1- 1309     	BTRSC	STATUS,0
     006C 3rrr                      1- 1310     	LGOTO	_00247_DS_
                                    1- 1311     	.line	272, "main.c"; 	ledCount = ledMin;
                                    1- 1312     	BANKSEL	r0x102D
     006D rrrr                      3-   71 m1      .banksel ram_address
     006E 01rr                      1- 1313     	MOVR	r0x102D,W
                                    1- 1314     	BANKSEL	_ledCount
     006F rrrr                      3-   71 m1      .banksel ram_address
     0070 00rr                      1- 1315     	MOVAR	_ledCount
                                    1- 1316     	BANKSEL	r0x102E
     0071 rrrr                      3-   71 m1      .banksel ram_address
     0072 01rr                      1- 1317     	MOVR	r0x102E,W
                                    1- 1318     	BANKSEL	_ledCount
     0073 rrrr                      3-   71 m1      .banksel ram_address
     0074 00rr                      1- 1319     	MOVAR	(_ledCount + 1)
     0075                           1- 1320     _00247_DS_:
                                    1- 1321     	.line	273, "main.c"; 	ledLock = 0;		//解锁
                                    1- 1322     	BANKSEL	_ledLock
     0075 rrrr                      3-   71 m1      .banksel ram_address
     0076 02rr                      1- 1323     	CLRR	_ledLock
     0077                           1- 1324     _00250_DS_:
                                    1- 1325     	.line	275, "main.c"; 	}
                                    1- 1326     	RETURN	
     0077 0010                      3-   26 m1      ret
                                    1- 1327     ; exit point of _ledCon
                                    1- 1329     ;***
                                    1- 1330     ;  pBlock Stats: dbName = C
                                    1- 1331     ;***
                                    1- 1332     ;has an exit
                                    1- 1333     ;; Starting pCode block
                                    1- 1334     .segment "code"; module=main, function=_initTimer0
     0000                           1- 1336     _initTimer0:
                                    1- 1337     ; 2 exit points
                                    1- 1338     	.line	232, "main.c"; 	PORTA = 0x23;
     0000 2123                      1- 1339     	MOVIA	0x23
     0001 00rr                      1- 1340     	MOVAR	_PORTA
                                    1- 1341     	.line	233, "main.c"; 	PORTB = 0xF8;
     0002 21F8                      1- 1342     	MOVIA	0xf8
     0003 00rr                      1- 1343     	MOVAR	_PORTB
                                    1- 1344     	.line	234, "main.c"; 	BPHCON = 0xFE;
     0004 21FE                      1- 1345     	MOVIA	0xfe
     0005 00rr                      1- 1346     	MOVAR	_BPHCON
                                    1- 1347     	.line	236, "main.c"; 	IOSTA = C_PA0_Input;
     0006 2101                      1- 1348     	MOVIA	0x01
     0007 000r                      1- 1349     	IOST	_IOSTA
                                    1- 1350     	.line	237, "main.c"; 	IOSTB =  0;	
     0008 0200                      1- 1351     	CLRA	
     0009 000r                      1- 1352     	IOST	_IOSTB
                                    1- 1353     	.line	238, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     000A 21A8                      1- 1354     	MOVIA	0xa8
     000B 00rr                      1- 1355     	MOVAR	_PCON
                                    1- 1356     	.line	239, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1- 1357     	MOVIA	0x01
     000D 00rr                      1- 1358     	MOVAR	_INTE
                                    1- 1359     	.line	240, "main.c"; 	INTF = 0;
     000E 02rr                      1- 1360     	CLRR	_INTF
                                    1- 1361     	.line	243, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1- 1362     	CLRA	
     0010 000r                      1- 1363     	IOST	_PCON1
                                    1- 1364     	.line	245, "main.c"; 	TMR0 = 55;
     0011 2137                      1- 1365     	MOVIA	0x37
     0012 00rr                      1- 1366     	MOVAR	_TMR0
                                    1- 1367     	.line	246, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1- 1368     	CLRA	
     0014 0003                      1- 1369     	T0MD	
                                    1- 1370     	.line	248, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0015 2111                      1- 1371     	MOVIA	0x11
     0016 000r                      1- 1372     	IOST	_PCON1
                                    1- 1373     	.line	250, "main.c"; 	PORTA &= 0x23;
     0017 2123                      1- 1374     	MOVIA	0x23
     0018 10rr                      1- 1375     	ANDAR	_PORTA,F
                                    1- 1376     	.line	251, "main.c"; 	PORTB &= 0xF0;
     0019 21F0                      1- 1377     	MOVIA	0xf0
     001A 10rr                      1- 1378     	ANDAR	_PORTB,F
                                    1- 1379     	.line	252, "main.c"; 	resetbit(PORTB,3);		
     001B 1Drr                      1- 1380     	BCR	_PORTB,3
                                    1- 1381     	.line	253, "main.c"; 	resetbit(PORTA,7);
     001C 1Frr                      1- 1382     	BCR	_PORTA,7
                                    1- 1383     	.line	254, "main.c"; 	resetbit(PORTA,6);	//关闭风扇
     001D 1Frr                      1- 1384     	BCR	_PORTA,6
                                    1- 1385     	.line	255, "main.c"; 	ENI();	
     001E 0004                      1- 1386     	ENI
                                    1- 1387     	.line	257, "main.c"; 	}
                                    1- 1388     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1- 1389     ; exit point of _initTimer0
                                    1- 1391     ;***
                                    1- 1392     ;  pBlock Stats: dbName = C
                                    1- 1393     ;***
                                    1- 1394     ;has an exit
                                    1- 1395     ;; Starting pCode block
                                    1- 1396     .segment "code"; module=main, function=_workCon
     0000                           1- 1398     _workCon:
                                    1- 1399     ; 2 exit points
                                    1- 1400     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1401     ;;unsigned compare: left >= lit (0x7E91=32401), size=2
                                    1- 1402     	.line	222, "main.c"; 	if(chrgCount > 32400 || sleepCount > 10800)
     0000 217E                      1- 1403     	MOVIA	0x7e
                                    1- 1404     	BANKSEL	_chrgCount
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 04rr                      1- 1405     	SUBAR	(_chrgCount + 1),W
     0003 0903                      1- 1406     	BTRSS	STATUS,2
     0004 3rrr                      1- 1407     	LGOTO	_00234_DS_
     0005 2191                      1- 1408     	MOVIA	0x91
     0006 04rr                      1- 1409     	SUBAR	_chrgCount,W
     0007                           1- 1410     _00234_DS_:
     0007 0C03                      1- 1411     	BTRSC	STATUS,0
     0008 3rrr                      1- 1412     	LGOTO	_00226_DS_
                                    1- 1413     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1414     ;;unsigned compare: left >= lit (0x2A31=10801), size=2
     0009 212A                      1- 1415     	MOVIA	0x2a
                                    1- 1416     	BANKSEL	_sleepCount
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 04rr                      1- 1417     	SUBAR	(_sleepCount + 1),W
     000C 0903                      1- 1418     	BTRSS	STATUS,2
     000D 3rrr                      1- 1419     	LGOTO	_00235_DS_
     000E 2131                      1- 1420     	MOVIA	0x31
     000F 04rr                      1- 1421     	SUBAR	_sleepCount,W
     0010                           1- 1422     _00235_DS_:
     0010 0803                      1- 1423     	BTRSS	STATUS,0
     0011 3rrr                      1- 1424     	LGOTO	_00229_DS_
     0012                           1- 1425     _00226_DS_:
                                    1- 1426     	.line	224, "main.c"; 	fullFlag = 1;
     0012 2101                      1- 1427     	MOVIA	0x01
                                    1- 1428     	BANKSEL	_fullFlag
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1- 1429     	MOVAR	_fullFlag
     0015                           1- 1430     _00229_DS_:
                                    1- 1431     	.line	227, "main.c"; 	}
                                    1- 1432     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1- 1433     ; exit point of _workCon
                                    1- 1435     ;***
                                    1- 1436     ;  pBlock Stats: dbName = C
                                    1- 1437     ;***
                                    1- 1438     ;has an exit
                                    1- 1439     ;functions called:
                                    1- 1440     ;   _halfChrg
                                    1- 1441     ;   _halfChrg
                                    1- 1442     ;   _fullChrg
                                    1- 1443     ;   _fullChrg
                                    1- 1444     ;   _halfChrg
                                    1- 1445     ;   _halfChrg
                                    1- 1446     ;   _fullChrg
                                    1- 1447     ;   _fullChrg
                                    1- 1448     ;1 compiler assigned register :
                                    1- 1449     ;   r0x102F
                                    1- 1450     ;; Starting pCode block
                                    1- 1451     .segment "code"; module=main, function=_setDuty
     0000                           1- 1453     _setDuty:
                                    1- 1454     ; 2 exit points
                                    1- 1455     	.line	133, "main.c"; 	if(dutyFlag == 0)
                                    1- 1456     	BANKSEL	_dutyFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1457     	MOVR	_dutyFlag,W
     0002 0903                      1- 1458     	BTRSS	STATUS,2
     0003 3rrr                      1- 1459     	LGOTO	_00179_DS_
                                    1- 1460     	.line	135, "main.c"; 	dutyFlag = 1;
     0004 2101                      1- 1461     	MOVIA	0x01
     0005 00rr                      1- 1462     	MOVAR	_dutyFlag
                                    1- 1463     	.line	136, "main.c"; 	if(addFlag == 1)
                                    1- 1464     	BANKSEL	_addFlag
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 01rr                      1- 1465     	MOVR	_addFlag,W
     0008 2401                      1- 1466     	XORIA	0x01
     0009 0903                      1- 1467     	BTRSS	STATUS,2
     000A 3rrr                      1- 1468     	LGOTO	_00152_DS_
                                    1- 1469     	.line	138, "main.c"; 	if(++duty > 126)
                                    1- 1470     	BANKSEL	_duty
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 05rr                      1- 1471     	INCR	_duty,F
                                    1- 1472     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1473     ;;unsigned compare: left >= lit (0x7F=127), size=1
     000D 217F                      1- 1474     	MOVIA	0x7f
     000E 04rr                      1- 1475     	SUBAR	_duty,W
     000F 0803                      1- 1476     	BTRSS	STATUS,0
     0010 3rrr                      1- 1477     	LGOTO	_00153_DS_
                                    1- 1478     	.line	140, "main.c"; 	duty = 126;		
     0011 217E                      1- 1479     	MOVIA	0x7e
     0012 00rr                      1- 1480     	MOVAR	_duty
     0013 3rrr                      1- 1481     	LGOTO	_00153_DS_
     0014                           1- 1482     _00152_DS_:
                                    1- 1483     	.line	145, "main.c"; 	if(--duty == 0)
                                    1- 1484     	BANKSEL	_duty
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 17rr                      1- 1485     	DECRSZ	_duty,F
     0016 3rrr                      1- 1486     	LGOTO	_00153_DS_
                                    1- 1487     	.line	147, "main.c"; 	duty = 1;
     0017 2101                      1- 1488     	MOVIA	0x01
     0018 00rr                      1- 1489     	MOVAR	_duty
     0019                           1- 1490     _00153_DS_:
                                    1- 1491     	.line	150, "main.c"; 	PWM2DUTY = duty - 1;
                                    1- 1492     	BANKSEL	_duty
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 06rr                      1- 1493     	DECR	_duty,W
                                    1- 1494     ;;1	MOVAR	r0x102F
     001B 00rr                      1- 1495     	SFUN	_PWM2DUTY
                                    1- 1496     ;;unsigned compare: left < lit (0x7B=123), size=2
                                    1- 1497     	.line	151, "main.c"; 	if(preA < 123)
     001C 2100                      1- 1498     	MOVIA	0x00
                                    1- 1499     	BANKSEL	_preA
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 04rr                      1- 1500     	SUBAR	(_preA + 1),W
     001F 0903                      1- 1501     	BTRSS	STATUS,2
     0020 3rrr                      1- 1502     	LGOTO	_00221_DS_
     0021 217B                      1- 1503     	MOVIA	0x7b
     0022 04rr                      1- 1504     	SUBAR	_preA,W
     0023                           1- 1505     _00221_DS_:
     0023 0C03                      1- 1506     	BTRSC	STATUS,0
     0024 3rrr                      1- 1507     	LGOTO	_00175_DS_
                                    1- 1508     	.line	153, "main.c"; 	if(duty == 1 && (++fullCount > 200))	//充满了，进入涓流充电
                                    1- 1509     	BANKSEL	_duty
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1- 1510     	MOVR	_duty,W
     0027 2401                      1- 1511     	XORIA	0x01
     0028 0903                      1- 1512     	BTRSS	STATUS,2
     0029 3rrr                      1- 1513     	LGOTO	_00159_DS_
                                    1- 1514     	BANKSEL	_fullCount
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 05rr                      1- 1515     	INCR	_fullCount,F
                                    1- 1516     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1517     ;;unsigned compare: left >= lit (0xC9=201), size=1
     002C 21C9                      1- 1518     	MOVIA	0xc9
     002D 04rr                      1- 1519     	SUBAR	_fullCount,W
     002E 0803                      1- 1520     	BTRSS	STATUS,0
     002F 3rrr                      1- 1521     	LGOTO	_00159_DS_
                                    1- 1522     	.line	155, "main.c"; 	halfChrg();
     0030 2rrr                      1- 1523     	LCALL	_halfChrg
                                    1- 1524     	.line	156, "main.c"; 	setbit(PORTA,6);		//打开风扇
     0031 1Brr                      1- 1525     	BSR	_PORTA,6
                                    1- 1526     	.line	157, "main.c"; 	workStep = 3;
     0032 2103                      1- 1527     	MOVIA	0x03
                                    1- 1528     	BANKSEL	_workStep
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 00rr                      1- 1529     	MOVAR	_workStep
                                    1- 1530     	.line	158, "main.c"; 	ledStep = 0;
                                    1- 1531     	BANKSEL	_ledStep
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 02rr                      1- 1532     	CLRR	_ledStep
     0037 3rrr                      1- 1533     	LGOTO	_00179_DS_
     0038                           1- 1534     _00159_DS_:
                                    1- 1535     	.line	163, "main.c"; 	if(duty == 126 && (++fullCount > 200))
                                    1- 1536     	BANKSEL	_duty
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 01rr                      1- 1537     	MOVR	_duty,W
     003A 247E                      1- 1538     	XORIA	0x7e
     003B 0903                      1- 1539     	BTRSS	STATUS,2
     003C 3rrr                      1- 1540     	LGOTO	_00155_DS_
                                    1- 1541     	BANKSEL	_fullCount
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 05rr                      1- 1542     	INCR	_fullCount,F
                                    1- 1543     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1544     ;;unsigned compare: left >= lit (0xC9=201), size=1
     003F 21C9                      1- 1545     	MOVIA	0xc9
     0040 04rr                      1- 1546     	SUBAR	_fullCount,W
     0041 0803                      1- 1547     	BTRSS	STATUS,0
     0042 3rrr                      1- 1548     	LGOTO	_00155_DS_
                                    1- 1549     	.line	165, "main.c"; 	halfChrg();
     0043 2rrr                      1- 1550     	LCALL	_halfChrg
                                    1- 1551     	.line	166, "main.c"; 	workStep = 2;
     0044 2102                      1- 1552     	MOVIA	0x02
                                    1- 1553     	BANKSEL	_workStep
     0045 rrrr                      3-   71 m1      .banksel ram_address
     0046 00rr                      1- 1554     	MOVAR	_workStep
     0047 3rrr                      1- 1555     	LGOTO	_00156_DS_
     0048                           1- 1556     _00155_DS_:
                                    1- 1557     	.line	170, "main.c"; 	fullChrg();
     0048 2rrr                      1- 1558     	LCALL	_fullChrg
                                    1- 1559     	.line	171, "main.c"; 	PWM2DUTY = 100;
     0049 2164                      1- 1560     	MOVIA	0x64
     004A 00rr                      1- 1561     	SFUN	_PWM2DUTY
                                    1- 1562     	.line	172, "main.c"; 	workStep = 3;
     004B 2103                      1- 1563     	MOVIA	0x03
                                    1- 1564     	BANKSEL	_workStep
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 00rr                      1- 1565     	MOVAR	_workStep
     004E                           1- 1566     _00156_DS_:
                                    1- 1567     	.line	174, "main.c"; 	resetbit(PORTA,6);		//关闭风扇
     004E 1Frr                      1- 1568     	BCR	_PORTA,6
                                    1- 1569     	.line	175, "main.c"; 	startFlag = 0;
                                    1- 1570     	BANKSEL	_startFlag
     004F rrrr                      3-   71 m1      .banksel ram_address
     0050 02rr                      1- 1571     	CLRR	_startFlag
                                    1- 1572     	.line	176, "main.c"; 	ledStep = 0;
                                    1- 1573     	BANKSEL	_ledStep
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 02rr                      1- 1574     	CLRR	_ledStep
                                    1- 1575     	.line	177, "main.c"; 	chrgCount = 0;
                                    1- 1576     	BANKSEL	_chrgCount
     0053 rrrr                      3-   71 m1      .banksel ram_address
     0054 02rr                      1- 1577     	CLRR	_chrgCount
     0055 02rr                      1- 1578     	CLRR	(_chrgCount + 1)
                                    1- 1579     	.line	178, "main.c"; 	sleepCount = 0;
                                    1- 1580     	BANKSEL	_sleepCount
     0056 rrrr                      3-   71 m1      .banksel ram_address
     0057 02rr                      1- 1581     	CLRR	_sleepCount
     0058 02rr                      1- 1582     	CLRR	(_sleepCount + 1)
     0059 3rrr                      1- 1583     	LGOTO	_00179_DS_
     005A                           1- 1584     _00175_DS_:
                                    1- 1585     	.line	186, "main.c"; 	setbit(PORTA,6);		//打开风扇
     005A 1Brr                      1- 1586     	BSR	_PORTA,6
                                    1- 1587     	.line	187, "main.c"; 	fullChrg();
     005B 2rrr                      1- 1588     	LCALL	_fullChrg
                                    1- 1589     	.line	188, "main.c"; 	sleepCount = 0;
                                    1- 1590     	BANKSEL	_sleepCount
     005C rrrr                      3-   71 m1      .banksel ram_address
     005D 02rr                      1- 1591     	CLRR	_sleepCount
     005E 02rr                      1- 1592     	CLRR	(_sleepCount + 1)
                                    1- 1593     	.line	189, "main.c"; 	fullCount = 0;
                                    1- 1594     	BANKSEL	_fullCount
     005F rrrr                      3-   71 m1      .banksel ram_address
     0060 02rr                      1- 1595     	CLRR	_fullCount
                                    1- 1596     	.line	190, "main.c"; 	workStep = 1;
     0061 2101                      1- 1597     	MOVIA	0x01
                                    1- 1598     	BANKSEL	_workStep
     0062 rrrr                      3-   71 m1      .banksel ram_address
     0063 00rr                      1- 1599     	MOVAR	_workStep
                                    1- 1600     ;;unsigned compare: left < lit (0x19=25), size=1
                                    1- 1601     	.line	191, "main.c"; 	if(duty < 25)
     0064 2119                      1- 1602     	MOVIA	0x19
                                    1- 1603     	BANKSEL	_duty
     0065 rrrr                      3-   71 m1      .banksel ram_address
     0066 04rr                      1- 1604     	SUBAR	_duty,W
     0067 0C03                      1- 1605     	BTRSC	STATUS,0
     0068 3rrr                      1- 1606     	LGOTO	_00172_DS_
                                    1- 1607     	.line	193, "main.c"; 	ledStep = 1;
     0069 2101                      1- 1608     	MOVIA	0x01
                                    1- 1609     	BANKSEL	_ledStep
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 00rr                      1- 1610     	MOVAR	_ledStep
     006C 3rrr                      1- 1611     	LGOTO	_00179_DS_
                                    1- 1612     ;;unsigned compare: left < lit (0x32=50), size=1
     006D                           1- 1613     _00172_DS_:
                                    1- 1614     	.line	195, "main.c"; 	else if(duty < 50)
     006D 2132                      1- 1615     	MOVIA	0x32
                                    1- 1616     	BANKSEL	_duty
     006E rrrr                      3-   71 m1      .banksel ram_address
     006F 04rr                      1- 1617     	SUBAR	_duty,W
     0070 0C03                      1- 1618     	BTRSC	STATUS,0
     0071 3rrr                      1- 1619     	LGOTO	_00169_DS_
                                    1- 1620     	.line	197, "main.c"; 	ledStep = 2;
     0072 2102                      1- 1621     	MOVIA	0x02
                                    1- 1622     	BANKSEL	_ledStep
     0073 rrrr                      3-   71 m1      .banksel ram_address
     0074 00rr                      1- 1623     	MOVAR	_ledStep
     0075 3rrr                      1- 1624     	LGOTO	_00179_DS_
                                    1- 1625     ;;unsigned compare: left < lit (0x4B=75), size=1
     0076                           1- 1626     _00169_DS_:
                                    1- 1627     	.line	199, "main.c"; 	else if(duty < 75)
     0076 214B                      1- 1628     	MOVIA	0x4b
                                    1- 1629     	BANKSEL	_duty
     0077 rrrr                      3-   71 m1      .banksel ram_address
     0078 04rr                      1- 1630     	SUBAR	_duty,W
     0079 0C03                      1- 1631     	BTRSC	STATUS,0
     007A 3rrr                      1- 1632     	LGOTO	_00166_DS_
                                    1- 1633     	.line	201, "main.c"; 	ledStep = 3;
     007B 2103                      1- 1634     	MOVIA	0x03
                                    1- 1635     	BANKSEL	_ledStep
     007C rrrr                      3-   71 m1      .banksel ram_address
     007D 00rr                      1- 1636     	MOVAR	_ledStep
     007E 3rrr                      1- 1637     	LGOTO	_00179_DS_
                                    1- 1638     ;;unsigned compare: left < lit (0x64=100), size=1
     007F                           1- 1639     _00166_DS_:
                                    1- 1640     	.line	203, "main.c"; 	else if(duty < 100)
     007F 2164                      1- 1641     	MOVIA	0x64
                                    1- 1642     	BANKSEL	_duty
     0080 rrrr                      3-   71 m1      .banksel ram_address
     0081 04rr                      1- 1643     	SUBAR	_duty,W
     0082 0C03                      1- 1644     	BTRSC	STATUS,0
     0083 3rrr                      1- 1645     	LGOTO	_00163_DS_
                                    1- 1646     	.line	205, "main.c"; 	ledStep = 4;
     0084 2104                      1- 1647     	MOVIA	0x04
                                    1- 1648     	BANKSEL	_ledStep
     0085 rrrr                      3-   71 m1      .banksel ram_address
     0086 00rr                      1- 1649     	MOVAR	_ledStep
     0087 3rrr                      1- 1650     	LGOTO	_00179_DS_
     0088                           1- 1651     _00163_DS_:
                                    1- 1652     	.line	209, "main.c"; 	ledStep = 5;
     0088 2105                      1- 1653     	MOVIA	0x05
                                    1- 1654     	BANKSEL	_ledStep
     0089 rrrr                      3-   71 m1      .banksel ram_address
     008A 00rr                      1- 1655     	MOVAR	_ledStep
     008B                           1- 1656     _00179_DS_:
                                    1- 1657     	.line	216, "main.c"; 	}
                                    1- 1658     	RETURN	
     008B 0010                      3-   26 m1      ret
                                    1- 1659     ; exit point of _setDuty
                                    1- 1662     ;	code size estimation:
                                    1- 1663     ;	  561+  136 =   697 instructions ( 1666 byte)
                                    1- 1665     	end
                                    1- 1665     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000001B
_00002_DS_              Label    00000027
_00003_DS_              Label    00000027
_00106_DS_              Label    00000036
_00113_DS_              Label    00000039
_00121_DS_              Label    00000014
_00123_DS_              Label    00000027
_00124_DS_              Label    00000029
_00126_DS_              Label    00000003
_00142_DS_              Label    0000001C
_00152_DS_              Label    00000014
_00153_DS_              Label    00000019
_00155_DS_              Label    00000048
_00156_DS_              Label    0000004E
_00159_DS_              Label    00000038
_00163_DS_              Label    00000088
_00166_DS_              Label    0000007F
_00169_DS_              Label    00000076
_00172_DS_              Label    0000006D
_00175_DS_              Label    0000005A
_00179_DS_              Label    0000008B
_00221_DS_              Label    00000023
_00226_DS_              Label    00000012
_00229_DS_              Label    00000015
_00234_DS_              Label    00000007
_00235_DS_              Label    00000010
_00245_DS_              Label    00000019
_00247_DS_              Label    00000075
_00250_DS_              Label    00000077
_00252_DS_              Label    00000027
_00253_DS_              Label    00000028
_00254_DS_              Label    00000033
_00255_DS_              Label    00000034
_00256_DS_              Label    0000003F
_00257_DS_              Label    00000040
_00258_DS_              Label    0000004B
_00259_DS_              Label    0000004C
_00260_DS_              Label    00000057
_00261_DS_              Label    00000058
_00286_DS_              Label    0000000F
_00287_DS_              Label    00000023
_00288_DS_              Label    0000002F
_00289_DS_              Label    0000003B
_00290_DS_              Label    00000047
_00291_DS_              Label    00000053
_00292_DS_              Label    0000005F
_00293_DS_              Label    0000006B
_00308_DS_              Label    00000016
_00309_DS_              Label    0000001A
_00310_DS_              Label    0000001E
_00311_DS_              Label    00000022
_00312_DS_              Label    00000026
_00313_DS_              Label    0000002A
_00314_DS_              Label    0000002C
_00317_DS_              Label    00000045
_00329_DS_              Label    00000010
_00330_DS_              Label    0000003B
_00340_DS_              Label    00000051
_00343_DS_              Label    00000044
_00345_DS_              Label    00000053
_00353_DS_              Label    0000003E
_00354_DS_              Label    0000004B
_00361_DS_              Label    00000009
_00363_DS_              Label    0000002A
_00368_DS_              Label    00000000
_00375_DS_              Label    00000009
_00377_DS_              Label    0000001C
_00386_DS_              Label    00000013
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_addFlag                Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkA                 Label    00000000
_checkV                 Label    00000000
_chrgCount              Label    00000000
_closeChrg              Label    00000000
_CMPCR                  Label    00000000
_count1S                Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_dutyFlag               Label    00000000
_F_AIN0_Convert         Label    00000000
_F_AIN7_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_FSR                    Label    00000000
_fullChrg               Label    00000000
_fullCount              Label    00000000
_fullFlag               Label    00000000
_halfChrg               Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initTimer0             Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_ledCtr                 Label    00000000
_ledLock                Label    00000000
_ledMax                 Label    00000000
_ledMin                 Label    00000000
_ledStep                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_preA                   Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_R_AIN0_DATA            Label    00000000
_R_AIN0_DATA_LB         Label    00000000
_R_AIN7_DATA            Label    00000000
_R_AIN7_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_setDuty                Label    00000000
_sleepCount             Label    00000000
_startFlag              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCon                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    0000004A
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x101F                 Label    00000000
r0x1020                 Label    00000000
r0x1021                 Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1026                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102B                 Label    00000000
r0x102C                 Label    00000000
r0x102D                 Label    00000000
r0x102E                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
