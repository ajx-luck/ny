
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_checkV
                                    1-   15     	extern	_F_AIN7_Convert
                                    1-   16     	extern	__moduchar
                                    1-   17     	extern	__divuint
                                    1-   18     	extern	_PORTAbits
                                    1-   19     	extern	_PORTBbits
                                    1-   20     	extern	_PCONbits
                                    1-   21     	extern	_BWUCONbits
                                    1-   22     	extern	_ABPLCONbits
                                    1-   23     	extern	_BPHCONbits
                                    1-   24     	extern	_INTEbits
                                    1-   25     	extern	_INTFbits
                                    1-   26     	extern	_ADMDbits
                                    1-   27     	extern	_ADRbits
                                    1-   28     	extern	_ADVREFHbits
                                    1-   29     	extern	_ADCRbits
                                    1-   30     	extern	_AWUCONbits
                                    1-   31     	extern	_PACONbits
                                    1-   32     	extern	_INTEDGbits
                                    1-   33     	extern	_ANAENbits
                                    1-   34     	extern	_RFCbits
                                    1-   35     	extern	_INTE2bits
                                    1-   36     	extern	_INDF
                                    1-   37     	extern	_TMR0
                                    1-   38     	extern	_PCL
                                    1-   39     	extern	_STATUS
                                    1-   40     	extern	_FSR
                                    1-   41     	extern	_PORTA
                                    1-   42     	extern	_PORTB
                                    1-   43     	extern	_PCON
                                    1-   44     	extern	_BWUCON
                                    1-   45     	extern	_PCHBUF
                                    1-   46     	extern	_ABPLCON
                                    1-   47     	extern	_BPHCON
                                    1-   48     	extern	_INTE
                                    1-   49     	extern	_INTF
                                    1-   50     	extern	_ADMD
                                    1-   51     	extern	_ADR
                                    1-   52     	extern	_ADD
                                    1-   53     	extern	_ADVREFH
                                    1-   54     	extern	_ADCR
                                    1-   55     	extern	_AWUCON
                                    1-   56     	extern	_PACON
                                    1-   57     	extern	_INTEDG
                                    1-   58     	extern	_TMRH
                                    1-   59     	extern	_ANAEN
                                    1-   60     	extern	_RFC
                                    1-   61     	extern	_TM3RH
                                    1-   62     	extern	_INTE2
                                    1-   63     	extern	_TMR1
                                    1-   64     	extern	_T1CR1
                                    1-   65     	extern	_T1CR2
                                    1-   66     	extern	_PWM1DUTY
                                    1-   67     	extern	_PS1CV
                                    1-   68     	extern	_BZ1CR
                                    1-   69     	extern	_IRCR
                                    1-   70     	extern	_TBHP
                                    1-   71     	extern	_TBHD
                                    1-   72     	extern	_TMR2
                                    1-   73     	extern	_T2CR1
                                    1-   74     	extern	_T2CR2
                                    1-   75     	extern	_PWM2DUTY
                                    1-   76     	extern	_PS2CV
                                    1-   77     	extern	_BZ2CR
                                    1-   78     	extern	_OSCCR
                                    1-   79     	extern	_TMR3
                                    1-   80     	extern	_T3CR1
                                    1-   81     	extern	_T3CR2
                                    1-   82     	extern	_PWM3DUTY
                                    1-   83     	extern	_PS3CV
                                    1-   84     	extern	_BZ3CR
                                    1-   85     	extern	_IOSTA
                                    1-   86     	extern	_IOSTB
                                    1-   87     	extern	_APHCON
                                    1-   88     	extern	_PS0CV
                                    1-   89     	extern	_BODCON
                                    1-   90     	extern	_CMPCR
                                    1-   91     	extern	_PCON1
                                    1-   92     	extern	_T0MD
                                    1-   93     	extern	___sdcc_saved_fsr
                                    1-   94     	extern	___sdcc_saved_stk00
                                    1-   95     	extern	___sdcc_saved_stk01
                                    1-   96     	extern	__nyc_ny8_startup
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ; global declarations
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     	extern	_closeChrg
                                    1-  101     	extern	_halfChrg
                                    1-  102     	extern	_fullChrg
                                    1-  103     	extern	_delay
                                    1-  104     	extern	_F_wait_eoc
                                    1-  105     	extern	_F_AIN0_Convert
                                    1-  106     	extern	_checkA
                                    1-  107     	extern	_initAD
                                    1-  108     	extern	_ledCtr
                                    1-  109     	extern	_pwmStart
                                    1-  110     	extern	_ledCon
                                    1-  111     	extern	_initTimer0
                                    1-  112     	extern	_workCon
                                    1-  113     	extern	_setDuty
                                    1-  114     	extern	_isr
                                    1-  115     	extern	_main
                                    1-  116     	extern	_pwmStop
                                    1-  117     	extern	_keyClick
                                    1-  118     	extern	_intCount
                                    1-  119     	extern	_IntFlag
                                    1-  120     	extern	_ledCount
                                    1-  121     	extern	_R_AIN0_DATA
                                    1-  122     	extern	_R_AIN0_DATA_LB
                                    1-  123     	extern	_R_AIN7_DATA
                                    1-  124     	extern	_R_AIN7_DATA_LB
                                    1-  125     	extern	_workStep
                                    1-  126     	extern	_ledStep
                                    1-  127     	extern	_sleepCount
                                    1-  128     	extern	_chrgCount
                                    1-  129     	extern	_startFlag
                                    1-  130     	extern	_count1S
                                    1-  131     	extern	_fullFlag
                                    1-  132     	extern	_fullCount
                                    1-  133     	extern	_ledMin
                                    1-  134     	extern	_ledMax
                                    1-  135     	extern	_ledLock
                                    1-  136     	extern	_sumA
                                    1-  137     	extern	_avaA
                                    1-  138     	extern	_duty
                                    1-  139     	extern	_addFlag
                                    1-  140     	extern	_dutyFlag
                                    1-  141     	extern	_adTime
                                    1-  142     	extern	_maxDuty
                                    1-  144     	extern PSAVE
                                    1-  145     	extern SSAVE
                                    1-  146     	extern WSAVE
                                    1-  147     	extern STK12
                                    1-  148     	extern STK11
                                    1-  149     	extern STK10
                                    1-  150     	extern STK09
                                    1-  151     	extern STK08
                                    1-  152     	extern STK07
                                    1-  153     	extern STK06
                                    1-  154     	extern STK05
                                    1-  155     	extern STK04
                                    1-  156     	extern STK03
                                    1-  157     	extern STK02
                                    1-  158     	extern STK01
                                    1-  159     	extern STK00
                                    1-  161     .segment "uninit", 0x20000040
 20000040                           1-  162     PSAVE:
                                    1-  163     	.res 1
 20000041                           1-  164     SSAVE:
                                    1-  165     	.res 1
 20000042                           1-  166     WSAVE:
                                    1-  167     	.res 1
 20000043                           1-  168     STK12:
                                    1-  169     	.res 1
 20000044                           1-  170     STK11:
                                    1-  171     	.res 1
 20000045                           1-  172     STK10:
                                    1-  173     	.res 1
 20000046                           1-  174     STK09:
                                    1-  175     	.res 1
 20000047                           1-  176     STK08:
                                    1-  177     	.res 1
 20000048                           1-  178     STK07:
                                    1-  179     	.res 1
 20000049                           1-  180     STK06:
                                    1-  181     	.res 1
 2000004A                           1-  182     STK05:
                                    1-  183     	.res 1
 2000004B                           1-  184     STK04:
                                    1-  185     	.res 1
 2000004C                           1-  186     STK03:
                                    1-  187     	.res 1
 2000004D                           1-  188     STK02:
                                    1-  189     	.res 1
 2000004E                           1-  190     STK01:
                                    1-  191     	.res 1
 2000004F                           1-  192     STK00:
                                    1-  193     	.res 1
                                    1-  195     ;--------------------------------------------------------
                                    1-  196     ; global definitions
                                    1-  197     ;--------------------------------------------------------
                                    1-  198     .segment "uninit"
     0000                           1-  199     _R_AIN0_DATA:
                                    1-  200     	.res	2
                                    1-  203     .segment "uninit"
     0000                           1-  204     _R_AIN0_DATA_LB:
                                    1-  205     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     _R_AIN7_DATA:
                                    1-  210     	.res	2
                                    1-  213     .segment "uninit"
     0000                           1-  214     _R_AIN7_DATA_LB:
                                    1-  215     	.res	1
                                    1-  218     ;--------------------------------------------------------
                                    1-  219     ; absolute symbol definitions
                                    1-  220     ;--------------------------------------------------------
                                    1-  221     ;--------------------------------------------------------
                                    1-  222     ; compiler-defined variables
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     .segment "uninit"
     0000                           1-  225     r0x1034:
                                    1-  226     	.res	1
                                    1-  227     .segment "uninit"
     0000                           1-  228     r0x1031:
                                    1-  229     	.res	1
                                    1-  230     .segment "uninit"
     0000                           1-  231     r0x1032:
                                    1-  232     	.res	1
                                    1-  233     .segment "uninit"
     0000                           1-  234     r0x102F:
                                    1-  235     	.res	1
                                    1-  236     .segment "uninit"
     0000                           1-  237     r0x1030:
                                    1-  238     	.res	1
                                    1-  239     .segment "uninit"
     0000                           1-  240     r0x102D:
                                    1-  241     	.res	1
                                    1-  242     .segment "uninit"
     0000                           1-  243     r0x102E:
                                    1-  244     	.res	1
                                    1-  245     .segment "uninit"
     0000                           1-  246     r0x1025:
                                    1-  247     	.res	1
                                    1-  248     .segment "uninit"
     0000                           1-  249     r0x1026:
                                    1-  250     	.res	1
                                    1-  251     .segment "uninit"
     0000                           1-  252     r0x1027:
                                    1-  253     	.res	1
                                    1-  254     .segment "uninit"
     0000                           1-  255     r0x102A:
                                    1-  256     	.res	1
                                    1-  257     .segment "uninit"
     0000                           1-  258     r0x1022:
                                    1-  259     	.res	1
                                    1-  260     .segment "uninit"
     0000                           1-  261     r0x1021:
                                    1-  262     	.res	1
                                    1-  263     .segment "uninit"
     0000                           1-  264     r0x1023:
                                    1-  265     	.res	1
                                    1-  266     .segment "uninit"
     0000                           1-  267     r0x1024:
                                    1-  268     	.res	1
                                    1-  269     ;--------------------------------------------------------
                                    1-  270     ; initialized data
                                    1-  271     ;--------------------------------------------------------
                                    1-  273     .segment "idata"
     0000                           1-  274     _keyClick:
     0000 0000                      1-  275     	dw	0x00
                                    1-  279     .segment "idata"
     0000                           1-  280     _intCount:
     0000 0000                      1-  281     	dw	0x00
                                    1-  285     .segment "idata"
     0000                           1-  286     _IntFlag:
     0000 0000                      1-  287     	dw	0x00
                                    1-  291     .segment "idata"
     0000                           1-  292     _ledCount:
     0000 0000 0000                 1-  293     	dw	0x00, 0x00
                                    1-  297     .segment "idata"
     0000                           1-  298     _workStep:
     0000 0003                      1-  299     	dw	0x03
                                    1-  303     .segment "idata"
     0000                           1-  304     _ledStep:
     0000 0000                      1-  305     	dw	0x00
                                    1-  309     .segment "idata"
     0000                           1-  310     _sleepCount:
     0000 0000 0000                 1-  311     	dw	0x00, 0x00
                                    1-  315     .segment "idata"
     0000                           1-  316     _chrgCount:
     0000 0000 0000                 1-  317     	dw	0x00, 0x00
                                    1-  321     .segment "idata"
     0000                           1-  322     _startFlag:
     0000 0000                      1-  323     	dw	0x00
                                    1-  327     .segment "idata"
     0000                           1-  328     _count1S:
     0000 0000                      1-  329     	dw	0x00
                                    1-  333     .segment "idata"
     0000                           1-  334     _fullFlag:
     0000 0000                      1-  335     	dw	0x00
                                    1-  339     .segment "idata"
     0000                           1-  340     _fullCount:
     0000 0000                      1-  341     	dw	0x00
                                    1-  345     .segment "idata"
     0000                           1-  346     _ledMin:
     0000 0000                      1-  347     	dw	0x00
                                    1-  351     .segment "idata"
     0000                           1-  352     _ledMax:
     0000 0036 0001                 1-  353     	dw	0x36, 0x01
                                    1-  357     .segment "idata"
     0000                           1-  358     _ledLock:
     0000 0000                      1-  359     	dw	0x00
                                    1-  363     .segment "idata"
     0000                           1-  364     _sumA:
     0000 0000 0000                 1-  365     	dw	0x00, 0x00
                                    1-  369     .segment "idata"
     0000                           1-  370     _avaA:
     0000 0000 0000                 1-  371     	dw	0x00, 0x00
                                    1-  375     .segment "idata"
     0000                           1-  376     _duty:
     0000 0001                      1-  377     	dw	0x01
                                    1-  381     .segment "idata"
     0000                           1-  382     _addFlag:
     0000 0000                      1-  383     	dw	0x00
                                    1-  387     .segment "idata"
     0000                           1-  388     _dutyFlag:
     0000 0000                      1-  389     	dw	0x00
                                    1-  393     .segment "idata"
     0000                           1-  394     _adTime:
     0000 0000                      1-  395     	dw	0x00
                                    1-  399     .segment "idata"
     0000                           1-  400     _maxDuty:
     0000 0028                      1-  401     	dw	0x28
                                    1-  404     ;--------------------------------------------------------
                                    1-  405     ; overlayable items in internal ram 
                                    1-  406     ;--------------------------------------------------------
                                    1-  407     ;	udata_ovr
                                    1-  408     ;--------------------------------------------------------
                                    1-  409     ; reset vector 
                                    1-  410     ;--------------------------------------------------------
                                    1-  411     ORG	0x0000
     0000 3rrr                      1-  412     	LGOTO	__nyc_ny8_startup
                                    1-  413     ;--------------------------------------------------------
                                    1-  414     ; interrupt and initialization code
                                    1-  415     ;--------------------------------------------------------
                                    1-  416     ORG 0x0008
     0008 3rrr                      1-  417     	lgoto	__sdcc_interrupt
                                    1-  419     .segment "code"
     0000                           1-  420     __sdcc_interrupt:
                                    1-  421     ;***
                                    1-  422     ;  pBlock Stats: dbName = I
                                    1-  423     ;***
                                    1-  424     ;2 compiler assigned registers:
                                    1-  425     ;   STK00
                                    1-  426     ;   STK01
                                    1-  427     ;; Starting pCode block
     0000                           1-  428     _isr:
                                    1-  429     ; 0 exit points
                                    1-  430     	.line	58, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  431     	MOVAR	WSAVE
     0001 1503                      1-  432     	SWAPR	STATUS,W
     0002 0283                      1-  433     	CLRR	STATUS
     0003 00rr                      1-  434     	MOVAR	SSAVE
     0004 010A                      1-  435     	MOVR	PCHBUF,W
     0005 028A                      1-  436     	CLRR	PCHBUF
     0006 00rr                      1-  437     	MOVAR	PSAVE
     0007 0104                      1-  438     	MOVR	FSR,W
                                    1-  439     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  440     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  441     	MOVR	STK00,W
                                    1-  442     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  443     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  444     	MOVR	STK01,W
                                    1-  445     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  446     	MOVAR	___sdcc_saved_stk01
                                    1-  447     	.line	60, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  448     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  449     	LGOTO	_00113_DS_
                                    1-  450     	.line	62, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  451     	MOVIA	0x37
     0013 03rr                      1-  452     	ADDAR	_TMR0,F
                                    1-  453     	.line	63, "main.c"; 	intCount++;
                                    1-  454     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  455     	INCR	_intCount,F
                                    1-  456     	.line	64, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  457     	MOVR	_intCount,W
     0017 2464                      1-  458     	XORIA	0x64
     0018 0903                      1-  459     	BTRSS	STATUS,2
     0019 3rrr                      1-  460     	LGOTO	_00113_DS_
                                    1-  461     	.line	66, "main.c"; 	intCount = 0;
     001A 02rr                      1-  462     	CLRR	_intCount
                                    1-  463     	.line	67, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  464     	MOVIA	0x01
                                    1-  465     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  466     	MOVAR	_IntFlag
                                    1-  467     	.line	68, "main.c"; 	ledCount++; 
                                    1-  468     	BANKSEL	_ledCount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 05rr                      1-  469     	INCR	_ledCount,F
     0020 0D03                      1-  470     	BTRSC	STATUS,2
     0021 05rr                      1-  471     	INCR	(_ledCount + 1),F
                                    1-  472     	.line	69, "main.c"; 	if(++count1S >= 100)
                                    1-  473     	BANKSEL	_count1S
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 05rr                      1-  474     	INCR	_count1S,F
                                    1-  475     ;;unsigned compare: left < lit (0x64=100), size=1
     0024 2164                      1-  476     	MOVIA	0x64
     0025 04rr                      1-  477     	SUBAR	_count1S,W
     0026 0803                      1-  478     	BTRSS	STATUS,0
     0027 3rrr                      1-  479     	LGOTO	_00113_DS_
                                    1-  480     	.line	71, "main.c"; 	count1S = 0;
     0028 02rr                      1-  481     	CLRR	_count1S
                                    1-  482     	.line	72, "main.c"; 	chrgCount++;
                                    1-  483     	BANKSEL	_chrgCount
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 05rr                      1-  484     	INCR	_chrgCount,F
     002B 0D03                      1-  485     	BTRSC	STATUS,2
     002C 05rr                      1-  486     	INCR	(_chrgCount + 1),F
                                    1-  487     	.line	73, "main.c"; 	if(startFlag)
                                    1-  488     	BANKSEL	_startFlag
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 01rr                      1-  489     	MOVR	_startFlag,W
     002F 0D03                      1-  490     	BTRSC	STATUS,2
     0030 3rrr                      1-  491     	LGOTO	_00106_DS_
                                    1-  492     	.line	75, "main.c"; 	sleepCount++;
                                    1-  493     	BANKSEL	_sleepCount
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 05rr                      1-  494     	INCR	_sleepCount,F
     0033 0D03                      1-  495     	BTRSC	STATUS,2
     0034 05rr                      1-  496     	INCR	(_sleepCount + 1),F
     0035 3rrr                      1-  497     	LGOTO	_00113_DS_
     0036                           1-  498     _00106_DS_:
                                    1-  499     	.line	78, "main.c"; 	sleepCount = 0;
                                    1-  500     	BANKSEL	_sleepCount
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 02rr                      1-  501     	CLRR	_sleepCount
     0038 02rr                      1-  502     	CLRR	(_sleepCount + 1)
     0039                           1-  503     _00113_DS_:
                                    1-  504     	.line	84, "main.c"; 	INTF = 0;
     0039 02rr                      1-  505     	CLRR	_INTF
                                    1-  506     	.line	86, "main.c"; 	}
                                    1-  507     	BANKSEL	___sdcc_saved_stk01
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 01rr                      1-  508     	MOVR	___sdcc_saved_stk01,W
     003C 00rr                      1-  509     	MOVAR	STK01
                                    1-  510     	BANKSEL	___sdcc_saved_stk00
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1-  511     	MOVR	___sdcc_saved_stk00,W
     003F 00rr                      1-  512     	MOVAR	STK00
                                    1-  513     	BANKSEL	___sdcc_saved_fsr
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 01rr                      1-  514     	MOVR	___sdcc_saved_fsr,W
     0042 0084                      1-  515     	MOVAR	FSR
     0043 01rr                      1-  516     	MOVR	PSAVE,W
     0044 008A                      1-  517     	MOVAR	PCHBUF
     0045 0283                      1-  518     	CLRR	STATUS
     0046 15rr                      1-  519     	SWAPR	SSAVE,W
     0047 0083                      1-  520     	MOVAR	STATUS
     0048 15rr                      1-  521     	SWAPR	WSAVE,F
     0049 15rr                      1-  522     	SWAPR	WSAVE,W
     004A                           1-  523     END_OF_INTERRUPT:
     004A 0011                      1-  524     	RETIE	
                                    1-  526     ;--------------------------------------------------------
                                    1-  527     ; code
                                    1-  528     ;--------------------------------------------------------
                                    1-  529     ;***
                                    1-  530     ;  pBlock Stats: dbName = M
                                    1-  531     ;***
                                    1-  532     ;has an exit
                                    1-  533     ;functions called:
                                    1-  534     ;   _initTimer0
                                    1-  535     ;   _initAD
                                    1-  536     ;   _pwmStart
                                    1-  537     ;   _closeChrg
                                    1-  538     ;   _checkA
                                    1-  539     ;   __moduchar
                                    1-  540     ;   __divuint
                                    1-  541     ;   _setDuty
                                    1-  542     ;   _workCon
                                    1-  543     ;   _ledCtr
                                    1-  544     ;   _ledCon
                                    1-  545     ;   _initTimer0
                                    1-  546     ;   _initAD
                                    1-  547     ;   _pwmStart
                                    1-  548     ;   _closeChrg
                                    1-  549     ;   _checkA
                                    1-  550     ;   __moduchar
                                    1-  551     ;   __divuint
                                    1-  552     ;   _setDuty
                                    1-  553     ;   _workCon
                                    1-  554     ;   _ledCtr
                                    1-  555     ;   _ledCon
                                    1-  556     ;5 compiler assigned registers:
                                    1-  557     ;   STK00
                                    1-  558     ;   r0x1034
                                    1-  559     ;   r0x1035
                                    1-  560     ;   STK02
                                    1-  561     ;   STK01
                                    1-  562     ;; Starting pCode block
                                    1-  563     .segment "code"; module=main, function=_main
     0000                           1-  565     _main:
                                    1-  566     ; 2 exit points
                                    1-  567     	.line	90, "main.c"; 	initTimer0();
     0000 2rrr                      1-  568     	LCALL	_initTimer0
                                    1-  569     	.line	91, "main.c"; 	initAD();
     0001 2rrr                      1-  570     	LCALL	_initAD
                                    1-  571     	.line	92, "main.c"; 	pwmStart();
     0002 2rrr                      1-  572     	LCALL	_pwmStart
     0003                           1-  573     _00134_DS_:
                                    1-  574     	.line	95, "main.c"; 	CLRWDT(); 
     0003 0002                      1-  575     	clrwdt
                                    1-  576     	.line	96, "main.c"; 	if(!IntFlag)
                                    1-  577     	BANKSEL	_IntFlag
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 01rr                      1-  578     	MOVR	_IntFlag,W
     0006 0D03                      1-  579     	BTRSC	STATUS,2
     0007 3rrr                      1-  580     	LGOTO	_00134_DS_
                                    1-  581     	.line	98, "main.c"; 	IntFlag = 0;
     0008 02rr                      1-  582     	CLRR	_IntFlag
                                    1-  583     	.line	99, "main.c"; 	if(fullFlag)
                                    1-  584     	BANKSEL	_fullFlag
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  585     	MOVR	_fullFlag,W
     000B 0D03                      1-  586     	BTRSC	STATUS,2
     000C 3rrr                      1-  587     	LGOTO	_00121_DS_
                                    1-  588     	.line	101, "main.c"; 	PORTA &= (~0x5C);			//灯全灭
     000D 21A3                      1-  589     	MOVIA	0xa3
     000E 10rr                      1-  590     	ANDAR	_PORTA,F
                                    1-  591     	.line	102, "main.c"; 	PORTB &= (~0x03);
     000F 21FC                      1-  592     	MOVIA	0xfc
     0010 10rr                      1-  593     	ANDAR	_PORTB,F
                                    1-  594     	.line	103, "main.c"; 	closeChrg();
     0011 2rrr                      1-  595     	LCALL	_closeChrg
                                    1-  596     	.line	104, "main.c"; 	resetbit(PORTA,6);		//关闭风扇
     0012 1Frr                      1-  597     	BCR	_PORTA,6
                                    1-  598     	.line	105, "main.c"; 	continue;
     0013 3rrr                      1-  599     	LGOTO	_00134_DS_
     0014                           1-  600     _00121_DS_:
                                    1-  601     	.line	107, "main.c"; 	checkA();
     0014 2rrr                      1-  602     	LCALL	_checkA
                                    1-  603     ;;unsigned compare: left < lit (0x5=5), size=2
                                    1-  604     	.line	120, "main.c"; 	if(chrgCount < 5)
     0015 2100                      1-  605     	MOVIA	0x00
                                    1-  606     	BANKSEL	_chrgCount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 04rr                      1-  607     	SUBAR	(_chrgCount + 1),W
     0018 0903                      1-  608     	BTRSS	STATUS,2
     0019 3rrr                      1-  609     	LGOTO	_00159_DS_
     001A 2105                      1-  610     	MOVIA	0x05
     001B 04rr                      1-  611     	SUBAR	_chrgCount,W
     001C                           1-  612     _00159_DS_:
     001C 0C03                      1-  613     	BTRSC	STATUS,0
     001D 3rrr                      1-  614     	LGOTO	_00123_DS_
                                    1-  615     	.line	122, "main.c"; 	maxDuty = 10;
     001E 210A                      1-  616     	MOVIA	0x0a
                                    1-  617     	BANKSEL	_maxDuty
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 00rr                      1-  618     	MOVAR	_maxDuty
     0021 3rrr                      1-  619     	LGOTO	_00124_DS_
     0022                           1-  620     _00123_DS_:
                                    1-  621     	.line	126, "main.c"; 	maxDuty = 100;
     0022 2164                      1-  622     	MOVIA	0x64
                                    1-  623     	BANKSEL	_maxDuty
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1-  624     	MOVAR	_maxDuty
     0025                           1-  625     _00124_DS_:
                                    1-  626     	.line	129, "main.c"; 	if(count1S % 10 == 0)
     0025 210A                      1-  627     	MOVIA	0x0a
     0026 00rr                      1-  628     	MOVAR	STK00
                                    1-  629     	BANKSEL	_count1S
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 01rr                      1-  630     	MOVR	_count1S,W
     0029 2rrr                      1-  631     	LCALL	__moduchar
                                    1-  632     	BANKSEL	r0x1034
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 00rr                      1-  633     	MOVAR	r0x1034
     002C 01rr                      1-  634     	MOVR	r0x1034,W
     002D 0903                      1-  635     	BTRSS	STATUS,2
     002E 3rrr                      1-  636     	LGOTO	_00132_DS_
                                    1-  637     	.line	131, "main.c"; 	dutyFlag = 0;
                                    1-  638     	BANKSEL	_dutyFlag
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 02rr                      1-  639     	CLRR	_dutyFlag
                                    1-  640     	.line	132, "main.c"; 	avaA = sumA/adTime;
                                    1-  641     	BANKSEL	_adTime
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 01rr                      1-  642     	MOVR	_adTime,W
                                    1-  643     	BANKSEL	r0x1034
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 00rr                      1-  644     	MOVAR	r0x1034
     0035 00rr                      1-  645     	MOVAR	STK02
     0036 2100                      1-  646     	MOVIA	0x00
     0037 00rr                      1-  647     	MOVAR	STK01
                                    1-  648     	BANKSEL	_sumA
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 01rr                      1-  649     	MOVR	_sumA,W
     003A 00rr                      1-  650     	MOVAR	STK00
     003B 01rr                      1-  651     	MOVR	(_sumA + 1),W
     003C 2rrr                      1-  652     	LCALL	__divuint
                                    1-  653     	BANKSEL	_avaA
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 00rr                      1-  654     	MOVAR	(_avaA + 1)
     003F 01rr                      1-  655     	MOVR	STK00,W
     0040 00rr                      1-  656     	MOVAR	_avaA
                                    1-  657     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  658     ;;unsigned compare: left >= lit (0x128=296), size=2
                                    1-  659     	.line	133, "main.c"; 	if(avaA > 295)				//电流大于2.76A
     0041 2101                      1-  660     	MOVIA	0x01
     0042 04rr                      1-  661     	SUBAR	(_avaA + 1),W
     0043 0903                      1-  662     	BTRSS	STATUS,2
     0044 3rrr                      1-  663     	LGOTO	_00160_DS_
     0045 2128                      1-  664     	MOVIA	0x28
     0046 04rr                      1-  665     	SUBAR	_avaA,W
     0047                           1-  666     _00160_DS_:
     0047 0803                      1-  667     	BTRSS	STATUS,0
     0048 3rrr                      1-  668     	LGOTO	_00129_DS_
                                    1-  669     	.line	135, "main.c"; 	addFlag = 2;
     0049 2102                      1-  670     	MOVIA	0x02
                                    1-  671     	BANKSEL	_addFlag
     004A rrrr                      3-   71 m1      .banksel ram_address
     004B 00rr                      1-  672     	MOVAR	_addFlag
     004C 3rrr                      1-  673     	LGOTO	_00130_DS_
                                    1-  674     ;;unsigned compare: left < lit (0x11D=285), size=2
     004D                           1-  675     _00129_DS_:
                                    1-  676     	.line	137, "main.c"; 	else if(avaA < 285)
     004D 2101                      1-  677     	MOVIA	0x01
                                    1-  678     	BANKSEL	_avaA
     004E rrrr                      3-   71 m1      .banksel ram_address
     004F 04rr                      1-  679     	SUBAR	(_avaA + 1),W
     0050 0903                      1-  680     	BTRSS	STATUS,2
     0051 3rrr                      1-  681     	LGOTO	_00161_DS_
     0052 211D                      1-  682     	MOVIA	0x1d
     0053 04rr                      1-  683     	SUBAR	_avaA,W
     0054                           1-  684     _00161_DS_:
     0054 0C03                      1-  685     	BTRSC	STATUS,0
     0055 3rrr                      1-  686     	LGOTO	_00126_DS_
                                    1-  687     	.line	139, "main.c"; 	addFlag = 1;
     0056 2101                      1-  688     	MOVIA	0x01
                                    1-  689     	BANKSEL	_addFlag
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 00rr                      1-  690     	MOVAR	_addFlag
     0059 3rrr                      1-  691     	LGOTO	_00130_DS_
     005A                           1-  692     _00126_DS_:
                                    1-  693     	.line	143, "main.c"; 	addFlag = 0;
                                    1-  694     	BANKSEL	_addFlag
     005A rrrr                      3-   71 m1      .banksel ram_address
     005B 02rr                      1-  695     	CLRR	_addFlag
     005C                           1-  696     _00130_DS_:
                                    1-  697     	.line	145, "main.c"; 	setDuty();
     005C 2rrr                      1-  698     	LCALL	_setDuty
                                    1-  699     	.line	146, "main.c"; 	sumA = 0;
                                    1-  700     	BANKSEL	_sumA
     005D rrrr                      3-   71 m1      .banksel ram_address
     005E 02rr                      1-  701     	CLRR	_sumA
     005F 02rr                      1-  702     	CLRR	(_sumA + 1)
                                    1-  703     	.line	147, "main.c"; 	adTime = 0;		//重置采样次数
                                    1-  704     	BANKSEL	_adTime
     0060 rrrr                      3-   71 m1      .banksel ram_address
     0061 02rr                      1-  705     	CLRR	_adTime
     0062                           1-  706     _00132_DS_:
                                    1-  707     	.line	151, "main.c"; 	workCon();
     0062 2rrr                      1-  708     	LCALL	_workCon
                                    1-  709     	.line	152, "main.c"; 	ledCtr();
     0063 2rrr                      1-  710     	LCALL	_ledCtr
                                    1-  711     	.line	153, "main.c"; 	ledCon();
     0064 2rrr                      1-  712     	LCALL	_ledCon
     0065 3rrr                      1-  713     	LGOTO	_00134_DS_
                                    1-  714     	.line	155, "main.c"; 	}
                                    1-  715     	RETURN	
     0066 0010                      3-   26 m1      ret
                                    1-  716     ; exit point of _main
                                    1-  718     ;***
                                    1-  719     ;  pBlock Stats: dbName = C
                                    1-  720     ;***
                                    1-  721     ;has an exit
                                    1-  722     ;; Starting pCode block
                                    1-  723     .segment "code"; module=main, function=_closeChrg
     0000                           1-  725     _closeChrg:
                                    1-  726     ; 2 exit points
                                    1-  727     	.line	431, "main.c"; 	setbit(PORTB,3);		//3 5脚高电平，关闭充电
     0000 19rr                      1-  728     	BSR	_PORTB,3
                                    1-  729     	.line	432, "main.c"; 	setbit(PORTA,7);
     0001 1Brr                      1-  730     	BSR	_PORTA,7
                                    1-  731     	.line	433, "main.c"; 	}
                                    1-  732     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  733     ; exit point of _closeChrg
                                    1-  735     ;***
                                    1-  736     ;  pBlock Stats: dbName = C
                                    1-  737     ;***
                                    1-  738     ;has an exit
                                    1-  739     ;; Starting pCode block
                                    1-  740     .segment "code"; module=main, function=_halfChrg
     0000                           1-  742     _halfChrg:
                                    1-  743     ; 2 exit points
                                    1-  744     	.line	425, "main.c"; 	duty = 50;
     0000 2132                      1-  745     	MOVIA	0x32
                                    1-  746     	BANKSEL	_duty
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  747     	MOVAR	_duty
                                    1-  748     	.line	426, "main.c"; 	resetbit(PORTB,3);		//5脚高电平，降压涓充
     0003 1Drr                      1-  749     	BCR	_PORTB,3
                                    1-  750     	.line	427, "main.c"; 	resetbit(PORTA,7);
     0004 1Frr                      1-  751     	BCR	_PORTA,7
                                    1-  752     	.line	428, "main.c"; 	}
                                    1-  753     	RETURN	
     0005 0010                      3-   26 m1      ret
                                    1-  754     ; exit point of _halfChrg
                                    1-  756     ;***
                                    1-  757     ;  pBlock Stats: dbName = C
                                    1-  758     ;***
                                    1-  759     ;has an exit
                                    1-  760     ;; Starting pCode block
                                    1-  761     .segment "code"; module=main, function=_fullChrg
     0000                           1-  763     _fullChrg:
                                    1-  764     ; 2 exit points
                                    1-  765     	.line	420, "main.c"; 	resetbit(PORTB,3);		
     0000 1Drr                      1-  766     	BCR	_PORTB,3
                                    1-  767     	.line	421, "main.c"; 	resetbit(PORTA,7);
     0001 1Frr                      1-  768     	BCR	_PORTA,7
                                    1-  769     	.line	422, "main.c"; 	}
                                    1-  770     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  771     ; exit point of _fullChrg
                                    1-  773     ;***
                                    1-  774     ;  pBlock Stats: dbName = C
                                    1-  775     ;***
                                    1-  776     ;has an exit
                                    1-  777     ;5 compiler assigned registers:
                                    1-  778     ;   r0x1021
                                    1-  779     ;   STK00
                                    1-  780     ;   r0x1022
                                    1-  781     ;   r0x1023
                                    1-  782     ;   r0x1024
                                    1-  783     ;; Starting pCode block
                                    1-  784     .segment "code"; module=main, function=_delay
                                    1-  786     ;local variable name mapping:
     0000                           1-  791     _delay:
                                    1-  792     ; 2 exit points
                                    1-  793     	.line	412, "main.c"; 	void delay(uint16_t time)
                                    1-  794     	BANKSEL	r0x1021
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  795     	MOVAR	r0x1021
     0002 01rr                      1-  796     	MOVR	STK00,W
                                    1-  797     	BANKSEL	r0x1022
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  798     	MOVAR	r0x1022
                                    1-  799     	.line	414, "main.c"; 	for(uint16_t i=0;i<time;i++);
                                    1-  800     	BANKSEL	r0x1023
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  801     	CLRR	r0x1023
                                    1-  802     	BANKSEL	r0x1024
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  803     	CLRR	r0x1024
     0009                           1-  804     _00383_DS_:
                                    1-  805     	BANKSEL	r0x1021
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  806     	MOVR	r0x1021,W
                                    1-  807     	BANKSEL	r0x1024
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  808     	SUBAR	r0x1024,W
     000D 0903                      1-  809     	BTRSS	STATUS,2
     000E 3rrr                      1-  810     	LGOTO	_00394_DS_
                                    1-  811     	BANKSEL	r0x1022
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  812     	MOVR	r0x1022,W
                                    1-  813     	BANKSEL	r0x1023
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1-  814     	SUBAR	r0x1023,W
     0013                           1-  815     _00394_DS_:
     0013 0C03                      1-  816     	BTRSC	STATUS,0
     0014 3rrr                      1-  817     	LGOTO	_00385_DS_
                                    1-  818     	BANKSEL	r0x1023
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  819     	INCR	r0x1023,F
     0017 0903                      1-  820     	BTRSS	STATUS,2
     0018 3rrr                      1-  821     	LGOTO	_00001_DS_
                                    1-  822     	BANKSEL	r0x1024
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1-  823     	INCR	r0x1024,F
     001B                           1-  824     _00001_DS_:
     001B 3rrr                      1-  825     	LGOTO	_00383_DS_
     001C                           1-  826     _00385_DS_:
                                    1-  827     	.line	415, "main.c"; 	}
                                    1-  828     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  829     ; exit point of _delay
                                    1-  831     ;***
                                    1-  832     ;  pBlock Stats: dbName = C
                                    1-  833     ;***
                                    1-  834     ;has an exit
                                    1-  835     ;; Starting pCode block
                                    1-  836     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  838     _F_wait_eoc:
                                    1-  839     ; 2 exit points
     0000                           1-  840     _00376_DS_:
                                    1-  841     	.line	408, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  842     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  843     	LGOTO	_00376_DS_
                                    1-  844     	.line	410, "main.c"; 	}
                                    1-  845     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  846     ; exit point of _F_wait_eoc
                                    1-  848     ;***
                                    1-  849     ;  pBlock Stats: dbName = C
                                    1-  850     ;***
                                    1-  851     ;has an exit
                                    1-  852     ;functions called:
                                    1-  853     ;   _delay
                                    1-  854     ;   _F_wait_eoc
                                    1-  855     ;   _delay
                                    1-  856     ;   _F_wait_eoc
                                    1-  857     ;7 compiler assigned registers:
                                    1-  858     ;   r0x1025
                                    1-  859     ;   STK00
                                    1-  860     ;   r0x1026
                                    1-  861     ;   r0x1027
                                    1-  862     ;   r0x1028
                                    1-  863     ;   r0x1029
                                    1-  864     ;   r0x102A
                                    1-  865     ;; Starting pCode block
                                    1-  866     .segment "code"; module=main, function=_F_AIN0_Convert
                                    1-  868     ;local variable name mapping:
     0000                           1-  871     _F_AIN0_Convert:
                                    1-  872     ; 2 exit points
                                    1-  873     	.line	392, "main.c"; 	void F_AIN0_Convert(char count)
                                    1-  874     	BANKSEL	r0x1025
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  875     	MOVAR	r0x1025
                                    1-  876     	.line	396, "main.c"; 	delay(100);
     0002 2164                      1-  877     	MOVIA	0x64
     0003 00rr                      1-  878     	MOVAR	STK00
     0004 2100                      1-  879     	MOVIA	0x00
     0005 2rrr                      1-  880     	LCALL	_delay
                                    1-  881     	.line	397, "main.c"; 	for(i=1;i<=count;i++)
     0006 2101                      1-  882     	MOVIA	0x01
                                    1-  883     	BANKSEL	r0x1026
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  884     	MOVAR	r0x1026
     0009                           1-  885     _00369_DS_:
                                    1-  886     	BANKSEL	r0x1026
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  887     	MOVR	r0x1026,W
                                    1-  888     	BANKSEL	r0x1025
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  889     	SUBAR	r0x1025,W
     000D 0803                      1-  890     	BTRSS	STATUS,0
     000E 3rrr                      1-  891     	LGOTO	_00371_DS_
                                    1-  892     	.line	399, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000F 1Brr                      1-  893     	BSR	_ADMDbits,6
                                    1-  894     	.line	400, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0010 2rrr                      1-  895     	LCALL	_F_wait_eoc
                                    1-  896     	.line	401, "main.c"; 	R_AIN0_DATA_LB += ( 0x0F & ADR); 
     0011 210F                      1-  897     	MOVIA	0x0f
     0012 10rr                      1-  898     	ANDAR	_ADR,W
                                    1-  899     ;;3	MOVAR	r0x1027
                                    1-  900     	BANKSEL	_R_AIN0_DATA_LB
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 03rr                      1-  901     	ADDAR	_R_AIN0_DATA_LB,F
                                    1-  902     	.line	402, "main.c"; 	R_AIN0_DATA    += ADD; 
     0015 01rr                      1-  903     	MOVR	_ADD,W
                                    1-  904     	BANKSEL	r0x1027
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 00rr                      1-  905     	MOVAR	r0x1027
                                    1-  906     ;;1	CLRR	r0x1028
                                    1-  907     ;;102	MOVR	r0x1027,W
                                    1-  908     ;;100	MOVAR	r0x1029
     0018 2100                      1-  909     	MOVIA	0x00
                                    1-  910     	BANKSEL	r0x102A
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  911     	MOVAR	r0x102A
                                    1-  912     ;;101	MOVR	r0x1029,W
                                    1-  913     	BANKSEL	r0x1027
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1-  914     	MOVR	r0x1027,W
                                    1-  915     	BANKSEL	_R_AIN0_DATA
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 03rr                      1-  916     	ADDAR	_R_AIN0_DATA,F
                                    1-  917     	BANKSEL	r0x102A
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1-  918     	MOVR	r0x102A,W
     0021 0C03                      1-  919     	BTRSC	STATUS,0
     0022 05rr                      1-  920     	INCR	r0x102A,W
     0023 0D03                      1-  921     	BTRSC	STATUS,2
     0024 3rrr                      1-  922     	LGOTO	_00002_DS_
                                    1-  923     	BANKSEL	_R_AIN0_DATA
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 03rr                      1-  924     	ADDAR	(_R_AIN0_DATA + 1),F
     0027                           1-  925     _00002_DS_:
                                    1-  926     	.line	397, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  927     	BANKSEL	r0x1026
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 05rr                      1-  928     	INCR	r0x1026,F
     0029 3rrr                      1-  929     	LGOTO	_00369_DS_
     002A                           1-  930     _00371_DS_:
                                    1-  931     	.line	404, "main.c"; 	}
                                    1-  932     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1-  933     ; exit point of _F_AIN0_Convert
                                    1-  935     ;***
                                    1-  936     ;  pBlock Stats: dbName = C
                                    1-  937     ;***
                                    1-  938     ;has an exit
                                    1-  939     ;functions called:
                                    1-  940     ;   _F_AIN0_Convert
                                    1-  941     ;   _F_AIN0_Convert
                                    1-  942     ;4 compiler assigned registers:
                                    1-  943     ;   r0x102B
                                    1-  944     ;   r0x102C
                                    1-  945     ;   r0x102D
                                    1-  946     ;   r0x102E
                                    1-  947     ;; Starting pCode block
                                    1-  948     .segment "code"; module=main, function=_checkA
     0000                           1-  950     _checkA:
                                    1-  951     ; 2 exit points
                                    1-  952     	.line	378, "main.c"; 	PACON = C_PA0_AIN0;
     0000 2101                      1-  953     	MOVIA	0x01
     0001 00rr                      1-  954     	MOVAR	_PACON
                                    1-  955     	.line	379, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;
                                    1-  956     	BANKSEL	_R_AIN0_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  957     	CLRR	_R_AIN0_DATA_LB
                                    1-  958     	BANKSEL	_R_AIN0_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  959     	CLRR	_R_AIN0_DATA
     0006 02rr                      1-  960     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  961     	.line	380, "main.c"; 	F_AIN0_Convert(8);					// execute AIN0 ADC converting 8 times
     0007 2108                      1-  962     	MOVIA	0x08
     0008 2rrr                      1-  963     	LCALL	_F_AIN0_Convert
                                    1-  964     	.line	381, "main.c"; 	R_AIN0_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  965     	BANKSEL	_R_AIN0_DATA
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 15rr                      1-  966     	SWAPR	(_R_AIN0_DATA + 1),W
     000B 22F0                      1-  967     	ANDIA	0xf0
     000C 00rr                      1-  968     	MOVAR	(_R_AIN0_DATA + 1)
     000D 15rr                      1-  969     	SWAPR	_R_AIN0_DATA,W
     000E 00rr                      1-  970     	MOVAR	_R_AIN0_DATA
     000F 220F                      1-  971     	ANDIA	0x0f
     0010 11rr                      1-  972     	IORAR	(_R_AIN0_DATA + 1),F
     0011 12rr                      1-  973     	XORAR	_R_AIN0_DATA,F
                                    1-  974     	.line	382, "main.c"; 	R_AIN0_DATA_LB &= 0xF0;				// Only get Bit7~4
     0012 21F0                      1-  975     	MOVIA	0xf0
                                    1-  976     	BANKSEL	_R_AIN0_DATA_LB
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 10rr                      1-  977     	ANDAR	_R_AIN0_DATA_LB,F
                                    1-  978     	.line	383, "main.c"; 	R_AIN0_DATA += R_AIN0_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0015 01rr                      1-  979     	MOVR	_R_AIN0_DATA_LB,W
                                    1-  980     	BANKSEL	r0x102D
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 00rr                      1-  981     	MOVAR	r0x102D
                                    1-  982     ;;1	MOVAR	r0x102B
                                    1-  983     ;;1	CLRR	r0x102C
                                    1-  984     ;;99	MOVR	r0x102B,W
     0018 2100                      1-  985     	MOVIA	0x00
                                    1-  986     	BANKSEL	r0x102E
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  987     	MOVAR	r0x102E
                                    1-  988     	BANKSEL	r0x102D
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1-  989     	MOVR	r0x102D,W
                                    1-  990     	BANKSEL	_R_AIN0_DATA
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 03rr                      1-  991     	ADDAR	_R_AIN0_DATA,F
                                    1-  992     	BANKSEL	r0x102E
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1-  993     	MOVR	r0x102E,W
     0021 0C03                      1-  994     	BTRSC	STATUS,0
     0022 05rr                      1-  995     	INCR	r0x102E,W
     0023 0D03                      1-  996     	BTRSC	STATUS,2
     0024 3rrr                      1-  997     	LGOTO	_00003_DS_
                                    1-  998     	BANKSEL	_R_AIN0_DATA
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 03rr                      1-  999     	ADDAR	(_R_AIN0_DATA + 1),F
                                    1- 1000     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0027                           1- 1001     _00003_DS_:
                                    1- 1002     	.line	384, "main.c"; 	R_AIN0_DATA >>=3;					// R_AIN0_DATA divided 8
     0027 1C03                      1- 1003     	BCR	STATUS,0
                                    1- 1004     	BANKSEL	_R_AIN0_DATA
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 13rr                      1- 1005     	RRR	(_R_AIN0_DATA + 1),F
     002A 13rr                      1- 1006     	RRR	_R_AIN0_DATA,F
                                    1- 1007     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002B 1C03                      1- 1008     	BCR	STATUS,0
     002C 13rr                      1- 1009     	RRR	(_R_AIN0_DATA + 1),F
     002D 13rr                      1- 1010     	RRR	_R_AIN0_DATA,F
                                    1- 1011     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002E 1C03                      1- 1012     	BCR	STATUS,0
     002F 13rr                      1- 1013     	RRR	(_R_AIN0_DATA + 1),F
     0030 13rr                      1- 1014     	RRR	_R_AIN0_DATA,F
                                    1- 1015     	.line	385, "main.c"; 	sumA += R_AIN0_DATA;
     0031 01rr                      1- 1016     	MOVR	_R_AIN0_DATA,W
                                    1- 1017     	BANKSEL	_sumA
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 03rr                      1- 1018     	ADDAR	_sumA,F
                                    1- 1019     	BANKSEL	_R_AIN0_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 01rr                      1- 1020     	MOVR	(_R_AIN0_DATA + 1),W
     0036 0C03                      1- 1021     	BTRSC	STATUS,0
     0037 05rr                      1- 1022     	INCR	(_R_AIN0_DATA + 1),W
     0038 0D03                      1- 1023     	BTRSC	STATUS,2
     0039 3rrr                      1- 1024     	LGOTO	_00004_DS_
                                    1- 1025     	BANKSEL	_sumA
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 03rr                      1- 1026     	ADDAR	(_sumA + 1),F
     003C                           1- 1027     _00004_DS_:
                                    1- 1028     	.line	386, "main.c"; 	adTime++;    
                                    1- 1029     	BANKSEL	_adTime
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 05rr                      1- 1030     	INCR	_adTime,F
                                    1- 1031     	.line	387, "main.c"; 	}
                                    1- 1032     	RETURN	
     003E 0010                      3-   26 m1      ret
                                    1- 1033     ; exit point of _checkA
                                    1- 1035     ;***
                                    1- 1036     ;  pBlock Stats: dbName = C
                                    1- 1037     ;***
                                    1- 1038     ;has an exit
                                    1- 1039     ;functions called:
                                    1- 1040     ;   _delay
                                    1- 1041     ;   _delay
                                    1- 1042     ;1 compiler assigned register :
                                    1- 1043     ;   STK00
                                    1- 1044     ;; Starting pCode block
                                    1- 1045     .segment "code"; module=main, function=_initAD
     0000                           1- 1047     _initAD:
                                    1- 1048     ; 2 exit points
                                    1- 1049     	.line	354, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA0 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2180                      1- 1050     	MOVIA	0x80
     0001 00rr                      1- 1051     	MOVAR	_ADMD
                                    1- 1052     	.line	357, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 02rr                      1- 1053     	CLRR	_ADVREFH
                                    1- 1054     	.line	364, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1055     	MOVIA	0x10
     0004 00rr                      1- 1056     	MOVAR	_ADR
                                    1- 1057     	.line	366, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1058     	MOVIA	0x03
     0006 00rr                      1- 1059     	MOVAR	_ADCR
                                    1- 1060     	.line	369, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1061     	BSR	_ADMDbits,4
                                    1- 1062     	.line	370, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1063     	MOVIA	0x64
     0009 00rr                      1- 1064     	MOVAR	STK00
     000A 2100                      1- 1065     	MOVIA	0x00
     000B 2rrr                      1- 1066     	LCALL	_delay
                                    1- 1067     	.line	373, "main.c"; 	}
                                    1- 1068     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1069     ; exit point of _initAD
                                    1- 1071     ;***
                                    1- 1072     ;  pBlock Stats: dbName = C
                                    1- 1073     ;***
                                    1- 1074     ;has an exit
                                    1- 1075     ;2 compiler assigned registers:
                                    1- 1076     ;   r0x102F
                                    1- 1077     ;   r0x1030
                                    1- 1078     ;; Starting pCode block
                                    1- 1079     .segment "code"; module=main, function=_ledCtr
     0000                           1- 1081     _ledCtr:
                                    1- 1082     ; 2 exit points
                                    1- 1083     	.line	322, "main.c"; 	if(ledLock)
                                    1- 1084     	BANKSEL	_ledLock
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1085     	MOVR	_ledLock,W
     0002 0903                      1- 1086     	BTRSS	STATUS,2
                                    1- 1087     	.line	324, "main.c"; 	return;
     0003 3rrr                      1- 1088     	LGOTO	_00341_DS_
                                    1- 1089     	.line	326, "main.c"; 	switch(ledStep)
     0004 2106                      1- 1090     	MOVIA	0x06
                                    1- 1091     	BANKSEL	_ledStep
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 04rr                      1- 1092     	SUBAR	_ledStep,W
     0007 0C03                      1- 1093     	BTRSC	STATUS,0
     0008 3rrr                      1- 1094     	LGOTO	_00338_DS_
     0009 21rr                      1- 1095     	MOVIA	((_00353_DS_ >> 8) & 0xff)
     000A 008A                      1- 1096     	MOVAR	PCHBUF
     000B 01rr                      1- 1097     	MOVR	_ledStep,W
     000C 25rr                      1- 1098     	ADDIA	_00353_DS_
     000D 0C03                      1- 1099     	BTRSC	STATUS,0
     000E 058A                      1- 1100     	INCR	PCHBUF,F
     000F 0082                      1- 1101     	MOVAR	PCL
     0010                           1- 1102     _00353_DS_:
     0010 3rrr                      1- 1103     	LGOTO	_00332_DS_
     0011 3rrr                      1- 1104     	LGOTO	_00333_DS_
     0012 3rrr                      1- 1105     	LGOTO	_00334_DS_
     0013 3rrr                      1- 1106     	LGOTO	_00335_DS_
     0014 3rrr                      1- 1107     	LGOTO	_00336_DS_
     0015 3rrr                      1- 1108     	LGOTO	_00337_DS_
     0016                           1- 1109     _00332_DS_:
                                    1- 1110     	.line	329, "main.c"; 	ledMin = 250;
     0016 21FA                      1- 1111     	MOVIA	0xfa
                                    1- 1112     	BANKSEL	_ledMin
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1113     	MOVAR	_ledMin
                                    1- 1114     	.line	330, "main.c"; 	break;
     0019 3rrr                      1- 1115     	LGOTO	_00338_DS_
     001A                           1- 1116     _00333_DS_:
                                    1- 1117     	.line	332, "main.c"; 	ledMin = 200;
     001A 21C8                      1- 1118     	MOVIA	0xc8
                                    1- 1119     	BANKSEL	_ledMin
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1- 1120     	MOVAR	_ledMin
                                    1- 1121     	.line	333, "main.c"; 	break;
     001D 3rrr                      1- 1122     	LGOTO	_00338_DS_
     001E                           1- 1123     _00334_DS_:
                                    1- 1124     	.line	335, "main.c"; 	ledMin = 150;
     001E 2196                      1- 1125     	MOVIA	0x96
                                    1- 1126     	BANKSEL	_ledMin
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 00rr                      1- 1127     	MOVAR	_ledMin
                                    1- 1128     	.line	336, "main.c"; 	break;
     0021 3rrr                      1- 1129     	LGOTO	_00338_DS_
     0022                           1- 1130     _00335_DS_:
                                    1- 1131     	.line	338, "main.c"; 	ledMin = 100;
     0022 2164                      1- 1132     	MOVIA	0x64
                                    1- 1133     	BANKSEL	_ledMin
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1- 1134     	MOVAR	_ledMin
                                    1- 1135     	.line	339, "main.c"; 	break;
     0025 3rrr                      1- 1136     	LGOTO	_00338_DS_
     0026                           1- 1137     _00336_DS_:
                                    1- 1138     	.line	341, "main.c"; 	ledMin = 50;
     0026 2132                      1- 1139     	MOVIA	0x32
                                    1- 1140     	BANKSEL	_ledMin
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 00rr                      1- 1141     	MOVAR	_ledMin
                                    1- 1142     	.line	342, "main.c"; 	break;
     0029 3rrr                      1- 1143     	LGOTO	_00338_DS_
     002A                           1- 1144     _00337_DS_:
                                    1- 1145     	.line	344, "main.c"; 	ledMin = 0;
                                    1- 1146     	BANKSEL	_ledMin
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 02rr                      1- 1147     	CLRR	_ledMin
     002C                           1- 1148     _00338_DS_:
                                    1- 1149     	.line	347, "main.c"; 	if(ledCount < ledMin)
                                    1- 1150     	BANKSEL	_ledMin
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1- 1151     	MOVR	_ledMin,W
                                    1- 1152     	BANKSEL	r0x102F
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 00rr                      1- 1153     	MOVAR	r0x102F
                                    1- 1154     	BANKSEL	r0x1030
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 02rr                      1- 1155     	CLRR	r0x1030
     0032 2100                      1- 1156     	MOVIA	0x00
                                    1- 1157     	BANKSEL	_ledCount
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 04rr                      1- 1158     	SUBAR	(_ledCount + 1),W
     0035 0903                      1- 1159     	BTRSS	STATUS,2
     0036 3rrr                      1- 1160     	LGOTO	_00354_DS_
                                    1- 1161     	BANKSEL	r0x102F
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 01rr                      1- 1162     	MOVR	r0x102F,W
                                    1- 1163     	BANKSEL	_ledCount
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 04rr                      1- 1164     	SUBAR	_ledCount,W
     003B                           1- 1165     _00354_DS_:
     003B 0C03                      1- 1166     	BTRSC	STATUS,0
     003C 3rrr                      1- 1167     	LGOTO	_00341_DS_
                                    1- 1168     	.line	348, "main.c"; 	ledCount = ledMin;
                                    1- 1169     	BANKSEL	r0x102F
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1- 1170     	MOVR	r0x102F,W
                                    1- 1171     	BANKSEL	_ledCount
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 00rr                      1- 1172     	MOVAR	_ledCount
                                    1- 1173     	BANKSEL	r0x1030
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 01rr                      1- 1174     	MOVR	r0x1030,W
                                    1- 1175     	BANKSEL	_ledCount
     0043 rrrr                      3-   71 m1      .banksel ram_address
     0044 00rr                      1- 1176     	MOVAR	(_ledCount + 1)
     0045                           1- 1177     _00341_DS_:
                                    1- 1178     	.line	349, "main.c"; 	}
                                    1- 1179     	RETURN	
     0045 0010                      3-   26 m1      ret
                                    1- 1180     ; exit point of _ledCtr
                                    1- 1182     ;***
                                    1- 1183     ;  pBlock Stats: dbName = C
                                    1- 1184     ;***
                                    1- 1185     ;has an exit
                                    1- 1186     ;; Starting pCode block
                                    1- 1187     .segment "code"; module=main, function=_pwmStop
     0000                           1- 1189     _pwmStop:
                                    1- 1190     ; 2 exit points
                                    1- 1191     	.line	317, "main.c"; 	PWM2DUTY = 0;
     0000 0200                      1- 1192     	CLRA	
     0001 00rr                      1- 1193     	SFUN	_PWM2DUTY
                                    1- 1194     	.line	318, "main.c"; 	}
                                    1- 1195     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1196     ; exit point of _pwmStop
                                    1- 1198     ;***
                                    1- 1199     ;  pBlock Stats: dbName = C
                                    1- 1200     ;***
                                    1- 1201     ;has an exit
                                    1- 1202     ;; Starting pCode block
                                    1- 1203     .segment "code"; module=main, function=_pwmStart
     0000                           1- 1205     _pwmStart:
                                    1- 1206     ; 2 exit points
                                    1- 1207     	.line	308, "main.c"; 	TMRH = 0;
     0000 02rr                      1- 1208     	CLRR	_TMRH
                                    1- 1209     	.line	309, "main.c"; 	TMR2 = 127;
     0001 217F                      1- 1210     	MOVIA	0x7f
     0002 00rr                      1- 1211     	SFUN	_TMR2
                                    1- 1212     	.line	310, "main.c"; 	PWM2DUTY = 64;
     0003 2140                      1- 1213     	MOVIA	0x40
     0004 00rr                      1- 1214     	SFUN	_PWM2DUTY
                                    1- 1215     	.line	311, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	    //reloaded from TMR2, non-stop mode
     0005 2183                      1- 1216     	MOVIA	0x83
     0006 00rr                      1- 1217     	SFUN	_T2CR1
                                    1- 1218     	.line	312, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler2, Prescaler2 dividing rate = 1:2, Timer2 clock source is instruction clock 
     0007 0200                      1- 1219     	CLRA	
     0008 00rr                      1- 1220     	SFUN	_T2CR2
                                    1- 1221     	.line	313, "main.c"; 	}
                                    1- 1222     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1223     ; exit point of _pwmStart
                                    1- 1225     ;***
                                    1- 1226     ;  pBlock Stats: dbName = C
                                    1- 1227     ;***
                                    1- 1228     ;has an exit
                                    1- 1229     ;2 compiler assigned registers:
                                    1- 1230     ;   r0x1031
                                    1- 1231     ;   r0x1032
                                    1- 1232     ;; Starting pCode block
                                    1- 1233     .segment "code"; module=main, function=_ledCon
     0000                           1- 1235     _ledCon:
                                    1- 1236     ; 2 exit points
                                    1- 1237     	.line	289, "main.c"; 	if(ledCount < ledMin)
                                    1- 1238     	BANKSEL	_ledMin
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1239     	MOVR	_ledMin,W
                                    1- 1240     	BANKSEL	r0x1031
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 00rr                      1- 1241     	MOVAR	r0x1031
                                    1- 1242     	BANKSEL	r0x1032
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1243     	CLRR	r0x1032
     0006 2100                      1- 1244     	MOVIA	0x00
                                    1- 1245     	BANKSEL	_ledCount
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 04rr                      1- 1246     	SUBAR	(_ledCount + 1),W
     0009 0903                      1- 1247     	BTRSS	STATUS,2
     000A 3rrr                      1- 1248     	LGOTO	_00310_DS_
                                    1- 1249     	BANKSEL	r0x1031
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 01rr                      1- 1250     	MOVR	r0x1031,W
                                    1- 1251     	BANKSEL	_ledCount
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 04rr                      1- 1252     	SUBAR	_ledCount,W
     000F                           1- 1253     _00310_DS_:
     000F 0C03                      1- 1254     	BTRSC	STATUS,0
     0010 3rrr                      1- 1255     	LGOTO	_00269_DS_
                                    1- 1256     	.line	290, "main.c"; 	ledCount = ledMin;
                                    1- 1257     	BANKSEL	r0x1031
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1258     	MOVR	r0x1031,W
                                    1- 1259     	BANKSEL	_ledCount
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1- 1260     	MOVAR	_ledCount
                                    1- 1261     	BANKSEL	r0x1032
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1- 1262     	MOVR	r0x1032,W
                                    1- 1263     	BANKSEL	_ledCount
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1264     	MOVAR	(_ledCount + 1)
     0019                           1- 1265     _00269_DS_:
                                    1- 1266     	.line	291, "main.c"; 	ledLock = 1;		//锁定
     0019 2101                      1- 1267     	MOVIA	0x01
                                    1- 1268     	BANKSEL	_ledLock
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 00rr                      1- 1269     	MOVAR	_ledLock
                                    1- 1270     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1271     ;;unsigned compare: left >= lit (0x33=51), size=2
                                    1- 1272     	.line	292, "main.c"; 	ledCount > 50 ? (setbit(PORTB,1)) : (resetbit(PORTB,1));
     001C 2100                      1- 1273     	MOVIA	0x00
                                    1- 1274     	BANKSEL	_ledCount
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 04rr                      1- 1275     	SUBAR	(_ledCount + 1),W
     001F 0903                      1- 1276     	BTRSS	STATUS,2
     0020 3rrr                      1- 1277     	LGOTO	_00311_DS_
     0021 2133                      1- 1278     	MOVIA	0x33
     0022 04rr                      1- 1279     	SUBAR	_ledCount,W
     0023                           1- 1280     _00311_DS_:
     0023 0803                      1- 1281     	BTRSS	STATUS,0
     0024 3rrr                      1- 1282     	LGOTO	_00276_DS_
     0025 18rr                      1- 1283     	BSR	_PORTB,1
     0026 3rrr                      1- 1284     	LGOTO	_00277_DS_
     0027                           1- 1285     _00276_DS_:
     0027 1Crr                      1- 1286     	BCR	_PORTB,1
                                    1- 1287     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1288     ;;unsigned compare: left >= lit (0x65=101), size=2
     0028                           1- 1289     _00277_DS_:
                                    1- 1290     	.line	293, "main.c"; 	ledCount > 100 ? (setbit(PORTB,0)) : (resetbit(PORTB,0));
     0028 2100                      1- 1291     	MOVIA	0x00
                                    1- 1292     	BANKSEL	_ledCount
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 04rr                      1- 1293     	SUBAR	(_ledCount + 1),W
     002B 0903                      1- 1294     	BTRSS	STATUS,2
     002C 3rrr                      1- 1295     	LGOTO	_00312_DS_
     002D 2165                      1- 1296     	MOVIA	0x65
     002E 04rr                      1- 1297     	SUBAR	_ledCount,W
     002F                           1- 1298     _00312_DS_:
     002F 0803                      1- 1299     	BTRSS	STATUS,0
     0030 3rrr                      1- 1300     	LGOTO	_00278_DS_
     0031 18rr                      1- 1301     	BSR	_PORTB,0
     0032 3rrr                      1- 1302     	LGOTO	_00279_DS_
     0033                           1- 1303     _00278_DS_:
     0033 1Crr                      1- 1304     	BCR	_PORTB,0
                                    1- 1305     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1306     ;;unsigned compare: left >= lit (0x97=151), size=2
     0034                           1- 1307     _00279_DS_:
                                    1- 1308     	.line	294, "main.c"; 	ledCount > 150 ? (setbit(PORTA,2)) : (resetbit(PORTA,2));
     0034 2100                      1- 1309     	MOVIA	0x00
                                    1- 1310     	BANKSEL	_ledCount
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 04rr                      1- 1311     	SUBAR	(_ledCount + 1),W
     0037 0903                      1- 1312     	BTRSS	STATUS,2
     0038 3rrr                      1- 1313     	LGOTO	_00313_DS_
     0039 2197                      1- 1314     	MOVIA	0x97
     003A 04rr                      1- 1315     	SUBAR	_ledCount,W
     003B                           1- 1316     _00313_DS_:
     003B 0803                      1- 1317     	BTRSS	STATUS,0
     003C 3rrr                      1- 1318     	LGOTO	_00280_DS_
     003D 19rr                      1- 1319     	BSR	_PORTA,2
     003E 3rrr                      1- 1320     	LGOTO	_00281_DS_
     003F                           1- 1321     _00280_DS_:
     003F 1Drr                      1- 1322     	BCR	_PORTA,2
                                    1- 1323     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1324     ;;unsigned compare: left >= lit (0xC9=201), size=2
     0040                           1- 1325     _00281_DS_:
                                    1- 1326     	.line	295, "main.c"; 	ledCount > 200 ? (setbit(PORTA,3)) : (resetbit(PORTA,3));
     0040 2100                      1- 1327     	MOVIA	0x00
                                    1- 1328     	BANKSEL	_ledCount
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 04rr                      1- 1329     	SUBAR	(_ledCount + 1),W
     0043 0903                      1- 1330     	BTRSS	STATUS,2
     0044 3rrr                      1- 1331     	LGOTO	_00314_DS_
     0045 21C9                      1- 1332     	MOVIA	0xc9
     0046 04rr                      1- 1333     	SUBAR	_ledCount,W
     0047                           1- 1334     _00314_DS_:
     0047 0803                      1- 1335     	BTRSS	STATUS,0
     0048 3rrr                      1- 1336     	LGOTO	_00282_DS_
     0049 19rr                      1- 1337     	BSR	_PORTA,3
     004A 3rrr                      1- 1338     	LGOTO	_00283_DS_
     004B                           1- 1339     _00282_DS_:
     004B 1Drr                      1- 1340     	BCR	_PORTA,3
                                    1- 1341     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1342     ;;unsigned compare: left >= lit (0xFB=251), size=2
     004C                           1- 1343     _00283_DS_:
                                    1- 1344     	.line	296, "main.c"; 	ledCount > 250 ? (setbit(PORTA,4)) : (resetbit(PORTA,4));
     004C 2100                      1- 1345     	MOVIA	0x00
                                    1- 1346     	BANKSEL	_ledCount
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 04rr                      1- 1347     	SUBAR	(_ledCount + 1),W
     004F 0903                      1- 1348     	BTRSS	STATUS,2
     0050 3rrr                      1- 1349     	LGOTO	_00315_DS_
     0051 21FB                      1- 1350     	MOVIA	0xfb
     0052 04rr                      1- 1351     	SUBAR	_ledCount,W
     0053                           1- 1352     _00315_DS_:
     0053 0803                      1- 1353     	BTRSS	STATUS,0
     0054 3rrr                      1- 1354     	LGOTO	_00284_DS_
     0055 1Arr                      1- 1355     	BSR	_PORTA,4
     0056 3rrr                      1- 1356     	LGOTO	_00285_DS_
     0057                           1- 1357     _00284_DS_:
     0057 1Err                      1- 1358     	BCR	_PORTA,4
                                    1- 1359     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1360     ;;unsigned compare: left >= lit (0x12D=301), size=2
     0058                           1- 1361     _00285_DS_:
                                    1- 1362     	.line	297, "main.c"; 	if(ledCount > 300)
     0058 2101                      1- 1363     	MOVIA	0x01
                                    1- 1364     	BANKSEL	_ledCount
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 04rr                      1- 1365     	SUBAR	(_ledCount + 1),W
     005B 0903                      1- 1366     	BTRSS	STATUS,2
     005C 3rrr                      1- 1367     	LGOTO	_00316_DS_
     005D 212D                      1- 1368     	MOVIA	0x2d
     005E 04rr                      1- 1369     	SUBAR	_ledCount,W
     005F                           1- 1370     _00316_DS_:
     005F 0803                      1- 1371     	BTRSS	STATUS,0
     0060 3rrr                      1- 1372     	LGOTO	_00274_DS_
                                    1- 1373     	.line	299, "main.c"; 	if(ledCount > ledMax)
                                    1- 1374     	BANKSEL	_ledCount
     0061 rrrr                      3-   71 m1      .banksel ram_address
     0062 01rr                      1- 1375     	MOVR	(_ledCount + 1),W
                                    1- 1376     	BANKSEL	_ledMax
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 04rr                      1- 1377     	SUBAR	(_ledMax + 1),W
     0065 0903                      1- 1378     	BTRSS	STATUS,2
     0066 3rrr                      1- 1379     	LGOTO	_00317_DS_
                                    1- 1380     	BANKSEL	_ledCount
     0067 rrrr                      3-   71 m1      .banksel ram_address
     0068 01rr                      1- 1381     	MOVR	_ledCount,W
                                    1- 1382     	BANKSEL	_ledMax
     0069 rrrr                      3-   71 m1      .banksel ram_address
     006A 04rr                      1- 1383     	SUBAR	_ledMax,W
     006B                           1- 1384     _00317_DS_:
     006B 0C03                      1- 1385     	BTRSC	STATUS,0
     006C 3rrr                      1- 1386     	LGOTO	_00271_DS_
                                    1- 1387     	.line	300, "main.c"; 	ledCount = ledMin;
                                    1- 1388     	BANKSEL	r0x1031
     006D rrrr                      3-   71 m1      .banksel ram_address
     006E 01rr                      1- 1389     	MOVR	r0x1031,W
                                    1- 1390     	BANKSEL	_ledCount
     006F rrrr                      3-   71 m1      .banksel ram_address
     0070 00rr                      1- 1391     	MOVAR	_ledCount
                                    1- 1392     	BANKSEL	r0x1032
     0071 rrrr                      3-   71 m1      .banksel ram_address
     0072 01rr                      1- 1393     	MOVR	r0x1032,W
                                    1- 1394     	BANKSEL	_ledCount
     0073 rrrr                      3-   71 m1      .banksel ram_address
     0074 00rr                      1- 1395     	MOVAR	(_ledCount + 1)
     0075                           1- 1396     _00271_DS_:
                                    1- 1397     	.line	301, "main.c"; 	ledLock = 0;		//解锁
                                    1- 1398     	BANKSEL	_ledLock
     0075 rrrr                      3-   71 m1      .banksel ram_address
     0076 02rr                      1- 1399     	CLRR	_ledLock
     0077                           1- 1400     _00274_DS_:
                                    1- 1401     	.line	303, "main.c"; 	}
                                    1- 1402     	RETURN	
     0077 0010                      3-   26 m1      ret
                                    1- 1403     ; exit point of _ledCon
                                    1- 1405     ;***
                                    1- 1406     ;  pBlock Stats: dbName = C
                                    1- 1407     ;***
                                    1- 1408     ;has an exit
                                    1- 1409     ;; Starting pCode block
                                    1- 1410     .segment "code"; module=main, function=_initTimer0
     0000                           1- 1412     _initTimer0:
                                    1- 1413     ; 2 exit points
                                    1- 1414     	.line	261, "main.c"; 	PORTA = 0x23;
     0000 2123                      1- 1415     	MOVIA	0x23
     0001 00rr                      1- 1416     	MOVAR	_PORTA
                                    1- 1417     	.line	262, "main.c"; 	PORTB = 0xF8;
     0002 21F8                      1- 1418     	MOVIA	0xf8
     0003 00rr                      1- 1419     	MOVAR	_PORTB
                                    1- 1420     	.line	263, "main.c"; 	BPHCON = 0xFE;
     0004 21FE                      1- 1421     	MOVIA	0xfe
     0005 00rr                      1- 1422     	MOVAR	_BPHCON
                                    1- 1423     	.line	265, "main.c"; 	IOSTA = C_PA0_Input;
     0006 2101                      1- 1424     	MOVIA	0x01
     0007 000r                      1- 1425     	IOST	_IOSTA
                                    1- 1426     	.line	266, "main.c"; 	IOSTB =  0;	
     0008 0200                      1- 1427     	CLRA	
     0009 000r                      1- 1428     	IOST	_IOSTB
                                    1- 1429     	.line	267, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     000A 21A8                      1- 1430     	MOVIA	0xa8
     000B 00rr                      1- 1431     	MOVAR	_PCON
                                    1- 1432     	.line	268, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1- 1433     	MOVIA	0x01
     000D 00rr                      1- 1434     	MOVAR	_INTE
                                    1- 1435     	.line	269, "main.c"; 	INTF = 0;
     000E 02rr                      1- 1436     	CLRR	_INTF
                                    1- 1437     	.line	272, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1- 1438     	CLRA	
     0010 000r                      1- 1439     	IOST	_PCON1
                                    1- 1440     	.line	274, "main.c"; 	TMR0 = 55;
     0011 2137                      1- 1441     	MOVIA	0x37
     0012 00rr                      1- 1442     	MOVAR	_TMR0
                                    1- 1443     	.line	275, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1- 1444     	CLRA	
     0014 0003                      1- 1445     	T0MD	
                                    1- 1446     	.line	277, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0015 2111                      1- 1447     	MOVIA	0x11
     0016 000r                      1- 1448     	IOST	_PCON1
                                    1- 1449     	.line	279, "main.c"; 	PORTA &= 0x23;
     0017 2123                      1- 1450     	MOVIA	0x23
     0018 10rr                      1- 1451     	ANDAR	_PORTA,F
                                    1- 1452     	.line	280, "main.c"; 	PORTB &= 0xF0;
     0019 21F0                      1- 1453     	MOVIA	0xf0
     001A 10rr                      1- 1454     	ANDAR	_PORTB,F
                                    1- 1455     	.line	281, "main.c"; 	resetbit(PORTB,3);		
     001B 1Drr                      1- 1456     	BCR	_PORTB,3
                                    1- 1457     	.line	282, "main.c"; 	resetbit(PORTA,7);
     001C 1Frr                      1- 1458     	BCR	_PORTA,7
                                    1- 1459     	.line	283, "main.c"; 	ENI();	
     001D 0004                      1- 1460     	ENI
                                    1- 1461     	.line	285, "main.c"; 	}
                                    1- 1462     	RETURN	
     001E 0010                      3-   26 m1      ret
                                    1- 1463     ; exit point of _initTimer0
                                    1- 1465     ;***
                                    1- 1466     ;  pBlock Stats: dbName = C
                                    1- 1467     ;***
                                    1- 1468     ;has an exit
                                    1- 1469     ;; Starting pCode block
                                    1- 1470     .segment "code"; module=main, function=_workCon
     0000                           1- 1472     _workCon:
                                    1- 1473     ; 2 exit points
                                    1- 1474     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1475     ;;unsigned compare: left >= lit (0x7E91=32401), size=2
                                    1- 1476     	.line	251, "main.c"; 	if(chrgCount > 32400 || sleepCount > 10800)
     0000 217E                      1- 1477     	MOVIA	0x7e
                                    1- 1478     	BANKSEL	_chrgCount
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 04rr                      1- 1479     	SUBAR	(_chrgCount + 1),W
     0003 0903                      1- 1480     	BTRSS	STATUS,2
     0004 3rrr                      1- 1481     	LGOTO	_00258_DS_
     0005 2191                      1- 1482     	MOVIA	0x91
     0006 04rr                      1- 1483     	SUBAR	_chrgCount,W
     0007                           1- 1484     _00258_DS_:
     0007 0C03                      1- 1485     	BTRSC	STATUS,0
     0008 3rrr                      1- 1486     	LGOTO	_00250_DS_
                                    1- 1487     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1488     ;;unsigned compare: left >= lit (0x2A31=10801), size=2
     0009 212A                      1- 1489     	MOVIA	0x2a
                                    1- 1490     	BANKSEL	_sleepCount
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 04rr                      1- 1491     	SUBAR	(_sleepCount + 1),W
     000C 0903                      1- 1492     	BTRSS	STATUS,2
     000D 3rrr                      1- 1493     	LGOTO	_00259_DS_
     000E 2131                      1- 1494     	MOVIA	0x31
     000F 04rr                      1- 1495     	SUBAR	_sleepCount,W
     0010                           1- 1496     _00259_DS_:
     0010 0803                      1- 1497     	BTRSS	STATUS,0
     0011 3rrr                      1- 1498     	LGOTO	_00253_DS_
     0012                           1- 1499     _00250_DS_:
                                    1- 1500     	.line	253, "main.c"; 	fullFlag = 1;
     0012 2101                      1- 1501     	MOVIA	0x01
                                    1- 1502     	BANKSEL	_fullFlag
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1- 1503     	MOVAR	_fullFlag
     0015                           1- 1504     _00253_DS_:
                                    1- 1505     	.line	256, "main.c"; 	}
                                    1- 1506     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1- 1507     ; exit point of _workCon
                                    1- 1509     ;***
                                    1- 1510     ;  pBlock Stats: dbName = C
                                    1- 1511     ;***
                                    1- 1512     ;has an exit
                                    1- 1513     ;functions called:
                                    1- 1514     ;   _halfChrg
                                    1- 1515     ;   _halfChrg
                                    1- 1516     ;   _fullChrg
                                    1- 1517     ;   _fullChrg
                                    1- 1518     ;   _halfChrg
                                    1- 1519     ;   _halfChrg
                                    1- 1520     ;   _fullChrg
                                    1- 1521     ;   _fullChrg
                                    1- 1522     ;1 compiler assigned register :
                                    1- 1523     ;   r0x1033
                                    1- 1524     ;; Starting pCode block
                                    1- 1525     .segment "code"; module=main, function=_setDuty
     0000                           1- 1527     _setDuty:
                                    1- 1528     ; 2 exit points
                                    1- 1529     	.line	160, "main.c"; 	if(dutyFlag == 0)
                                    1- 1530     	BANKSEL	_dutyFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1531     	MOVR	_dutyFlag,W
     0002 0903                      1- 1532     	BTRSS	STATUS,2
     0003 3rrr                      1- 1533     	LGOTO	_00200_DS_
                                    1- 1534     	.line	162, "main.c"; 	dutyFlag = 1;
     0004 2101                      1- 1535     	MOVIA	0x01
     0005 00rr                      1- 1536     	MOVAR	_dutyFlag
                                    1- 1537     	.line	163, "main.c"; 	if(addFlag == 1)
                                    1- 1538     	BANKSEL	_addFlag
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 01rr                      1- 1539     	MOVR	_addFlag,W
     0008 2401                      1- 1540     	XORIA	0x01
     0009 0903                      1- 1541     	BTRSS	STATUS,2
     000A 3rrr                      1- 1542     	LGOTO	_00173_DS_
                                    1- 1543     	.line	166, "main.c"; 	if(--duty == 0)
                                    1- 1544     	BANKSEL	_duty
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 17rr                      1- 1545     	DECRSZ	_duty,F
     000D 3rrr                      1- 1546     	LGOTO	_00174_DS_
                                    1- 1547     	.line	168, "main.c"; 	duty = 1;
     000E 2101                      1- 1548     	MOVIA	0x01
     000F 00rr                      1- 1549     	MOVAR	_duty
     0010 3rrr                      1- 1550     	LGOTO	_00174_DS_
     0011                           1- 1551     _00173_DS_:
                                    1- 1552     	.line	171, "main.c"; 	else if(addFlag == 2)
                                    1- 1553     	BANKSEL	_addFlag
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1554     	MOVR	_addFlag,W
     0013 2402                      1- 1555     	XORIA	0x02
     0014 0903                      1- 1556     	BTRSS	STATUS,2
     0015 3rrr                      1- 1557     	LGOTO	_00174_DS_
                                    1- 1558     	.line	174, "main.c"; 	if(++duty > maxDuty)
                                    1- 1559     	BANKSEL	_duty
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 05rr                      1- 1560     	INCR	_duty,F
     0018 01rr                      1- 1561     	MOVR	_duty,W
                                    1- 1562     	BANKSEL	_maxDuty
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 04rr                      1- 1563     	SUBAR	_maxDuty,W
     001B 0C03                      1- 1564     	BTRSC	STATUS,0
     001C 3rrr                      1- 1565     	LGOTO	_00174_DS_
                                    1- 1566     	.line	176, "main.c"; 	duty = maxDuty;
     001D 01rr                      1- 1567     	MOVR	_maxDuty,W
                                    1- 1568     	BANKSEL	_duty
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 00rr                      1- 1569     	MOVAR	_duty
     0020                           1- 1570     _00174_DS_:
                                    1- 1571     	.line	179, "main.c"; 	PWM2DUTY = duty - 1;
                                    1- 1572     	BANKSEL	_duty
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 06rr                      1- 1573     	DECR	_duty,W
                                    1- 1574     ;;1	MOVAR	r0x1033
     0022 00rr                      1- 1575     	SFUN	_PWM2DUTY
                                    1- 1576     ;;unsigned compare: left < lit (0x7B=123), size=2
                                    1- 1577     	.line	180, "main.c"; 	if(avaA < 123)
     0023 2100                      1- 1578     	MOVIA	0x00
                                    1- 1579     	BANKSEL	_avaA
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 04rr                      1- 1580     	SUBAR	(_avaA + 1),W
     0026 0903                      1- 1581     	BTRSS	STATUS,2
     0027 3rrr                      1- 1582     	LGOTO	_00245_DS_
     0028 217B                      1- 1583     	MOVIA	0x7b
     0029 04rr                      1- 1584     	SUBAR	_avaA,W
     002A                           1- 1585     _00245_DS_:
     002A 0C03                      1- 1586     	BTRSC	STATUS,0
     002B 3rrr                      1- 1587     	LGOTO	_00196_DS_
                                    1- 1588     	.line	182, "main.c"; 	if(duty == 1 && (++fullCount > 200))	//充满了，进入涓流充电
                                    1- 1589     	BANKSEL	_duty
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1- 1590     	MOVR	_duty,W
     002E 2401                      1- 1591     	XORIA	0x01
     002F 0903                      1- 1592     	BTRSS	STATUS,2
     0030 3rrr                      1- 1593     	LGOTO	_00180_DS_
                                    1- 1594     	BANKSEL	_fullCount
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 05rr                      1- 1595     	INCR	_fullCount,F
                                    1- 1596     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1597     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0033 21C9                      1- 1598     	MOVIA	0xc9
     0034 04rr                      1- 1599     	SUBAR	_fullCount,W
     0035 0803                      1- 1600     	BTRSS	STATUS,0
     0036 3rrr                      1- 1601     	LGOTO	_00180_DS_
                                    1- 1602     	.line	184, "main.c"; 	halfChrg();
     0037 2rrr                      1- 1603     	LCALL	_halfChrg
                                    1- 1604     	.line	185, "main.c"; 	setbit(PORTA,6);		//打开风扇
     0038 1Brr                      1- 1605     	BSR	_PORTA,6
                                    1- 1606     	.line	186, "main.c"; 	workStep = 3;
     0039 2103                      1- 1607     	MOVIA	0x03
                                    1- 1608     	BANKSEL	_workStep
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 00rr                      1- 1609     	MOVAR	_workStep
                                    1- 1610     	.line	187, "main.c"; 	ledStep = 0;
                                    1- 1611     	BANKSEL	_ledStep
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 02rr                      1- 1612     	CLRR	_ledStep
     003E 3rrr                      1- 1613     	LGOTO	_00200_DS_
     003F                           1- 1614     _00180_DS_:
                                    1- 1615     	.line	192, "main.c"; 	if(duty == 100 && (++fullCount > 200))
                                    1- 1616     	BANKSEL	_duty
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 01rr                      1- 1617     	MOVR	_duty,W
     0041 2464                      1- 1618     	XORIA	0x64
     0042 0903                      1- 1619     	BTRSS	STATUS,2
     0043 3rrr                      1- 1620     	LGOTO	_00176_DS_
                                    1- 1621     	BANKSEL	_fullCount
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 05rr                      1- 1622     	INCR	_fullCount,F
                                    1- 1623     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1624     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0046 21C9                      1- 1625     	MOVIA	0xc9
     0047 04rr                      1- 1626     	SUBAR	_fullCount,W
     0048 0803                      1- 1627     	BTRSS	STATUS,0
     0049 3rrr                      1- 1628     	LGOTO	_00176_DS_
                                    1- 1629     	.line	194, "main.c"; 	halfChrg();
     004A 2rrr                      1- 1630     	LCALL	_halfChrg
                                    1- 1631     	.line	195, "main.c"; 	workStep = 2;
     004B 2102                      1- 1632     	MOVIA	0x02
                                    1- 1633     	BANKSEL	_workStep
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 00rr                      1- 1634     	MOVAR	_workStep
     004E 3rrr                      1- 1635     	LGOTO	_00177_DS_
     004F                           1- 1636     _00176_DS_:
                                    1- 1637     	.line	199, "main.c"; 	fullChrg();
     004F 2rrr                      1- 1638     	LCALL	_fullChrg
                                    1- 1639     	.line	200, "main.c"; 	PWM2DUTY = duty;
                                    1- 1640     	BANKSEL	_duty
     0050 rrrr                      3-   71 m1      .banksel ram_address
     0051 01rr                      1- 1641     	MOVR	_duty,W
     0052 00rr                      1- 1642     	SFUN	_PWM2DUTY
                                    1- 1643     	.line	201, "main.c"; 	workStep = 3;
     0053 2103                      1- 1644     	MOVIA	0x03
                                    1- 1645     	BANKSEL	_workStep
     0054 rrrr                      3-   71 m1      .banksel ram_address
     0055 00rr                      1- 1646     	MOVAR	_workStep
     0056                           1- 1647     _00177_DS_:
                                    1- 1648     	.line	203, "main.c"; 	setbit(PORTA,6);		//打开风扇
     0056 1Brr                      1- 1649     	BSR	_PORTA,6
                                    1- 1650     	.line	204, "main.c"; 	startFlag = 0;
                                    1- 1651     	BANKSEL	_startFlag
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 02rr                      1- 1652     	CLRR	_startFlag
                                    1- 1653     	.line	205, "main.c"; 	ledStep = 0;
                                    1- 1654     	BANKSEL	_ledStep
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 02rr                      1- 1655     	CLRR	_ledStep
                                    1- 1656     	.line	206, "main.c"; 	chrgCount = 0;
                                    1- 1657     	BANKSEL	_chrgCount
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 02rr                      1- 1658     	CLRR	_chrgCount
     005D 02rr                      1- 1659     	CLRR	(_chrgCount + 1)
                                    1- 1660     	.line	207, "main.c"; 	sleepCount = 0;
                                    1- 1661     	BANKSEL	_sleepCount
     005E rrrr                      3-   71 m1      .banksel ram_address
     005F 02rr                      1- 1662     	CLRR	_sleepCount
     0060 02rr                      1- 1663     	CLRR	(_sleepCount + 1)
     0061 3rrr                      1- 1664     	LGOTO	_00200_DS_
     0062                           1- 1665     _00196_DS_:
                                    1- 1666     	.line	215, "main.c"; 	setbit(PORTA,6);		//打开风扇
     0062 1Brr                      1- 1667     	BSR	_PORTA,6
                                    1- 1668     	.line	216, "main.c"; 	fullChrg();
     0063 2rrr                      1- 1669     	LCALL	_fullChrg
                                    1- 1670     	.line	217, "main.c"; 	sleepCount = 0;
                                    1- 1671     	BANKSEL	_sleepCount
     0064 rrrr                      3-   71 m1      .banksel ram_address
     0065 02rr                      1- 1672     	CLRR	_sleepCount
     0066 02rr                      1- 1673     	CLRR	(_sleepCount + 1)
                                    1- 1674     	.line	218, "main.c"; 	fullCount = 0;
                                    1- 1675     	BANKSEL	_fullCount
     0067 rrrr                      3-   71 m1      .banksel ram_address
     0068 02rr                      1- 1676     	CLRR	_fullCount
                                    1- 1677     	.line	219, "main.c"; 	workStep = 1;
     0069 2101                      1- 1678     	MOVIA	0x01
                                    1- 1679     	BANKSEL	_workStep
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 00rr                      1- 1680     	MOVAR	_workStep
                                    1- 1681     ;;unsigned compare: left < lit (0x4=4), size=1
                                    1- 1682     	.line	220, "main.c"; 	if(duty < 4)
     006C 2104                      1- 1683     	MOVIA	0x04
                                    1- 1684     	BANKSEL	_duty
     006D rrrr                      3-   71 m1      .banksel ram_address
     006E 04rr                      1- 1685     	SUBAR	_duty,W
     006F 0C03                      1- 1686     	BTRSC	STATUS,0
     0070 3rrr                      1- 1687     	LGOTO	_00193_DS_
                                    1- 1688     	.line	222, "main.c"; 	ledStep = 1;
     0071 2101                      1- 1689     	MOVIA	0x01
                                    1- 1690     	BANKSEL	_ledStep
     0072 rrrr                      3-   71 m1      .banksel ram_address
     0073 00rr                      1- 1691     	MOVAR	_ledStep
     0074 3rrr                      1- 1692     	LGOTO	_00200_DS_
                                    1- 1693     ;;unsigned compare: left < lit (0x9=9), size=1
     0075                           1- 1694     _00193_DS_:
                                    1- 1695     	.line	224, "main.c"; 	else if(duty < 9)
     0075 2109                      1- 1696     	MOVIA	0x09
                                    1- 1697     	BANKSEL	_duty
     0076 rrrr                      3-   71 m1      .banksel ram_address
     0077 04rr                      1- 1698     	SUBAR	_duty,W
     0078 0C03                      1- 1699     	BTRSC	STATUS,0
     0079 3rrr                      1- 1700     	LGOTO	_00190_DS_
                                    1- 1701     	.line	226, "main.c"; 	ledStep = 2;
     007A 2102                      1- 1702     	MOVIA	0x02
                                    1- 1703     	BANKSEL	_ledStep
     007B rrrr                      3-   71 m1      .banksel ram_address
     007C 00rr                      1- 1704     	MOVAR	_ledStep
     007D 3rrr                      1- 1705     	LGOTO	_00200_DS_
                                    1- 1706     ;;unsigned compare: left < lit (0x1C=28), size=1
     007E                           1- 1707     _00190_DS_:
                                    1- 1708     	.line	228, "main.c"; 	else if(duty < 28)
     007E 211C                      1- 1709     	MOVIA	0x1c
                                    1- 1710     	BANKSEL	_duty
     007F rrrr                      3-   71 m1      .banksel ram_address
     0080 04rr                      1- 1711     	SUBAR	_duty,W
     0081 0C03                      1- 1712     	BTRSC	STATUS,0
     0082 3rrr                      1- 1713     	LGOTO	_00187_DS_
                                    1- 1714     	.line	230, "main.c"; 	ledStep = 3;
     0083 2103                      1- 1715     	MOVIA	0x03
                                    1- 1716     	BANKSEL	_ledStep
     0084 rrrr                      3-   71 m1      .banksel ram_address
     0085 00rr                      1- 1717     	MOVAR	_ledStep
     0086 3rrr                      1- 1718     	LGOTO	_00200_DS_
                                    1- 1719     ;;unsigned compare: left < lit (0x24=36), size=1
     0087                           1- 1720     _00187_DS_:
                                    1- 1721     	.line	232, "main.c"; 	else if(duty < 36)
     0087 2124                      1- 1722     	MOVIA	0x24
                                    1- 1723     	BANKSEL	_duty
     0088 rrrr                      3-   71 m1      .banksel ram_address
     0089 04rr                      1- 1724     	SUBAR	_duty,W
     008A 0C03                      1- 1725     	BTRSC	STATUS,0
     008B 3rrr                      1- 1726     	LGOTO	_00184_DS_
                                    1- 1727     	.line	234, "main.c"; 	ledStep = 4;
     008C 2104                      1- 1728     	MOVIA	0x04
                                    1- 1729     	BANKSEL	_ledStep
     008D rrrr                      3-   71 m1      .banksel ram_address
     008E 00rr                      1- 1730     	MOVAR	_ledStep
     008F 3rrr                      1- 1731     	LGOTO	_00200_DS_
     0090                           1- 1732     _00184_DS_:
                                    1- 1733     	.line	238, "main.c"; 	ledStep = 5;
     0090 2105                      1- 1734     	MOVIA	0x05
                                    1- 1735     	BANKSEL	_ledStep
     0091 rrrr                      3-   71 m1      .banksel ram_address
     0092 00rr                      1- 1736     	MOVAR	_ledStep
     0093                           1- 1737     _00200_DS_:
                                    1- 1738     	.line	245, "main.c"; 	}
                                    1- 1739     	RETURN	
     0093 0010                      3-   26 m1      ret
                                    1- 1740     ; exit point of _setDuty
                                    1- 1743     ;	code size estimation:
                                    1- 1744     ;	  592+  151 =   743 instructions ( 1788 byte)
                                    1- 1746     	end
                                    1- 1746     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__divuint               Label    00000000
__moduchar              Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000001B
_00002_DS_              Label    00000027
_00003_DS_              Label    00000027
_00004_DS_              Label    0000003C
_00106_DS_              Label    00000036
_00113_DS_              Label    00000039
_00121_DS_              Label    00000014
_00123_DS_              Label    00000022
_00124_DS_              Label    00000025
_00126_DS_              Label    0000005A
_00129_DS_              Label    0000004D
_00130_DS_              Label    0000005C
_00132_DS_              Label    00000062
_00134_DS_              Label    00000003
_00159_DS_              Label    0000001C
_00160_DS_              Label    00000047
_00161_DS_              Label    00000054
_00173_DS_              Label    00000011
_00174_DS_              Label    00000020
_00176_DS_              Label    0000004F
_00177_DS_              Label    00000056
_00180_DS_              Label    0000003F
_00184_DS_              Label    00000090
_00187_DS_              Label    00000087
_00190_DS_              Label    0000007E
_00193_DS_              Label    00000075
_00196_DS_              Label    00000062
_00200_DS_              Label    00000093
_00245_DS_              Label    0000002A
_00250_DS_              Label    00000012
_00253_DS_              Label    00000015
_00258_DS_              Label    00000007
_00259_DS_              Label    00000010
_00269_DS_              Label    00000019
_00271_DS_              Label    00000075
_00274_DS_              Label    00000077
_00276_DS_              Label    00000027
_00277_DS_              Label    00000028
_00278_DS_              Label    00000033
_00279_DS_              Label    00000034
_00280_DS_              Label    0000003F
_00281_DS_              Label    00000040
_00282_DS_              Label    0000004B
_00283_DS_              Label    0000004C
_00284_DS_              Label    00000057
_00285_DS_              Label    00000058
_00310_DS_              Label    0000000F
_00311_DS_              Label    00000023
_00312_DS_              Label    0000002F
_00313_DS_              Label    0000003B
_00314_DS_              Label    00000047
_00315_DS_              Label    00000053
_00316_DS_              Label    0000005F
_00317_DS_              Label    0000006B
_00332_DS_              Label    00000016
_00333_DS_              Label    0000001A
_00334_DS_              Label    0000001E
_00335_DS_              Label    00000022
_00336_DS_              Label    00000026
_00337_DS_              Label    0000002A
_00338_DS_              Label    0000002C
_00341_DS_              Label    00000045
_00353_DS_              Label    00000010
_00354_DS_              Label    0000003B
_00369_DS_              Label    00000009
_00371_DS_              Label    0000002A
_00376_DS_              Label    00000000
_00383_DS_              Label    00000009
_00385_DS_              Label    0000001C
_00394_DS_              Label    00000013
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_addFlag                Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_adTime                 Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_avaA                   Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkA                 Label    00000000
_checkV                 Label    00000000
_chrgCount              Label    00000000
_closeChrg              Label    00000000
_CMPCR                  Label    00000000
_count1S                Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_dutyFlag               Label    00000000
_F_AIN0_Convert         Label    00000000
_F_AIN7_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_FSR                    Label    00000000
_fullChrg               Label    00000000
_fullCount              Label    00000000
_fullFlag               Label    00000000
_halfChrg               Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initTimer0             Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_ledCtr                 Label    00000000
_ledLock                Label    00000000
_ledMax                 Label    00000000
_ledMin                 Label    00000000
_ledStep                Label    00000000
_main                   Label    00000000
_maxDuty                Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_R_AIN0_DATA            Label    00000000
_R_AIN0_DATA_LB         Label    00000000
_R_AIN7_DATA            Label    00000000
_R_AIN7_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_setDuty                Label    00000000
_sleepCount             Label    00000000
_startFlag              Label    00000000
_STATUS                 Label    00000000
_sumA                   Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCon                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    0000004A
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1021                 Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1027                 Label    00000000
r0x102A                 Label    00000000
r0x102D                 Label    00000000
r0x102E                 Label    00000000
r0x102F                 Label    00000000
r0x1030                 Label    00000000
r0x1031                 Label    00000000
r0x1032                 Label    00000000
r0x1034                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
