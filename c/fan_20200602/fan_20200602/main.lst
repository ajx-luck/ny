
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_KeyScan
                                    1-   15     	extern	_keyRead
                                    1-   16     	extern	_PORTAbits
                                    1-   17     	extern	_PORTBbits
                                    1-   18     	extern	_PCONbits
                                    1-   19     	extern	_BWUCONbits
                                    1-   20     	extern	_ABPLCONbits
                                    1-   21     	extern	_BPHCONbits
                                    1-   22     	extern	_INTEbits
                                    1-   23     	extern	_INTFbits
                                    1-   24     	extern	_ADMDbits
                                    1-   25     	extern	_ADRbits
                                    1-   26     	extern	_ADVREFHbits
                                    1-   27     	extern	_ADCRbits
                                    1-   28     	extern	_AWUCONbits
                                    1-   29     	extern	_PACONbits
                                    1-   30     	extern	_INTEDGbits
                                    1-   31     	extern	_ANAENbits
                                    1-   32     	extern	_RFCbits
                                    1-   33     	extern	_INTE2bits
                                    1-   34     	extern	_INDF
                                    1-   35     	extern	_TMR0
                                    1-   36     	extern	_PCL
                                    1-   37     	extern	_STATUS
                                    1-   38     	extern	_FSR
                                    1-   39     	extern	_PORTA
                                    1-   40     	extern	_PORTB
                                    1-   41     	extern	_PCON
                                    1-   42     	extern	_BWUCON
                                    1-   43     	extern	_PCHBUF
                                    1-   44     	extern	_ABPLCON
                                    1-   45     	extern	_BPHCON
                                    1-   46     	extern	_INTE
                                    1-   47     	extern	_INTF
                                    1-   48     	extern	_ADMD
                                    1-   49     	extern	_ADR
                                    1-   50     	extern	_ADD
                                    1-   51     	extern	_ADVREFH
                                    1-   52     	extern	_ADCR
                                    1-   53     	extern	_AWUCON
                                    1-   54     	extern	_PACON
                                    1-   55     	extern	_INTEDG
                                    1-   56     	extern	_TMRH
                                    1-   57     	extern	_ANAEN
                                    1-   58     	extern	_RFC
                                    1-   59     	extern	_TM3RH
                                    1-   60     	extern	_INTE2
                                    1-   61     	extern	_TMR1
                                    1-   62     	extern	_T1CR1
                                    1-   63     	extern	_T1CR2
                                    1-   64     	extern	_PWM1DUTY
                                    1-   65     	extern	_PS1CV
                                    1-   66     	extern	_BZ1CR
                                    1-   67     	extern	_IRCR
                                    1-   68     	extern	_TBHP
                                    1-   69     	extern	_TBHD
                                    1-   70     	extern	_TMR2
                                    1-   71     	extern	_T2CR1
                                    1-   72     	extern	_T2CR2
                                    1-   73     	extern	_PWM2DUTY
                                    1-   74     	extern	_PS2CV
                                    1-   75     	extern	_BZ2CR
                                    1-   76     	extern	_OSCCR
                                    1-   77     	extern	_TMR3
                                    1-   78     	extern	_T3CR1
                                    1-   79     	extern	_T3CR2
                                    1-   80     	extern	_PWM3DUTY
                                    1-   81     	extern	_PS3CV
                                    1-   82     	extern	_BZ3CR
                                    1-   83     	extern	_IOSTA
                                    1-   84     	extern	_IOSTB
                                    1-   85     	extern	_APHCON
                                    1-   86     	extern	_PS0CV
                                    1-   87     	extern	_BODCON
                                    1-   88     	extern	_CMPCR
                                    1-   89     	extern	_PCON1
                                    1-   90     	extern	_T0MD
                                    1-   91     	extern	___sdcc_saved_fsr
                                    1-   92     	extern	___sdcc_saved_stk00
                                    1-   93     	extern	___sdcc_saved_stk01
                                    1-   94     	extern	__nyc_ny8_startup
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     ; global declarations
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     	extern	_F_wait_eoc
                                    1-   99     	extern	_F_AIN2_Convert
                                    1-  100     	extern	_isNotFan
                                    1-  101     	extern	_initAD
                                    1-  102     	extern	_delay
                                    1-  103     	extern	_processKey
                                    1-  104     	extern	_checkUsbInput
                                    1-  105     	extern	_fanUseable
                                    1-  106     	extern	_ledCon
                                    1-  107     	extern	_pwm1Stop
                                    1-  108     	extern	_gotoSleep
                                    1-  109     	extern	_init
                                    1-  110     	extern	_isr
                                    1-  111     	extern	_main
                                    1-  112     	extern	_intCount
                                    1-  113     	extern	_IntFlag
                                    1-  114     	extern	_keyClick
                                    1-  115     	extern	_duty1
                                    1-  116     	extern	_workStep
                                    1-  117     	extern	_usbFlag
                                    1-  118     	extern	_batFullFlag
                                    1-  119     	extern	_fanStatus
                                    1-  120     	extern	_count500ms
                                    1-  121     	extern	_sleepFlag
                                    1-  122     	extern	_sleepDelay
                                    1-  123     	extern	_count200ms
                                    1-  124     	extern	_nullcount
                                    1-  125     	extern	_R_AIN2_DATA
                                    1-  126     	extern	_R_AIN2_DATA_LB
                                    1-  127     	extern	_count15S
                                    1-  128     	extern	_tempDuty
                                    1-  129     	extern	_tempData
                                    1-  130     	extern	_checkTime
                                    1-  132     	extern PSAVE
                                    1-  133     	extern SSAVE
                                    1-  134     	extern WSAVE
                                    1-  135     	extern STK12
                                    1-  136     	extern STK11
                                    1-  137     	extern STK10
                                    1-  138     	extern STK09
                                    1-  139     	extern STK08
                                    1-  140     	extern STK07
                                    1-  141     	extern STK06
                                    1-  142     	extern STK05
                                    1-  143     	extern STK04
                                    1-  144     	extern STK03
                                    1-  145     	extern STK02
                                    1-  146     	extern STK01
                                    1-  147     	extern STK00
                                    1-  149     .segment "uninit", 0x20000040
 20000040                           1-  150     PSAVE:
                                    1-  151     	.res 1
 20000041                           1-  152     SSAVE:
                                    1-  153     	.res 1
 20000042                           1-  154     WSAVE:
                                    1-  155     	.res 1
 20000043                           1-  156     STK12:
                                    1-  157     	.res 1
 20000044                           1-  158     STK11:
                                    1-  159     	.res 1
 20000045                           1-  160     STK10:
                                    1-  161     	.res 1
 20000046                           1-  162     STK09:
                                    1-  163     	.res 1
 20000047                           1-  164     STK08:
                                    1-  165     	.res 1
 20000048                           1-  166     STK07:
                                    1-  167     	.res 1
 20000049                           1-  168     STK06:
                                    1-  169     	.res 1
 2000004A                           1-  170     STK05:
                                    1-  171     	.res 1
 2000004B                           1-  172     STK04:
                                    1-  173     	.res 1
 2000004C                           1-  174     STK03:
                                    1-  175     	.res 1
 2000004D                           1-  176     STK02:
                                    1-  177     	.res 1
 2000004E                           1-  178     STK01:
                                    1-  179     	.res 1
 2000004F                           1-  180     STK00:
                                    1-  181     	.res 1
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ; global definitions
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     .segment "uninit"
     0000                           1-  187     _R_AIN2_DATA:
                                    1-  188     	.res	2
                                    1-  191     .segment "uninit"
     0000                           1-  192     _R_AIN2_DATA_LB:
                                    1-  193     	.res	1
                                    1-  196     .segment "uninit"
     0000                           1-  197     _tempData:
                                    1-  198     	.res	2
                                    1-  201     ;--------------------------------------------------------
                                    1-  202     ; absolute symbol definitions
                                    1-  203     ;--------------------------------------------------------
                                    1-  204     ;--------------------------------------------------------
                                    1-  205     ; compiler-defined variables
                                    1-  206     ;--------------------------------------------------------
                                    1-  207     .segment "uninit"
     0000                           1-  208     r0x1026:
                                    1-  209     	.res	1
                                    1-  210     .segment "uninit"
     0000                           1-  211     r0x1025:
                                    1-  212     	.res	1
                                    1-  213     .segment "uninit"
     0000                           1-  214     r0x1022:
                                    1-  215     	.res	1
                                    1-  216     .segment "uninit"
     0000                           1-  217     r0x1021:
                                    1-  218     	.res	1
                                    1-  219     .segment "uninit"
     0000                           1-  220     r0x1023:
                                    1-  221     	.res	1
                                    1-  222     .segment "uninit"
     0000                           1-  223     r0x1024:
                                    1-  224     	.res	1
                                    1-  225     .segment "uninit"
     0000                           1-  226     r0x101F:
                                    1-  227     	.res	1
                                    1-  228     .segment "uninit"
     0000                           1-  229     r0x1020:
                                    1-  230     	.res	1
                                    1-  231     .segment "uninit"
     0000                           1-  232     r0x1017:
                                    1-  233     	.res	1
                                    1-  234     .segment "uninit"
     0000                           1-  235     r0x1018:
                                    1-  236     	.res	1
                                    1-  237     .segment "uninit"
     0000                           1-  238     r0x1019:
                                    1-  239     	.res	1
                                    1-  240     .segment "uninit"
     0000                           1-  241     r0x101C:
                                    1-  242     	.res	1
                                    1-  243     ;--------------------------------------------------------
                                    1-  244     ; initialized data
                                    1-  245     ;--------------------------------------------------------
                                    1-  247     .segment "idata"
     0000                           1-  248     _intCount:
     0000 0000                      1-  249     	dw	0x00
                                    1-  253     .segment "idata"
     0000                           1-  254     _IntFlag:
     0000 0000                      1-  255     	dw	0x00
                                    1-  259     .segment "idata"
     0000                           1-  260     _keyClick:
     0000 0000                      1-  261     	dw	0x00
                                    1-  265     .segment "idata"
     0000                           1-  266     _duty1:
     0000 0005                      1-  267     	dw	0x05
                                    1-  271     .segment "idata"
     0000                           1-  272     _workStep:
     0000 0000                      1-  273     	dw	0x00
                                    1-  277     .segment "idata"
     0000                           1-  278     _usbFlag:
     0000 0000                      1-  279     	dw	0x00
                                    1-  283     .segment "idata"
     0000                           1-  284     _batFullFlag:
     0000 0000                      1-  285     	dw	0x00
                                    1-  289     .segment "idata"
     0000                           1-  290     _fanStatus:
     0000 0000                      1-  291     	dw	0x00
                                    1-  295     .segment "idata"
     0000                           1-  296     _count500ms:
     0000 0000                      1-  297     	dw	0x00
                                    1-  301     .segment "idata"
     0000                           1-  302     _sleepFlag:
     0000 0000                      1-  303     	dw	0x00
                                    1-  307     .segment "idata"
     0000                           1-  308     _sleepDelay:
     0000 0000                      1-  309     	dw	0x00
                                    1-  313     .segment "idata"
     0000                           1-  314     _count200ms:
     0000 0000                      1-  315     	dw	0x00
                                    1-  319     .segment "idata"
     0000                           1-  320     _nullcount:
     0000 0000                      1-  321     	dw	0x00
                                    1-  325     .segment "idata"
     0000                           1-  326     _count15S:
     0000 0000 0000                 1-  327     	dw	0x00, 0x00
                                    1-  331     .segment "idata"
     0000                           1-  332     _tempDuty:
     0000 0000                      1-  333     	dw	0x00
                                    1-  337     .segment "idata"
     0000                           1-  338     _checkTime:
     0000 0000                      1-  339     	dw	0x00
                                    1-  342     ;--------------------------------------------------------
                                    1-  343     ; overlayable items in internal ram 
                                    1-  344     ;--------------------------------------------------------
                                    1-  345     ;	udata_ovr
                                    1-  346     ;--------------------------------------------------------
                                    1-  347     ; reset vector 
                                    1-  348     ;--------------------------------------------------------
                                    1-  349     ORG	0x0000
     0000 3rrr                      1-  350     	LGOTO	__nyc_ny8_startup
                                    1-  351     ;--------------------------------------------------------
                                    1-  352     ; interrupt and initialization code
                                    1-  353     ;--------------------------------------------------------
                                    1-  354     ORG 0x0008
     0008 3rrr                      1-  355     	lgoto	__sdcc_interrupt
                                    1-  357     .segment "code"
     0000                           1-  358     __sdcc_interrupt:
                                    1-  359     ;***
                                    1-  360     ;  pBlock Stats: dbName = I
                                    1-  361     ;***
                                    1-  362     ;2 compiler assigned registers:
                                    1-  363     ;   STK00
                                    1-  364     ;   STK01
                                    1-  365     ;; Starting pCode block
     0000                           1-  366     _isr:
                                    1-  367     ; 0 exit points
                                    1-  368     	.line	47, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  369     	MOVAR	WSAVE
     0001 1503                      1-  370     	SWAPR	STATUS,W
     0002 0283                      1-  371     	CLRR	STATUS
     0003 00rr                      1-  372     	MOVAR	SSAVE
     0004 010A                      1-  373     	MOVR	PCHBUF,W
     0005 028A                      1-  374     	CLRR	PCHBUF
     0006 00rr                      1-  375     	MOVAR	PSAVE
     0007 0104                      1-  376     	MOVR	FSR,W
                                    1-  377     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  378     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  379     	MOVR	STK00,W
                                    1-  380     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  381     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  382     	MOVR	STK01,W
                                    1-  383     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  384     	MOVAR	___sdcc_saved_stk01
                                    1-  385     	.line	49, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  386     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  387     	LGOTO	_00108_DS_
                                    1-  388     	.line	51, "main.c"; 	TMR0 = 55;
     0012 2137                      1-  389     	MOVIA	0x37
     0013 00rr                      1-  390     	MOVAR	_TMR0
                                    1-  391     	.line	52, "main.c"; 	intCount++;
                                    1-  392     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  393     	INCR	_intCount,F
                                    1-  394     	.line	53, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  395     	MOVR	_intCount,W
     0017 2464                      1-  396     	XORIA	0x64
     0018 0903                      1-  397     	BTRSS	STATUS,2
     0019 3rrr                      1-  398     	LGOTO	_00108_DS_
                                    1-  399     	.line	55, "main.c"; 	intCount = 0;
     001A 02rr                      1-  400     	CLRR	_intCount
                                    1-  401     	.line	56, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  402     	MOVIA	0x01
                                    1-  403     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  404     	MOVAR	_IntFlag
     001E                           1-  405     _00108_DS_:
                                    1-  406     	.line	59, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  407     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  408     	LGOTO	_00110_DS_
                                    1-  409     	.line	61, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  410     	MOVIA	0xfd
     0021 00rr                      1-  411     	MOVAR	_INTF
     0022                           1-  412     _00110_DS_:
                                    1-  413     	.line	64, "main.c"; 	INTF = 0;
     0022 02rr                      1-  414     	CLRR	_INTF
                                    1-  415     	.line	66, "main.c"; 	}
                                    1-  416     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  417     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  418     	MOVAR	STK01
                                    1-  419     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  420     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  421     	MOVAR	STK00
                                    1-  422     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  423     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  424     	MOVAR	FSR
     002C 01rr                      1-  425     	MOVR	PSAVE,W
     002D 008A                      1-  426     	MOVAR	PCHBUF
     002E 0283                      1-  427     	CLRR	STATUS
     002F 15rr                      1-  428     	SWAPR	SSAVE,W
     0030 0083                      1-  429     	MOVAR	STATUS
     0031 15rr                      1-  430     	SWAPR	WSAVE,F
     0032 15rr                      1-  431     	SWAPR	WSAVE,W
     0033                           1-  432     END_OF_INTERRUPT:
     0033 0011                      1-  433     	RETIE	
                                    1-  435     ;--------------------------------------------------------
                                    1-  436     ; code
                                    1-  437     ;--------------------------------------------------------
                                    1-  438     ;***
                                    1-  439     ;  pBlock Stats: dbName = M
                                    1-  440     ;***
                                    1-  441     ;has an exit
                                    1-  442     ;functions called:
                                    1-  443     ;   _init
                                    1-  444     ;   _initAD
                                    1-  445     ;   _checkUsbInput
                                    1-  446     ;   _KeyScan
                                    1-  447     ;   _keyRead
                                    1-  448     ;   _processKey
                                    1-  449     ;   _fanUseable
                                    1-  450     ;   _pwm1Stop
                                    1-  451     ;   _gotoSleep
                                    1-  452     ;   _ledCon
                                    1-  453     ;   _init
                                    1-  454     ;   _initAD
                                    1-  455     ;   _checkUsbInput
                                    1-  456     ;   _KeyScan
                                    1-  457     ;   _keyRead
                                    1-  458     ;   _processKey
                                    1-  459     ;   _fanUseable
                                    1-  460     ;   _pwm1Stop
                                    1-  461     ;   _gotoSleep
                                    1-  462     ;   _ledCon
                                    1-  463     ;1 compiler assigned register :
                                    1-  464     ;   r0x1026
                                    1-  465     ;; Starting pCode block
                                    1-  466     .segment "code"; module=main, function=_main
     0000                           1-  468     _main:
                                    1-  469     ; 2 exit points
                                    1-  470     	.line	71, "main.c"; 	init();
     0000 2rrr                      1-  471     	LCALL	_init
                                    1-  472     	.line	72, "main.c"; 	initAD();
     0001 2rrr                      1-  473     	LCALL	_initAD
     0002                           1-  474     _00129_DS_:
                                    1-  475     	.line	75, "main.c"; 	CLRWDT(); 
     0002 0002                      1-  476     	clrwdt
                                    1-  477     	.line	76, "main.c"; 	if(!IntFlag)
                                    1-  478     	BANKSEL	_IntFlag
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1-  479     	MOVR	_IntFlag,W
     0005 0D03                      1-  480     	BTRSC	STATUS,2
     0006 3rrr                      1-  481     	LGOTO	_00129_DS_
                                    1-  482     	.line	78, "main.c"; 	IntFlag = 0;
     0007 02rr                      1-  483     	CLRR	_IntFlag
                                    1-  484     	.line	79, "main.c"; 	checkUsbInput();
     0008 2rrr                      1-  485     	LCALL	_checkUsbInput
                                    1-  486     	.line	80, "main.c"; 	keyClick = keyRead(KeyScan() & 0x80);
     0009 2rrr                      1-  487     	LCALL	_KeyScan
                                    1-  488     	BANKSEL	r0x1026
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1-  489     	MOVAR	r0x1026
     000C 2180                      1-  490     	MOVIA	0x80
     000D 10rr                      1-  491     	ANDAR	r0x1026,F
     000E 01rr                      1-  492     	MOVR	r0x1026,W
     000F 2rrr                      1-  493     	LCALL	_keyRead
                                    1-  494     	BANKSEL	_keyClick
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 00rr                      1-  495     	MOVAR	_keyClick
                                    1-  496     	.line	81, "main.c"; 	if(keyClick == 1)
     0012 2401                      1-  497     	XORIA	0x01
     0013 0903                      1-  498     	BTRSS	STATUS,2
     0014 3rrr                      1-  499     	LGOTO	_00121_DS_
                                    1-  500     	.line	83, "main.c"; 	processKey();
     0015 2rrr                      1-  501     	LCALL	_processKey
                                    1-  502     	.line	84, "main.c"; 	nullcount = 0;
                                    1-  503     	BANKSEL	_nullcount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 02rr                      1-  504     	CLRR	_nullcount
                                    1-  505     	.line	85, "main.c"; 	if(workStep)
                                    1-  506     	BANKSEL	_workStep
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 01rr                      1-  507     	MOVR	_workStep,W
     001A 0D03                      1-  508     	BTRSC	STATUS,2
     001B 3rrr                      1-  509     	LGOTO	_00118_DS_
                                    1-  510     	.line	87, "main.c"; 	fanStatus = 1;
     001C 2101                      1-  511     	MOVIA	0x01
                                    1-  512     	BANKSEL	_fanStatus
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1-  513     	MOVAR	_fanStatus
     001F 3rrr                      1-  514     	LGOTO	_00121_DS_
     0020                           1-  515     _00118_DS_:
                                    1-  516     	.line	91, "main.c"; 	fanStatus = 0;
                                    1-  517     	BANKSEL	_fanStatus
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 02rr                      1-  518     	CLRR	_fanStatus
     0022                           1-  519     _00121_DS_:
                                    1-  520     	.line	95, "main.c"; 	if(workStep)
                                    1-  521     	BANKSEL	_workStep
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  522     	MOVR	_workStep,W
     0024 0D03                      1-  523     	BTRSC	STATUS,2
     0025 3rrr                      1-  524     	LGOTO	_00126_DS_
                                    1-  525     	.line	97, "main.c"; 	fanUseable();
     0026 2rrr                      1-  526     	LCALL	_fanUseable
     0027 3rrr                      1-  527     	LGOTO	_00127_DS_
     0028                           1-  528     _00126_DS_:
                                    1-  529     	.line	101, "main.c"; 	sleepDelay++;
                                    1-  530     	BANKSEL	_sleepDelay
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 05rr                      1-  531     	INCR	_sleepDelay,F
                                    1-  532     	.line	102, "main.c"; 	pwm1Stop();
     002A 2rrr                      1-  533     	LCALL	_pwm1Stop
                                    1-  534     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  535     	.line	103, "main.c"; 	if(sleepDelay >= 200 && !usbFlag)
     002B 21C8                      1-  536     	MOVIA	0xc8
                                    1-  537     	BANKSEL	_sleepDelay
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 04rr                      1-  538     	SUBAR	_sleepDelay,W
     002E 0803                      1-  539     	BTRSS	STATUS,0
     002F 3rrr                      1-  540     	LGOTO	_00127_DS_
                                    1-  541     	BANKSEL	_usbFlag
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 01rr                      1-  542     	MOVR	_usbFlag,W
     0032 0D03                      1-  543     	BTRSC	STATUS,2
                                    1-  544     	.line	104, "main.c"; 	gotoSleep();
     0033 2rrr                      1-  545     	LCALL	_gotoSleep
     0034                           1-  546     _00127_DS_:
                                    1-  547     	.line	106, "main.c"; 	ledCon();
     0034 2rrr                      1-  548     	LCALL	_ledCon
     0035 3rrr                      1-  549     	LGOTO	_00129_DS_
                                    1-  550     	.line	108, "main.c"; 	}
                                    1-  551     	RETURN	
     0036 0010                      3-   26 m1      ret
                                    1-  552     ; exit point of _main
                                    1-  554     ;***
                                    1-  555     ;  pBlock Stats: dbName = C
                                    1-  556     ;***
                                    1-  557     ;has an exit
                                    1-  558     ;; Starting pCode block
                                    1-  559     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  561     _F_wait_eoc:
                                    1-  562     ; 2 exit points
     0000                           1-  563     _00381_DS_:
                                    1-  564     	.line	443, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  565     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  566     	LGOTO	_00381_DS_
                                    1-  567     	.line	445, "main.c"; 	}
                                    1-  568     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  569     ; exit point of _F_wait_eoc
                                    1-  571     ;***
                                    1-  572     ;  pBlock Stats: dbName = C
                                    1-  573     ;***
                                    1-  574     ;has an exit
                                    1-  575     ;functions called:
                                    1-  576     ;   _F_wait_eoc
                                    1-  577     ;   _F_wait_eoc
                                    1-  578     ;6 compiler assigned registers:
                                    1-  579     ;   r0x1017
                                    1-  580     ;   r0x1018
                                    1-  581     ;   r0x1019
                                    1-  582     ;   r0x101A
                                    1-  583     ;   r0x101B
                                    1-  584     ;   r0x101C
                                    1-  585     ;; Starting pCode block
                                    1-  586     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1-  588     ;local variable name mapping:
     0000                           1-  591     _F_AIN2_Convert:
                                    1-  592     ; 2 exit points
                                    1-  593     	.line	425, "main.c"; 	void F_AIN2_Convert(char count)
                                    1-  594     	BANKSEL	r0x1017
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  595     	MOVAR	r0x1017
                                    1-  596     	.line	428, "main.c"; 	ADMD  = 0x90 | C_ADC_PA2;				// Select AIN0(PA0) pad as ADC input
     0002 2192                      1-  597     	MOVIA	0x92
     0003 00rr                      1-  598     	MOVAR	_ADMD
                                    1-  599     	.line	429, "main.c"; 	for(i=1;i<=count;i++)
     0004 2101                      1-  600     	MOVIA	0x01
                                    1-  601     	BANKSEL	r0x1018
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 00rr                      1-  602     	MOVAR	r0x1018
     0007                           1-  603     _00374_DS_:
                                    1-  604     	BANKSEL	r0x1018
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 01rr                      1-  605     	MOVR	r0x1018,W
                                    1-  606     	BANKSEL	r0x1017
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 04rr                      1-  607     	SUBAR	r0x1017,W
     000B 0803                      1-  608     	BTRSS	STATUS,0
     000C 3rrr                      1-  609     	LGOTO	_00376_DS_
                                    1-  610     	.line	431, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000D 1Brr                      1-  611     	BSR	_ADMDbits,6
                                    1-  612     	.line	432, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000E 2rrr                      1-  613     	LCALL	_F_wait_eoc
                                    1-  614     	.line	433, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     000F 210F                      1-  615     	MOVIA	0x0f
     0010 10rr                      1-  616     	ANDAR	_ADR,W
                                    1-  617     ;;3	MOVAR	r0x1019
                                    1-  618     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 03rr                      1-  619     	ADDAR	_R_AIN2_DATA_LB,F
                                    1-  620     	.line	434, "main.c"; 	R_AIN2_DATA    += ADD; 
     0013 01rr                      1-  621     	MOVR	_ADD,W
                                    1-  622     	BANKSEL	r0x1019
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1-  623     	MOVAR	r0x1019
                                    1-  624     ;;1	CLRR	r0x101A
                                    1-  625     ;;102	MOVR	r0x1019,W
                                    1-  626     ;;100	MOVAR	r0x101B
     0016 2100                      1-  627     	MOVIA	0x00
                                    1-  628     	BANKSEL	r0x101C
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  629     	MOVAR	r0x101C
                                    1-  630     ;;101	MOVR	r0x101B,W
                                    1-  631     	BANKSEL	r0x1019
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  632     	MOVR	r0x1019,W
                                    1-  633     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1-  634     	ADDAR	_R_AIN2_DATA,F
                                    1-  635     	BANKSEL	r0x101C
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  636     	MOVR	r0x101C,W
     001F 0C03                      1-  637     	BTRSC	STATUS,0
     0020 05rr                      1-  638     	INCR	r0x101C,W
     0021 0D03                      1-  639     	BTRSC	STATUS,2
     0022 3rrr                      1-  640     	LGOTO	_00001_DS_
                                    1-  641     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1-  642     	ADDAR	(_R_AIN2_DATA + 1),F
     0025                           1-  643     _00001_DS_:
                                    1-  644     	.line	429, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  645     	BANKSEL	r0x1018
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 05rr                      1-  646     	INCR	r0x1018,F
     0027 3rrr                      1-  647     	LGOTO	_00374_DS_
     0028                           1-  648     _00376_DS_:
                                    1-  649     	.line	436, "main.c"; 	}
                                    1-  650     	RETURN	
     0028 0010                      3-   26 m1      ret
                                    1-  651     ; exit point of _F_AIN2_Convert
                                    1-  653     ;***
                                    1-  654     ;  pBlock Stats: dbName = C
                                    1-  655     ;***
                                    1-  656     ;has an exit
                                    1-  657     ;functions called:
                                    1-  658     ;   _F_AIN2_Convert
                                    1-  659     ;   _F_AIN2_Convert
                                    1-  660     ;4 compiler assigned registers:
                                    1-  661     ;   r0x101D
                                    1-  662     ;   r0x101E
                                    1-  663     ;   r0x101F
                                    1-  664     ;   r0x1020
                                    1-  665     ;; Starting pCode block
                                    1-  666     .segment "code"; module=main, function=_isNotFan
     0000                           1-  668     _isNotFan:
                                    1-  669     ; 2 exit points
                                    1-  670     	.line	389, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;            
                                    1-  671     	BANKSEL	_R_AIN2_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  672     	CLRR	_R_AIN2_DATA_LB
                                    1-  673     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  674     	CLRR	_R_AIN2_DATA
     0004 02rr                      1-  675     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  676     	.line	390, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  677     	MOVIA	0x08
     0006 2rrr                      1-  678     	LCALL	_F_AIN2_Convert
                                    1-  679     	.line	391, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  680     	BANKSEL	_R_AIN2_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1-  681     	SWAPR	(_R_AIN2_DATA + 1),W
     0009 22F0                      1-  682     	ANDIA	0xf0
     000A 00rr                      1-  683     	MOVAR	(_R_AIN2_DATA + 1)
     000B 15rr                      1-  684     	SWAPR	_R_AIN2_DATA,W
     000C 00rr                      1-  685     	MOVAR	_R_AIN2_DATA
     000D 220F                      1-  686     	ANDIA	0x0f
     000E 11rr                      1-  687     	IORAR	(_R_AIN2_DATA + 1),F
     000F 12rr                      1-  688     	XORAR	_R_AIN2_DATA,F
                                    1-  689     	.line	392, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  690     	MOVIA	0xf0
                                    1-  691     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1-  692     	ANDAR	_R_AIN2_DATA_LB,F
                                    1-  693     	.line	393, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  694     	MOVR	_R_AIN2_DATA_LB,W
                                    1-  695     	BANKSEL	r0x101F
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1-  696     	MOVAR	r0x101F
                                    1-  697     ;;1	MOVAR	r0x101D
                                    1-  698     ;;1	CLRR	r0x101E
                                    1-  699     ;;99	MOVR	r0x101D,W
     0016 2100                      1-  700     	MOVIA	0x00
                                    1-  701     	BANKSEL	r0x1020
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  702     	MOVAR	r0x1020
                                    1-  703     	BANKSEL	r0x101F
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  704     	MOVR	r0x101F,W
                                    1-  705     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1-  706     	ADDAR	_R_AIN2_DATA,F
                                    1-  707     	BANKSEL	r0x1020
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  708     	MOVR	r0x1020,W
     001F 0C03                      1-  709     	BTRSC	STATUS,0
     0020 05rr                      1-  710     	INCR	r0x1020,W
     0021 0D03                      1-  711     	BTRSC	STATUS,2
     0022 3rrr                      1-  712     	LGOTO	_00002_DS_
                                    1-  713     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1-  714     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1-  715     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  716     _00002_DS_:
                                    1-  717     	.line	394, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  718     	BCR	STATUS,0
                                    1-  719     	BANKSEL	_R_AIN2_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1-  720     	RRR	(_R_AIN2_DATA + 1),F
     0028 13rr                      1-  721     	RRR	_R_AIN2_DATA,F
                                    1-  722     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  723     	BCR	STATUS,0
     002A 13rr                      1-  724     	RRR	(_R_AIN2_DATA + 1),F
     002B 13rr                      1-  725     	RRR	_R_AIN2_DATA,F
                                    1-  726     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  727     	BCR	STATUS,0
     002D 13rr                      1-  728     	RRR	(_R_AIN2_DATA + 1),F
     002E 13rr                      1-  729     	RRR	_R_AIN2_DATA,F
                                    1-  730     	.line	396, "main.c"; 	if(workStep && R_AIN2_DATA > 100)
                                    1-  731     	BANKSEL	_workStep
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 01rr                      1-  732     	MOVR	_workStep,W
     0031 0D03                      1-  733     	BTRSC	STATUS,2
     0032 3rrr                      1-  734     	LGOTO	_00322_DS_
                                    1-  735     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  736     ;;unsigned compare: left >= lit (0x65=101), size=2
     0033 2100                      1-  737     	MOVIA	0x00
                                    1-  738     	BANKSEL	_R_AIN2_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 04rr                      1-  739     	SUBAR	(_R_AIN2_DATA + 1),W
     0036 0903                      1-  740     	BTRSS	STATUS,2
     0037 3rrr                      1-  741     	LGOTO	_00362_DS_
     0038 2165                      1-  742     	MOVIA	0x65
     0039 04rr                      1-  743     	SUBAR	_R_AIN2_DATA,W
     003A                           1-  744     _00362_DS_:
     003A 0803                      1-  745     	BTRSS	STATUS,0
     003B 3rrr                      1-  746     	LGOTO	_00322_DS_
                                    1-  747     	.line	398, "main.c"; 	if(workStep == 1)
                                    1-  748     	BANKSEL	_workStep
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 01rr                      1-  749     	MOVR	_workStep,W
     003E 2401                      1-  750     	XORIA	0x01
     003F 0903                      1-  751     	BTRSS	STATUS,2
     0040 3rrr                      1-  752     	LGOTO	_00307_DS_
                                    1-  753     	.line	399, "main.c"; 	R_AIN2_DATA += 894;
     0041 217E                      1-  754     	MOVIA	0x7e
                                    1-  755     	BANKSEL	_R_AIN2_DATA
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 03rr                      1-  756     	ADDAR	_R_AIN2_DATA,F
     0044 2103                      1-  757     	MOVIA	0x03
     0045 0C03                      1-  758     	BTRSC	STATUS,0
     0046 2104                      1-  759     	MOVIA	0x04
     0047 03rr                      1-  760     	ADDAR	(_R_AIN2_DATA + 1),F
     0048 3rrr                      1-  761     	LGOTO	_00308_DS_
     0049                           1-  762     _00307_DS_:
                                    1-  763     	.line	400, "main.c"; 	else if(workStep == 2)
                                    1-  764     	BANKSEL	_workStep
     0049 rrrr                      3-   71 m1      .banksel ram_address
     004A 01rr                      1-  765     	MOVR	_workStep,W
     004B 2402                      1-  766     	XORIA	0x02
     004C 0903                      1-  767     	BTRSS	STATUS,2
     004D 3rrr                      1-  768     	LGOTO	_00308_DS_
                                    1-  769     	.line	401, "main.c"; 	R_AIN2_DATA += 530;
     004E 2112                      1-  770     	MOVIA	0x12
                                    1-  771     	BANKSEL	_R_AIN2_DATA
     004F rrrr                      3-   71 m1      .banksel ram_address
     0050 03rr                      1-  772     	ADDAR	_R_AIN2_DATA,F
     0051 2102                      1-  773     	MOVIA	0x02
     0052 0C03                      1-  774     	BTRSC	STATUS,0
     0053 2103                      1-  775     	MOVIA	0x03
     0054 03rr                      1-  776     	ADDAR	(_R_AIN2_DATA + 1),F
     0055                           1-  777     _00308_DS_:
                                    1-  778     	.line	402, "main.c"; 	if(++checkTime == 10 && tempDuty > 0)
                                    1-  779     	BANKSEL	_checkTime
     0055 rrrr                      3-   71 m1      .banksel ram_address
     0056 05rr                      1-  780     	INCR	_checkTime,F
     0057 01rr                      1-  781     	MOVR	_checkTime,W
     0058 240A                      1-  782     	XORIA	0x0a
     0059 0903                      1-  783     	BTRSS	STATUS,2
     005A 3rrr                      1-  784     	LGOTO	_00315_DS_
                                    1-  785     	BANKSEL	_tempDuty
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 01rr                      1-  786     	MOVR	_tempDuty,W
     005D 0D03                      1-  787     	BTRSC	STATUS,2
     005E 3rrr                      1-  788     	LGOTO	_00315_DS_
                                    1-  789     	.line	404, "main.c"; 	checkTime = 0;
                                    1-  790     	BANKSEL	_checkTime
     005F rrrr                      3-   71 m1      .banksel ram_address
     0060 02rr                      1-  791     	CLRR	_checkTime
                                    1-  792     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  793     ;;unsigned compare: left >= lit (0x867=2151), size=2
                                    1-  794     	.line	405, "main.c"; 	if(R_AIN2_DATA > 2150)
     0061 2108                      1-  795     	MOVIA	0x08
                                    1-  796     	BANKSEL	_R_AIN2_DATA
     0062 rrrr                      3-   71 m1      .banksel ram_address
     0063 04rr                      1-  797     	SUBAR	(_R_AIN2_DATA + 1),W
     0064 0903                      1-  798     	BTRSS	STATUS,2
     0065 3rrr                      1-  799     	LGOTO	_00363_DS_
     0066 2167                      1-  800     	MOVIA	0x67
     0067 04rr                      1-  801     	SUBAR	_R_AIN2_DATA,W
     0068                           1-  802     _00363_DS_:
     0068 0803                      1-  803     	BTRSS	STATUS,0
     0069 3rrr                      1-  804     	LGOTO	_00312_DS_
                                    1-  805     	.line	406, "main.c"; 	tempDuty -= 1;
                                    1-  806     	BANKSEL	_tempDuty
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 06rr                      1-  807     	DECR	_tempDuty,F
     006C 3rrr                      1-  808     	LGOTO	_00315_DS_
                                    1-  809     ;;unsigned compare: left < lit (0x708=1800), size=2
     006D                           1-  810     _00312_DS_:
                                    1-  811     	.line	407, "main.c"; 	else if(R_AIN2_DATA < 1800)
     006D 2107                      1-  812     	MOVIA	0x07
                                    1-  813     	BANKSEL	_R_AIN2_DATA
     006E rrrr                      3-   71 m1      .banksel ram_address
     006F 04rr                      1-  814     	SUBAR	(_R_AIN2_DATA + 1),W
     0070 0903                      1-  815     	BTRSS	STATUS,2
     0071 3rrr                      1-  816     	LGOTO	_00364_DS_
     0072 2108                      1-  817     	MOVIA	0x08
     0073 04rr                      1-  818     	SUBAR	_R_AIN2_DATA,W
     0074                           1-  819     _00364_DS_:
     0074 0C03                      1-  820     	BTRSC	STATUS,0
     0075 3rrr                      1-  821     	LGOTO	_00315_DS_
                                    1-  822     	.line	408, "main.c"; 	tempDuty += 1;
                                    1-  823     	BANKSEL	_tempDuty
     0076 rrrr                      3-   71 m1      .banksel ram_address
     0077 05rr                      1-  824     	INCR	_tempDuty,F
                                    1-  825     ;;unsigned compare: left < lit (0x1=1), size=1
     0078                           1-  826     _00315_DS_:
                                    1-  827     	.line	410, "main.c"; 	if(tempDuty < 1)
     0078 2101                      1-  828     	MOVIA	0x01
                                    1-  829     	BANKSEL	_tempDuty
     0079 rrrr                      3-   71 m1      .banksel ram_address
     007A 04rr                      1-  830     	SUBAR	_tempDuty,W
     007B 0C03                      1-  831     	BTRSC	STATUS,0
     007C 3rrr                      1-  832     	LGOTO	_00318_DS_
                                    1-  833     	.line	411, "main.c"; 	tempDuty = 1;
     007D 2101                      1-  834     	MOVIA	0x01
     007E 00rr                      1-  835     	MOVAR	_tempDuty
                                    1-  836     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  837     ;;unsigned compare: left >= lit (0x14=20), size=1
     007F                           1-  838     _00318_DS_:
                                    1-  839     	.line	412, "main.c"; 	if(tempDuty > 0x13)
     007F 2114                      1-  840     	MOVIA	0x14
                                    1-  841     	BANKSEL	_tempDuty
     0080 rrrr                      3-   71 m1      .banksel ram_address
     0081 04rr                      1-  842     	SUBAR	_tempDuty,W
     0082 0803                      1-  843     	BTRSS	STATUS,0
     0083 3rrr                      1-  844     	LGOTO	_00322_DS_
                                    1-  845     	.line	413, "main.c"; 	tempDuty = 0x13;
     0084 2113                      1-  846     	MOVIA	0x13
     0085 00rr                      1-  847     	MOVAR	_tempDuty
                                    1-  848     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  849     ;;unsigned compare: left >= lit (0xA8D=2701), size=2
     0086                           1-  850     _00322_DS_:
                                    1-  851     	.line	416, "main.c"; 	if(R_AIN2_DATA > 2700)				//高于1.3V，则为空载 (1.3/2) * 4096
     0086 210A                      1-  852     	MOVIA	0x0a
                                    1-  853     	BANKSEL	_R_AIN2_DATA
     0087 rrrr                      3-   71 m1      .banksel ram_address
     0088 04rr                      1-  854     	SUBAR	(_R_AIN2_DATA + 1),W
     0089 0903                      1-  855     	BTRSS	STATUS,2
     008A 3rrr                      1-  856     	LGOTO	_00367_DS_
     008B 218D                      1-  857     	MOVIA	0x8d
     008C 04rr                      1-  858     	SUBAR	_R_AIN2_DATA,W
     008D                           1-  859     _00367_DS_:
     008D 0803                      1-  860     	BTRSS	STATUS,0
     008E 3rrr                      1-  861     	LGOTO	_00325_DS_
                                    1-  862     	.line	417, "main.c"; 	return 1;
     008F 2101                      1-  863     	MOVIA	0x01
     0090 3rrr                      1-  864     	LGOTO	_00327_DS_
     0091                           1-  865     _00325_DS_:
                                    1-  866     	.line	419, "main.c"; 	return 0;
     0091 2100                      1-  867     	MOVIA	0x00
     0092                           1-  868     _00327_DS_:
                                    1-  869     	.line	420, "main.c"; 	}
                                    1-  870     	RETURN	
     0092 0010                      3-   26 m1      ret
                                    1-  871     ; exit point of _isNotFan
                                    1-  873     ;***
                                    1-  874     ;  pBlock Stats: dbName = C
                                    1-  875     ;***
                                    1-  876     ;has an exit
                                    1-  877     ;functions called:
                                    1-  878     ;   _delay
                                    1-  879     ;   _delay
                                    1-  880     ;1 compiler assigned register :
                                    1-  881     ;   STK00
                                    1-  882     ;; Starting pCode block
                                    1-  883     .segment "code"; module=main, function=_initAD
     0000                           1-  885     _initAD:
                                    1-  886     ; 2 exit points
                                    1-  887     	.line	365, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA2 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2182                      1-  888     	MOVIA	0x82
     0001 00rr                      1-  889     	MOVAR	_ADMD
                                    1-  890     	.line	368, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 02rr                      1-  891     	CLRR	_ADVREFH
                                    1-  892     	.line	375, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1-  893     	MOVIA	0x10
     0004 00rr                      1-  894     	MOVAR	_ADR
                                    1-  895     	.line	377, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1-  896     	MOVIA	0x03
     0006 00rr                      1-  897     	MOVAR	_ADCR
                                    1-  898     	.line	379, "main.c"; 	PACON = C_PA2_AIN2;						// Set AIN0(PA0) as pure ADC input for reduce power consumption (SFR "PACON")
     0007 2104                      1-  899     	MOVIA	0x04
     0008 00rr                      1-  900     	MOVAR	_PACON
                                    1-  901     	.line	380, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0009 1Arr                      1-  902     	BSR	_ADMDbits,4
                                    1-  903     	.line	381, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     000A 2164                      1-  904     	MOVIA	0x64
     000B 00rr                      1-  905     	MOVAR	STK00
     000C 2100                      1-  906     	MOVIA	0x00
     000D 2rrr                      1-  907     	LCALL	_delay
                                    1-  908     	.line	384, "main.c"; 	}
                                    1-  909     	RETURN	
     000E 0010                      3-   26 m1      ret
                                    1-  910     ; exit point of _initAD
                                    1-  912     ;***
                                    1-  913     ;  pBlock Stats: dbName = C
                                    1-  914     ;***
                                    1-  915     ;has an exit
                                    1-  916     ;5 compiler assigned registers:
                                    1-  917     ;   r0x1021
                                    1-  918     ;   STK00
                                    1-  919     ;   r0x1022
                                    1-  920     ;   r0x1023
                                    1-  921     ;   r0x1024
                                    1-  922     ;; Starting pCode block
                                    1-  923     .segment "code"; module=main, function=_delay
                                    1-  925     ;local variable name mapping:
     0000                           1-  930     _delay:
                                    1-  931     ; 2 exit points
                                    1-  932     	.line	357, "main.c"; 	void delay(uint16_t time)
                                    1-  933     	BANKSEL	r0x1021
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  934     	MOVAR	r0x1021
     0002 01rr                      1-  935     	MOVR	STK00,W
                                    1-  936     	BANKSEL	r0x1022
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  937     	MOVAR	r0x1022
                                    1-  938     	.line	359, "main.c"; 	for(uint16_t i=0;i<time;i++);
                                    1-  939     	BANKSEL	r0x1023
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  940     	CLRR	r0x1023
                                    1-  941     	BANKSEL	r0x1024
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  942     	CLRR	r0x1024
     0009                           1-  943     _00284_DS_:
                                    1-  944     	BANKSEL	r0x1021
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  945     	MOVR	r0x1021,W
                                    1-  946     	BANKSEL	r0x1024
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  947     	SUBAR	r0x1024,W
     000D 0903                      1-  948     	BTRSS	STATUS,2
     000E 3rrr                      1-  949     	LGOTO	_00295_DS_
                                    1-  950     	BANKSEL	r0x1022
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  951     	MOVR	r0x1022,W
                                    1-  952     	BANKSEL	r0x1023
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1-  953     	SUBAR	r0x1023,W
     0013                           1-  954     _00295_DS_:
     0013 0C03                      1-  955     	BTRSC	STATUS,0
     0014 3rrr                      1-  956     	LGOTO	_00286_DS_
                                    1-  957     	BANKSEL	r0x1023
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  958     	INCR	r0x1023,F
     0017 0903                      1-  959     	BTRSS	STATUS,2
     0018 3rrr                      1-  960     	LGOTO	_00003_DS_
                                    1-  961     	BANKSEL	r0x1024
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1-  962     	INCR	r0x1024,F
     001B                           1-  963     _00003_DS_:
     001B 3rrr                      1-  964     	LGOTO	_00284_DS_
     001C                           1-  965     _00286_DS_:
                                    1-  966     	.line	360, "main.c"; 	}
                                    1-  967     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  968     ; exit point of _delay
                                    1-  970     ;***
                                    1-  971     ;  pBlock Stats: dbName = C
                                    1-  972     ;***
                                    1-  973     ;has an exit
                                    1-  974     ;; Starting pCode block
                                    1-  975     .segment "code"; module=main, function=_processKey
     0000                           1-  977     _processKey:
                                    1-  978     ; 2 exit points
                                    1-  979     	.line	325, "main.c"; 	workStep += 1;
                                    1-  980     	BANKSEL	_workStep
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 05rr                      1-  981     	INCR	_workStep,F
                                    1-  982     ;;unsigned compare: left < lit (0x4=4), size=1
                                    1-  983     	.line	326, "main.c"; 	if(workStep >= 4)
     0002 2104                      1-  984     	MOVIA	0x04
     0003 04rr                      1-  985     	SUBAR	_workStep,W
     0004 0C03                      1-  986     	BTRSC	STATUS,0
                                    1-  987     	.line	327, "main.c"; 	workStep = 0;
     0005 02rr                      1-  988     	CLRR	_workStep
                                    1-  989     	.line	328, "main.c"; 	switch(workStep)
     0006 2104                      1-  990     	MOVIA	0x04
     0007 04rr                      1-  991     	SUBAR	_workStep,W
     0008 0C03                      1-  992     	BTRSC	STATUS,0
     0009 3rrr                      1-  993     	LGOTO	_00260_DS_
     000A 21rr                      1-  994     	MOVIA	((_00277_DS_ >> 8) & 0xff)
     000B 008A                      1-  995     	MOVAR	PCHBUF
     000C 01rr                      1-  996     	MOVR	_workStep,W
     000D 25rr                      1-  997     	ADDIA	_00277_DS_
     000E 0C03                      1-  998     	BTRSC	STATUS,0
     000F 058A                      1-  999     	INCR	PCHBUF,F
     0010 0082                      1- 1000     	MOVAR	PCL
     0011                           1- 1001     _00277_DS_:
     0011 3rrr                      1- 1002     	LGOTO	_00256_DS_
     0012 3rrr                      1- 1003     	LGOTO	_00257_DS_
     0013 3rrr                      1- 1004     	LGOTO	_00258_DS_
     0014 3rrr                      1- 1005     	LGOTO	_00259_DS_
     0015                           1- 1006     _00256_DS_:
                                    1- 1007     	.line	331, "main.c"; 	tempDuty = 0;
                                    1- 1008     	BANKSEL	_tempDuty
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 02rr                      1- 1009     	CLRR	_tempDuty
                                    1- 1010     	.line	332, "main.c"; 	count15S = 0;	//补充电
                                    1- 1011     	BANKSEL	_count15S
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 02rr                      1- 1012     	CLRR	_count15S
     0019 02rr                      1- 1013     	CLRR	(_count15S + 1)
                                    1- 1014     	.line	333, "main.c"; 	break;
     001A 3rrr                      1- 1015     	LGOTO	_00260_DS_
     001B                           1- 1016     _00257_DS_:
                                    1- 1017     	.line	335, "main.c"; 	tempDuty = 0x09;
     001B 2109                      1- 1018     	MOVIA	0x09
                                    1- 1019     	BANKSEL	_tempDuty
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1- 1020     	MOVAR	_tempDuty
                                    1- 1021     	.line	336, "main.c"; 	break;
     001E 3rrr                      1- 1022     	LGOTO	_00260_DS_
     001F                           1- 1023     _00258_DS_:
                                    1- 1024     	.line	338, "main.c"; 	tempDuty = 0x0D;
     001F 210D                      1- 1025     	MOVIA	0x0d
                                    1- 1026     	BANKSEL	_tempDuty
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1027     	MOVAR	_tempDuty
                                    1- 1028     	.line	340, "main.c"; 	break;
     0022 3rrr                      1- 1029     	LGOTO	_00260_DS_
     0023                           1- 1030     _00259_DS_:
                                    1- 1031     	.line	342, "main.c"; 	tempDuty = 0x12;
     0023 2112                      1- 1032     	MOVIA	0x12
                                    1- 1033     	BANKSEL	_tempDuty
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 00rr                      1- 1034     	MOVAR	_tempDuty
     0026                           1- 1035     _00260_DS_:
                                    1- 1036     	.line	347, "main.c"; 	if(workStep)
                                    1- 1037     	BANKSEL	_workStep
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1038     	MOVR	_workStep,W
     0028 0D03                      1- 1039     	BTRSC	STATUS,2
     0029 3rrr                      1- 1040     	LGOTO	_00262_DS_
                                    1- 1041     	.line	348, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;
     002A 2183                      1- 1042     	MOVIA	0x83
     002B 00rr                      1- 1043     	SFUN	_T1CR1
     002C 3rrr                      1- 1044     	LGOTO	_00264_DS_
     002D                           1- 1045     _00262_DS_:
                                    1- 1046     	.line	350, "main.c"; 	T1CR1 = C_TMR1_Dis;
     002D 0200                      1- 1047     	CLRA	
     002E 00rr                      1- 1048     	SFUN	_T1CR1
     002F                           1- 1049     _00264_DS_:
                                    1- 1050     	.line	352, "main.c"; 	}
                                    1- 1051     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1- 1052     ; exit point of _processKey
                                    1- 1054     ;***
                                    1- 1055     ;  pBlock Stats: dbName = C
                                    1- 1056     ;***
                                    1- 1057     ;has an exit
                                    1- 1058     ;; Starting pCode block
                                    1- 1059     .segment "code"; module=main, function=_checkUsbInput
     0000                           1- 1061     _checkUsbInput:
                                    1- 1062     ; 2 exit points
                                    1- 1063     	.line	270, "main.c"; 	if(PORTA & 0x20)
     0000 0Arr                      1- 1064     	BTRSS	_PORTA,5
     0001 3rrr                      1- 1065     	LGOTO	_00216_DS_
                                    1- 1066     	.line	271, "main.c"; 	usbFlag = 1;
     0002 2101                      1- 1067     	MOVIA	0x01
                                    1- 1068     	BANKSEL	_usbFlag
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 1069     	MOVAR	_usbFlag
     0005 3rrr                      1- 1070     	LGOTO	_00217_DS_
     0006                           1- 1071     _00216_DS_:
                                    1- 1072     	.line	273, "main.c"; 	usbFlag = 0;
                                    1- 1073     	BANKSEL	_usbFlag
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 02rr                      1- 1074     	CLRR	_usbFlag
     0008                           1- 1075     _00217_DS_:
                                    1- 1076     	.line	276, "main.c"; 	UPDATE_REG(PORTA);
     0008 01rr                      1- 1077     	MOVR	_PORTA,F
                                    1- 1078     	.line	277, "main.c"; 	if(PORTA & 0x40)
     0009 0Brr                      1- 1079     	BTRSS	_PORTA,6
     000A 3rrr                      1- 1080     	LGOTO	_00219_DS_
                                    1- 1081     	.line	279, "main.c"; 	batFullFlag = 1;
     000B 2101                      1- 1082     	MOVIA	0x01
                                    1- 1083     	BANKSEL	_batFullFlag
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1- 1084     	MOVAR	_batFullFlag
     000E 3rrr                      1- 1085     	LGOTO	_00220_DS_
     000F                           1- 1086     _00219_DS_:
                                    1- 1087     	.line	283, "main.c"; 	batFullFlag = 0;
                                    1- 1088     	BANKSEL	_batFullFlag
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 02rr                      1- 1089     	CLRR	_batFullFlag
     0011                           1- 1090     _00220_DS_:
                                    1- 1091     	.line	285, "main.c"; 	if(usbFlag)
                                    1- 1092     	BANKSEL	_usbFlag
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1093     	MOVR	_usbFlag,W
     0013 0D03                      1- 1094     	BTRSC	STATUS,2
     0014 3rrr                      1- 1095     	LGOTO	_00229_DS_
                                    1- 1096     	.line	287, "main.c"; 	if(fanStatus == 1 || count15S > 1500)
                                    1- 1097     	BANKSEL	_fanStatus
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1- 1098     	MOVR	_fanStatus,W
     0017 2401                      1- 1099     	XORIA	0x01
     0018 0D03                      1- 1100     	BTRSC	STATUS,2
     0019 3rrr                      1- 1101     	LGOTO	_00224_DS_
     001A 2105                      1- 1102     	MOVIA	0x05
                                    1- 1103     	BANKSEL	_count15S
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 04rr                      1- 1104     	SUBAR	(_count15S + 1),W
     001D 0903                      1- 1105     	BTRSS	STATUS,2
     001E 3rrr                      1- 1106     	LGOTO	_00249_DS_
     001F 21DD                      1- 1107     	MOVIA	0xdd
     0020 04rr                      1- 1108     	SUBAR	_count15S,W
     0021                           1- 1109     _00249_DS_:
     0021 0803                      1- 1110     	BTRSS	STATUS,0
     0022 3rrr                      1- 1111     	LGOTO	_00225_DS_
     0023                           1- 1112     _00224_DS_:
                                    1- 1113     	.line	289, "main.c"; 	PWM2DUTY = 0;
     0023 0200                      1- 1114     	CLRA	
     0024 00rr                      1- 1115     	SFUN	_PWM2DUTY
                                    1- 1116     	.line	290, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0025 00rr                      1- 1117     	SFUN	_T2CR1
                                    1- 1118     	.line	291, "main.c"; 	setbit(PORTB, 2);
     0026 19rr                      1- 1119     	BSR	_PORTB,2
     0027 3rrr                      1- 1120     	LGOTO	_00231_DS_
     0028                           1- 1121     _00225_DS_:
                                    1- 1122     	.line	295, "main.c"; 	if(batFullFlag)
                                    1- 1123     	BANKSEL	_batFullFlag
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 01rr                      1- 1124     	MOVR	_batFullFlag,W
     002A 0D03                      1- 1125     	BTRSC	STATUS,2
     002B 3rrr                      1- 1126     	LGOTO	_00222_DS_
                                    1- 1127     	.line	297, "main.c"; 	PWM2DUTY = 0;
     002C 0200                      1- 1128     	CLRA	
     002D 00rr                      1- 1129     	SFUN	_PWM2DUTY
                                    1- 1130     	.line	298, "main.c"; 	T2CR1 = C_TMR2_Dis;
     002E 00rr                      1- 1131     	SFUN	_T2CR1
                                    1- 1132     	.line	299, "main.c"; 	setbit(PORTB, 2);
     002F 19rr                      1- 1133     	BSR	_PORTB,2
     0030 3rrr                      1- 1134     	LGOTO	_00231_DS_
     0031                           1- 1135     _00222_DS_:
                                    1- 1136     	.line	304, "main.c"; 	PWM2DUTY = 0x10;
     0031 2110                      1- 1137     	MOVIA	0x10
     0032 00rr                      1- 1138     	SFUN	_PWM2DUTY
                                    1- 1139     	.line	305, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;
     0033 2183                      1- 1140     	MOVIA	0x83
     0034 00rr                      1- 1141     	SFUN	_T2CR1
                                    1- 1142     	.line	306, "main.c"; 	count15S = 0;
                                    1- 1143     	BANKSEL	_count15S
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 02rr                      1- 1144     	CLRR	_count15S
     0037 02rr                      1- 1145     	CLRR	(_count15S + 1)
     0038 3rrr                      1- 1146     	LGOTO	_00231_DS_
     0039                           1- 1147     _00229_DS_:
                                    1- 1148     	.line	314, "main.c"; 	PWM2DUTY = 0;
     0039 0200                      1- 1149     	CLRA	
     003A 00rr                      1- 1150     	SFUN	_PWM2DUTY
                                    1- 1151     	.line	315, "main.c"; 	T2CR1 = C_TMR2_Dis;
     003B 00rr                      1- 1152     	SFUN	_T2CR1
                                    1- 1153     	.line	316, "main.c"; 	resetbit(PORTB, 2);
     003C 1Drr                      1- 1154     	BCR	_PORTB,2
     003D                           1- 1155     _00231_DS_:
                                    1- 1156     	.line	319, "main.c"; 	}
                                    1- 1157     	RETURN	
     003D 0010                      3-   26 m1      ret
                                    1- 1158     ; exit point of _checkUsbInput
                                    1- 1160     ;***
                                    1- 1161     ;  pBlock Stats: dbName = C
                                    1- 1162     ;***
                                    1- 1163     ;has an exit
                                    1- 1164     ;functions called:
                                    1- 1165     ;   _delay
                                    1- 1166     ;   _isNotFan
                                    1- 1167     ;   _pwm1Stop
                                    1- 1168     ;   _delay
                                    1- 1169     ;   _isNotFan
                                    1- 1170     ;   _pwm1Stop
                                    1- 1171     ;2 compiler assigned registers:
                                    1- 1172     ;   STK00
                                    1- 1173     ;   r0x1025
                                    1- 1174     ;; Starting pCode block
                                    1- 1175     .segment "code"; module=main, function=_fanUseable
     0000                           1- 1177     _fanUseable:
                                    1- 1178     ; 2 exit points
                                    1- 1179     	.line	225, "main.c"; 	PORTA |= 0x02;	//打开IO_FAN
     0000 18rr                      1- 1180     	BSR	_PORTA,1
                                    1- 1181     	.line	226, "main.c"; 	count200ms++;
                                    1- 1182     	BANKSEL	_count200ms
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 05rr                      1- 1183     	INCR	_count200ms,F
                                    1- 1184     ;;unsigned compare: left < lit (0x14=20), size=1
                                    1- 1185     	.line	227, "main.c"; 	if(count200ms >= 20)
     0003 2114                      1- 1186     	MOVIA	0x14
     0004 04rr                      1- 1187     	SUBAR	_count200ms,W
     0005 0803                      1- 1188     	BTRSS	STATUS,0
     0006 3rrr                      1- 1189     	LGOTO	_00192_DS_
                                    1- 1190     	.line	229, "main.c"; 	if(duty1 != tempDuty)
                                    1- 1191     	BANKSEL	_tempDuty
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 01rr                      1- 1192     	MOVR	_tempDuty,W
                                    1- 1193     	BANKSEL	_duty1
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 12rr                      1- 1194     	XORAR	_duty1,W
     000B 0D03                      1- 1195     	BTRSC	STATUS,2
     000C 3rrr                      1- 1196     	LGOTO	_00182_DS_
                                    1- 1197     	.line	231, "main.c"; 	count200ms = 0;
                                    1- 1198     	BANKSEL	_count200ms
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 02rr                      1- 1199     	CLRR	_count200ms
                                    1- 1200     	.line	232, "main.c"; 	duty1 = tempDuty;
                                    1- 1201     	BANKSEL	_tempDuty
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 1202     	MOVR	_tempDuty,W
                                    1- 1203     	BANKSEL	_duty1
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 00rr                      1- 1204     	MOVAR	_duty1
                                    1- 1205     	.line	233, "main.c"; 	PWM1DUTY = duty1;
     0013 00rr                      1- 1206     	SFUN	_PWM1DUTY
     0014                           1- 1207     _00182_DS_:
                                    1- 1208     	.line	239, "main.c"; 	delay(100);
     0014 2164                      1- 1209     	MOVIA	0x64
     0015 00rr                      1- 1210     	MOVAR	STK00
     0016 2100                      1- 1211     	MOVIA	0x00
     0017 2rrr                      1- 1212     	LCALL	_delay
                                    1- 1213     	.line	241, "main.c"; 	if(isNotFan())
     0018 2rrr                      1- 1214     	LCALL	_isNotFan
                                    1- 1215     	BANKSEL	r0x1025
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1- 1216     	MOVAR	r0x1025
     001B 01rr                      1- 1217     	MOVR	r0x1025,W
     001C 0D03                      1- 1218     	BTRSC	STATUS,2
     001D 3rrr                      1- 1219     	LGOTO	_00188_DS_
                                    1- 1220     	.line	243, "main.c"; 	if(++nullcount == 100)	//检测500ms
                                    1- 1221     	BANKSEL	_nullcount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 05rr                      1- 1222     	INCR	_nullcount,F
     0020 01rr                      1- 1223     	MOVR	_nullcount,W
     0021 2464                      1- 1224     	XORIA	0x64
     0022 0903                      1- 1225     	BTRSS	STATUS,2
     0023 3rrr                      1- 1226     	LGOTO	_00192_DS_
                                    1- 1227     	.line	245, "main.c"; 	nullcount = 0;
     0024 02rr                      1- 1228     	CLRR	_nullcount
                                    1- 1229     	.line	246, "main.c"; 	count200ms = 0;
                                    1- 1230     	BANKSEL	_count200ms
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 02rr                      1- 1231     	CLRR	_count200ms
                                    1- 1232     	.line	247, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0027 0200                      1- 1233     	CLRA	
     0028 00rr                      1- 1234     	SFUN	_T1CR1
                                    1- 1235     	.line	248, "main.c"; 	PWM1DUTY = 0;
     0029 00rr                      1- 1236     	SFUN	_PWM1DUTY
                                    1- 1237     	.line	249, "main.c"; 	pwm1Stop();
     002A 2rrr                      1- 1238     	LCALL	_pwm1Stop
                                    1- 1239     	.line	250, "main.c"; 	fanStatus = 2;
     002B 2102                      1- 1240     	MOVIA	0x02
                                    1- 1241     	BANKSEL	_fanStatus
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 00rr                      1- 1242     	MOVAR	_fanStatus
                                    1- 1243     	.line	251, "main.c"; 	PORTA &= ~0x02;
     002E 1Crr                      1- 1244     	BCR	_PORTA,1
                                    1- 1245     	.line	252, "main.c"; 	workStep = 0;
                                    1- 1246     	BANKSEL	_workStep
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 02rr                      1- 1247     	CLRR	_workStep
     0031 3rrr                      1- 1248     	LGOTO	_00192_DS_
     0032                           1- 1249     _00188_DS_:
                                    1- 1250     	.line	258, "main.c"; 	nullcount = 0;
                                    1- 1251     	BANKSEL	_nullcount
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 02rr                      1- 1252     	CLRR	_nullcount
                                    1- 1253     	.line	259, "main.c"; 	if(T1CR1 == C_TMR1_Dis)
     0034 00rr                      1- 1254     	SFUNR	_T1CR1
                                    1- 1255     	BANKSEL	r0x1025
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 00rr                      1- 1256     	MOVAR	r0x1025
     0037 01rr                      1- 1257     	MOVR	r0x1025,W
     0038 0903                      1- 1258     	BTRSS	STATUS,2
     0039 3rrr                      1- 1259     	LGOTO	_00192_DS_
                                    1- 1260     	.line	260, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;
     003A 2183                      1- 1261     	MOVIA	0x83
     003B 00rr                      1- 1262     	SFUN	_T1CR1
     003C                           1- 1263     _00192_DS_:
                                    1- 1264     	.line	265, "main.c"; 	}
                                    1- 1265     	RETURN	
     003C 0010                      3-   26 m1      ret
                                    1- 1266     ; exit point of _fanUseable
                                    1- 1268     ;***
                                    1- 1269     ;  pBlock Stats: dbName = C
                                    1- 1270     ;***
                                    1- 1271     ;has an exit
                                    1- 1272     ;; Starting pCode block
                                    1- 1273     .segment "code"; module=main, function=_ledCon
     0000                           1- 1275     _ledCon:
                                    1- 1276     ; 2 exit points
                                    1- 1277     	.line	185, "main.c"; 	if(!usbFlag)
                                    1- 1278     	BANKSEL	_usbFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1279     	MOVR	_usbFlag,W
     0002 0903                      1- 1280     	BTRSS	STATUS,2
     0003 3rrr                      1- 1281     	LGOTO	_00152_DS_
                                    1- 1282     	.line	187, "main.c"; 	PORTB &= 0xFE;
     0004 1Crr                      1- 1283     	BCR	_PORTB,0
                                    1- 1284     	.line	188, "main.c"; 	count15S = 0;
                                    1- 1285     	BANKSEL	_count15S
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1- 1286     	CLRR	_count15S
     0007 02rr                      1- 1287     	CLRR	(_count15S + 1)
     0008 3rrr                      1- 1288     	LGOTO	_00153_DS_
     0009                           1- 1289     _00152_DS_:
                                    1- 1290     	.line	192, "main.c"; 	count15S++;
                                    1- 1291     	BANKSEL	_count15S
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 05rr                      1- 1292     	INCR	_count15S,F
     000B 0D03                      1- 1293     	BTRSC	STATUS,2
     000C 05rr                      1- 1294     	INCR	(_count15S + 1),F
                                    1- 1295     ;;unsigned compare: left < lit (0x5DC=1500), size=2
                                    1- 1296     	.line	193, "main.c"; 	if(count15S >= 1500)
     000D 2105                      1- 1297     	MOVIA	0x05
     000E 04rr                      1- 1298     	SUBAR	(_count15S + 1),W
     000F 0903                      1- 1299     	BTRSS	STATUS,2
     0010 3rrr                      1- 1300     	LGOTO	_00176_DS_
     0011 21DC                      1- 1301     	MOVIA	0xdc
     0012 04rr                      1- 1302     	SUBAR	_count15S,W
     0013                           1- 1303     _00176_DS_:
     0013 0803                      1- 1304     	BTRSS	STATUS,0
     0014 3rrr                      1- 1305     	LGOTO	_00149_DS_
                                    1- 1306     	.line	195, "main.c"; 	count15S = 1500;
     0015 21DC                      1- 1307     	MOVIA	0xdc
                                    1- 1308     	BANKSEL	_count15S
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 00rr                      1- 1309     	MOVAR	_count15S
     0018 2105                      1- 1310     	MOVIA	0x05
     0019 00rr                      1- 1311     	MOVAR	(_count15S + 1)
                                    1- 1312     	.line	197, "main.c"; 	PORTB |= 1;
     001A 18rr                      1- 1313     	BSR	_PORTB,0
     001B 3rrr                      1- 1314     	LGOTO	_00153_DS_
     001C                           1- 1315     _00149_DS_:
                                    1- 1316     	.line	202, "main.c"; 	count500ms++;
                                    1- 1317     	BANKSEL	_count500ms
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 05rr                      1- 1318     	INCR	_count500ms,F
                                    1- 1319     	.line	203, "main.c"; 	if(count500ms == 100)
     001E 01rr                      1- 1320     	MOVR	_count500ms,W
     001F 2464                      1- 1321     	XORIA	0x64
     0020 0903                      1- 1322     	BTRSS	STATUS,2
     0021 3rrr                      1- 1323     	LGOTO	_00153_DS_
                                    1- 1324     	.line	205, "main.c"; 	count500ms = 0;
     0022 02rr                      1- 1325     	CLRR	_count500ms
                                    1- 1326     	.line	206, "main.c"; 	reversebit(PORTB,0);
     0023 2101                      1- 1327     	MOVIA	0x01
     0024 12rr                      1- 1328     	XORAR	_PORTB,F
     0025                           1- 1329     _00153_DS_:
                                    1- 1330     	.line	210, "main.c"; 	if(!batFullFlag)
                                    1- 1331     	BANKSEL	_batFullFlag
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1- 1332     	MOVR	_batFullFlag,W
     0027 0903                      1- 1333     	BTRSS	STATUS,2
     0028 3rrr                      1- 1334     	LGOTO	_00155_DS_
                                    1- 1335     	.line	212, "main.c"; 	count15S = 0;
                                    1- 1336     	BANKSEL	_count15S
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 02rr                      1- 1337     	CLRR	_count15S
     002B 02rr                      1- 1338     	CLRR	(_count15S + 1)
     002C                           1- 1339     _00155_DS_:
                                    1- 1340     	.line	216, "main.c"; 	if(workStep)
                                    1- 1341     	BANKSEL	_workStep
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1- 1342     	MOVR	_workStep,W
     002E 0D03                      1- 1343     	BTRSC	STATUS,2
     002F 3rrr                      1- 1344     	LGOTO	_00157_DS_
                                    1- 1345     	.line	217, "main.c"; 	PORTA |= 1;
     0030 18rr                      1- 1346     	BSR	_PORTA,0
     0031 3rrr                      1- 1347     	LGOTO	_00159_DS_
     0032                           1- 1348     _00157_DS_:
                                    1- 1349     	.line	219, "main.c"; 	PORTA &= 0xFE;
     0032 1Crr                      1- 1350     	BCR	_PORTA,0
     0033                           1- 1351     _00159_DS_:
                                    1- 1352     	.line	220, "main.c"; 	}
                                    1- 1353     	RETURN	
     0033 0010                      3-   26 m1      ret
                                    1- 1354     ; exit point of _ledCon
                                    1- 1356     ;***
                                    1- 1357     ;  pBlock Stats: dbName = C
                                    1- 1358     ;***
                                    1- 1359     ;has an exit
                                    1- 1360     ;; Starting pCode block
                                    1- 1361     .segment "code"; module=main, function=_pwm1Stop
     0000                           1- 1363     _pwm1Stop:
                                    1- 1364     ; 2 exit points
                                    1- 1365     	.line	176, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1- 1366     	CLRA	
     0001 00rr                      1- 1367     	SFUN	_T1CR1
                                    1- 1368     	.line	177, "main.c"; 	PORTB &= 0x05; 	//关闭
     0002 2105                      1- 1369     	MOVIA	0x05
     0003 10rr                      1- 1370     	ANDAR	_PORTB,F
                                    1- 1371     	.line	178, "main.c"; 	PWM1DUTY = 0;
     0004 0200                      1- 1372     	CLRA	
     0005 00rr                      1- 1373     	SFUN	_PWM1DUTY
                                    1- 1374     	.line	179, "main.c"; 	PORTA &= ~0x02;	//IO_FAN断开
     0006 1Crr                      1- 1375     	BCR	_PORTA,1
                                    1- 1376     	.line	180, "main.c"; 	}
                                    1- 1377     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1- 1378     ; exit point of _pwm1Stop
                                    1- 1380     ;***
                                    1- 1381     ;  pBlock Stats: dbName = C
                                    1- 1382     ;***
                                    1- 1383     ;has an exit
                                    1- 1384     ;functions called:
                                    1- 1385     ;   _initAD
                                    1- 1386     ;   _initAD
                                    1- 1387     ;; Starting pCode block
                                    1- 1388     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 1390     _gotoSleep:
                                    1- 1391     ; 2 exit points
                                    1- 1392     	.line	152, "main.c"; 	sleepDelay = 0;
                                    1- 1393     	BANKSEL	_sleepDelay
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1394     	CLRR	_sleepDelay
                                    1- 1395     	.line	153, "main.c"; 	workStep = 0;
                                    1- 1396     	BANKSEL	_workStep
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1397     	CLRR	_workStep
                                    1- 1398     	.line	154, "main.c"; 	AWUCON = 0xE0;		//PA5 PA6 PA7唤醒
     0004 21E0                      1- 1399     	MOVIA	0xe0
     0005 00rr                      1- 1400     	MOVAR	_AWUCON
                                    1- 1401     	.line	155, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0006 0200                      1- 1402     	CLRA	
     0007 00rr                      1- 1403     	SFUN	_T1CR1
                                    1- 1404     	.line	156, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0008 00rr                      1- 1405     	SFUN	_T2CR1
                                    1- 1406     	.line	157, "main.c"; 	PORTB = 0x00; 	//关闭
     0009 02rr                      1- 1407     	CLRR	_PORTB
                                    1- 1408     	.line	158, "main.c"; 	PWM1DUTY = 0;
     000A 0200                      1- 1409     	CLRA	
     000B 00rr                      1- 1410     	SFUN	_PWM1DUTY
                                    1- 1411     	.line	159, "main.c"; 	PWM2DUTY = 0;
     000C 00rr                      1- 1412     	SFUN	_PWM2DUTY
                                    1- 1413     	.line	161, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     000D 2103                      1- 1414     	MOVIA	0x03
     000E 00rr                      1- 1415     	MOVAR	_INTE
                                    1- 1416     	.line	162, "main.c"; 	PCON =  C_LVR_En | C_LVR_En;	
     000F 2108                      1- 1417     	MOVIA	0x08
     0010 00rr                      1- 1418     	MOVAR	_PCON
                                    1- 1419     	.line	163, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0011 02rr                      1- 1420     	CLRR	_INTF
                                    1- 1421     	.line	164, "main.c"; 	CLRWDT();
     0012 0002                      1- 1422     	clrwdt
                                    1- 1423     	.line	165, "main.c"; 	sleepFlag = 1;
     0013 2101                      1- 1424     	MOVIA	0x01
                                    1- 1425     	BANKSEL	_sleepFlag
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1426     	MOVAR	_sleepFlag
                                    1- 1427     	.line	166, "main.c"; 	SLEEP();
     0016 0001                      1- 1428     	sleep
                                    1- 1429     	.line	167, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     0017 2101                      1- 1430     	MOVIA	0x01
     0018 00rr                      1- 1431     	MOVAR	_INTE
                                    1- 1432     	.line	168, "main.c"; 	INTF = 0;
     0019 02rr                      1- 1433     	CLRR	_INTF
                                    1- 1434     	.line	170, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     001A 21A8                      1- 1435     	MOVIA	0xa8
     001B 00rr                      1- 1436     	MOVAR	_PCON
                                    1- 1437     	.line	171, "main.c"; 	initAD();
     001C 2rrr                      1- 1438     	LCALL	_initAD
                                    1- 1439     	.line	172, "main.c"; 	}
                                    1- 1440     	RETURN	
     001D 0010                      3-   26 m1      ret
                                    1- 1441     ; exit point of _gotoSleep
                                    1- 1443     ;***
                                    1- 1444     ;  pBlock Stats: dbName = C
                                    1- 1445     ;***
                                    1- 1446     ;has an exit
                                    1- 1447     ;; Starting pCode block
                                    1- 1448     .segment "code"; module=main, function=_init
     0000                           1- 1450     _init:
                                    1- 1451     ; 2 exit points
                                    1- 1452     	.line	113, "main.c"; 	PORTA = 0;
     0000 02rr                      1- 1453     	CLRR	_PORTA
                                    1- 1454     	.line	114, "main.c"; 	PORTB = 0;
     0001 02rr                      1- 1455     	CLRR	_PORTB
                                    1- 1456     	.line	116, "main.c"; 	IOSTA = 0xFC;		//P2 -P7输入
     0002 21FC                      1- 1457     	MOVIA	0xfc
     0003 000r                      1- 1458     	IOST	_IOSTA
                                    1- 1459     	.line	117, "main.c"; 	IOSTB =  0;								// Set PB to output mode
     0004 0200                      1- 1460     	CLRA	
     0005 000r                      1- 1461     	IOST	_IOSTB
                                    1- 1462     	.line	118, "main.c"; 	PORTA = 0;
     0006 02rr                      1- 1463     	CLRR	_PORTA
                                    1- 1464     	.line	119, "main.c"; 	PORTB = 0x04;                           	
     0007 2104                      1- 1465     	MOVIA	0x04
     0008 00rr                      1- 1466     	MOVAR	_PORTB
                                    1- 1467     	.line	120, "main.c"; 	APHCON = 0x5F;		//PA7打开上拉
     0009 215F                      1- 1468     	MOVIA	0x5f
     000A 000r                      1- 1469     	IOST	_APHCON
                                    1- 1470     	.line	123, "main.c"; 	TMRH = 0;								// 
     000B 02rr                      1- 1471     	CLRR	_TMRH
                                    1- 1472     	.line	124, "main.c"; 	TMR1 = 0x18;							
     000C 2118                      1- 1473     	MOVIA	0x18
     000D 00rr                      1- 1474     	SFUN	_TMR1
                                    1- 1475     	.line	125, "main.c"; 	TMR2 = 0x22;							
     000E 2122                      1- 1476     	MOVIA	0x22
     000F 00rr                      1- 1477     	SFUN	_TMR2
                                    1- 1478     	.line	126, "main.c"; 	PWM1DUTY = 0x05;				// 		
     0010 2105                      1- 1479     	MOVIA	0x05
     0011 00rr                      1- 1480     	SFUN	_PWM1DUTY
                                    1- 1481     	.line	127, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB3 , PWM1 output is active high, reloaded from TMR1, non-stop mode 
     0012 2183                      1- 1482     	MOVIA	0x83
     0013 00rr                      1- 1483     	SFUN	_T1CR1
                                    1- 1484     	.line	128, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Dis;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0014 2108                      1- 1485     	MOVIA	0x08
     0015 00rr                      1- 1486     	SFUN	_T1CR2
                                    1- 1487     	.line	130, "main.c"; 	PWM2DUTY = 0x10;
     0016 2110                      1- 1488     	MOVIA	0x10
     0017 00rr                      1- 1489     	SFUN	_PWM2DUTY
                                    1- 1490     	.line	131, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	    //reloaded from TMR2, non-stop mode 
     0018 2183                      1- 1491     	MOVIA	0x83
     0019 00rr                      1- 1492     	SFUN	_T2CR1
                                    1- 1493     	.line	132, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Dis;	// Enable Prescaler2, Prescaler2 dividing rate = 1:2, Timer2 clock source is instruction clock 
     001A 2108                      1- 1494     	MOVIA	0x08
     001B 00rr                      1- 1495     	SFUN	_T2CR2
                                    1- 1496     	.line	134, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     001C 2188                      1- 1497     	MOVIA	0x88
     001D 00rr                      1- 1498     	MOVAR	_PCON
                                    1- 1499     	.line	135, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     001E 2101                      1- 1500     	MOVIA	0x01
     001F 00rr                      1- 1501     	MOVAR	_INTE
                                    1- 1502     	.line	136, "main.c"; 	INTF = 0;
     0020 02rr                      1- 1503     	CLRR	_INTF
                                    1- 1504     	.line	139, "main.c"; 	PCON1 = C_TMR0_Dis;
     0021 0200                      1- 1505     	CLRA	
     0022 000r                      1- 1506     	IOST	_PCON1
                                    1- 1507     	.line	141, "main.c"; 	TMR0 = 55;
     0023 2137                      1- 1508     	MOVIA	0x37
     0024 00rr                      1- 1509     	MOVAR	_TMR0
                                    1- 1510     	.line	142, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0025 0200                      1- 1511     	CLRA	
     0026 0003                      1- 1512     	T0MD	
                                    1- 1513     	.line	144, "main.c"; 	PCON1 = C_TMR0_En;
     0027 2101                      1- 1514     	MOVIA	0x01
     0028 000r                      1- 1515     	IOST	_PCON1
                                    1- 1516     	.line	146, "main.c"; 	ENI();
     0029 0004                      1- 1517     	ENI
                                    1- 1518     	.line	147, "main.c"; 	}
                                    1- 1519     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1- 1520     ; exit point of _init
                                    1- 1523     ;	code size estimation:
                                    1- 1524     ;	  533+  108 =   641 instructions ( 1498 byte)
                                    1- 1526     	end
                                    1- 1526     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000025
_00002_DS_              Label    00000025
_00003_DS_              Label    0000001B
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00118_DS_              Label    00000020
_00121_DS_              Label    00000022
_00126_DS_              Label    00000028
_00127_DS_              Label    00000034
_00129_DS_              Label    00000002
_00149_DS_              Label    0000001C
_00152_DS_              Label    00000009
_00153_DS_              Label    00000025
_00155_DS_              Label    0000002C
_00157_DS_              Label    00000032
_00159_DS_              Label    00000033
_00176_DS_              Label    00000013
_00182_DS_              Label    00000014
_00188_DS_              Label    00000032
_00192_DS_              Label    0000003C
_00216_DS_              Label    00000006
_00217_DS_              Label    00000008
_00219_DS_              Label    0000000F
_00220_DS_              Label    00000011
_00222_DS_              Label    00000031
_00224_DS_              Label    00000023
_00225_DS_              Label    00000028
_00229_DS_              Label    00000039
_00231_DS_              Label    0000003D
_00249_DS_              Label    00000021
_00256_DS_              Label    00000015
_00257_DS_              Label    0000001B
_00258_DS_              Label    0000001F
_00259_DS_              Label    00000023
_00260_DS_              Label    00000026
_00262_DS_              Label    0000002D
_00264_DS_              Label    0000002F
_00277_DS_              Label    00000011
_00284_DS_              Label    00000009
_00286_DS_              Label    0000001C
_00295_DS_              Label    00000013
_00307_DS_              Label    00000049
_00308_DS_              Label    00000055
_00312_DS_              Label    0000006D
_00315_DS_              Label    00000078
_00318_DS_              Label    0000007F
_00322_DS_              Label    00000086
_00325_DS_              Label    00000091
_00327_DS_              Label    00000092
_00362_DS_              Label    0000003A
_00363_DS_              Label    00000068
_00364_DS_              Label    00000074
_00367_DS_              Label    0000008D
_00374_DS_              Label    00000007
_00376_DS_              Label    00000028
_00381_DS_              Label    00000000
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_batFullFlag            Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkTime              Label    00000000
_checkUsbInput          Label    00000000
_CMPCR                  Label    00000000
_count15S               Label    00000000
_count200ms             Label    00000000
_count500ms             Label    00000000
_delay                  Label    00000000
_duty1                  Label    00000000
_F_AIN2_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_fanStatus              Label    00000000
_fanUseable             Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isNotFan               Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_ledCon                 Label    00000000
_main                   Label    00000000
_nullcount              Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_processKey             Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwm1Stop               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN2_DATA            Label    00000000
_R_AIN2_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sleepDelay             Label    00000000
_sleepFlag              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_tempData               Label    00000000
_tempDuty               Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_usbFlag                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101C                 Label    00000000
r0x101F                 Label    00000000
r0x1020                 Label    00000000
r0x1021                 Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
