
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_delay
                                    1-   15     	extern	_keyRead
                                    1-   16     	extern	_gotoSleep
                                    1-   17     	extern	_checkLVD
                                    1-   18     	extern	_initTimer0
                                    1-   19     	extern	__moduint
                                    1-   20     	extern	_PORTAbits
                                    1-   21     	extern	_PORTBbits
                                    1-   22     	extern	_PCONbits
                                    1-   23     	extern	_BWUCONbits
                                    1-   24     	extern	_ABPLCONbits
                                    1-   25     	extern	_BPHCONbits
                                    1-   26     	extern	_INTEbits
                                    1-   27     	extern	_INTFbits
                                    1-   28     	extern	_ADMDbits
                                    1-   29     	extern	_ADRbits
                                    1-   30     	extern	_ADVREFHbits
                                    1-   31     	extern	_ADCRbits
                                    1-   32     	extern	_AWUCONbits
                                    1-   33     	extern	_PACONbits
                                    1-   34     	extern	_INTEDGbits
                                    1-   35     	extern	_ANAENbits
                                    1-   36     	extern	_RFCbits
                                    1-   37     	extern	_INTE2bits
                                    1-   38     	extern	_keyCount
                                    1-   39     	extern	_INDF
                                    1-   40     	extern	_TMR0
                                    1-   41     	extern	_PCL
                                    1-   42     	extern	_STATUS
                                    1-   43     	extern	_FSR
                                    1-   44     	extern	_PORTA
                                    1-   45     	extern	_PORTB
                                    1-   46     	extern	_PCON
                                    1-   47     	extern	_BWUCON
                                    1-   48     	extern	_PCHBUF
                                    1-   49     	extern	_ABPLCON
                                    1-   50     	extern	_BPHCON
                                    1-   51     	extern	_INTE
                                    1-   52     	extern	_INTF
                                    1-   53     	extern	_ADMD
                                    1-   54     	extern	_ADR
                                    1-   55     	extern	_ADD
                                    1-   56     	extern	_ADVREFH
                                    1-   57     	extern	_ADCR
                                    1-   58     	extern	_AWUCON
                                    1-   59     	extern	_PACON
                                    1-   60     	extern	_INTEDG
                                    1-   61     	extern	_TMRH
                                    1-   62     	extern	_ANAEN
                                    1-   63     	extern	_RFC
                                    1-   64     	extern	_TM3RH
                                    1-   65     	extern	_INTE2
                                    1-   66     	extern	_TMR1
                                    1-   67     	extern	_T1CR1
                                    1-   68     	extern	_T1CR2
                                    1-   69     	extern	_PWM1DUTY
                                    1-   70     	extern	_PS1CV
                                    1-   71     	extern	_BZ1CR
                                    1-   72     	extern	_IRCR
                                    1-   73     	extern	_TBHP
                                    1-   74     	extern	_TBHD
                                    1-   75     	extern	_TMR2
                                    1-   76     	extern	_T2CR1
                                    1-   77     	extern	_T2CR2
                                    1-   78     	extern	_PWM2DUTY
                                    1-   79     	extern	_PS2CV
                                    1-   80     	extern	_BZ2CR
                                    1-   81     	extern	_OSCCR
                                    1-   82     	extern	_TMR3
                                    1-   83     	extern	_T3CR1
                                    1-   84     	extern	_T3CR2
                                    1-   85     	extern	_PWM3DUTY
                                    1-   86     	extern	_PS3CV
                                    1-   87     	extern	_BZ3CR
                                    1-   88     	extern	_IOSTA
                                    1-   89     	extern	_IOSTB
                                    1-   90     	extern	_APHCON
                                    1-   91     	extern	_PS0CV
                                    1-   92     	extern	_BODCON
                                    1-   93     	extern	_CMPCR
                                    1-   94     	extern	_PCON1
                                    1-   95     	extern	_T0MD
                                    1-   96     	extern	___sdcc_saved_fsr
                                    1-   97     	extern	___sdcc_saved_stk00
                                    1-   98     	extern	___sdcc_saved_stk01
                                    1-   99     	extern	__gptrget1
                                    1-  100     	extern	__nyc_ny8_startup
                                    1-  101     ;--------------------------------------------------------
                                    1-  102     ; global declarations
                                    1-  103     ;--------------------------------------------------------
                                    1-  104     	extern	_initPWM
                                    1-  105     	extern	_keyCon
                                    1-  106     	extern	_startPWM3
                                    1-  107     	extern	_startPWM2
                                    1-  108     	extern	_startPWM1
                                    1-  109     	extern	_stopPWM3
                                    1-  110     	extern	_stopPWM2
                                    1-  111     	extern	_stopPWM1
                                    1-  112     	extern	_stopPWM
                                    1-  113     	extern	_pwmCon
                                    1-  114     	extern	_ledCon
                                    1-  115     	extern	_isr
                                    1-  116     	extern	_main
                                    1-  117     	extern	_intCount
                                    1-  118     	extern	_IntFlag
                                    1-  119     	extern	_keyClick
                                    1-  120     	extern	_workStep
                                    1-  121     	extern	_saveStep
                                    1-  122     	extern	_workFlag
                                    1-  123     	extern	_saveCount
                                    1-  124     	extern	_duty
                                    1-  125     	extern	_spkCount
                                    1-  126     	extern	_pwmCount
                                    1-  127     	extern	_dutys
                                    1-  128     	extern	_sleepCount
                                    1-  129     	extern	_beepFlag
                                    1-  130     	extern	_lvdCount
                                    1-  132     	extern PSAVE
                                    1-  133     	extern SSAVE
                                    1-  134     	extern WSAVE
                                    1-  135     	extern STK12
                                    1-  136     	extern STK11
                                    1-  137     	extern STK10
                                    1-  138     	extern STK09
                                    1-  139     	extern STK08
                                    1-  140     	extern STK07
                                    1-  141     	extern STK06
                                    1-  142     	extern STK05
                                    1-  143     	extern STK04
                                    1-  144     	extern STK03
                                    1-  145     	extern STK02
                                    1-  146     	extern STK01
                                    1-  147     	extern STK00
                                    1-  149     .segment "uninit", 0x20000040
 20000040                           1-  150     PSAVE:
                                    1-  151     	.res 1
 20000041                           1-  152     SSAVE:
                                    1-  153     	.res 1
 20000042                           1-  154     WSAVE:
                                    1-  155     	.res 1
 20000043                           1-  156     STK12:
                                    1-  157     	.res 1
 20000044                           1-  158     STK11:
                                    1-  159     	.res 1
 20000045                           1-  160     STK10:
                                    1-  161     	.res 1
 20000046                           1-  162     STK09:
                                    1-  163     	.res 1
 20000047                           1-  164     STK08:
                                    1-  165     	.res 1
 20000048                           1-  166     STK07:
                                    1-  167     	.res 1
 20000049                           1-  168     STK06:
                                    1-  169     	.res 1
 2000004A                           1-  170     STK05:
                                    1-  171     	.res 1
 2000004B                           1-  172     STK04:
                                    1-  173     	.res 1
 2000004C                           1-  174     STK03:
                                    1-  175     	.res 1
 2000004D                           1-  176     STK02:
                                    1-  177     	.res 1
 2000004E                           1-  178     STK01:
                                    1-  179     	.res 1
 2000004F                           1-  180     STK00:
                                    1-  181     	.res 1
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ; global definitions
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     ;--------------------------------------------------------
                                    1-  187     ; absolute symbol definitions
                                    1-  188     ;--------------------------------------------------------
                                    1-  189     ;--------------------------------------------------------
                                    1-  190     ; compiler-defined variables
                                    1-  191     ;--------------------------------------------------------
                                    1-  192     .segment "uninit"
     0000                           1-  193     r0x101F:
                                    1-  194     	.res	1
                                    1-  195     .segment "uninit"
     0000                           1-  196     r0x101D:
                                    1-  197     	.res	1
                                    1-  198     .segment "uninit"
     0000                           1-  199     r0x101E:
                                    1-  200     	.res	1
                                    1-  201     .segment "uninit"
     0000                           1-  202     r0x101B:
                                    1-  203     	.res	1
                                    1-  204     .segment "uninit"
     0000                           1-  205     r0x101C:
                                    1-  206     	.res	1
                                    1-  207     .segment "uninit"
     0000                           1-  208     r0x101A:
                                    1-  209     	.res	1
                                    1-  210     ;--------------------------------------------------------
                                    1-  211     ; initialized data
                                    1-  212     ;--------------------------------------------------------
                                    1-  214     .segment "idata"
     0000                           1-  215     _intCount:
     0000 0000                      1-  216     	dw	0x00
                                    1-  220     .segment "idata"
     0000                           1-  221     _IntFlag:
     0000 0000                      1-  222     	dw	0x00
                                    1-  226     .segment "idata"
     0000                           1-  227     _keyClick:
     0000 0000                      1-  228     	dw	0x00
                                    1-  232     .segment "idata"
     0000                           1-  233     _workStep:
     0000 0000                      1-  234     	dw	0x00
                                    1-  238     .segment "idata"
     0000                           1-  239     _saveStep:
     0000 0000                      1-  240     	dw	0x00
                                    1-  244     .segment "idata"
     0000                           1-  245     _workFlag:
     0000 0000                      1-  246     	dw	0x00
                                    1-  250     .segment "idata"
     0000                           1-  251     _saveCount:
     0000 0000 0000                 1-  252     	dw	0x00, 0x00
                                    1-  256     .segment "idata"
     0000                           1-  257     _duty:
     0000 0017                      1-  258     	dw	0x17
                                    1-  262     .segment "idata"
     0000                           1-  263     _spkCount:
     0000 0000                      1-  264     	dw	0x00
                                    1-  268     .segment "idata"
     0000                           1-  269     _pwmCount:
     0000 0000 0000                 1-  270     	dw	0x00, 0x00
                                    1-  274     .segment "idata"
     0000                           1-  275     _dutys:
     0000 0000                      1-  276     	dw	0x00
     0001 0017                      1-  277     	dw	0x17
     0002 0025                      1-  278     	dw	0x25
     0003 0032                      1-  279     	dw	0x32
                                    1-  283     .segment "idata"
     0000                           1-  284     _sleepCount:
     0000 0000 0000                 1-  285     	dw	0x00, 0x00
                                    1-  289     .segment "idata"
     0000                           1-  290     _beepFlag:
     0000 0000                      1-  291     	dw	0x00
                                    1-  295     .segment "idata"
     0000                           1-  296     _lvdCount:
     0000 0000 0000                 1-  297     	dw	0x00, 0x00
                                    1-  300     ;--------------------------------------------------------
                                    1-  301     ; overlayable items in internal ram 
                                    1-  302     ;--------------------------------------------------------
                                    1-  303     ;	udata_ovr
                                    1-  304     ;--------------------------------------------------------
                                    1-  305     ; reset vector 
                                    1-  306     ;--------------------------------------------------------
                                    1-  307     ORG	0x0000
     0000 3rrr                      1-  308     	LGOTO	__nyc_ny8_startup
                                    1-  309     ;--------------------------------------------------------
                                    1-  310     ; interrupt and initialization code
                                    1-  311     ;--------------------------------------------------------
                                    1-  312     ORG 0x0008
     0008 3rrr                      1-  313     	lgoto	__sdcc_interrupt
                                    1-  315     .segment "code"
     0000                           1-  316     __sdcc_interrupt:
                                    1-  317     ;***
                                    1-  318     ;  pBlock Stats: dbName = I
                                    1-  319     ;***
                                    1-  320     ;2 compiler assigned registers:
                                    1-  321     ;   STK00
                                    1-  322     ;   STK01
                                    1-  323     ;; Starting pCode block
     0000                           1-  324     _isr:
                                    1-  325     ; 0 exit points
                                    1-  326     	.line	59, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  327     	MOVAR	WSAVE
     0001 1503                      1-  328     	SWAPR	STATUS,W
     0002 0283                      1-  329     	CLRR	STATUS
     0003 00rr                      1-  330     	MOVAR	SSAVE
     0004 010A                      1-  331     	MOVR	PCHBUF,W
     0005 028A                      1-  332     	CLRR	PCHBUF
     0006 00rr                      1-  333     	MOVAR	PSAVE
     0007 0104                      1-  334     	MOVR	FSR,W
                                    1-  335     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  336     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  337     	MOVR	STK00,W
                                    1-  338     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  339     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  340     	MOVR	STK01,W
                                    1-  341     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  342     	MOVAR	___sdcc_saved_stk01
                                    1-  343     	.line	61, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  344     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  345     	LGOTO	_00108_DS_
                                    1-  346     	.line	63, "main.c"; 	TMR0 = 55;
     0012 2137                      1-  347     	MOVIA	0x37
     0013 00rr                      1-  348     	MOVAR	_TMR0
                                    1-  349     	.line	64, "main.c"; 	intCount++;
                                    1-  350     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  351     	INCR	_intCount,F
                                    1-  352     	.line	65, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  353     	MOVR	_intCount,W
     0017 2464                      1-  354     	XORIA	0x64
     0018 0903                      1-  355     	BTRSS	STATUS,2
     0019 3rrr                      1-  356     	LGOTO	_00108_DS_
                                    1-  357     	.line	67, "main.c"; 	intCount = 0;
     001A 02rr                      1-  358     	CLRR	_intCount
                                    1-  359     	.line	68, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  360     	MOVIA	0x01
                                    1-  361     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  362     	MOVAR	_IntFlag
     001E                           1-  363     _00108_DS_:
                                    1-  364     	.line	71, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  365     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  366     	LGOTO	_00110_DS_
                                    1-  367     	.line	73, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  368     	MOVIA	0xfd
     0021 00rr                      1-  369     	MOVAR	_INTF
     0022                           1-  370     _00110_DS_:
                                    1-  371     	.line	76, "main.c"; 	INTF = 0;
     0022 02rr                      1-  372     	CLRR	_INTF
                                    1-  373     	.line	78, "main.c"; 	}
                                    1-  374     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  375     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  376     	MOVAR	STK01
                                    1-  377     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  378     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  379     	MOVAR	STK00
                                    1-  380     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  381     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  382     	MOVAR	FSR
     002C 01rr                      1-  383     	MOVR	PSAVE,W
     002D 008A                      1-  384     	MOVAR	PCHBUF
     002E 0283                      1-  385     	CLRR	STATUS
     002F 15rr                      1-  386     	SWAPR	SSAVE,W
     0030 0083                      1-  387     	MOVAR	STATUS
     0031 15rr                      1-  388     	SWAPR	WSAVE,F
     0032 15rr                      1-  389     	SWAPR	WSAVE,W
     0033                           1-  390     END_OF_INTERRUPT:
     0033 0011                      1-  391     	RETIE	
                                    1-  393     ;--------------------------------------------------------
                                    1-  394     ; code
                                    1-  395     ;--------------------------------------------------------
                                    1-  396     ;***
                                    1-  397     ;  pBlock Stats: dbName = M
                                    1-  398     ;***
                                    1-  399     ;has an exit
                                    1-  400     ;functions called:
                                    1-  401     ;   _initTimer0
                                    1-  402     ;   _initPWM
                                    1-  403     ;   _stopPWM
                                    1-  404     ;   _keyCon
                                    1-  405     ;   _pwmCon
                                    1-  406     ;   _ledCon
                                    1-  407     ;   _checkLVD
                                    1-  408     ;   _stopPWM
                                    1-  409     ;   _gotoSleep
                                    1-  410     ;   _initTimer0
                                    1-  411     ;   _initPWM
                                    1-  412     ;   _stopPWM
                                    1-  413     ;   _keyCon
                                    1-  414     ;   _pwmCon
                                    1-  415     ;   _ledCon
                                    1-  416     ;   _checkLVD
                                    1-  417     ;   _stopPWM
                                    1-  418     ;   _gotoSleep
                                    1-  419     ;1 compiler assigned register :
                                    1-  420     ;   r0x101F
                                    1-  421     ;; Starting pCode block
                                    1-  422     .segment "code"; module=main, function=_main
     0000                           1-  424     _main:
                                    1-  425     ; 2 exit points
                                    1-  426     	.line	83, "main.c"; 	initTimer0();
     0000 2rrr                      1-  427     	LCALL	_initTimer0
                                    1-  428     	.line	84, "main.c"; 	initPWM();
     0001 2rrr                      1-  429     	LCALL	_initPWM
     0002                           1-  430     _00126_DS_:
                                    1-  431     	.line	87, "main.c"; 	CLRWDT(); 
     0002 0002                      1-  432     	clrwdt
                                    1-  433     	.line	88, "main.c"; 	if(!IntFlag)
                                    1-  434     	BANKSEL	_IntFlag
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1-  435     	MOVR	_IntFlag,W
     0005 0D03                      1-  436     	BTRSC	STATUS,2
     0006 3rrr                      1-  437     	LGOTO	_00126_DS_
                                    1-  438     	.line	90, "main.c"; 	IntFlag = 0;
     0007 02rr                      1-  439     	CLRR	_IntFlag
                                    1-  440     	.line	91, "main.c"; 	if(getbit(PORTA, 5))	//充电中不可以使用改产品
     0008 01rr                      1-  441     	MOVR	_PORTA,W
     0009 2220                      1-  442     	ANDIA	0x20
     000A 0903                      1-  443     	BTRSS	STATUS,2
     000B 2101                      1-  444     	MOVIA	0x01
                                    1-  445     	BANKSEL	r0x101F
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1-  446     	MOVAR	r0x101F
     000E 01rr                      1-  447     	MOVR	r0x101F,W
     000F 0D03                      1-  448     	BTRSC	STATUS,2
     0010 3rrr                      1-  449     	LGOTO	_00118_DS_
                                    1-  450     	.line	92, "main.c"; 	stopPWM();
     0011 2rrr                      1-  451     	LCALL	_stopPWM
     0012 3rrr                      1-  452     	LGOTO	_00119_DS_
     0013                           1-  453     _00118_DS_:
                                    1-  454     	.line	94, "main.c"; 	keyCon();
     0013 2rrr                      1-  455     	LCALL	_keyCon
     0014                           1-  456     _00119_DS_:
                                    1-  457     	.line	95, "main.c"; 	pwmCon();
     0014 2rrr                      1-  458     	LCALL	_pwmCon
                                    1-  459     	.line	96, "main.c"; 	ledCon();
     0015 2rrr                      1-  460     	LCALL	_ledCon
                                    1-  461     	.line	97, "main.c"; 	if(checkLVD())
     0016 2rrr                      1-  462     	LCALL	_checkLVD
                                    1-  463     	BANKSEL	r0x101F
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  464     	MOVAR	r0x101F
     0019 01rr                      1-  465     	MOVR	r0x101F,W
     001A 0D03                      1-  466     	BTRSC	STATUS,2
     001B 3rrr                      1-  467     	LGOTO	_00123_DS_
                                    1-  468     	.line	99, "main.c"; 	lvdCount++;
                                    1-  469     	BANKSEL	_lvdCount
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 05rr                      1-  470     	INCR	_lvdCount,F
     001E 0D03                      1-  471     	BTRSC	STATUS,2
     001F 05rr                      1-  472     	INCR	(_lvdCount + 1),F
                                    1-  473     ;;unsigned compare: left < lit (0x1F4=500), size=2
                                    1-  474     	.line	101, "main.c"; 	if(lvdCount >= 500)
     0020 2101                      1-  475     	MOVIA	0x01
     0021 04rr                      1-  476     	SUBAR	(_lvdCount + 1),W
     0022 0903                      1-  477     	BTRSS	STATUS,2
     0023 3rrr                      1-  478     	LGOTO	_00145_DS_
     0024 21F4                      1-  479     	MOVIA	0xf4
     0025 04rr                      1-  480     	SUBAR	_lvdCount,W
     0026                           1-  481     _00145_DS_:
     0026 0803                      1-  482     	BTRSS	STATUS,0
     0027 3rrr                      1-  483     	LGOTO	_00126_DS_
                                    1-  484     	.line	103, "main.c"; 	lvdCount = 0;
                                    1-  485     	BANKSEL	_lvdCount
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 02rr                      1-  486     	CLRR	_lvdCount
     002A 02rr                      1-  487     	CLRR	(_lvdCount + 1)
                                    1-  488     	.line	104, "main.c"; 	stopPWM();
     002B 2rrr                      1-  489     	LCALL	_stopPWM
                                    1-  490     	.line	105, "main.c"; 	sleepCount = 0;
                                    1-  491     	BANKSEL	_sleepCount
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 02rr                      1-  492     	CLRR	_sleepCount
     002E 02rr                      1-  493     	CLRR	(_sleepCount + 1)
                                    1-  494     	.line	106, "main.c"; 	AWUCON = 0x22;		//PA5,PA1唤醒
     002F 2122                      1-  495     	MOVIA	0x22
     0030 00rr                      1-  496     	MOVAR	_AWUCON
                                    1-  497     	.line	107, "main.c"; 	gotoSleep(0x02);	//PB1唤醒
     0031 2102                      1-  498     	MOVIA	0x02
     0032 2rrr                      1-  499     	LCALL	_gotoSleep
     0033 3rrr                      1-  500     	LGOTO	_00126_DS_
     0034                           1-  501     _00123_DS_:
                                    1-  502     	.line	112, "main.c"; 	lvdCount = 0;
                                    1-  503     	BANKSEL	_lvdCount
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 02rr                      1-  504     	CLRR	_lvdCount
     0036 02rr                      1-  505     	CLRR	(_lvdCount + 1)
     0037 3rrr                      1-  506     	LGOTO	_00126_DS_
                                    1-  507     	.line	115, "main.c"; 	}
                                    1-  508     	RETURN	
     0038 0010                      3-   26 m1      ret
                                    1-  509     ; exit point of _main
                                    1-  511     ;***
                                    1-  512     ;  pBlock Stats: dbName = C
                                    1-  513     ;***
                                    1-  514     ;has an exit
                                    1-  515     ;; Starting pCode block
                                    1-  516     .segment "code"; module=main, function=_initPWM
     0000                           1-  518     _initPWM:
                                    1-  519     ; 2 exit points
                                    1-  520     	.line	331, "main.c"; 	TMRH = 0;								// 
     0000 02rr                      1-  521     	CLRR	_TMRH
                                    1-  522     	.line	332, "main.c"; 	TM3RH = 0x10;
     0001 2110                      1-  523     	MOVIA	0x10
     0002 00rr                      1-  524     	MOVAR	_TM3RH
                                    1-  525     	.line	333, "main.c"; 	TMR1 = 50;
     0003 2132                      1-  526     	MOVIA	0x32
     0004 00rr                      1-  527     	SFUN	_TMR1
                                    1-  528     	.line	334, "main.c"; 	TMR2 = 50;
     0005 00rr                      1-  529     	SFUN	_TMR2
                                    1-  530     	.line	335, "main.c"; 	TMR3 = 250;
     0006 21FA                      1-  531     	MOVIA	0xfa
     0007 00rr                      1-  532     	SFUN	_TMR3
                                    1-  533     	.line	336, "main.c"; 	PWM1DUTY = 0;				// 		
     0008 0200                      1-  534     	CLRA	
     0009 00rr                      1-  535     	SFUN	_PWM1DUTY
                                    1-  536     	.line	337, "main.c"; 	T1CR1 = C_TMR1_Dis;
     000A 00rr                      1-  537     	SFUN	_T1CR1
                                    1-  538     	.line	338, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div4;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     000B 2101                      1-  539     	MOVIA	0x01
     000C 00rr                      1-  540     	SFUN	_T1CR2
                                    1-  541     	.line	340, "main.c"; 	PWM2DUTY = 0;
     000D 0200                      1-  542     	CLRA	
     000E 00rr                      1-  543     	SFUN	_PWM2DUTY
                                    1-  544     	.line	341, "main.c"; 	T2CR1 = C_TMR2_Dis;
     000F 00rr                      1-  545     	SFUN	_T2CR1
                                    1-  546     	.line	342, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div4;
     0010 2101                      1-  547     	MOVIA	0x01
     0011 00rr                      1-  548     	SFUN	_T2CR2
                                    1-  549     	.line	344, "main.c"; 	PWM3DUTY = 0;
     0012 0200                      1-  550     	CLRA	
     0013 00rr                      1-  551     	SFUN	_PWM3DUTY
                                    1-  552     	.line	345, "main.c"; 	T3CR1 = C_TMR3_Dis;
     0014 00rr                      1-  553     	SFUN	_T3CR1
                                    1-  554     	.line	346, "main.c"; 	T3CR2 = C_TMR3_ClkSrc_Inst | C_PS3_Div4;
     0015 2101                      1-  555     	MOVIA	0x01
     0016 00rr                      1-  556     	SFUN	_T3CR2
                                    1-  557     	.line	347, "main.c"; 	}
                                    1-  558     	RETURN	
     0017 0010                      3-   26 m1      ret
                                    1-  559     ; exit point of _initPWM
                                    1-  561     ;***
                                    1-  562     ;  pBlock Stats: dbName = C
                                    1-  563     ;***
                                    1-  564     ;has an exit
                                    1-  565     ;functions called:
                                    1-  566     ;   _keyRead
                                    1-  567     ;   _keyRead
                                    1-  568     ;1 compiler assigned register :
                                    1-  569     ;   r0x101A
                                    1-  570     ;; Starting pCode block
                                    1-  571     .segment "code"; module=main, function=_keyCon
     0000                           1-  573     _keyCon:
                                    1-  574     ; 2 exit points
                                    1-  575     	.line	282, "main.c"; 	keyClick = keyRead((~PORTB)&0x02);
     0000 07rr                      1-  576     	COMR	_PORTB,W
                                    1-  577     	BANKSEL	r0x101A
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  578     	MOVAR	r0x101A
     0003 2102                      1-  579     	MOVIA	0x02
     0004 10rr                      1-  580     	ANDAR	r0x101A,F
     0005 01rr                      1-  581     	MOVR	r0x101A,W
     0006 2rrr                      1-  582     	LCALL	_keyRead
                                    1-  583     	BANKSEL	_keyClick
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  584     	MOVAR	_keyClick
                                    1-  585     	.line	283, "main.c"; 	if(keyClick == 1 && workFlag)
     0009 2401                      1-  586     	XORIA	0x01
     000A 0903                      1-  587     	BTRSS	STATUS,2
     000B 3rrr                      1-  588     	LGOTO	_00272_DS_
                                    1-  589     	BANKSEL	_workFlag
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 01rr                      1-  590     	MOVR	_workFlag,W
     000E 0D03                      1-  591     	BTRSC	STATUS,2
     000F 3rrr                      1-  592     	LGOTO	_00272_DS_
                                    1-  593     	.line	285, "main.c"; 	spkCount = 30;
     0010 211E                      1-  594     	MOVIA	0x1e
                                    1-  595     	BANKSEL	_spkCount
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 00rr                      1-  596     	MOVAR	_spkCount
                                    1-  597     	.line	286, "main.c"; 	saveCount = 0;
                                    1-  598     	BANKSEL	_saveCount
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 02rr                      1-  599     	CLRR	_saveCount
     0015 02rr                      1-  600     	CLRR	(_saveCount + 1)
                                    1-  601     	.line	287, "main.c"; 	saveStep = 0;
                                    1-  602     	BANKSEL	_saveStep
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 02rr                      1-  603     	CLRR	_saveStep
                                    1-  604     	.line	290, "main.c"; 	if(++workStep == 4)
                                    1-  605     	BANKSEL	_workStep
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 05rr                      1-  606     	INCR	_workStep,F
     001A 01rr                      1-  607     	MOVR	_workStep,W
     001B 2404                      1-  608     	XORIA	0x04
     001C 0903                      1-  609     	BTRSS	STATUS,2
     001D 3rrr                      1-  610     	LGOTO	_00275_DS_
                                    1-  611     	.line	291, "main.c"; 	workStep = 1;
     001E 2101                      1-  612     	MOVIA	0x01
     001F 00rr                      1-  613     	MOVAR	_workStep
                                    1-  614     	.line	291, "main.c"; 	//    		}
     0020 3rrr                      1-  615     	LGOTO	_00275_DS_
     0021                           1-  616     _00272_DS_:
                                    1-  617     	.line	304, "main.c"; 	else if(keyClick == 2)
                                    1-  618     	BANKSEL	_keyClick
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 01rr                      1-  619     	MOVR	_keyClick,W
     0023 2402                      1-  620     	XORIA	0x02
     0024 0903                      1-  621     	BTRSS	STATUS,2
     0025 3rrr                      1-  622     	LGOTO	_00275_DS_
                                    1-  623     	.line	307, "main.c"; 	saveCount = 0;
                                    1-  624     	BANKSEL	_saveCount
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 02rr                      1-  625     	CLRR	_saveCount
     0028 02rr                      1-  626     	CLRR	(_saveCount + 1)
                                    1-  627     	.line	308, "main.c"; 	spkCount = 100;
     0029 2164                      1-  628     	MOVIA	0x64
                                    1-  629     	BANKSEL	_spkCount
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 00rr                      1-  630     	MOVAR	_spkCount
                                    1-  631     	.line	309, "main.c"; 	if(workStep)
                                    1-  632     	BANKSEL	_workStep
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1-  633     	MOVR	_workStep,W
     002E 0D03                      1-  634     	BTRSC	STATUS,2
     002F 3rrr                      1-  635     	LGOTO	_00267_DS_
                                    1-  636     	.line	311, "main.c"; 	workStep = 0;
     0030 02rr                      1-  637     	CLRR	_workStep
                                    1-  638     	.line	312, "main.c"; 	workFlag = 0;
                                    1-  639     	BANKSEL	_workFlag
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 02rr                      1-  640     	CLRR	_workFlag
     0033 3rrr                      1-  641     	LGOTO	_00275_DS_
     0034                           1-  642     _00267_DS_:
                                    1-  643     	.line	316, "main.c"; 	workFlag = 1;
     0034 2101                      1-  644     	MOVIA	0x01
                                    1-  645     	BANKSEL	_workFlag
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 00rr                      1-  646     	MOVAR	_workFlag
                                    1-  647     	.line	317, "main.c"; 	if(saveStep)
                                    1-  648     	BANKSEL	_saveStep
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 01rr                      1-  649     	MOVR	_saveStep,W
     0039 0D03                      1-  650     	BTRSC	STATUS,2
     003A 3rrr                      1-  651     	LGOTO	_00264_DS_
                                    1-  652     	.line	319, "main.c"; 	workStep = saveStep;
     003B 01rr                      1-  653     	MOVR	_saveStep,W
                                    1-  654     	BANKSEL	_workStep
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 00rr                      1-  655     	MOVAR	_workStep
     003E 3rrr                      1-  656     	LGOTO	_00275_DS_
     003F                           1-  657     _00264_DS_:
                                    1-  658     	.line	322, "main.c"; 	workStep = 1;
     003F 2101                      1-  659     	MOVIA	0x01
                                    1-  660     	BANKSEL	_workStep
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 00rr                      1-  661     	MOVAR	_workStep
     0042                           1-  662     _00275_DS_:
                                    1-  663     	.line	326, "main.c"; 	}
                                    1-  664     	RETURN	
     0042 0010                      3-   26 m1      ret
                                    1-  665     ; exit point of _keyCon
                                    1-  667     ;***
                                    1-  668     ;  pBlock Stats: dbName = C
                                    1-  669     ;***
                                    1-  670     ;has an exit
                                    1-  671     ;; Starting pCode block
                                    1-  672     .segment "code"; module=main, function=_startPWM3
     0000                           1-  674     _startPWM3:
                                    1-  675     ; 2 exit points
                                    1-  676     	.line	275, "main.c"; 	beepFlag = 1;
     0000 2101                      1-  677     	MOVIA	0x01
                                    1-  678     	BANKSEL	_beepFlag
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  679     	MOVAR	_beepFlag
                                    1-  680     	.line	276, "main.c"; 	PWM3DUTY = 200;
     0003 21C8                      1-  681     	MOVIA	0xc8
     0004 00rr                      1-  682     	SFUN	_PWM3DUTY
                                    1-  683     	.line	277, "main.c"; 	T3CR1 = C_PWM3_En | C_TMR3_Reload | C_TMR3_En;
     0005 2183                      1-  684     	MOVIA	0x83
     0006 00rr                      1-  685     	SFUN	_T3CR1
                                    1-  686     	.line	278, "main.c"; 	}
                                    1-  687     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  688     ; exit point of _startPWM3
                                    1-  690     ;***
                                    1-  691     ;  pBlock Stats: dbName = C
                                    1-  692     ;***
                                    1-  693     ;has an exit
                                    1-  694     ;; Starting pCode block
                                    1-  695     .segment "code"; module=main, function=_startPWM2
     0000                           1-  697     _startPWM2:
                                    1-  698     ; 2 exit points
                                    1-  699     	.line	267, "main.c"; 	setbit(PORTA,4);
     0000 1Arr                      1-  700     	BSR	_PORTA,4
                                    1-  701     	.line	268, "main.c"; 	PWM2DUTY = duty;
                                    1-  702     	BANKSEL	_duty
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 01rr                      1-  703     	MOVR	_duty,W
     0003 00rr                      1-  704     	SFUN	_PWM2DUTY
                                    1-  705     	.line	269, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;
     0004 2183                      1-  706     	MOVIA	0x83
     0005 00rr                      1-  707     	SFUN	_T2CR1
                                    1-  708     	.line	270, "main.c"; 	}
                                    1-  709     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  710     ; exit point of _startPWM2
                                    1-  712     ;***
                                    1-  713     ;  pBlock Stats: dbName = C
                                    1-  714     ;***
                                    1-  715     ;has an exit
                                    1-  716     ;; Starting pCode block
                                    1-  717     .segment "code"; module=main, function=_startPWM1
     0000                           1-  719     _startPWM1:
                                    1-  720     ; 2 exit points
                                    1-  721     	.line	259, "main.c"; 	setbit(PORTA,3);
     0000 19rr                      1-  722     	BSR	_PORTA,3
                                    1-  723     	.line	260, "main.c"; 	PWM1DUTY = duty;
                                    1-  724     	BANKSEL	_duty
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 01rr                      1-  725     	MOVR	_duty,W
     0003 00rr                      1-  726     	SFUN	_PWM1DUTY
                                    1-  727     	.line	261, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;
     0004 2183                      1-  728     	MOVIA	0x83
     0005 00rr                      1-  729     	SFUN	_T1CR1
                                    1-  730     	.line	262, "main.c"; 	}
                                    1-  731     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  732     ; exit point of _startPWM1
                                    1-  734     ;***
                                    1-  735     ;  pBlock Stats: dbName = C
                                    1-  736     ;***
                                    1-  737     ;has an exit
                                    1-  738     ;; Starting pCode block
                                    1-  739     .segment "code"; module=main, function=_stopPWM3
     0000                           1-  741     _stopPWM3:
                                    1-  742     ; 2 exit points
                                    1-  743     	.line	248, "main.c"; 	if(beepFlag)
                                    1-  744     	BANKSEL	_beepFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  745     	MOVR	_beepFlag,W
     0002 0D03                      1-  746     	BTRSC	STATUS,2
     0003 3rrr                      1-  747     	LGOTO	_00244_DS_
                                    1-  748     	.line	250, "main.c"; 	beepFlag = 0;
     0004 02rr                      1-  749     	CLRR	_beepFlag
                                    1-  750     	.line	251, "main.c"; 	T3CR1 = C_TMR3_Dis;
     0005 0200                      1-  751     	CLRA	
     0006 00rr                      1-  752     	SFUN	_T3CR1
                                    1-  753     	.line	252, "main.c"; 	PWM3DUTY = 0;
     0007 00rr                      1-  754     	SFUN	_PWM3DUTY
     0008                           1-  755     _00244_DS_:
                                    1-  756     	.line	254, "main.c"; 	}
                                    1-  757     	RETURN	
     0008 0010                      3-   26 m1      ret
                                    1-  758     ; exit point of _stopPWM3
                                    1-  760     ;***
                                    1-  761     ;  pBlock Stats: dbName = C
                                    1-  762     ;***
                                    1-  763     ;has an exit
                                    1-  764     ;; Starting pCode block
                                    1-  765     .segment "code"; module=main, function=_stopPWM2
     0000                           1-  767     _stopPWM2:
                                    1-  768     ; 2 exit points
                                    1-  769     	.line	240, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1-  770     	CLRA	
     0001 00rr                      1-  771     	SFUN	_T2CR1
                                    1-  772     	.line	241, "main.c"; 	PORTB &= ~0x04; 	//关闭
     0002 1Drr                      1-  773     	BCR	_PORTB,2
                                    1-  774     	.line	242, "main.c"; 	PWM2DUTY = 0;
     0003 0200                      1-  775     	CLRA	
     0004 00rr                      1-  776     	SFUN	_PWM2DUTY
                                    1-  777     	.line	243, "main.c"; 	resetbit(PORTA,4);
     0005 1Err                      1-  778     	BCR	_PORTA,4
                                    1-  779     	.line	244, "main.c"; 	}
                                    1-  780     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  781     ; exit point of _stopPWM2
                                    1-  783     ;***
                                    1-  784     ;  pBlock Stats: dbName = C
                                    1-  785     ;***
                                    1-  786     ;has an exit
                                    1-  787     ;; Starting pCode block
                                    1-  788     .segment "code"; module=main, function=_stopPWM1
     0000                           1-  790     _stopPWM1:
                                    1-  791     ; 2 exit points
                                    1-  792     	.line	232, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  793     	CLRA	
     0001 00rr                      1-  794     	SFUN	_T1CR1
                                    1-  795     	.line	233, "main.c"; 	PORTB &= ~0x08; 	//关闭
     0002 1Drr                      1-  796     	BCR	_PORTB,3
                                    1-  797     	.line	234, "main.c"; 	PWM1DUTY = 0;
     0003 0200                      1-  798     	CLRA	
     0004 00rr                      1-  799     	SFUN	_PWM1DUTY
                                    1-  800     	.line	235, "main.c"; 	resetbit(PORTA,3);
     0005 1Drr                      1-  801     	BCR	_PORTA,3
                                    1-  802     	.line	236, "main.c"; 	}
                                    1-  803     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  804     ; exit point of _stopPWM1
                                    1-  806     ;***
                                    1-  807     ;  pBlock Stats: dbName = C
                                    1-  808     ;***
                                    1-  809     ;has an exit
                                    1-  810     ;functions called:
                                    1-  811     ;   _stopPWM1
                                    1-  812     ;   _stopPWM2
                                    1-  813     ;   _stopPWM1
                                    1-  814     ;   _stopPWM2
                                    1-  815     ;; Starting pCode block
                                    1-  816     .segment "code"; module=main, function=_stopPWM
     0000                           1-  818     _stopPWM:
                                    1-  819     ; 2 exit points
                                    1-  820     	.line	225, "main.c"; 	workStep = 0;
                                    1-  821     	BANKSEL	_workStep
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  822     	CLRR	_workStep
                                    1-  823     	.line	226, "main.c"; 	stopPWM1();
     0002 2rrr                      1-  824     	LCALL	_stopPWM1
                                    1-  825     	.line	227, "main.c"; 	stopPWM2();
     0003 2rrr                      1-  826     	LCALL	_stopPWM2
                                    1-  827     	.line	228, "main.c"; 	}
                                    1-  828     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1-  829     ; exit point of _stopPWM
                                    1-  831     ;***
                                    1-  832     ;  pBlock Stats: dbName = C
                                    1-  833     ;***
                                    1-  834     ;has an exit
                                    1-  835     ;functions called:
                                    1-  836     ;   __gptrget1
                                    1-  837     ;   _stopPWM
                                    1-  838     ;   _startPWM1
                                    1-  839     ;   _stopPWM1
                                    1-  840     ;   _startPWM2
                                    1-  841     ;   _stopPWM2
                                    1-  842     ;   _stopPWM
                                    1-  843     ;   __gptrget1
                                    1-  844     ;   _stopPWM
                                    1-  845     ;   _startPWM1
                                    1-  846     ;   _stopPWM1
                                    1-  847     ;   _startPWM2
                                    1-  848     ;   _stopPWM2
                                    1-  849     ;   _stopPWM
                                    1-  850     ;4 compiler assigned registers:
                                    1-  851     ;   r0x101B
                                    1-  852     ;   r0x101C
                                    1-  853     ;   STK01
                                    1-  854     ;   STK00
                                    1-  855     ;; Starting pCode block
                                    1-  856     .segment "code"; module=main, function=_pwmCon
     0000                           1-  858     _pwmCon:
                                    1-  859     ; 2 exit points
                                    1-  860     	.line	190, "main.c"; 	duty = dutys[workStep];
                                    1-  861     	BANKSEL	_workStep
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  862     	MOVR	_workStep,W
     0002 25rr                      1-  863     	ADDIA	(_dutys + 0)
                                    1-  864     	BANKSEL	r0x101B
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  865     	MOVAR	r0x101B
     0005 21rr                      1-  866     	MOVIA	((_dutys + 0) >> 8) & 0xff
     0006 0C03                      1-  867     	BTRSC	STATUS,0
     0007 2501                      1-  868     	ADDIA	0x01
                                    1-  869     	BANKSEL	r0x101C
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  870     	MOVAR	r0x101C
                                    1-  871     	BANKSEL	r0x101B
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 01rr                      1-  872     	MOVR	r0x101B,W
     000C 00rr                      1-  873     	MOVAR	STK01
                                    1-  874     	BANKSEL	r0x101C
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 01rr                      1-  875     	MOVR	r0x101C,W
     000F 00rr                      1-  876     	MOVAR	STK00
     0010 2100                      1-  877     	MOVIA	0x00
     0011 2rrr                      1-  878     	LCALL	__gptrget1
                                    1-  879     	BANKSEL	_duty
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 00rr                      1-  880     	MOVAR	_duty
                                    1-  881     	.line	191, "main.c"; 	if(!workStep)
                                    1-  882     	BANKSEL	_workStep
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1-  883     	MOVR	_workStep,W
     0016 0903                      1-  884     	BTRSS	STATUS,2
     0017 3rrr                      1-  885     	LGOTO	_00196_DS_
                                    1-  886     	.line	193, "main.c"; 	stopPWM();
     0018 2rrr                      1-  887     	LCALL	_stopPWM
                                    1-  888     	.line	194, "main.c"; 	saveCount = 0;
                                    1-  889     	BANKSEL	_saveCount
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 02rr                      1-  890     	CLRR	_saveCount
     001B 02rr                      1-  891     	CLRR	(_saveCount + 1)
     001C 3rrr                      1-  892     	LGOTO	_00198_DS_
     001D                           1-  893     _00196_DS_:
                                    1-  894     	.line	198, "main.c"; 	if(++pwmCount == 2000)
                                    1-  895     	BANKSEL	_pwmCount
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 05rr                      1-  896     	INCR	_pwmCount,F
     001F 0D03                      1-  897     	BTRSC	STATUS,2
     0020 05rr                      1-  898     	INCR	(_pwmCount + 1),F
     0021 01rr                      1-  899     	MOVR	_pwmCount,W
     0022 24D0                      1-  900     	XORIA	0xd0
     0023 0903                      1-  901     	BTRSS	STATUS,2
     0024 3rrr                      1-  902     	LGOTO	_00181_DS_
     0025 01rr                      1-  903     	MOVR	(_pwmCount + 1),W
     0026 2407                      1-  904     	XORIA	0x07
     0027 0903                      1-  905     	BTRSS	STATUS,2
     0028 3rrr                      1-  906     	LGOTO	_00181_DS_
                                    1-  907     	.line	199, "main.c"; 	pwmCount = 0;
     0029 02rr                      1-  908     	CLRR	_pwmCount
     002A 02rr                      1-  909     	CLRR	(_pwmCount + 1)
                                    1-  910     ;;unsigned compare: left < lit (0x3CA=970), size=2
     002B                           1-  911     _00181_DS_:
                                    1-  912     	.line	200, "main.c"; 	if(pwmCount < 970)
     002B 2103                      1-  913     	MOVIA	0x03
                                    1-  914     	BANKSEL	_pwmCount
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 04rr                      1-  915     	SUBAR	(_pwmCount + 1),W
     002E 0903                      1-  916     	BTRSS	STATUS,2
     002F 3rrr                      1-  917     	LGOTO	_00221_DS_
     0030 21CA                      1-  918     	MOVIA	0xca
     0031 04rr                      1-  919     	SUBAR	_pwmCount,W
     0032                           1-  920     _00221_DS_:
     0032 0C03                      1-  921     	BTRSC	STATUS,0
     0033 3rrr                      1-  922     	LGOTO	_00189_DS_
                                    1-  923     	.line	202, "main.c"; 	startPWM1();
     0034 2rrr                      1-  924     	LCALL	_startPWM1
     0035 3rrr                      1-  925     	LGOTO	_00190_DS_
                                    1-  926     ;;unsigned compare: left < lit (0x3E8=1000), size=2
     0036                           1-  927     _00189_DS_:
                                    1-  928     	.line	204, "main.c"; 	else if(pwmCount < 1000)
     0036 2103                      1-  929     	MOVIA	0x03
                                    1-  930     	BANKSEL	_pwmCount
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 04rr                      1-  931     	SUBAR	(_pwmCount + 1),W
     0039 0903                      1-  932     	BTRSS	STATUS,2
     003A 3rrr                      1-  933     	LGOTO	_00222_DS_
     003B 21E8                      1-  934     	MOVIA	0xe8
     003C 04rr                      1-  935     	SUBAR	_pwmCount,W
     003D                           1-  936     _00222_DS_:
     003D 0C03                      1-  937     	BTRSC	STATUS,0
     003E 3rrr                      1-  938     	LGOTO	_00186_DS_
                                    1-  939     	.line	205, "main.c"; 	stopPWM1();
     003F 2rrr                      1-  940     	LCALL	_stopPWM1
     0040 3rrr                      1-  941     	LGOTO	_00190_DS_
                                    1-  942     ;;unsigned compare: left < lit (0x7B2=1970), size=2
     0041                           1-  943     _00186_DS_:
                                    1-  944     	.line	206, "main.c"; 	else if(pwmCount < 1970)
     0041 2107                      1-  945     	MOVIA	0x07
                                    1-  946     	BANKSEL	_pwmCount
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 04rr                      1-  947     	SUBAR	(_pwmCount + 1),W
     0044 0903                      1-  948     	BTRSS	STATUS,2
     0045 3rrr                      1-  949     	LGOTO	_00223_DS_
     0046 21B2                      1-  950     	MOVIA	0xb2
     0047 04rr                      1-  951     	SUBAR	_pwmCount,W
     0048                           1-  952     _00223_DS_:
     0048 0C03                      1-  953     	BTRSC	STATUS,0
     0049 3rrr                      1-  954     	LGOTO	_00183_DS_
                                    1-  955     	.line	208, "main.c"; 	startPWM2();
     004A 2rrr                      1-  956     	LCALL	_startPWM2
     004B 3rrr                      1-  957     	LGOTO	_00190_DS_
     004C                           1-  958     _00183_DS_:
                                    1-  959     	.line	211, "main.c"; 	stopPWM2();
     004C 2rrr                      1-  960     	LCALL	_stopPWM2
     004D                           1-  961     _00190_DS_:
                                    1-  962     	.line	213, "main.c"; 	saveCount++;
                                    1-  963     	BANKSEL	_saveCount
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 05rr                      1-  964     	INCR	_saveCount,F
     004F 0D03                      1-  965     	BTRSC	STATUS,2
     0050 05rr                      1-  966     	INCR	(_saveCount + 1),F
                                    1-  967     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  968     ;;unsigned compare: left >= lit (0x7D1=2001), size=2
                                    1-  969     	.line	215, "main.c"; 	if(saveCount > 2000)	
     0051 2107                      1-  970     	MOVIA	0x07
     0052 04rr                      1-  971     	SUBAR	(_saveCount + 1),W
     0053 0903                      1-  972     	BTRSS	STATUS,2
     0054 3rrr                      1-  973     	LGOTO	_00224_DS_
     0055 21D1                      1-  974     	MOVIA	0xd1
     0056 04rr                      1-  975     	SUBAR	_saveCount,W
     0057                           1-  976     _00224_DS_:
     0057 0803                      1-  977     	BTRSS	STATUS,0
     0058 3rrr                      1-  978     	LGOTO	_00192_DS_
                                    1-  979     	.line	216, "main.c"; 	saveStep = workStep;
                                    1-  980     	BANKSEL	_workStep
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 01rr                      1-  981     	MOVR	_workStep,W
                                    1-  982     	BANKSEL	_saveStep
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 00rr                      1-  983     	MOVAR	_saveStep
                                    1-  984     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  985     ;;unsigned compare: left >= lit (0x2EE1=12001), size=2
     005D                           1-  986     _00192_DS_:
                                    1-  987     	.line	217, "main.c"; 	if(saveCount > 12000)
     005D 212E                      1-  988     	MOVIA	0x2e
                                    1-  989     	BANKSEL	_saveCount
     005E rrrr                      3-   71 m1      .banksel ram_address
     005F 04rr                      1-  990     	SUBAR	(_saveCount + 1),W
     0060 0903                      1-  991     	BTRSS	STATUS,2
     0061 3rrr                      1-  992     	LGOTO	_00225_DS_
     0062 21E1                      1-  993     	MOVIA	0xe1
     0063 04rr                      1-  994     	SUBAR	_saveCount,W
     0064                           1-  995     _00225_DS_:
     0064 0803                      1-  996     	BTRSS	STATUS,0
     0065 3rrr                      1-  997     	LGOTO	_00198_DS_
                                    1-  998     	.line	218, "main.c"; 	stopPWM();
     0066 2rrr                      1-  999     	LCALL	_stopPWM
     0067                           1- 1000     _00198_DS_:
                                    1- 1001     	.line	220, "main.c"; 	}
                                    1- 1002     	RETURN	
     0067 0010                      3-   26 m1      ret
                                    1- 1003     ; exit point of _pwmCon
                                    1- 1005     ;***
                                    1- 1006     ;  pBlock Stats: dbName = C
                                    1- 1007     ;***
                                    1- 1008     ;has an exit
                                    1- 1009     ;functions called:
                                    1- 1010     ;   _checkLVD
                                    1- 1011     ;   __moduint
                                    1- 1012     ;   _gotoSleep
                                    1- 1013     ;   _startPWM3
                                    1- 1014     ;   _stopPWM3
                                    1- 1015     ;   _checkLVD
                                    1- 1016     ;   __moduint
                                    1- 1017     ;   _gotoSleep
                                    1- 1018     ;   _startPWM3
                                    1- 1019     ;   _stopPWM3
                                    1- 1020     ;5 compiler assigned registers:
                                    1- 1021     ;   r0x101D
                                    1- 1022     ;   STK02
                                    1- 1023     ;   STK01
                                    1- 1024     ;   STK00
                                    1- 1025     ;   r0x101E
                                    1- 1026     ;; Starting pCode block
                                    1- 1027     .segment "code"; module=main, function=_ledCon
                                    1- 1029     ;local variable name mapping:
     0000                           1- 1031     _ledCon:
                                    1- 1032     ; 2 exit points
                                    1- 1033     	.line	121, "main.c"; 	if(checkLVD())
     0000 2rrr                      1- 1034     	LCALL	_checkLVD
                                    1- 1035     	BANKSEL	r0x101D
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1036     	MOVAR	r0x101D
     0003 01rr                      1- 1037     	MOVR	r0x101D,W
     0004 0D03                      1- 1038     	BTRSC	STATUS,2
     0005 3rrr                      1- 1039     	LGOTO	_00156_DS_
                                    1- 1040     	.line	123, "main.c"; 	if(lvdCount % 50 == 0)
     0006 2132                      1- 1041     	MOVIA	0x32
     0007 00rr                      1- 1042     	MOVAR	STK02
     0008 2100                      1- 1043     	MOVIA	0x00
     0009 00rr                      1- 1044     	MOVAR	STK01
                                    1- 1045     	BANKSEL	_lvdCount
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 01rr                      1- 1046     	MOVR	_lvdCount,W
     000C 00rr                      1- 1047     	MOVAR	STK00
     000D 01rr                      1- 1048     	MOVR	(_lvdCount + 1),W
     000E 2rrr                      1- 1049     	LCALL	__moduint
                                    1- 1050     	BANKSEL	r0x101E
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 00rr                      1- 1051     	MOVAR	r0x101E
     0011 01rr                      1- 1052     	MOVR	STK00,W
                                    1- 1053     	BANKSEL	r0x101D
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 00rr                      1- 1054     	MOVAR	r0x101D
                                    1- 1055     	BANKSEL	r0x101E
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 11rr                      1- 1056     	IORAR	r0x101E,W
     0016 0903                      1- 1057     	BTRSS	STATUS,2
     0017 3rrr                      1- 1058     	LGOTO	_00157_DS_
                                    1- 1059     	.line	125, "main.c"; 	reversebit(PORTA,0);
     0018 2101                      1- 1060     	MOVIA	0x01
     0019 12rr                      1- 1061     	XORAR	_PORTA,F
     001A 3rrr                      1- 1062     	LGOTO	_00157_DS_
     001B                           1- 1063     _00156_DS_:
                                    1- 1064     	.line	130, "main.c"; 	if(workStep)
                                    1- 1065     	BANKSEL	_workStep
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1- 1066     	MOVR	_workStep,W
     001D 0D03                      1- 1067     	BTRSC	STATUS,2
     001E 3rrr                      1- 1068     	LGOTO	_00153_DS_
                                    1- 1069     	.line	131, "main.c"; 	resetbit(PORTA,0);
     001F 1Crr                      1- 1070     	BCR	_PORTA,0
     0020 3rrr                      1- 1071     	LGOTO	_00157_DS_
     0021                           1- 1072     _00153_DS_:
                                    1- 1073     	.line	133, "main.c"; 	setbit(PORTA,0);
     0021 18rr                      1- 1074     	BSR	_PORTA,0
     0022                           1- 1075     _00157_DS_:
                                    1- 1076     	.line	136, "main.c"; 	if(getbit(PORTA, 5))
     0022 01rr                      1- 1077     	MOVR	_PORTA,W
     0023 2220                      1- 1078     	ANDIA	0x20
     0024 0903                      1- 1079     	BTRSS	STATUS,2
     0025 2101                      1- 1080     	MOVIA	0x01
                                    1- 1081     	BANKSEL	r0x101D
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 00rr                      1- 1082     	MOVAR	r0x101D
     0028 01rr                      1- 1083     	MOVR	r0x101D,W
     0029 0D03                      1- 1084     	BTRSC	STATUS,2
     002A 3rrr                      1- 1085     	LGOTO	_00168_DS_
                                    1- 1086     	.line	139, "main.c"; 	APHCON = 0xDD;		//PA5 下拉 PA1打开上拉
     002B 21DD                      1- 1087     	MOVIA	0xdd
     002C 000r                      1- 1088     	IOST	_APHCON
                                    1- 1089     	.line	140, "main.c"; 	ABPLCON = 0xFF;		//PA1 关闭下拉
     002D 21FF                      1- 1090     	MOVIA	0xff
     002E 00rr                      1- 1091     	MOVAR	_ABPLCON
                                    1- 1092     	.line	141, "main.c"; 	u8t portb1 = getbit(PORTA, 1);
     002F 01rr                      1- 1093     	MOVR	_PORTA,W
     0030 2202                      1- 1094     	ANDIA	0x02
     0031 0903                      1- 1095     	BTRSS	STATUS,2
     0032 2101                      1- 1096     	MOVIA	0x01
     0033 00rr                      1- 1097     	MOVAR	r0x101D
                                    1- 1098     	.line	142, "main.c"; 	if(portb1)
     0034 01rr                      1- 1099     	MOVR	r0x101D,W
     0035 0D03                      1- 1100     	BTRSC	STATUS,2
     0036 3rrr                      1- 1101     	LGOTO	_00159_DS_
                                    1- 1102     	.line	144, "main.c"; 	resetbit(PORTB,4);
     0037 1Err                      1- 1103     	BCR	_PORTB,4
                                    1- 1104     	.line	145, "main.c"; 	setbit(PORTB,5);
     0038 1Arr                      1- 1105     	BSR	_PORTB,5
     0039 3rrr                      1- 1106     	LGOTO	_00169_DS_
     003A                           1- 1107     _00159_DS_:
                                    1- 1108     	.line	149, "main.c"; 	setbit(PORTB,4);
     003A 1Arr                      1- 1109     	BSR	_PORTB,4
                                    1- 1110     	.line	150, "main.c"; 	resetbit(PORTB,5);
     003B 1Err                      1- 1111     	BCR	_PORTB,5
     003C 3rrr                      1- 1112     	LGOTO	_00169_DS_
     003D                           1- 1113     _00168_DS_:
                                    1- 1114     	.line	155, "main.c"; 	APHCON = 0xDF;		//PA5 下拉 PA1关闭上拉
     003D 21DF                      1- 1115     	MOVIA	0xdf
     003E 000r                      1- 1116     	IOST	_APHCON
                                    1- 1117     	.line	156, "main.c"; 	ABPLCON = 0xFD;		//PA1 下拉
     003F 21FD                      1- 1118     	MOVIA	0xfd
     0040 00rr                      1- 1119     	MOVAR	_ABPLCON
                                    1- 1120     	.line	157, "main.c"; 	setbit(PORTB,4);
     0041 1Arr                      1- 1121     	BSR	_PORTB,4
                                    1- 1122     	.line	158, "main.c"; 	setbit(PORTB,5);
     0042 1Arr                      1- 1123     	BSR	_PORTB,5
                                    1- 1124     	.line	159, "main.c"; 	if(!workStep)
                                    1- 1125     	BANKSEL	_workStep
     0043 rrrr                      3-   71 m1      .banksel ram_address
     0044 01rr                      1- 1126     	MOVR	_workStep,W
     0045 0903                      1- 1127     	BTRSS	STATUS,2
     0046 3rrr                      1- 1128     	LGOTO	_00165_DS_
                                    1- 1129     	.line	161, "main.c"; 	if(++sleepCount == 500 && (!keyCount))
                                    1- 1130     	BANKSEL	_sleepCount
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 05rr                      1- 1131     	INCR	_sleepCount,F
     0049 0D03                      1- 1132     	BTRSC	STATUS,2
     004A 05rr                      1- 1133     	INCR	(_sleepCount + 1),F
     004B 01rr                      1- 1134     	MOVR	_sleepCount,W
     004C 24F4                      1- 1135     	XORIA	0xf4
     004D 0903                      1- 1136     	BTRSS	STATUS,2
     004E 3rrr                      1- 1137     	LGOTO	_00169_DS_
     004F 01rr                      1- 1138     	MOVR	(_sleepCount + 1),W
     0050 2401                      1- 1139     	XORIA	0x01
     0051 0903                      1- 1140     	BTRSS	STATUS,2
     0052 3rrr                      1- 1141     	LGOTO	_00169_DS_
                                    1- 1142     	BANKSEL	_keyCount
     0053 rrrr                      3-   71 m1      .banksel ram_address
     0054 01rr                      1- 1143     	MOVR	_keyCount,W
     0055 11rr                      1- 1144     	IORAR	(_keyCount + 1),W
     0056 0903                      1- 1145     	BTRSS	STATUS,2
     0057 3rrr                      1- 1146     	LGOTO	_00169_DS_
                                    1- 1147     	.line	163, "main.c"; 	sleepCount = 0;
                                    1- 1148     	BANKSEL	_sleepCount
     0058 rrrr                      3-   71 m1      .banksel ram_address
     0059 02rr                      1- 1149     	CLRR	_sleepCount
     005A 02rr                      1- 1150     	CLRR	(_sleepCount + 1)
                                    1- 1151     	.line	164, "main.c"; 	AWUCON = 0x22;		//PA5,PA1唤醒
     005B 2122                      1- 1152     	MOVIA	0x22
     005C 00rr                      1- 1153     	MOVAR	_AWUCON
                                    1- 1154     	.line	165, "main.c"; 	gotoSleep(0x02);	//PB1唤醒
     005D 2102                      1- 1155     	MOVIA	0x02
     005E 2rrr                      1- 1156     	LCALL	_gotoSleep
     005F 3rrr                      1- 1157     	LGOTO	_00169_DS_
     0060                           1- 1158     _00165_DS_:
                                    1- 1159     	.line	169, "main.c"; 	sleepCount = 0;
                                    1- 1160     	BANKSEL	_sleepCount
     0060 rrrr                      3-   71 m1      .banksel ram_address
     0061 02rr                      1- 1161     	CLRR	_sleepCount
     0062 02rr                      1- 1162     	CLRR	(_sleepCount + 1)
     0063                           1- 1163     _00169_DS_:
                                    1- 1164     	.line	173, "main.c"; 	if(spkCount > 0)
                                    1- 1165     	BANKSEL	_spkCount
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 01rr                      1- 1166     	MOVR	_spkCount,W
     0065 0D03                      1- 1167     	BTRSC	STATUS,2
     0066 3rrr                      1- 1168     	LGOTO	_00173_DS_
                                    1- 1169     	.line	175, "main.c"; 	spkCount--;
     0067 06rr                      1- 1170     	DECR	_spkCount,F
                                    1- 1171     	.line	176, "main.c"; 	if(!beepFlag)
                                    1- 1172     	BANKSEL	_beepFlag
     0068 rrrr                      3-   71 m1      .banksel ram_address
     0069 01rr                      1- 1173     	MOVR	_beepFlag,W
     006A 0903                      1- 1174     	BTRSS	STATUS,2
     006B 3rrr                      1- 1175     	LGOTO	_00175_DS_
                                    1- 1176     	.line	177, "main.c"; 	startPWM3();
     006C 2rrr                      1- 1177     	LCALL	_startPWM3
     006D 3rrr                      1- 1178     	LGOTO	_00175_DS_
     006E                           1- 1179     _00173_DS_:
                                    1- 1180     	.line	181, "main.c"; 	stopPWM3();
     006E 2rrr                      1- 1181     	LCALL	_stopPWM3
     006F                           1- 1182     _00175_DS_:
                                    1- 1183     	.line	185, "main.c"; 	}
                                    1- 1184     	RETURN	
     006F 0010                      3-   26 m1      ret
                                    1- 1185     ; exit point of _ledCon
                                    1- 1188     ;	code size estimation:
                                    1- 1189     ;	  399+   66 =   465 instructions ( 1062 byte)
                                    1- 1191     	end
                                    1- 1191     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__gptrget1              Label    00000000
__moduint               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00118_DS_              Label    00000013
_00119_DS_              Label    00000014
_00123_DS_              Label    00000034
_00126_DS_              Label    00000002
_00145_DS_              Label    00000026
_00153_DS_              Label    00000021
_00156_DS_              Label    0000001B
_00157_DS_              Label    00000022
_00159_DS_              Label    0000003A
_00165_DS_              Label    00000060
_00168_DS_              Label    0000003D
_00169_DS_              Label    00000063
_00173_DS_              Label    0000006E
_00175_DS_              Label    0000006F
_00181_DS_              Label    0000002B
_00183_DS_              Label    0000004C
_00186_DS_              Label    00000041
_00189_DS_              Label    00000036
_00190_DS_              Label    0000004D
_00192_DS_              Label    0000005D
_00196_DS_              Label    0000001D
_00198_DS_              Label    00000067
_00221_DS_              Label    00000032
_00222_DS_              Label    0000003D
_00223_DS_              Label    00000048
_00224_DS_              Label    00000057
_00225_DS_              Label    00000064
_00244_DS_              Label    00000008
_00264_DS_              Label    0000003F
_00267_DS_              Label    00000034
_00272_DS_              Label    00000021
_00275_DS_              Label    00000042
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_beepFlag               Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkLVD               Label    00000000
_CMPCR                  Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_dutys                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initPWM                Label    00000000
_initTimer0             Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_ledCon                 Label    00000000
_lvdCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmCon                 Label    00000000
_pwmCount               Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_saveCount              Label    00000000
_saveStep               Label    00000000
_sleepCount             Label    00000000
_spkCount               Label    00000000
_startPWM1              Label    00000000
_startPWM2              Label    00000000
_startPWM3              Label    00000000
_STATUS                 Label    00000000
_stopPWM                Label    00000000
_stopPWM1               Label    00000000
_stopPWM2               Label    00000000
_stopPWM3               Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workFlag               Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x101F                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
