
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_delay
                                    1-   57     	extern	_keyRead
                                    1-   58     	extern	_pwmStop
                                    1-   59     	extern	_pwmStart
                                    1-   60     	extern	_checkLVD
                                    1-   61     	extern	_delayCon
                                    1-   62     	extern	_gotoSleep
                                    1-   63     	extern	_keyCon
                                    1-   64     	extern	_ledCon
                                    1-   65     	extern	_isr
                                    1-   66     	extern	_main
                                    1-   67     	extern	_keyCount
                                    1-   68     	extern	_count500ms
                                    1-   69     	extern	_count4s
                                    1-   70     	extern	_count4Hour
                                    1-   71     	extern	_intCount
                                    1-   72     	extern	_IntFlag
                                    1-   73     	extern	_lvdFlag
                                    1-   74     	extern	_workStep
                                    1-   75     	extern	_powerFlag
                                    1-   76     	extern	_ledCount
                                    1-   77     	extern	_setTimeFlag
                                    1-   78     	extern	_sleepDelay
                                    1-   79     	extern	_step2Count
                                    1-   80     	extern	_longPressFlag
                                    1-   81     	extern	_keyNub
                                    1-   82     	extern	_duty
                                    1-   83     	extern	_keyClick
                                    1-   84     	extern	_lvdCount
                                    1-   86     	extern PSAVE
                                    1-   87     	extern SSAVE
                                    1-   88     	extern WSAVE
                                    1-   89     	extern STK12
                                    1-   90     	extern STK11
                                    1-   91     	extern STK10
                                    1-   92     	extern STK09
                                    1-   93     	extern STK08
                                    1-   94     	extern STK07
                                    1-   95     	extern STK06
                                    1-   96     	extern STK05
                                    1-   97     	extern STK04
                                    1-   98     	extern STK03
                                    1-   99     	extern STK02
                                    1-  100     	extern STK01
                                    1-  101     	extern STK00
                                    1-  103     .segment "uninit", 0x20000010
 20000010                           1-  104     PSAVE:
                                    1-  105     	.res 1
 20000011                           1-  106     SSAVE:
                                    1-  107     	.res 1
 20000012                           1-  108     WSAVE:
                                    1-  109     	.res 1
 20000013                           1-  110     STK12:
                                    1-  111     	.res 1
 20000014                           1-  112     STK11:
                                    1-  113     	.res 1
 20000015                           1-  114     STK10:
                                    1-  115     	.res 1
 20000016                           1-  116     STK09:
                                    1-  117     	.res 1
 20000017                           1-  118     STK08:
                                    1-  119     	.res 1
 20000018                           1-  120     STK07:
                                    1-  121     	.res 1
 20000019                           1-  122     STK06:
                                    1-  123     	.res 1
 2000001A                           1-  124     STK05:
                                    1-  125     	.res 1
 2000001B                           1-  126     STK04:
                                    1-  127     	.res 1
 2000001C                           1-  128     STK03:
                                    1-  129     	.res 1
 2000001D                           1-  130     STK02:
                                    1-  131     	.res 1
 2000001E                           1-  132     STK01:
                                    1-  133     	.res 1
 2000001F                           1-  134     STK00:
                                    1-  135     	.res 1
                                    1-  137     ;--------------------------------------------------------
                                    1-  138     ; global definitions
                                    1-  139     ;--------------------------------------------------------
                                    1-  140     ;--------------------------------------------------------
                                    1-  141     ; absolute symbol definitions
                                    1-  142     ;--------------------------------------------------------
                                    1-  143     ;--------------------------------------------------------
                                    1-  144     ; compiler-defined variables
                                    1-  145     ;--------------------------------------------------------
                                    1-  146     .segment "uninit"
     0000                           1-  147     r0x101F:
                                    1-  148     	.res	1
                                    1-  149     .segment "uninit"
     0000                           1-  150     r0x1020:
                                    1-  151     	.res	1
                                    1-  152     .segment "uninit"
     0000                           1-  153     r0x101D:
                                    1-  154     	.res	1
                                    1-  155     .segment "uninit"
     0000                           1-  156     r0x101B:
                                    1-  157     	.res	1
                                    1-  158     .segment "uninit"
     0000                           1-  159     r0x1018:
                                    1-  160     	.res	1
                                    1-  161     .segment "uninit"
     0000                           1-  162     r0x1017:
                                    1-  163     	.res	1
                                    1-  164     .segment "uninit"
     0000                           1-  165     r0x1019:
                                    1-  166     	.res	1
                                    1-  167     .segment "uninit"
     0000                           1-  168     r0x101A:
                                    1-  169     	.res	1
                                    1-  170     ;--------------------------------------------------------
                                    1-  171     ; initialized data
                                    1-  172     ;--------------------------------------------------------
                                    1-  174     .segment "idata"
     0000                           1-  175     _keyCount:
     0000 0000 0000                 1-  176     	dw	0x00, 0x00
                                    1-  180     .segment "idata"
     0000                           1-  181     _count500ms:
     0000 0000 0000                 1-  182     	dw	0x00, 0x00
                                    1-  186     .segment "idata"
     0000                           1-  187     _count4s:
     0000 0000 0000                 1-  188     	dw	0x00, 0x00
                                    1-  192     .segment "idata"
     0000                           1-  193     _count4Hour:
     0000 0000 0000                 1-  194     	dw	0x00, 0x00
                                    1-  198     .segment "idata"
     0000                           1-  199     _intCount:
     0000 0000                      1-  200     	dw	0x00
                                    1-  204     .segment "idata"
     0000                           1-  205     _IntFlag:
     0000 0000                      1-  206     	dw	0x00
                                    1-  210     .segment "idata"
     0000                           1-  211     _lvdFlag:
     0000 0000                      1-  212     	dw	0x00
                                    1-  216     .segment "idata"
     0000                           1-  217     _workStep:
     0000 0000                      1-  218     	dw	0x00
                                    1-  222     .segment "idata"
     0000                           1-  223     _powerFlag:
     0000 0000                      1-  224     	dw	0x00
                                    1-  228     .segment "idata"
     0000                           1-  229     _ledCount:
     0000 0000                      1-  230     	dw	0x00
                                    1-  234     .segment "idata"
     0000                           1-  235     _setTimeFlag:
     0000 0000                      1-  236     	dw	0x00
                                    1-  240     .segment "idata"
     0000                           1-  241     _sleepDelay:
     0000 0000                      1-  242     	dw	0x00
                                    1-  246     .segment "idata"
     0000                           1-  247     _step2Count:
     0000 0000                      1-  248     	dw	0x00
                                    1-  252     .segment "idata"
     0000                           1-  253     _longPressFlag:
     0000 0000                      1-  254     	dw	0x00
                                    1-  258     .segment "idata"
     0000                           1-  259     _keyNub:
     0000 0000                      1-  260     	dw	0x00
                                    1-  264     .segment "idata"
     0000                           1-  265     _duty:
     0000 0000                      1-  266     	dw	0x00
                                    1-  270     .segment "idata"
     0000                           1-  271     _keyClick:
     0000 0000                      1-  272     	dw	0x00
                                    1-  276     .segment "idata"
     0000                           1-  277     _lvdCount:
     0000 0000                      1-  278     	dw	0x00
                                    1-  281     ;--------------------------------------------------------
                                    1-  282     ; overlayable items in internal ram 
                                    1-  283     ;--------------------------------------------------------
                                    1-  284     ;	udata_ovr
                                    1-  285     ;--------------------------------------------------------
                                    1-  286     ; reset vector 
                                    1-  287     ;--------------------------------------------------------
                                    1-  288     ORG	0x0000
     0000 3rrr                      1-  289     	LGOTO	__nyc_ny8_startup
                                    1-  290     ;--------------------------------------------------------
                                    1-  291     ; interrupt and initialization code
                                    1-  292     ;--------------------------------------------------------
                                    1-  293     ORG 0x0008
     0008 3rrr                      1-  294     	lgoto	__sdcc_interrupt
                                    1-  296     .segment "code"
     0000                           1-  297     __sdcc_interrupt:
                                    1-  298     ;***
                                    1-  299     ;  pBlock Stats: dbName = I
                                    1-  300     ;***
                                    1-  301     ;2 compiler assigned registers:
                                    1-  302     ;   STK00
                                    1-  303     ;   STK01
                                    1-  304     ;; Starting pCode block
     0000                           1-  305     _isr:
                                    1-  306     ; 0 exit points
                                    1-  307     	.line	66, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  308     	MOVAR	WSAVE
     0001 1503                      1-  309     	SWAPR	STATUS,W
     0002 0283                      1-  310     	CLRR	STATUS
     0003 00rr                      1-  311     	MOVAR	SSAVE
     0004 010A                      1-  312     	MOVR	PCHBUF,W
     0005 028A                      1-  313     	CLRR	PCHBUF
     0006 00rr                      1-  314     	MOVAR	PSAVE
     0007 0104                      1-  315     	MOVR	FSR,W
     0008 00rr                      1-  316     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  317     	MOVR	STK00,W
     000A 00rr                      1-  318     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  319     	MOVR	STK01,W
     000C 00rr                      1-  320     	MOVAR	___sdcc_saved_stk01
                                    1-  321     	.line	68, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  322     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  323     	LGOTO	_00113_DS_
                                    1-  324     	.line	70, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  325     	MOVIA	0x37
     0010 03rr                      1-  326     	ADDAR	_TMR0,F
                                    1-  327     	.line	71, "main.c"; 	intCount++;
     0011 05rr                      1-  328     	INCR	_intCount,F
                                    1-  329     	.line	72, "main.c"; 	if(duty)
     0012 01rr                      1-  330     	MOVR	_duty,W
     0013 0D03                      1-  331     	BTRSC	STATUS,2
     0014 3rrr                      1-  332     	LGOTO	_00109_DS_
                                    1-  333     	.line	74, "main.c"; 	if(intCount > duty)
     0015 01rr                      1-  334     	MOVR	_intCount,W
     0016 04rr                      1-  335     	SUBAR	_duty,W
     0017 0C03                      1-  336     	BTRSC	STATUS,0
     0018 3rrr                      1-  337     	LGOTO	_00106_DS_
                                    1-  338     	.line	75, "main.c"; 	LED12OFF();
     0019 21CF                      1-  339     	MOVIA	0xcf
     001A 10rr                      1-  340     	ANDAR	_PORTB,F
     001B 3rrr                      1-  341     	LGOTO	_00109_DS_
     001C                           1-  342     _00106_DS_:
                                    1-  343     	.line	77, "main.c"; 	LED12ON();
     001C 2130                      1-  344     	MOVIA	0x30
     001D 11rr                      1-  345     	IORAR	_PORTB,F
     001E                           1-  346     _00109_DS_:
                                    1-  347     	.line	79, "main.c"; 	if(intCount == 100)
     001E 01rr                      1-  348     	MOVR	_intCount,W
     001F 2464                      1-  349     	XORIA	0x64
     0020 0903                      1-  350     	BTRSS	STATUS,2
     0021 3rrr                      1-  351     	LGOTO	_00113_DS_
                                    1-  352     	.line	81, "main.c"; 	intCount = 0;
     0022 02rr                      1-  353     	CLRR	_intCount
                                    1-  354     	.line	82, "main.c"; 	IntFlag = 1;
     0023 2101                      1-  355     	MOVIA	0x01
     0024 00rr                      1-  356     	MOVAR	_IntFlag
     0025                           1-  357     _00113_DS_:
                                    1-  358     	.line	85, "main.c"; 	if(INTFbits.PBIF)
     0025 08rr                      1-  359     	BTRSS	_INTFbits,1
     0026 3rrr                      1-  360     	LGOTO	_00115_DS_
                                    1-  361     	.line	87, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0027 21FD                      1-  362     	MOVIA	0xfd
     0028 00rr                      1-  363     	MOVAR	_INTF
     0029                           1-  364     _00115_DS_:
                                    1-  365     	.line	90, "main.c"; 	INTF = 0;
     0029 02rr                      1-  366     	CLRR	_INTF
                                    1-  367     	.line	92, "main.c"; 	}
     002A 01rr                      1-  368     	MOVR	___sdcc_saved_stk01,W
     002B 00rr                      1-  369     	MOVAR	STK01
     002C 01rr                      1-  370     	MOVR	___sdcc_saved_stk00,W
     002D 00rr                      1-  371     	MOVAR	STK00
     002E 01rr                      1-  372     	MOVR	___sdcc_saved_fsr,W
     002F 0084                      1-  373     	MOVAR	FSR
     0030 01rr                      1-  374     	MOVR	PSAVE,W
     0031 008A                      1-  375     	MOVAR	PCHBUF
     0032 0283                      1-  376     	CLRR	STATUS
     0033 15rr                      1-  377     	SWAPR	SSAVE,W
     0034 0083                      1-  378     	MOVAR	STATUS
     0035 15rr                      1-  379     	SWAPR	WSAVE,F
     0036 15rr                      1-  380     	SWAPR	WSAVE,W
     0037                           1-  381     END_OF_INTERRUPT:
     0037 0011                      1-  382     	RETIE	
                                    1-  384     ;--------------------------------------------------------
                                    1-  385     ; code
                                    1-  386     ;--------------------------------------------------------
                                    1-  387     ;***
                                    1-  388     ;  pBlock Stats: dbName = M
                                    1-  389     ;***
                                    1-  390     ;has an exit
                                    1-  391     ;functions called:
                                    1-  392     ;   _gotoSleep
                                    1-  393     ;   _checkLVD
                                    1-  394     ;   _delayCon
                                    1-  395     ;   _keyCon
                                    1-  396     ;   _ledCon
                                    1-  397     ;   _gotoSleep
                                    1-  398     ;   _checkLVD
                                    1-  399     ;   _delayCon
                                    1-  400     ;   _keyCon
                                    1-  401     ;   _ledCon
                                    1-  402     ;; Starting pCode block
                                    1-  403     .segment "code"; module=main, function=_main
     0000                           1-  405     _main:
                                    1-  406     ; 2 exit points
                                    1-  407     	.line	98, "main.c"; 	PORTB = 0xCB;
     0000 21CB                      1-  408     	MOVIA	0xcb
     0001 00rr                      1-  409     	MOVAR	_PORTB
                                    1-  410     	.line	99, "main.c"; 	BPHCON = 0xF7;		//PB3 ����
     0002 21F7                      1-  411     	MOVIA	0xf7
     0003 00rr                      1-  412     	MOVAR	_BPHCON
                                    1-  413     	.line	102, "main.c"; 	IOSTB =  C_PB0_Input | C_PB1_Input | C_PB3_Input;	
     0004 210B                      1-  414     	MOVIA	0x0b
     0005 000r                      1-  415     	IOST	_IOSTB
                                    1-  416     	.line	103, "main.c"; 	PORTB = 0xCB;                        	// PortB Data Register = 0x00
     0006 21CB                      1-  417     	MOVIA	0xcb
     0007 00rr                      1-  418     	MOVAR	_PORTB
                                    1-  419     	.line	104, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     0008 21A8                      1-  420     	MOVIA	0xa8
     0009 00rr                      1-  421     	MOVAR	_PCON
                                    1-  422     	.line	106, "main.c"; 	PCON1 = C_TMR0_Dis;
     000A 0200                      1-  423     	CLRA	
     000B 000r                      1-  424     	IOST	_PCON1
                                    1-  425     	.line	108, "main.c"; 	TMR0 = 55;
     000C 2137                      1-  426     	MOVIA	0x37
     000D 00rr                      1-  427     	MOVAR	_TMR0
                                    1-  428     	.line	109, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000E 0200                      1-  429     	CLRA	
     000F 0003                      1-  430     	T0MD	
                                    1-  431     	.line	111, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0010 2115                      1-  432     	MOVIA	0x15
     0011 000r                      1-  433     	IOST	_PCON1
                                    1-  434     	.line	113, "main.c"; 	ENI();	
     0012 0004                      1-  435     	ENI
                                    1-  436     	.line	114, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  437     	LCALL	_gotoSleep
     0014                           1-  438     _00126_DS_:
                                    1-  439     	.line	117, "main.c"; 	CLRWDT();  
     0014 0002                      1-  440     	clrwdt
                                    1-  441     	.line	118, "main.c"; 	if(!IntFlag)
     0015 01rr                      1-  442     	MOVR	_IntFlag,W
     0016 0D03                      1-  443     	BTRSC	STATUS,2
     0017 3rrr                      1-  444     	LGOTO	_00126_DS_
                                    1-  445     	.line	121, "main.c"; 	IntFlag = 0;
     0018 02rr                      1-  446     	CLRR	_IntFlag
                                    1-  447     	.line	122, "main.c"; 	if(workStep && lvdFlag == 0)
     0019 01rr                      1-  448     	MOVR	_workStep,W
     001A 0D03                      1-  449     	BTRSC	STATUS,2
     001B 3rrr                      1-  450     	LGOTO	_00123_DS_
     001C 01rr                      1-  451     	MOVR	_lvdFlag,W
     001D 0D03                      1-  452     	BTRSC	STATUS,2
                                    1-  453     	.line	123, "main.c"; 	checkLVD();
     001E 2rrr                      1-  454     	LCALL	_checkLVD
     001F                           1-  455     _00123_DS_:
                                    1-  456     	.line	124, "main.c"; 	delayCon();
     001F 2rrr                      1-  457     	LCALL	_delayCon
                                    1-  458     	.line	125, "main.c"; 	keyCon();
     0020 2rrr                      1-  459     	LCALL	_keyCon
                                    1-  460     	.line	126, "main.c"; 	ledCon();
     0021 2rrr                      1-  461     	LCALL	_ledCon
     0022 3rrr                      1-  462     	LGOTO	_00126_DS_
                                    1-  463     	.line	128, "main.c"; 	}
                                    1-  464     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  465     ; exit point of _main
                                    1-  467     ;***
                                    1-  468     ;  pBlock Stats: dbName = C
                                    1-  469     ;***
                                    1-  470     ;has an exit
                                    1-  471     ;5 compiler assigned registers:
                                    1-  472     ;   r0x1017
                                    1-  473     ;   STK00
                                    1-  474     ;   r0x1018
                                    1-  475     ;   r0x1019
                                    1-  476     ;   r0x101A
                                    1-  477     ;; Starting pCode block
                                    1-  478     .segment "code"; module=main, function=_delay
                                    1-  480     ;local variable name mapping:
     0000                           1-  485     _delay:
                                    1-  486     ; 2 exit points
                                    1-  487     	.line	432, "main.c"; 	void delay(u16t time)
     0000 00rr                      1-  488     	MOVAR	r0x1017
     0001 01rr                      1-  489     	MOVR	STK00,W
     0002 00rr                      1-  490     	MOVAR	r0x1018
                                    1-  491     	.line	434, "main.c"; 	for(u16t i=0;i<time;i++);
     0003 02rr                      1-  492     	CLRR	r0x1019
     0004 02rr                      1-  493     	CLRR	r0x101A
     0005                           1-  494     _00371_DS_:
     0005 01rr                      1-  495     	MOVR	r0x1017,W
     0006 04rr                      1-  496     	SUBAR	r0x101A,W
     0007 0903                      1-  497     	BTRSS	STATUS,2
     0008 3rrr                      1-  498     	LGOTO	_00382_DS_
     0009 01rr                      1-  499     	MOVR	r0x1018,W
     000A 04rr                      1-  500     	SUBAR	r0x1019,W
     000B                           1-  501     _00382_DS_:
     000B 0C03                      1-  502     	BTRSC	STATUS,0
     000C 3rrr                      1-  503     	LGOTO	_00373_DS_
     000D 05rr                      1-  504     	INCR	r0x1019,F
     000E 0D03                      1-  505     	BTRSC	STATUS,2
     000F 05rr                      1-  506     	INCR	r0x101A,F
     0010 3rrr                      1-  507     	LGOTO	_00371_DS_
     0011                           1-  508     _00373_DS_:
                                    1-  509     	.line	435, "main.c"; 	}
                                    1-  510     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  511     ; exit point of _delay
                                    1-  513     ;***
                                    1-  514     ;  pBlock Stats: dbName = C
                                    1-  515     ;***
                                    1-  516     ;has an exit
                                    1-  517     ;1 compiler assigned register :
                                    1-  518     ;   r0x101B
                                    1-  519     ;; Starting pCode block
                                    1-  520     .segment "code"; module=main, function=_keyRead
                                    1-  522     ;local variable name mapping:
     0000                           1-  524     _keyRead:
                                    1-  525     ; 2 exit points
                                    1-  526     	.line	396, "main.c"; 	char keyRead(char KeyStatus)	
     0000 00rr                      1-  527     	MOVAR	r0x101B
                                    1-  528     	.line	398, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  529     	MOVR	r0x101B,W
     0002 0D03                      1-  530     	BTRSC	STATUS,2
     0003 3rrr                      1-  531     	LGOTO	_00343_DS_
                                    1-  532     	.line	400, "main.c"; 	keyNub = KeyStatus;
     0004 01rr                      1-  533     	MOVR	r0x101B,W
     0005 00rr                      1-  534     	MOVAR	_keyNub
                                    1-  535     	.line	401, "main.c"; 	keyCount++;
     0006 05rr                      1-  536     	INCR	_keyCount,F
     0007 0D03                      1-  537     	BTRSC	STATUS,2
     0008 05rr                      1-  538     	INCR	(_keyCount + 1),F
                                    1-  539     ;;unsigned compare: left < lit (0x96=150), size=2
                                    1-  540     	.line	402, "main.c"; 	if(keyCount >= 150)
     0009 2100                      1-  541     	MOVIA	0x00
     000A 04rr                      1-  542     	SUBAR	(_keyCount + 1),W
     000B 0903                      1-  543     	BTRSS	STATUS,2
     000C 3rrr                      1-  544     	LGOTO	_00362_DS_
     000D 2196                      1-  545     	MOVIA	0x96
     000E 04rr                      1-  546     	SUBAR	_keyCount,W
     000F                           1-  547     _00362_DS_:
     000F 0803                      1-  548     	BTRSS	STATUS,0
     0010 3rrr                      1-  549     	LGOTO	_00344_DS_
                                    1-  550     	.line	404, "main.c"; 	keyCount = 200;
     0011 21C8                      1-  551     	MOVIA	0xc8
     0012 00rr                      1-  552     	MOVAR	_keyCount
     0013 02rr                      1-  553     	CLRR	(_keyCount + 1)
                                    1-  554     	.line	405, "main.c"; 	if(!longPressFlag)
     0014 01rr                      1-  555     	MOVR	_longPressFlag,W
     0015 0903                      1-  556     	BTRSS	STATUS,2
     0016 3rrr                      1-  557     	LGOTO	_00344_DS_
                                    1-  558     	.line	407, "main.c"; 	longPressFlag = 1;
     0017 2101                      1-  559     	MOVIA	0x01
     0018 00rr                      1-  560     	MOVAR	_longPressFlag
                                    1-  561     	.line	408, "main.c"; 	return 2;
     0019 2102                      1-  562     	MOVIA	0x02
     001A 3rrr                      1-  563     	LGOTO	_00345_DS_
                                    1-  564     ;;unsigned compare: left < lit (0x96=150), size=2
     001B                           1-  565     _00343_DS_:
                                    1-  566     	.line	414, "main.c"; 	if(keyCount >= 150)
     001B 2100                      1-  567     	MOVIA	0x00
     001C 04rr                      1-  568     	SUBAR	(_keyCount + 1),W
     001D 0903                      1-  569     	BTRSS	STATUS,2
     001E 3rrr                      1-  570     	LGOTO	_00363_DS_
     001F 2196                      1-  571     	MOVIA	0x96
     0020 04rr                      1-  572     	SUBAR	_keyCount,W
     0021                           1-  573     _00363_DS_:
     0021 0803                      1-  574     	BTRSS	STATUS,0
     0022 3rrr                      1-  575     	LGOTO	_00340_DS_
                                    1-  576     	.line	416, "main.c"; 	keyCount = 0;
     0023 02rr                      1-  577     	CLRR	_keyCount
     0024 02rr                      1-  578     	CLRR	(_keyCount + 1)
                                    1-  579     	.line	417, "main.c"; 	longPressFlag = 0;
     0025 02rr                      1-  580     	CLRR	_longPressFlag
                                    1-  581     	.line	418, "main.c"; 	return	0;
     0026 2100                      1-  582     	MOVIA	0x00
     0027 3rrr                      1-  583     	LGOTO	_00345_DS_
                                    1-  584     ;;unsigned compare: left < lit (0x8=8), size=2
     0028                           1-  585     _00340_DS_:
                                    1-  586     	.line	420, "main.c"; 	else if(keyCount >= 8)
     0028 2100                      1-  587     	MOVIA	0x00
     0029 04rr                      1-  588     	SUBAR	(_keyCount + 1),W
     002A 0903                      1-  589     	BTRSS	STATUS,2
     002B 3rrr                      1-  590     	LGOTO	_00364_DS_
     002C 2108                      1-  591     	MOVIA	0x08
     002D 04rr                      1-  592     	SUBAR	_keyCount,W
     002E                           1-  593     _00364_DS_:
     002E 0803                      1-  594     	BTRSS	STATUS,0
     002F 3rrr                      1-  595     	LGOTO	_00341_DS_
                                    1-  596     	.line	422, "main.c"; 	keyCount = 0;
     0030 02rr                      1-  597     	CLRR	_keyCount
     0031 02rr                      1-  598     	CLRR	(_keyCount + 1)
                                    1-  599     	.line	423, "main.c"; 	return	1;
     0032 2101                      1-  600     	MOVIA	0x01
     0033 3rrr                      1-  601     	LGOTO	_00345_DS_
     0034                           1-  602     _00341_DS_:
                                    1-  603     	.line	425, "main.c"; 	keyCount = 0;
     0034 02rr                      1-  604     	CLRR	_keyCount
     0035 02rr                      1-  605     	CLRR	(_keyCount + 1)
                                    1-  606     	.line	426, "main.c"; 	keyNub = 0;
     0036 02rr                      1-  607     	CLRR	_keyNub
     0037                           1-  608     _00344_DS_:
                                    1-  609     	.line	428, "main.c"; 	return 0;
     0037 2100                      1-  610     	MOVIA	0x00
     0038                           1-  611     _00345_DS_:
                                    1-  612     	.line	429, "main.c"; 	}
                                    1-  613     	RETURN	
     0038 0010                      3-   26 m1      ret
                                    1-  614     ; exit point of _keyRead
                                    1-  616     ;***
                                    1-  617     ;  pBlock Stats: dbName = C
                                    1-  618     ;***
                                    1-  619     ;has an exit
                                    1-  620     ;; Starting pCode block
                                    1-  621     .segment "code"; module=main, function=_pwmStop
     0000                           1-  623     _pwmStop:
                                    1-  624     ; 2 exit points
                                    1-  625     	.line	390, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  626     	CLRA	
     0001 002r                      1-  627     	SFUN	_T1CR1
                                    1-  628     	.line	391, "main.c"; 	PWM1DUTY = 0;
     0002 002r                      1-  629     	SFUN	_PWM1DUTY
                                    1-  630     	.line	392, "main.c"; 	PORTB &= 0xFC;	//�ر� 
     0003 21FC                      1-  631     	MOVIA	0xfc
     0004 10rr                      1-  632     	ANDAR	_PORTB,F
                                    1-  633     	.line	393, "main.c"; 	}
                                    1-  634     	RETURN	
     0005 0010                      3-   26 m1      ret
                                    1-  635     ; exit point of _pwmStop
                                    1-  637     ;***
                                    1-  638     ;  pBlock Stats: dbName = C
                                    1-  639     ;***
                                    1-  640     ;has an exit
                                    1-  641     ;; Starting pCode block
                                    1-  642     .segment "code"; module=main, function=_pwmStart
     0000                           1-  644     _pwmStart:
                                    1-  645     ; 2 exit points
                                    1-  646     	.line	380, "main.c"; 	LED1ON();
     0000 1Arr                      1-  647     	BSR	_PORTB,5
                                    1-  648     	.line	381, "main.c"; 	TMR1 = 0x11;							//Ƶ��Ϊ110K
     0001 2111                      1-  649     	MOVIA	0x11
     0002 002r                      1-  650     	SFUN	_TMR1
                                    1-  651     	.line	382, "main.c"; 	PWM1DUTY = 0x08;				// 		
     0003 2108                      1-  652     	MOVIA	0x08
     0004 002r                      1-  653     	SFUN	_PWM1DUTY
                                    1-  654     	.line	384, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0005 0200                      1-  655     	CLRA	
     0006 002r                      1-  656     	SFUN	_T1CR2
                                    1-  657     	.line	385, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0007 2183                      1-  658     	MOVIA	0x83
     0008 002r                      1-  659     	SFUN	_T1CR1
                                    1-  660     	.line	386, "main.c"; 	}
                                    1-  661     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1-  662     ; exit point of _pwmStart
                                    1-  664     ;***
                                    1-  665     ;  pBlock Stats: dbName = C
                                    1-  666     ;***
                                    1-  667     ;has an exit
                                    1-  668     ;functions called:
                                    1-  669     ;   _delay
                                    1-  670     ;   _delay
                                    1-  671     ;3 compiler assigned registers:
                                    1-  672     ;   STK00
                                    1-  673     ;   r0x101C
                                    1-  674     ;   r0x101D
                                    1-  675     ;; Starting pCode block
                                    1-  676     .segment "code"; module=main, function=_checkLVD
     0000                           1-  678     _checkLVD:
                                    1-  679     ; 2 exit points
                                    1-  680     	.line	354, "main.c"; 	PCON1 = C_LVD_2P9V | C_TMR0_En;
     0000 2111                      1-  681     	MOVIA	0x11
     0001 000r                      1-  682     	IOST	_PCON1
                                    1-  683     	.line	355, "main.c"; 	delay(80);
     0002 2150                      1-  684     	MOVIA	0x50
     0003 00rr                      1-  685     	MOVAR	STK00
     0004 2100                      1-  686     	MOVIA	0x00
     0005 2rrr                      1-  687     	LCALL	_delay
                                    1-  688     	.line	357, "main.c"; 	if((PCON1 >> 6)&1)
     0006 001r                      1-  689     	IOSTR	_PCON1
                                    1-  690     ;;1	MOVAR	r0x101C
     0007 2240                      1-  691     	ANDIA	0x40
     0008 0903                      1-  692     	BTRSS	STATUS,2
     0009 2101                      1-  693     	MOVIA	0x01
     000A 00rr                      1-  694     	MOVAR	r0x101D
     000B 01rr                      1-  695     	MOVR	r0x101D,W
     000C 0D03                      1-  696     	BTRSC	STATUS,2
     000D 3rrr                      1-  697     	LGOTO	_00318_DS_
                                    1-  698     	.line	359, "main.c"; 	lvdCount = 0;
     000E 02rr                      1-  699     	CLRR	_lvdCount
                                    1-  700     	.line	360, "main.c"; 	if(workStep)
     000F 01rr                      1-  701     	MOVR	_workStep,W
     0010 0D03                      1-  702     	BTRSC	STATUS,2
     0011 3rrr                      1-  703     	LGOTO	_00320_DS_
                                    1-  704     	.line	361, "main.c"; 	PWM1DUTY = 0x08;	//45%
     0012 2108                      1-  705     	MOVIA	0x08
     0013 002r                      1-  706     	SFUN	_PWM1DUTY
     0014 3rrr                      1-  707     	LGOTO	_00320_DS_
     0015                           1-  708     _00318_DS_:
                                    1-  709     	.line	365, "main.c"; 	if(lvdFlag == 0 && (++lvdCount >= 200))
     0015 01rr                      1-  710     	MOVR	_lvdFlag,W
     0016 0903                      1-  711     	BTRSS	STATUS,2
     0017 3rrr                      1-  712     	LGOTO	_00320_DS_
     0018 05rr                      1-  713     	INCR	_lvdCount,F
                                    1-  714     ;;unsigned compare: left < lit (0xC8=200), size=1
     0019 21C8                      1-  715     	MOVIA	0xc8
     001A 04rr                      1-  716     	SUBAR	_lvdCount,W
     001B 0803                      1-  717     	BTRSS	STATUS,0
     001C 3rrr                      1-  718     	LGOTO	_00320_DS_
                                    1-  719     	.line	367, "main.c"; 	lvdFlag = 1;
     001D 2101                      1-  720     	MOVIA	0x01
     001E 00rr                      1-  721     	MOVAR	_lvdFlag
                                    1-  722     	.line	368, "main.c"; 	lvdCount = 0;
     001F 02rr                      1-  723     	CLRR	_lvdCount
     0020                           1-  724     _00320_DS_:
                                    1-  725     	.line	372, "main.c"; 	}
                                    1-  726     	RETURN	
     0020 0010                      3-   26 m1      ret
                                    1-  727     ; exit point of _checkLVD
                                    1-  729     ;***
                                    1-  730     ;  pBlock Stats: dbName = C
                                    1-  731     ;***
                                    1-  732     ;functions called:
                                    1-  733     ;   _gotoSleep
                                    1-  734     ;   _gotoSleep
                                    1-  735     ;   _gotoSleep
                                    1-  736     ;   _gotoSleep
                                    1-  737     ;   _pwmStop
                                    1-  738     ;   _pwmStart
                                    1-  739     ;   _pwmStop
                                    1-  740     ;   _gotoSleep
                                    1-  741     ;   _gotoSleep
                                    1-  742     ;   _gotoSleep
                                    1-  743     ;   _gotoSleep
                                    1-  744     ;   _pwmStop
                                    1-  745     ;   _pwmStart
                                    1-  746     ;   _pwmStop
                                    1-  747     ;; Starting pCode block
                                    1-  748     .segment "code"; module=main, function=_delayCon
     0000                           1-  750     _delayCon:
                                    1-  751     ; 0 exit points
                                    1-  752     	.line	277, "main.c"; 	if(++count4s >= 400)
     0000 05rr                      1-  753     	INCR	_count4s,F
     0001 0D03                      1-  754     	BTRSC	STATUS,2
     0002 05rr                      1-  755     	INCR	(_count4s + 1),F
                                    1-  756     ;;unsigned compare: left < lit (0x190=400), size=2
     0003 2101                      1-  757     	MOVIA	0x01
     0004 04rr                      1-  758     	SUBAR	(_count4s + 1),W
     0005 0903                      1-  759     	BTRSS	STATUS,2
     0006 3rrr                      1-  760     	LGOTO	_00304_DS_
     0007 2190                      1-  761     	MOVIA	0x90
     0008 04rr                      1-  762     	SUBAR	_count4s,W
     0009                           1-  763     _00304_DS_:
     0009 0803                      1-  764     	BTRSS	STATUS,0
     000A 3rrr                      1-  765     	LGOTO	_00240_DS_
                                    1-  766     	.line	279, "main.c"; 	count4s = 2;
     000B 2102                      1-  767     	MOVIA	0x02
     000C 00rr                      1-  768     	MOVAR	_count4s
     000D 02rr                      1-  769     	CLRR	(_count4s + 1)
                                    1-  770     	.line	281, "main.c"; 	count4Hour++;
     000E 05rr                      1-  771     	INCR	_count4Hour,F
     000F 0D03                      1-  772     	BTRSC	STATUS,2
     0010 05rr                      1-  773     	INCR	(_count4Hour + 1),F
                                    1-  774     	.line	282, "main.c"; 	if(workStep == 0 && (PORTB & 0x08) && keyCount == 0)
     0011 01rr                      1-  775     	MOVR	_workStep,W
     0012 0903                      1-  776     	BTRSS	STATUS,2
     0013 3rrr                      1-  777     	LGOTO	_00222_DS_
     0014 09rr                      1-  778     	BTRSS	_PORTB,3
     0015 3rrr                      1-  779     	LGOTO	_00222_DS_
     0016 01rr                      1-  780     	MOVR	_keyCount,W
     0017 11rr                      1-  781     	IORAR	(_keyCount + 1),W
     0018 0D03                      1-  782     	BTRSC	STATUS,2
                                    1-  783     	.line	285, "main.c"; 	gotoSleep();
     0019 2rrr                      1-  784     	LCALL	_gotoSleep
     001A                           1-  785     _00222_DS_:
                                    1-  786     	.line	288, "main.c"; 	if(setTimeFlag)
     001A 01rr                      1-  787     	MOVR	_setTimeFlag,W
     001B 0D03                      1-  788     	BTRSC	STATUS,2
     001C 3rrr                      1-  789     	LGOTO	_00237_DS_
                                    1-  790     ;;unsigned compare: left < lit (0x384=900), size=2
                                    1-  791     	.line	291, "main.c"; 	if(count4Hour >= 900)     //1Сʱ
     001D 2103                      1-  792     	MOVIA	0x03
     001E 04rr                      1-  793     	SUBAR	(_count4Hour + 1),W
     001F 0903                      1-  794     	BTRSS	STATUS,2
     0020 3rrr                      1-  795     	LGOTO	_00305_DS_
     0021 2184                      1-  796     	MOVIA	0x84
     0022 04rr                      1-  797     	SUBAR	_count4Hour,W
     0023                           1-  798     _00305_DS_:
     0023 0803                      1-  799     	BTRSS	STATUS,0
     0024 3rrr                      1-  800     	LGOTO	_00240_DS_
                                    1-  801     	.line	294, "main.c"; 	gotoSleep();
     0025 2rrr                      1-  802     	LCALL	_gotoSleep
     0026 3rrr                      1-  803     	LGOTO	_00240_DS_
     0027                           1-  804     _00237_DS_:
                                    1-  805     	.line	299, "main.c"; 	if(workStep == 1)
     0027 01rr                      1-  806     	MOVR	_workStep,W
     0028 2401                      1-  807     	XORIA	0x01
     0029 0903                      1-  808     	BTRSS	STATUS,2
     002A 3rrr                      1-  809     	LGOTO	_00234_DS_
                                    1-  810     ;;unsigned compare: left < lit (0x1518=5400), size=2
                                    1-  811     	.line	301, "main.c"; 	if(count4Hour >= 5400)	//6Сʱ
     002B 2115                      1-  812     	MOVIA	0x15
     002C 04rr                      1-  813     	SUBAR	(_count4Hour + 1),W
     002D 0903                      1-  814     	BTRSS	STATUS,2
     002E 3rrr                      1-  815     	LGOTO	_00306_DS_
     002F 2118                      1-  816     	MOVIA	0x18
     0030 04rr                      1-  817     	SUBAR	_count4Hour,W
     0031                           1-  818     _00306_DS_:
     0031 0803                      1-  819     	BTRSS	STATUS,0
     0032 3rrr                      1-  820     	LGOTO	_00240_DS_
                                    1-  821     	.line	304, "main.c"; 	gotoSleep();
     0033 2rrr                      1-  822     	LCALL	_gotoSleep
     0034 3rrr                      1-  823     	LGOTO	_00240_DS_
     0035                           1-  824     _00234_DS_:
                                    1-  825     	.line	307, "main.c"; 	else if(workStep == 2)
     0035 01rr                      1-  826     	MOVR	_workStep,W
     0036 2402                      1-  827     	XORIA	0x02
     0037 0903                      1-  828     	BTRSS	STATUS,2
     0038 3rrr                      1-  829     	LGOTO	_00240_DS_
                                    1-  830     ;;unsigned compare: left < lit (0x2A30=10800), size=2
                                    1-  831     	.line	309, "main.c"; 	if(count4Hour >= 10800)	//12Сʱ
     0039 212A                      1-  832     	MOVIA	0x2a
     003A 04rr                      1-  833     	SUBAR	(_count4Hour + 1),W
     003B 0903                      1-  834     	BTRSS	STATUS,2
     003C 3rrr                      1-  835     	LGOTO	_00307_DS_
     003D 2130                      1-  836     	MOVIA	0x30
     003E 04rr                      1-  837     	SUBAR	_count4Hour,W
     003F                           1-  838     _00307_DS_:
     003F 0803                      1-  839     	BTRSS	STATUS,0
     0040 3rrr                      1-  840     	LGOTO	_00240_DS_
                                    1-  841     	.line	312, "main.c"; 	gotoSleep();
     0041 2rrr                      1-  842     	LCALL	_gotoSleep
     0042                           1-  843     _00240_DS_:
                                    1-  844     	.line	322, "main.c"; 	if(++count500ms == 50)
     0042 05rr                      1-  845     	INCR	_count500ms,F
     0043 0D03                      1-  846     	BTRSC	STATUS,2
     0044 05rr                      1-  847     	INCR	(_count500ms + 1),F
     0045 01rr                      1-  848     	MOVR	_count500ms,W
     0046 2432                      1-  849     	XORIA	0x32
     0047 0903                      1-  850     	BTRSS	STATUS,2
     0048 3rrr                      1-  851     	LGOTO	_00242_DS_
     0049 01rr                      1-  852     	MOVR	(_count500ms + 1),W
     004A 2400                      1-  853     	XORIA	0x00
     004B 0903                      1-  854     	BTRSS	STATUS,2
     004C 3rrr                      1-  855     	LGOTO	_00242_DS_
                                    1-  856     	.line	324, "main.c"; 	count500ms = 0;
     004D 02rr                      1-  857     	CLRR	_count500ms
     004E 02rr                      1-  858     	CLRR	(_count500ms + 1)
     004F                           1-  859     _00242_DS_:
                                    1-  860     	.line	327, "main.c"; 	if(workStep == 2)
     004F 01rr                      1-  861     	MOVR	_workStep,W
     0050 2402                      1-  862     	XORIA	0x02
     0051 0903                      1-  863     	BTRSS	STATUS,2
     0052 3rrr                      1-  864     	LGOTO	_00252_DS_
                                    1-  865     	.line	329, "main.c"; 	if(!count500ms)
     0053 01rr                      1-  866     	MOVR	_count500ms,W
     0054 11rr                      1-  867     	IORAR	(_count500ms + 1),W
     0055 0903                      1-  868     	BTRSS	STATUS,2
     0056 3rrr                      1-  869     	LGOTO	_00254_DS_
                                    1-  870     	.line	332, "main.c"; 	if(step2Count == 6)
     0057 01rr                      1-  871     	MOVR	_step2Count,W
     0058 2406                      1-  872     	XORIA	0x06
     0059 0D03                      1-  873     	BTRSC	STATUS,2
                                    1-  874     	.line	333, "main.c"; 	pwmStop();
     005A 2rrr                      1-  875     	LCALL	_pwmStop
                                    1-  876     	.line	334, "main.c"; 	if(step2Count >= 12)
     005B 210C                      1-  877     	MOVIA	0x0c
     005C 04rr                      1-  878     	SUBAR	_step2Count,W
     005D 0803                      1-  879     	BTRSS	STATUS,0
     005E 3rrr                      1-  880     	LGOTO	_00246_DS_
                                    1-  881     	.line	336, "main.c"; 	step2Count = 0;
     005F 02rr                      1-  882     	CLRR	_step2Count
                                    1-  883     	.line	337, "main.c"; 	pwmStart();
     0060 2rrr                      1-  884     	LCALL	_pwmStart
     0061                           1-  885     _00246_DS_:
                                    1-  886     	.line	339, "main.c"; 	step2Count++;
     0061 05rr                      1-  887     	INCR	_step2Count,F
     0062 3rrr                      1-  888     	LGOTO	_00254_DS_
     0063                           1-  889     _00252_DS_:
                                    1-  890     	.line	342, "main.c"; 	else if(workStep == 0)
     0063 01rr                      1-  891     	MOVR	_workStep,W
     0064 0D03                      1-  892     	BTRSC	STATUS,2
                                    1-  893     	.line	344, "main.c"; 	pwmStop();
     0065 2rrr                      1-  894     	LCALL	_pwmStop
     0066                           1-  895     _00254_DS_:
                                    1-  896     	.line	349, "main.c"; 	}
                                    1-  897     	RETURN	
     0066 0010                      3-   26 m1      ret
                                    1-  899     ;***
                                    1-  900     ;  pBlock Stats: dbName = C
                                    1-  901     ;***
                                    1-  902     ;has an exit
                                    1-  903     ;functions called:
                                    1-  904     ;   _pwmStop
                                    1-  905     ;   _pwmStop
                                    1-  906     ;; Starting pCode block
                                    1-  907     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  909     _gotoSleep:
                                    1-  910     ; 2 exit points
                                    1-  911     	.line	254, "main.c"; 	lvdFlag = 0;
     0000 02rr                      1-  912     	CLRR	_lvdFlag
                                    1-  913     	.line	255, "main.c"; 	count500ms = 0;
     0001 02rr                      1-  914     	CLRR	_count500ms
     0002 02rr                      1-  915     	CLRR	(_count500ms + 1)
                                    1-  916     	.line	256, "main.c"; 	count4Hour = 0;
     0003 02rr                      1-  917     	CLRR	_count4Hour
     0004 02rr                      1-  918     	CLRR	(_count4Hour + 1)
                                    1-  919     	.line	257, "main.c"; 	pwmStop();
     0005 2rrr                      1-  920     	LCALL	_pwmStop
                                    1-  921     	.line	258, "main.c"; 	sleepDelay = 0;
     0006 02rr                      1-  922     	CLRR	_sleepDelay
                                    1-  923     	.line	259, "main.c"; 	workStep = 0;
     0007 02rr                      1-  924     	CLRR	_workStep
                                    1-  925     	.line	260, "main.c"; 	LED12OFF();			//�ص�
     0008 21CF                      1-  926     	MOVIA	0xcf
     0009 10rr                      1-  927     	ANDAR	_PORTB,F
                                    1-  928     	.line	261, "main.c"; 	setTimeFlag = 0;	//�رն�ʱ
     000A 02rr                      1-  929     	CLRR	_setTimeFlag
                                    1-  930     	.line	262, "main.c"; 	BWUCON = 0x0B;
     000B 210B                      1-  931     	MOVIA	0x0b
     000C 00rr                      1-  932     	MOVAR	_BWUCON
                                    1-  933     	.line	263, "main.c"; 	INTE =  C_INT_TMR1 | C_INT_PBKey;
     000D 210A                      1-  934     	MOVIA	0x0a
     000E 00rr                      1-  935     	MOVAR	_INTE
                                    1-  936     	.line	264, "main.c"; 	PCON =  C_LVR_En;	
     000F 2108                      1-  937     	MOVIA	0x08
     0010 00rr                      1-  938     	MOVAR	_PCON
                                    1-  939     	.line	265, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0011 02rr                      1-  940     	CLRR	_INTF
                                    1-  941     	.line	266, "main.c"; 	CLRWDT();
     0012 0002                      1-  942     	clrwdt
                                    1-  943     	.line	267, "main.c"; 	SLEEP();
     0013 0001                      1-  944     	sleep
                                    1-  945     	.line	268, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1;	// Enable Timer0��Timer1��WDT overflow interrupt
     0014 2109                      1-  946     	MOVIA	0x09
     0015 00rr                      1-  947     	MOVAR	_INTE
                                    1-  948     	.line	269, "main.c"; 	INTF = 0;
     0016 02rr                      1-  949     	CLRR	_INTF
                                    1-  950     	.line	271, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0017 21A8                      1-  951     	MOVIA	0xa8
     0018 00rr                      1-  952     	MOVAR	_PCON
                                    1-  953     	.line	272, "main.c"; 	}
                                    1-  954     	RETURN	
     0019 0010                      3-   26 m1      ret
                                    1-  955     ; exit point of _gotoSleep
                                    1-  957     ;***
                                    1-  958     ;  pBlock Stats: dbName = C
                                    1-  959     ;***
                                    1-  960     ;functions called:
                                    1-  961     ;   _keyRead
                                    1-  962     ;   _pwmStart
                                    1-  963     ;   _pwmStart
                                    1-  964     ;   _pwmStart
                                    1-  965     ;   _keyRead
                                    1-  966     ;   _pwmStart
                                    1-  967     ;   _pwmStart
                                    1-  968     ;   _pwmStart
                                    1-  969     ;1 compiler assigned register :
                                    1-  970     ;   r0x101E
                                    1-  971     ;; Starting pCode block
                                    1-  972     .segment "code"; module=main, function=_keyCon
     0000                           1-  974     _keyCon:
                                    1-  975     ; 0 exit points
                                    1-  976     	.line	185, "main.c"; 	keyClick = keyRead(PORTB&0x03);
     0000 2103                      1-  977     	MOVIA	0x03
     0001 10rr                      1-  978     	ANDAR	_PORTB,W
                                    1-  979     ;;1	MOVAR	r0x101E
     0002 2rrr                      1-  980     	LCALL	_keyRead
     0003 00rr                      1-  981     	MOVAR	_keyClick
                                    1-  982     	.line	187, "main.c"; 	if(keyClick == 1)			//K1 K2�̰�
     0004 2401                      1-  983     	XORIA	0x01
     0005 0903                      1-  984     	BTRSS	STATUS,2
     0006 3rrr                      1-  985     	LGOTO	_00207_DS_
                                    1-  986     	.line	189, "main.c"; 	if(keyNub == 1)
     0007 01rr                      1-  987     	MOVR	_keyNub,W
     0008 2401                      1-  988     	XORIA	0x01
     0009 0903                      1-  989     	BTRSS	STATUS,2
     000A 3rrr                      1-  990     	LGOTO	_00191_DS_
                                    1-  991     	.line	192, "main.c"; 	if(workStep == 1)
     000B 01rr                      1-  992     	MOVR	_workStep,W
     000C 2401                      1-  993     	XORIA	0x01
     000D 0903                      1-  994     	BTRSS	STATUS,2
     000E 3rrr                      1-  995     	LGOTO	_00186_DS_
                                    1-  996     	.line	193, "main.c"; 	workStep = 2;
     000F 2102                      1-  997     	MOVIA	0x02
     0010 00rr                      1-  998     	MOVAR	_workStep
     0011 3rrr                      1-  999     	LGOTO	_00192_DS_
     0012                           1- 1000     _00186_DS_:
                                    1- 1001     	.line	194, "main.c"; 	else if(workStep == 2)
     0012 01rr                      1- 1002     	MOVR	_workStep,W
     0013 2402                      1- 1003     	XORIA	0x02
     0014 0903                      1- 1004     	BTRSS	STATUS,2
     0015 3rrr                      1- 1005     	LGOTO	_00192_DS_
                                    1- 1006     	.line	196, "main.c"; 	workStep = 0;
     0016 02rr                      1- 1007     	CLRR	_workStep
                                    1- 1008     	.line	197, "main.c"; 	setTimeFlag = 0;
     0017 02rr                      1- 1009     	CLRR	_setTimeFlag
                                    1- 1010     	.line	198, "main.c"; 	count4Hour = 0;
     0018 02rr                      1- 1011     	CLRR	_count4Hour
     0019 02rr                      1- 1012     	CLRR	(_count4Hour + 1)
     001A 3rrr                      1- 1013     	LGOTO	_00192_DS_
     001B                           1- 1014     _00191_DS_:
                                    1- 1015     	.line	204, "main.c"; 	if(workStep)
     001B 01rr                      1- 1016     	MOVR	_workStep,W
     001C 0D03                      1- 1017     	BTRSC	STATUS,2
     001D 3rrr                      1- 1018     	LGOTO	_00192_DS_
                                    1- 1019     	.line	206, "main.c"; 	workStep = 0;		//�ر�����
     001E 02rr                      1- 1020     	CLRR	_workStep
                                    1- 1021     	.line	207, "main.c"; 	setTimeFlag = 0;
     001F 02rr                      1- 1022     	CLRR	_setTimeFlag
                                    1- 1023     	.line	208, "main.c"; 	count4Hour = 0;
     0020 02rr                      1- 1024     	CLRR	_count4Hour
     0021 02rr                      1- 1025     	CLRR	(_count4Hour + 1)
                                    1- 1026     ;;unsigned compare: left < lit (0x3=3), size=1
     0022                           1- 1027     _00192_DS_:
                                    1- 1028     	.line	211, "main.c"; 	if(workStep >= 3)
     0022 2103                      1- 1029     	MOVIA	0x03
     0023 04rr                      1- 1030     	SUBAR	_workStep,W
     0024 0803                      1- 1031     	BTRSS	STATUS,0
     0025 3rrr                      1- 1032     	LGOTO	_00208_DS_
                                    1- 1033     	.line	212, "main.c"; 	workStep = 0;
     0026 02rr                      1- 1034     	CLRR	_workStep
     0027 3rrr                      1- 1035     	LGOTO	_00208_DS_
     0028                           1- 1036     _00207_DS_:
                                    1- 1037     	.line	214, "main.c"; 	else if(keyClick == 2)		//K1 K2 ����
     0028 01rr                      1- 1038     	MOVR	_keyClick,W
     0029 2402                      1- 1039     	XORIA	0x02
     002A 0903                      1- 1040     	BTRSS	STATUS,2
     002B 3rrr                      1- 1041     	LGOTO	_00208_DS_
                                    1- 1042     	.line	216, "main.c"; 	if(keyNub == 1)
     002C 01rr                      1- 1043     	MOVR	_keyNub,W
     002D 2401                      1- 1044     	XORIA	0x01
     002E 0903                      1- 1045     	BTRSS	STATUS,2
     002F 3rrr                      1- 1046     	LGOTO	_00200_DS_
                                    1- 1047     	.line	219, "main.c"; 	if(workStep == 0)
     0030 01rr                      1- 1048     	MOVR	_workStep,W
     0031 0903                      1- 1049     	BTRSS	STATUS,2
     0032 3rrr                      1- 1050     	LGOTO	_00201_DS_
                                    1- 1051     	.line	221, "main.c"; 	workStep = 1;		//�������
     0033 2101                      1- 1052     	MOVIA	0x01
     0034 00rr                      1- 1053     	MOVAR	_workStep
                                    1- 1054     	.line	222, "main.c"; 	count4Hour = 0;
     0035 02rr                      1- 1055     	CLRR	_count4Hour
     0036 02rr                      1- 1056     	CLRR	(_count4Hour + 1)
                                    1- 1057     	.line	223, "main.c"; 	sleepDelay = 0;
     0037 02rr                      1- 1058     	CLRR	_sleepDelay
                                    1- 1059     	.line	224, "main.c"; 	pwmStart();
     0038 2rrr                      1- 1060     	LCALL	_pwmStart
     0039 3rrr                      1- 1061     	LGOTO	_00201_DS_
     003A                           1- 1062     _00200_DS_:
                                    1- 1063     	.line	230, "main.c"; 	if(workStep == 0)
     003A 01rr                      1- 1064     	MOVR	_workStep,W
     003B 0903                      1- 1065     	BTRSS	STATUS,2
     003C 3rrr                      1- 1066     	LGOTO	_00198_DS_
                                    1- 1067     	.line	232, "main.c"; 	workStep = 1;		//�������
     003D 2101                      1- 1068     	MOVIA	0x01
     003E 00rr                      1- 1069     	MOVAR	_workStep
                                    1- 1070     	.line	233, "main.c"; 	sleepDelay = 0;
     003F 02rr                      1- 1071     	CLRR	_sleepDelay
                                    1- 1072     	.line	234, "main.c"; 	pwmStart();
     0040 2rrr                      1- 1073     	LCALL	_pwmStart
     0041                           1- 1074     _00198_DS_:
                                    1- 1075     	.line	236, "main.c"; 	count4Hour = 0;
     0041 02rr                      1- 1076     	CLRR	_count4Hour
     0042 02rr                      1- 1077     	CLRR	(_count4Hour + 1)
                                    1- 1078     	.line	237, "main.c"; 	setTimeFlag = 1;
     0043 2101                      1- 1079     	MOVIA	0x01
     0044 00rr                      1- 1080     	MOVAR	_setTimeFlag
     0045                           1- 1081     _00201_DS_:
                                    1- 1082     	.line	242, "main.c"; 	if(!workStep)		//δ�������ö�ʱ4��Сʱ
     0045 01rr                      1- 1083     	MOVR	_workStep,W
     0046 0903                      1- 1084     	BTRSS	STATUS,2
     0047 3rrr                      1- 1085     	LGOTO	_00208_DS_
                                    1- 1086     	.line	243, "main.c"; 	count4Hour = 0;
     0048 02rr                      1- 1087     	CLRR	_count4Hour
     0049 02rr                      1- 1088     	CLRR	(_count4Hour + 1)
     004A                           1- 1089     _00208_DS_:
                                    1- 1090     	.line	246, "main.c"; 	if(keyClick == 1 && workStep)
     004A 01rr                      1- 1091     	MOVR	_keyClick,W
     004B 2401                      1- 1092     	XORIA	0x01
     004C 0903                      1- 1093     	BTRSS	STATUS,2
     004D 3rrr                      1- 1094     	LGOTO	_00212_DS_
     004E 01rr                      1- 1095     	MOVR	_workStep,W
     004F 0903                      1- 1096     	BTRSS	STATUS,2
                                    1- 1097     	.line	248, "main.c"; 	pwmStart();
     0050 2rrr                      1- 1098     	LCALL	_pwmStart
     0051                           1- 1099     _00212_DS_:
                                    1- 1100     	.line	250, "main.c"; 	}
                                    1- 1101     	RETURN	
     0051 0010                      3-   26 m1      ret
                                    1- 1103     ;***
                                    1- 1104     ;  pBlock Stats: dbName = C
                                    1- 1105     ;***
                                    1- 1106     ;has an exit
                                    1- 1107     ;functions called:
                                    1- 1108     ;   _gotoSleep
                                    1- 1109     ;   _gotoSleep
                                    1- 1110     ;4 compiler assigned registers:
                                    1- 1111     ;   r0x101F
                                    1- 1112     ;   r0x1020
                                    1- 1113     ;   r0x1021
                                    1- 1114     ;   r0x1022
                                    1- 1115     ;; Starting pCode block
                                    1- 1116     .segment "code"; module=main, function=_ledCon
     0000                           1- 1118     _ledCon:
                                    1- 1119     ; 2 exit points
                                    1- 1120     	.line	132, "main.c"; 	if(workStep == 0)
     0000 01rr                      1- 1121     	MOVR	_workStep,W
     0001 0903                      1- 1122     	BTRSS	STATUS,2
     0002 3rrr                      1- 1123     	LGOTO	_00150_DS_
                                    1- 1124     	.line	134, "main.c"; 	if(!(PORTB & 0x08))
     0003 0Drr                      1- 1125     	BTRSC	_PORTB,3
     0004 3rrr                      1- 1126     	LGOTO	_00135_DS_
                                    1- 1127     	.line	136, "main.c"; 	sleepDelay = 0;
     0005 02rr                      1- 1128     	CLRR	_sleepDelay
                                    1- 1129     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1130     ;;unsigned compare: left >= lit (0xC9=201), size=2
                                    1- 1131     	.line	138, "main.c"; 	if(count4s > 200)
     0006 2100                      1- 1132     	MOVIA	0x00
     0007 04rr                      1- 1133     	SUBAR	(_count4s + 1),W
     0008 0903                      1- 1134     	BTRSS	STATUS,2
     0009 3rrr                      1- 1135     	LGOTO	_00178_DS_
     000A 21C9                      1- 1136     	MOVIA	0xc9
     000B 04rr                      1- 1137     	SUBAR	_count4s,W
     000C                           1- 1138     _00178_DS_:
     000C 0803                      1- 1139     	BTRSS	STATUS,0
     000D 3rrr                      1- 1140     	LGOTO	_00132_DS_
                                    1- 1141     	.line	140, "main.c"; 	duty = (402-count4s)/2; 
     000E 01rr                      1- 1142     	MOVR	_count4s,W
     000F 2792                      1- 1143     	SUBIA	0x92
     0010 00rr                      1- 1144     	MOVAR	r0x101F
     0011 01rr                      1- 1145     	MOVR	(_count4s + 1),W
     0012 0803                      1- 1146     	BTRSS	STATUS,0
     0013 05rr                      1- 1147     	INCR	(_count4s + 1),W
     0014 2701                      1- 1148     	SUBIA	0x01
     0015 00rr                      1- 1149     	MOVAR	r0x1020
                                    1- 1150     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=0, offr=0
     0016 1C03                      1- 1151     	BCR	STATUS,0
     0017 13rr                      1- 1152     	RRR	r0x1020,W
                                    1- 1153     ;;1	MOVAR	r0x1021
     0018 13rr                      1- 1154     	RRR	r0x101F,W
                                    1- 1155     ;;1	MOVAR	r0x1022
     0019 00rr                      1- 1156     	MOVAR	_duty
     001A 3rrr                      1- 1157     	LGOTO	_00152_DS_
                                    1- 1158     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=0, offr=0
     001B                           1- 1159     _00132_DS_:
                                    1- 1160     	.line	144, "main.c"; 	duty = count4s/2;
     001B 1C03                      1- 1161     	BCR	STATUS,0
     001C 13rr                      1- 1162     	RRR	(_count4s + 1),W
     001D 00rr                      1- 1163     	MOVAR	r0x1020
     001E 13rr                      1- 1164     	RRR	_count4s,W
     001F 00rr                      1- 1165     	MOVAR	r0x101F
     0020 00rr                      1- 1166     	MOVAR	_duty
     0021 3rrr                      1- 1167     	LGOTO	_00152_DS_
     0022                           1- 1168     _00135_DS_:
                                    1- 1169     	.line	149, "main.c"; 	duty = 0;
     0022 02rr                      1- 1170     	CLRR	_duty
                                    1- 1171     	.line	150, "main.c"; 	LED12OFF();
     0023 21CF                      1- 1172     	MOVIA	0xcf
     0024 10rr                      1- 1173     	ANDAR	_PORTB,F
     0025 3rrr                      1- 1174     	LGOTO	_00152_DS_
     0026                           1- 1175     _00150_DS_:
                                    1- 1176     	.line	155, "main.c"; 	duty = 0;
     0026 02rr                      1- 1177     	CLRR	_duty
                                    1- 1178     	.line	156, "main.c"; 	if(lvdFlag)
     0027 01rr                      1- 1179     	MOVR	_lvdFlag,W
     0028 0D03                      1- 1180     	BTRSC	STATUS,2
     0029 3rrr                      1- 1181     	LGOTO	_00145_DS_
                                    1- 1182     	.line	158, "main.c"; 	if(count500ms == 0)
     002A 01rr                      1- 1183     	MOVR	_count500ms,W
     002B 11rr                      1- 1184     	IORAR	(_count500ms + 1),W
     002C 0D03                      1- 1185     	BTRSC	STATUS,2
                                    1- 1186     	.line	159, "main.c"; 	++sleepDelay;
     002D 05rr                      1- 1187     	INCR	_sleepDelay,F
                                    1- 1188     	.line	160, "main.c"; 	if(sleepDelay > 10)
     002E 210B                      1- 1189     	MOVIA	0x0b
     002F 04rr                      1- 1190     	SUBAR	_sleepDelay,W
     0030 0C03                      1- 1191     	BTRSC	STATUS,0
                                    1- 1192     	.line	162, "main.c"; 	gotoSleep();	
     0031 2rrr                      1- 1193     	LCALL	_gotoSleep
                                    1- 1194     	.line	165, "main.c"; 	if(sleepDelay%2 == 0)
     0032 0Crr                      1- 1195     	BTRSC	_sleepDelay,0
     0033 3rrr                      1- 1196     	LGOTO	_00142_DS_
                                    1- 1197     	.line	167, "main.c"; 	LED12ON();
     0034 2130                      1- 1198     	MOVIA	0x30
     0035 11rr                      1- 1199     	IORAR	_PORTB,F
     0036 3rrr                      1- 1200     	LGOTO	_00143_DS_
     0037                           1- 1201     _00142_DS_:
                                    1- 1202     	.line	171, "main.c"; 	LED12OFF();
     0037 21CF                      1- 1203     	MOVIA	0xcf
     0038 10rr                      1- 1204     	ANDAR	_PORTB,F
     0039                           1- 1205     _00143_DS_:
                                    1- 1206     	.line	173, "main.c"; 	return;
     0039 3rrr                      1- 1207     	LGOTO	_00152_DS_
     003A                           1- 1208     _00145_DS_:
                                    1- 1209     	.line	175, "main.c"; 	if(setTimeFlag)
     003A 01rr                      1- 1210     	MOVR	_setTimeFlag,W
     003B 0D03                      1- 1211     	BTRSC	STATUS,2
     003C 3rrr                      1- 1212     	LGOTO	_00147_DS_
                                    1- 1213     	.line	176, "main.c"; 	LED1ON();
     003D 1Arr                      1- 1214     	BSR	_PORTB,5
     003E 3rrr                      1- 1215     	LGOTO	_00148_DS_
     003F                           1- 1216     _00147_DS_:
                                    1- 1217     	.line	178, "main.c"; 	LED1OFF();
     003F 1Err                      1- 1218     	BCR	_PORTB,5
     0040                           1- 1219     _00148_DS_:
                                    1- 1220     	.line	179, "main.c"; 	LED2ON();
     0040 1Arr                      1- 1221     	BSR	_PORTB,4
     0041                           1- 1222     _00152_DS_:
                                    1- 1223     	.line	181, "main.c"; 	}
                                    1- 1224     	RETURN	
     0041 0010                      3-   26 m1      ret
                                    1- 1225     ; exit point of _ledCon
                                    1- 1228     ;	code size estimation:
                                    1- 1229     ;	  489+    0 =   489 instructions (  978 byte)
                                    1- 1231     	end
                                    1- 1231     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00106_DS_              Label    0000001C
_00109_DS_              Label    0000001E
_00113_DS_              Label    00000025
_00115_DS_              Label    00000029
_00123_DS_              Label    0000001F
_00126_DS_              Label    00000014
_00132_DS_              Label    0000001B
_00135_DS_              Label    00000022
_00142_DS_              Label    00000037
_00143_DS_              Label    00000039
_00145_DS_              Label    0000003A
_00147_DS_              Label    0000003F
_00148_DS_              Label    00000040
_00150_DS_              Label    00000026
_00152_DS_              Label    00000041
_00178_DS_              Label    0000000C
_00186_DS_              Label    00000012
_00191_DS_              Label    0000001B
_00192_DS_              Label    00000022
_00198_DS_              Label    00000041
_00200_DS_              Label    0000003A
_00201_DS_              Label    00000045
_00207_DS_              Label    00000028
_00208_DS_              Label    0000004A
_00212_DS_              Label    00000051
_00222_DS_              Label    0000001A
_00234_DS_              Label    00000035
_00237_DS_              Label    00000027
_00240_DS_              Label    00000042
_00242_DS_              Label    0000004F
_00246_DS_              Label    00000061
_00252_DS_              Label    00000063
_00254_DS_              Label    00000066
_00304_DS_              Label    00000009
_00305_DS_              Label    00000023
_00306_DS_              Label    00000031
_00307_DS_              Label    0000003F
_00318_DS_              Label    00000015
_00320_DS_              Label    00000020
_00340_DS_              Label    00000028
_00341_DS_              Label    00000034
_00343_DS_              Label    0000001B
_00344_DS_              Label    00000037
_00345_DS_              Label    00000038
_00362_DS_              Label    0000000F
_00363_DS_              Label    00000021
_00364_DS_              Label    0000002E
_00371_DS_              Label    00000005
_00373_DS_              Label    00000011
_00382_DS_              Label    0000000B
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_count4Hour             Label    00000000
_count4s                Label    00000000
_count500ms             Label    00000000
_delay                  Label    00000000
_delayCon               Label    00000000
_duty                   Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyNub                 Label    00000000
_keyRead                Label    00000000
_ledCon                 Label    00000000
_ledCount               Label    00000000
_longPressFlag          Label    00000000
_lvdCount               Label    00000000
_lvdFlag                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_setTimeFlag            Label    00000000
_sleepDelay             Label    00000000
_STATUS                 Label    00000000
_step2Count             Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000037
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
r0x101D                 Label    00000000
r0x101F                 Label    00000000
r0x1020                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
