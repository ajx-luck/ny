
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_delay
                                    1-   57     	extern	_keyRead
                                    1-   58     	extern	_KeyScan
                                    1-   59     	extern	_pwmStop
                                    1-   60     	extern	_pwmStart
                                    1-   61     	extern	_checkLVD
                                    1-   62     	extern	_delayCon
                                    1-   63     	extern	_gotoSleep
                                    1-   64     	extern	_isr
                                    1-   65     	extern	_main
                                    1-   66     	extern	_KeyStatus
                                    1-   67     	extern	_keyCount
                                    1-   68     	extern	_count500ms
                                    1-   69     	extern	_count4Hour
                                    1-   70     	extern	_intCount
                                    1-   71     	extern	_IntFlag
                                    1-   72     	extern	_lvdFlag
                                    1-   73     	extern	_workStep
                                    1-   74     	extern	_powerFlag
                                    1-   75     	extern	_ledCount
                                    1-   76     	extern	_ledYellowFlag
                                    1-   77     	extern	_sleepFlag
                                    1-   78     	extern	_sleepDelay
                                    1-   79     	extern	_step2Count
                                    1-   80     	extern	_longPressFlag
                                    1-   82     	extern PSAVE
                                    1-   83     	extern SSAVE
                                    1-   84     	extern WSAVE
                                    1-   85     	extern STK12
                                    1-   86     	extern STK11
                                    1-   87     	extern STK10
                                    1-   88     	extern STK09
                                    1-   89     	extern STK08
                                    1-   90     	extern STK07
                                    1-   91     	extern STK06
                                    1-   92     	extern STK05
                                    1-   93     	extern STK04
                                    1-   94     	extern STK03
                                    1-   95     	extern STK02
                                    1-   96     	extern STK01
                                    1-   97     	extern STK00
                                    1-   99     .segment "uninit", 0x20000010
 20000010                           1-  100     PSAVE:
                                    1-  101     	.res 1
 20000011                           1-  102     SSAVE:
                                    1-  103     	.res 1
 20000012                           1-  104     WSAVE:
                                    1-  105     	.res 1
 20000013                           1-  106     STK12:
                                    1-  107     	.res 1
 20000014                           1-  108     STK11:
                                    1-  109     	.res 1
 20000015                           1-  110     STK10:
                                    1-  111     	.res 1
 20000016                           1-  112     STK09:
                                    1-  113     	.res 1
 20000017                           1-  114     STK08:
                                    1-  115     	.res 1
 20000018                           1-  116     STK07:
                                    1-  117     	.res 1
 20000019                           1-  118     STK06:
                                    1-  119     	.res 1
 2000001A                           1-  120     STK05:
                                    1-  121     	.res 1
 2000001B                           1-  122     STK04:
                                    1-  123     	.res 1
 2000001C                           1-  124     STK03:
                                    1-  125     	.res 1
 2000001D                           1-  126     STK02:
                                    1-  127     	.res 1
 2000001E                           1-  128     STK01:
                                    1-  129     	.res 1
 2000001F                           1-  130     STK00:
                                    1-  131     	.res 1
                                    1-  133     ;--------------------------------------------------------
                                    1-  134     ; global definitions
                                    1-  135     ;--------------------------------------------------------
                                    1-  136     .segment "uninit"
     0000                           1-  137     _KeyStatus:
                                    1-  138     	.res	1
                                    1-  141     ;--------------------------------------------------------
                                    1-  142     ; absolute symbol definitions
                                    1-  143     ;--------------------------------------------------------
                                    1-  144     ;--------------------------------------------------------
                                    1-  145     ; compiler-defined variables
                                    1-  146     ;--------------------------------------------------------
                                    1-  147     .segment "uninit"
     0000                           1-  148     r0x1019:
                                    1-  149     	.res	1
                                    1-  150     .segment "uninit"
     0000                           1-  151     r0x101A:
                                    1-  152     	.res	1
                                    1-  153     .segment "uninit"
     0000                           1-  154     r0x1018:
                                    1-  155     	.res	1
                                    1-  156     .segment "uninit"
     0000                           1-  157     r0x1013:
                                    1-  158     	.res	1
                                    1-  159     .segment "uninit"
     0000                           1-  160     r0x1012:
                                    1-  161     	.res	1
                                    1-  162     .segment "uninit"
     0000                           1-  163     r0x1014:
                                    1-  164     	.res	1
                                    1-  165     .segment "uninit"
     0000                           1-  166     r0x1015:
                                    1-  167     	.res	1
                                    1-  168     ;--------------------------------------------------------
                                    1-  169     ; initialized data
                                    1-  170     ;--------------------------------------------------------
                                    1-  172     .segment "idata"
     0000                           1-  173     _keyCount:
     0000 0000 0000                 1-  174     	dw	0x00, 0x00
                                    1-  178     .segment "idata"
     0000                           1-  179     _count500ms:
     0000 0000 0000                 1-  180     	dw	0x00, 0x00
                                    1-  184     .segment "idata"
     0000                           1-  185     _count4Hour:
     0000 0000 0000                 1-  186     	dw	0x00, 0x00
                                    1-  190     .segment "idata"
     0000                           1-  191     _intCount:
     0000 0000                      1-  192     	dw	0x00
                                    1-  196     .segment "idata"
     0000                           1-  197     _IntFlag:
     0000 0000                      1-  198     	dw	0x00
                                    1-  202     .segment "idata"
     0000                           1-  203     _lvdFlag:
     0000 0000                      1-  204     	dw	0x00
                                    1-  208     .segment "idata"
     0000                           1-  209     _workStep:
     0000 0000                      1-  210     	dw	0x00
                                    1-  214     .segment "idata"
     0000                           1-  215     _powerFlag:
     0000 0000                      1-  216     	dw	0x00
                                    1-  220     .segment "idata"
     0000                           1-  221     _ledCount:
     0000 0000                      1-  222     	dw	0x00
                                    1-  226     .segment "idata"
     0000                           1-  227     _ledYellowFlag:
     0000 0000                      1-  228     	dw	0x00
                                    1-  232     .segment "idata"
     0000                           1-  233     _sleepFlag:
     0000 0000                      1-  234     	dw	0x00
                                    1-  238     .segment "idata"
     0000                           1-  239     _sleepDelay:
     0000 0000                      1-  240     	dw	0x00
                                    1-  244     .segment "idata"
     0000                           1-  245     _step2Count:
     0000 0000                      1-  246     	dw	0x00
                                    1-  250     .segment "idata"
     0000                           1-  251     _longPressFlag:
     0000 0000                      1-  252     	dw	0x00
                                    1-  255     ;--------------------------------------------------------
                                    1-  256     ; overlayable items in internal ram 
                                    1-  257     ;--------------------------------------------------------
                                    1-  258     ;	udata_ovr
                                    1-  259     ;--------------------------------------------------------
                                    1-  260     ; reset vector 
                                    1-  261     ;--------------------------------------------------------
                                    1-  262     ORG	0x0000
     0000 3rrr                      1-  263     	LGOTO	__nyc_ny8_startup
                                    1-  264     ;--------------------------------------------------------
                                    1-  265     ; interrupt and initialization code
                                    1-  266     ;--------------------------------------------------------
                                    1-  267     ORG 0x0008
     0008 3rrr                      1-  268     	lgoto	__sdcc_interrupt
                                    1-  270     .segment "code"
     0000                           1-  271     __sdcc_interrupt:
                                    1-  272     ;***
                                    1-  273     ;  pBlock Stats: dbName = I
                                    1-  274     ;***
                                    1-  275     ;2 compiler assigned registers:
                                    1-  276     ;   STK00
                                    1-  277     ;   STK01
                                    1-  278     ;; Starting pCode block
     0000                           1-  279     _isr:
                                    1-  280     ; 0 exit points
                                    1-  281     	.line	57, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  282     	MOVAR	WSAVE
     0001 1503                      1-  283     	SWAPR	STATUS,W
     0002 0283                      1-  284     	CLRR	STATUS
     0003 00rr                      1-  285     	MOVAR	SSAVE
     0004 010A                      1-  286     	MOVR	PCHBUF,W
     0005 028A                      1-  287     	CLRR	PCHBUF
     0006 00rr                      1-  288     	MOVAR	PSAVE
     0007 0104                      1-  289     	MOVR	FSR,W
     0008 00rr                      1-  290     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  291     	MOVR	STK00,W
     000A 00rr                      1-  292     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  293     	MOVR	STK01,W
     000C 00rr                      1-  294     	MOVAR	___sdcc_saved_stk01
                                    1-  295     	.line	59, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  296     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  297     	LGOTO	_00108_DS_
                                    1-  298     	.line	61, "main.c"; 	TMR0 = 55;
     000F 2137                      1-  299     	MOVIA	0x37
     0010 00rr                      1-  300     	MOVAR	_TMR0
                                    1-  301     	.line	62, "main.c"; 	intCount++;
     0011 05rr                      1-  302     	INCR	_intCount,F
                                    1-  303     	.line	63, "main.c"; 	if(intCount == 96)
     0012 01rr                      1-  304     	MOVR	_intCount,W
     0013 2460                      1-  305     	XORIA	0x60
     0014 0903                      1-  306     	BTRSS	STATUS,2
     0015 3rrr                      1-  307     	LGOTO	_00108_DS_
                                    1-  308     	.line	65, "main.c"; 	intCount = 0;
     0016 02rr                      1-  309     	CLRR	_intCount
                                    1-  310     	.line	66, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  311     	MOVIA	0x01
     0018 00rr                      1-  312     	MOVAR	_IntFlag
     0019                           1-  313     _00108_DS_:
                                    1-  314     	.line	69, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  315     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  316     	LGOTO	_00110_DS_
                                    1-  317     	.line	71, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  318     	MOVIA	0xfd
     001C 00rr                      1-  319     	MOVAR	_INTF
     001D                           1-  320     _00110_DS_:
                                    1-  321     	.line	74, "main.c"; 	INTF = 0;
     001D 02rr                      1-  322     	CLRR	_INTF
                                    1-  323     	.line	76, "main.c"; 	}
     001E 01rr                      1-  324     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  325     	MOVAR	STK01
     0020 01rr                      1-  326     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  327     	MOVAR	STK00
     0022 01rr                      1-  328     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  329     	MOVAR	FSR
     0024 01rr                      1-  330     	MOVR	PSAVE,W
     0025 008A                      1-  331     	MOVAR	PCHBUF
     0026 0283                      1-  332     	CLRR	STATUS
     0027 15rr                      1-  333     	SWAPR	SSAVE,W
     0028 0083                      1-  334     	MOVAR	STATUS
     0029 15rr                      1-  335     	SWAPR	WSAVE,F
     002A 15rr                      1-  336     	SWAPR	WSAVE,W
     002B                           1-  337     END_OF_INTERRUPT:
     002B 0011                      1-  338     	RETIE	
                                    1-  340     ;--------------------------------------------------------
                                    1-  341     ; code
                                    1-  342     ;--------------------------------------------------------
                                    1-  343     ;***
                                    1-  344     ;  pBlock Stats: dbName = M
                                    1-  345     ;***
                                    1-  346     ;has an exit
                                    1-  347     ;functions called:
                                    1-  348     ;   _gotoSleep
                                    1-  349     ;   _checkLVD
                                    1-  350     ;   _delayCon
                                    1-  351     ;   _KeyScan
                                    1-  352     ;   _keyRead
                                    1-  353     ;   _pwmStart
                                    1-  354     ;   _gotoSleep
                                    1-  355     ;   _checkLVD
                                    1-  356     ;   _delayCon
                                    1-  357     ;   _KeyScan
                                    1-  358     ;   _keyRead
                                    1-  359     ;   _pwmStart
                                    1-  360     ;2 compiler assigned registers:
                                    1-  361     ;   r0x1019
                                    1-  362     ;   r0x101A
                                    1-  363     ;; Starting pCode block
                                    1-  364     .segment "code"; module=main, function=_main
                                    1-  366     ;local variable name mapping:
     0000                           1-  368     _main:
                                    1-  369     ; 2 exit points
                                    1-  370     	.line	82, "main.c"; 	PORTB = 0xFB;
     0000 21FB                      1-  371     	MOVIA	0xfb
     0001 00rr                      1-  372     	MOVAR	_PORTB
                                    1-  373     	.line	83, "main.c"; 	BPHCON = 0xFE;
     0002 21FE                      1-  374     	MOVIA	0xfe
     0003 00rr                      1-  375     	MOVAR	_BPHCON
                                    1-  376     	.line	85, "main.c"; 	IOSTB =  C_PB0_Input ;	
     0004 2101                      1-  377     	MOVIA	0x01
     0005 000r                      1-  378     	IOST	_IOSTB
                                    1-  379     	.line	86, "main.c"; 	PORTB = 0xFB;                        	// PortB Data Register = 0x00
     0006 21FB                      1-  380     	MOVIA	0xfb
     0007 00rr                      1-  381     	MOVAR	_PORTB
                                    1-  382     	.line	87, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     0008 21A8                      1-  383     	MOVIA	0xa8
     0009 00rr                      1-  384     	MOVAR	_PCON
                                    1-  385     	.line	89, "main.c"; 	PCON1 = C_TMR0_Dis;
     000A 0200                      1-  386     	CLRA	
     000B 000r                      1-  387     	IOST	_PCON1
                                    1-  388     	.line	91, "main.c"; 	TMR0 = 55;
     000C 2137                      1-  389     	MOVIA	0x37
     000D 00rr                      1-  390     	MOVAR	_TMR0
                                    1-  391     	.line	92, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000E 0200                      1-  392     	CLRA	
     000F 0003                      1-  393     	T0MD	
                                    1-  394     	.line	94, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0010 2115                      1-  395     	MOVIA	0x15
     0011 000r                      1-  396     	IOST	_PCON1
                                    1-  397     	.line	96, "main.c"; 	ENI();	
     0012 0004                      1-  398     	ENI
                                    1-  399     	.line	97, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  400     	LCALL	_gotoSleep
     0014                           1-  401     _00130_DS_:
                                    1-  402     	.line	100, "main.c"; 	CLRWDT();  
     0014 0002                      1-  403     	clrwdt
                                    1-  404     	.line	101, "main.c"; 	if(!IntFlag)
     0015 01rr                      1-  405     	MOVR	_IntFlag,W
     0016 0D03                      1-  406     	BTRSC	STATUS,2
     0017 3rrr                      1-  407     	LGOTO	_00130_DS_
                                    1-  408     	.line	104, "main.c"; 	IntFlag = 0;
     0018 02rr                      1-  409     	CLRR	_IntFlag
                                    1-  410     	.line	106, "main.c"; 	checkLVD();
     0019 2rrr                      1-  411     	LCALL	_checkLVD
                                    1-  412     	.line	107, "main.c"; 	delayCon();
     001A 2rrr                      1-  413     	LCALL	_delayCon
                                    1-  414     	.line	108, "main.c"; 	KeyStatus = KeyScan() & 0x1F;	//
     001B 2rrr                      1-  415     	LCALL	_KeyScan
     001C 00rr                      1-  416     	MOVAR	r0x1019
     001D 211F                      1-  417     	MOVIA	0x1f
     001E 10rr                      1-  418     	ANDAR	r0x1019,W
     001F 00rr                      1-  419     	MOVAR	_KeyStatus
                                    1-  420     	.line	109, "main.c"; 	keyClick = keyRead();
     0020 2rrr                      1-  421     	LCALL	_keyRead
     0021 00rr                      1-  422     	MOVAR	r0x1019
                                    1-  423     	.line	111, "main.c"; 	if(keyClick == 1)
     0022 02rr                      1-  424     	CLRR	r0x101A
     0023 01rr                      1-  425     	MOVR	r0x1019,W
     0024 2401                      1-  426     	XORIA	0x01
     0025 0D03                      1-  427     	BTRSC	STATUS,2
     0026 05rr                      1-  428     	INCR	r0x101A,F
     0027 01rr                      1-  429     	MOVR	r0x101A,W
     0028 0D03                      1-  430     	BTRSC	STATUS,2
     0029 3rrr                      1-  431     	LGOTO	_00124_DS_
                                    1-  432     	.line	113, "main.c"; 	count4Hour = 0;
     002A 02rr                      1-  433     	CLRR	_count4Hour
     002B 02rr                      1-  434     	CLRR	(_count4Hour + 1)
                                    1-  435     	.line	114, "main.c"; 	workStep++;
     002C 05rr                      1-  436     	INCR	_workStep,F
                                    1-  437     ;;unsigned compare: left < lit (0x3=3), size=1
                                    1-  438     	.line	115, "main.c"; 	if(workStep >= 3)
     002D 2103                      1-  439     	MOVIA	0x03
     002E 04rr                      1-  440     	SUBAR	_workStep,W
     002F 0803                      1-  441     	BTRSS	STATUS,0
     0030 3rrr                      1-  442     	LGOTO	_00125_DS_
                                    1-  443     	.line	116, "main.c"; 	workStep = 0;
     0031 02rr                      1-  444     	CLRR	_workStep
     0032 3rrr                      1-  445     	LGOTO	_00125_DS_
     0033                           1-  446     _00124_DS_:
                                    1-  447     	.line	118, "main.c"; 	else if(keyClick == 2)
     0033 01rr                      1-  448     	MOVR	r0x1019,W
     0034 2402                      1-  449     	XORIA	0x02
     0035 0903                      1-  450     	BTRSS	STATUS,2
     0036 3rrr                      1-  451     	LGOTO	_00125_DS_
                                    1-  452     	.line	120, "main.c"; 	PORTB^=(1<<5);
     0037 2120                      1-  453     	MOVIA	0x20
     0038 12rr                      1-  454     	XORAR	_PORTB,F
                                    1-  455     	.line	121, "main.c"; 	if(!workStep)		//未喷雾重置定时4个小时
     0039 01rr                      1-  456     	MOVR	_workStep,W
     003A 0903                      1-  457     	BTRSS	STATUS,2
     003B 3rrr                      1-  458     	LGOTO	_00125_DS_
                                    1-  459     	.line	122, "main.c"; 	count4Hour = 0;
     003C 02rr                      1-  460     	CLRR	_count4Hour
     003D 02rr                      1-  461     	CLRR	(_count4Hour + 1)
     003E                           1-  462     _00125_DS_:
                                    1-  463     	.line	125, "main.c"; 	if(keyClick == 1 && workStep)
     003E 01rr                      1-  464     	MOVR	r0x101A,W
     003F 0D03                      1-  465     	BTRSC	STATUS,2
     0040 3rrr                      1-  466     	LGOTO	_00130_DS_
     0041 01rr                      1-  467     	MOVR	_workStep,W
     0042 0D03                      1-  468     	BTRSC	STATUS,2
     0043 3rrr                      1-  469     	LGOTO	_00130_DS_
                                    1-  470     	.line	127, "main.c"; 	pwmStart();
     0044 2rrr                      1-  471     	LCALL	_pwmStart
     0045 3rrr                      1-  472     	LGOTO	_00130_DS_
                                    1-  473     	.line	131, "main.c"; 	}
                                    1-  474     	RETURN	
     0046 0010                      3-   26 m1      ret
                                    1-  475     ; exit point of _main
                                    1-  477     ;***
                                    1-  478     ;  pBlock Stats: dbName = C
                                    1-  479     ;***
                                    1-  480     ;has an exit
                                    1-  481     ;5 compiler assigned registers:
                                    1-  482     ;   r0x1012
                                    1-  483     ;   STK00
                                    1-  484     ;   r0x1013
                                    1-  485     ;   r0x1014
                                    1-  486     ;   r0x1015
                                    1-  487     ;; Starting pCode block
                                    1-  488     .segment "code"; module=main, function=_delay
                                    1-  490     ;local variable name mapping:
     0000                           1-  495     _delay:
                                    1-  496     ; 2 exit points
                                    1-  497     	.line	280, "main.c"; 	void delay(u16t time)
     0000 00rr                      1-  498     	MOVAR	r0x1012
     0001 01rr                      1-  499     	MOVR	STK00,W
     0002 00rr                      1-  500     	MOVAR	r0x1013
                                    1-  501     	.line	282, "main.c"; 	for(u16t i=0;i<time;i++);
     0003 02rr                      1-  502     	CLRR	r0x1014
     0004 02rr                      1-  503     	CLRR	r0x1015
     0005                           1-  504     _00282_DS_:
     0005 01rr                      1-  505     	MOVR	r0x1012,W
     0006 04rr                      1-  506     	SUBAR	r0x1015,W
     0007 0903                      1-  507     	BTRSS	STATUS,2
     0008 3rrr                      1-  508     	LGOTO	_00293_DS_
     0009 01rr                      1-  509     	MOVR	r0x1013,W
     000A 04rr                      1-  510     	SUBAR	r0x1014,W
     000B                           1-  511     _00293_DS_:
     000B 0C03                      1-  512     	BTRSC	STATUS,0
     000C 3rrr                      1-  513     	LGOTO	_00284_DS_
     000D 05rr                      1-  514     	INCR	r0x1014,F
     000E 0D03                      1-  515     	BTRSC	STATUS,2
     000F 05rr                      1-  516     	INCR	r0x1015,F
     0010 3rrr                      1-  517     	LGOTO	_00282_DS_
     0011                           1-  518     _00284_DS_:
                                    1-  519     	.line	283, "main.c"; 	}
                                    1-  520     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  521     ; exit point of _delay
                                    1-  523     ;***
                                    1-  524     ;  pBlock Stats: dbName = C
                                    1-  525     ;***
                                    1-  526     ;has an exit
                                    1-  527     ;; Starting pCode block
                                    1-  528     .segment "code"; module=main, function=_keyRead
     0000                           1-  530     _keyRead:
                                    1-  531     ; 2 exit points
                                    1-  532     	.line	249, "main.c"; 	if (KeyStatus & 0x01)
     0000 08rr                      1-  533     	BTRSS	_KeyStatus,0
     0001 3rrr                      1-  534     	LGOTO	_00254_DS_
                                    1-  535     	.line	251, "main.c"; 	keyCount++;
     0002 05rr                      1-  536     	INCR	_keyCount,F
     0003 0D03                      1-  537     	BTRSC	STATUS,2
     0004 05rr                      1-  538     	INCR	(_keyCount + 1),F
                                    1-  539     ;;unsigned compare: left < lit (0xC8=200), size=2
                                    1-  540     	.line	252, "main.c"; 	if(keyCount >= 200)
     0005 2100                      1-  541     	MOVIA	0x00
     0006 04rr                      1-  542     	SUBAR	(_keyCount + 1),W
     0007 0903                      1-  543     	BTRSS	STATUS,2
     0008 3rrr                      1-  544     	LGOTO	_00273_DS_
     0009 21C8                      1-  545     	MOVIA	0xc8
     000A 04rr                      1-  546     	SUBAR	_keyCount,W
     000B                           1-  547     _00273_DS_:
     000B 0803                      1-  548     	BTRSS	STATUS,0
     000C 3rrr                      1-  549     	LGOTO	_00255_DS_
                                    1-  550     	.line	254, "main.c"; 	keyCount = 200;
     000D 21C8                      1-  551     	MOVIA	0xc8
     000E 00rr                      1-  552     	MOVAR	_keyCount
     000F 02rr                      1-  553     	CLRR	(_keyCount + 1)
                                    1-  554     	.line	255, "main.c"; 	if(!longPressFlag)
     0010 01rr                      1-  555     	MOVR	_longPressFlag,W
     0011 0903                      1-  556     	BTRSS	STATUS,2
     0012 3rrr                      1-  557     	LGOTO	_00255_DS_
                                    1-  558     	.line	257, "main.c"; 	longPressFlag = 1;
     0013 2101                      1-  559     	MOVIA	0x01
     0014 00rr                      1-  560     	MOVAR	_longPressFlag
                                    1-  561     	.line	258, "main.c"; 	return 2;
     0015 2102                      1-  562     	MOVIA	0x02
     0016 3rrr                      1-  563     	LGOTO	_00256_DS_
                                    1-  564     ;;unsigned compare: left < lit (0xC8=200), size=2
     0017                           1-  565     _00254_DS_:
                                    1-  566     	.line	264, "main.c"; 	if(keyCount >= 200)
     0017 2100                      1-  567     	MOVIA	0x00
     0018 04rr                      1-  568     	SUBAR	(_keyCount + 1),W
     0019 0903                      1-  569     	BTRSS	STATUS,2
     001A 3rrr                      1-  570     	LGOTO	_00274_DS_
     001B 21C8                      1-  571     	MOVIA	0xc8
     001C 04rr                      1-  572     	SUBAR	_keyCount,W
     001D                           1-  573     _00274_DS_:
     001D 0803                      1-  574     	BTRSS	STATUS,0
     001E 3rrr                      1-  575     	LGOTO	_00251_DS_
                                    1-  576     	.line	266, "main.c"; 	keyCount = 0;
     001F 02rr                      1-  577     	CLRR	_keyCount
     0020 02rr                      1-  578     	CLRR	(_keyCount + 1)
                                    1-  579     	.line	267, "main.c"; 	longPressFlag = 0;
     0021 02rr                      1-  580     	CLRR	_longPressFlag
                                    1-  581     	.line	268, "main.c"; 	return	0;
     0022 2100                      1-  582     	MOVIA	0x00
     0023 3rrr                      1-  583     	LGOTO	_00256_DS_
                                    1-  584     ;;unsigned compare: left < lit (0x8=8), size=2
     0024                           1-  585     _00251_DS_:
                                    1-  586     	.line	270, "main.c"; 	else if(keyCount >= 8)
     0024 2100                      1-  587     	MOVIA	0x00
     0025 04rr                      1-  588     	SUBAR	(_keyCount + 1),W
     0026 0903                      1-  589     	BTRSS	STATUS,2
     0027 3rrr                      1-  590     	LGOTO	_00275_DS_
     0028 2108                      1-  591     	MOVIA	0x08
     0029 04rr                      1-  592     	SUBAR	_keyCount,W
     002A                           1-  593     _00275_DS_:
     002A 0803                      1-  594     	BTRSS	STATUS,0
     002B 3rrr                      1-  595     	LGOTO	_00252_DS_
                                    1-  596     	.line	272, "main.c"; 	keyCount = 0;
     002C 02rr                      1-  597     	CLRR	_keyCount
     002D 02rr                      1-  598     	CLRR	(_keyCount + 1)
                                    1-  599     	.line	273, "main.c"; 	return	1;
     002E 2101                      1-  600     	MOVIA	0x01
     002F 3rrr                      1-  601     	LGOTO	_00256_DS_
     0030                           1-  602     _00252_DS_:
                                    1-  603     	.line	275, "main.c"; 	keyCount = 0;
     0030 02rr                      1-  604     	CLRR	_keyCount
     0031 02rr                      1-  605     	CLRR	(_keyCount + 1)
     0032                           1-  606     _00255_DS_:
                                    1-  607     	.line	277, "main.c"; 	return 0;
     0032 2100                      1-  608     	MOVIA	0x00
     0033                           1-  609     _00256_DS_:
                                    1-  610     	.line	278, "main.c"; 	}
                                    1-  611     	RETURN	
     0033 0010                      3-   26 m1      ret
                                    1-  612     ; exit point of _keyRead
                                    1-  614     ;***
                                    1-  615     ;  pBlock Stats: dbName = C
                                    1-  616     ;***
                                    1-  617     ;has an exit
                                    1-  618     ;1 compiler assigned register :
                                    1-  619     ;   r0x1016
                                    1-  620     ;; Starting pCode block
                                    1-  621     .segment "code"; module=main, function=_KeyScan
                                    1-  623     ;local variable name mapping:
     0000                           1-  625     _KeyScan:
                                    1-  626     ; 2 exit points
                                    1-  627     	.line	240, "main.c"; 	KeyStatus = ~PORTB;
     0000 07rr                      1-  628     	COMR	_PORTB,W
                                    1-  629     ;;1	MOVAR	r0x1016
                                    1-  630     	.line	243, "main.c"; 	}
                                    1-  631     	RETURN	
     0001 0010                      3-   26 m1      ret
                                    1-  632     ; exit point of _KeyScan
                                    1-  634     ;***
                                    1-  635     ;  pBlock Stats: dbName = C
                                    1-  636     ;***
                                    1-  637     ;has an exit
                                    1-  638     ;; Starting pCode block
                                    1-  639     .segment "code"; module=main, function=_pwmStop
     0000                           1-  641     _pwmStop:
                                    1-  642     ; 2 exit points
                                    1-  643     	.line	228, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  644     	CLRA	
     0001 002r                      1-  645     	SFUN	_T1CR1
                                    1-  646     	.line	229, "main.c"; 	PWM1DUTY = 0;
     0002 002r                      1-  647     	SFUN	_PWM1DUTY
                                    1-  648     	.line	230, "main.c"; 	PORTB &= 0xFE;	//关闭
     0003 1Crr                      1-  649     	BCR	_PORTB,0
                                    1-  650     	.line	231, "main.c"; 	}
                                    1-  651     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1-  652     ; exit point of _pwmStop
                                    1-  654     ;***
                                    1-  655     ;  pBlock Stats: dbName = C
                                    1-  656     ;***
                                    1-  657     ;has an exit
                                    1-  658     ;; Starting pCode block
                                    1-  659     .segment "code"; module=main, function=_pwmStart
     0000                           1-  661     _pwmStart:
                                    1-  662     ; 2 exit points
                                    1-  663     	.line	219, "main.c"; 	TMR1 = 0x11;							//频率为110K
     0000 2111                      1-  664     	MOVIA	0x11
     0001 002r                      1-  665     	SFUN	_TMR1
                                    1-  666     	.line	220, "main.c"; 	PWM1DUTY = 0x08;				// 		
     0002 2108                      1-  667     	MOVIA	0x08
     0003 002r                      1-  668     	SFUN	_PWM1DUTY
                                    1-  669     	.line	222, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0004 0200                      1-  670     	CLRA	
     0005 002r                      1-  671     	SFUN	_T1CR2
                                    1-  672     	.line	223, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0006 2183                      1-  673     	MOVIA	0x83
     0007 002r                      1-  674     	SFUN	_T1CR1
                                    1-  675     	.line	224, "main.c"; 	}
                                    1-  676     	RETURN	
     0008 0010                      3-   26 m1      ret
                                    1-  677     ; exit point of _pwmStart
                                    1-  679     ;***
                                    1-  680     ;  pBlock Stats: dbName = C
                                    1-  681     ;***
                                    1-  682     ;functions called:
                                    1-  683     ;   _delay
                                    1-  684     ;   _gotoSleep
                                    1-  685     ;   _delay
                                    1-  686     ;   _gotoSleep
                                    1-  687     ;3 compiler assigned registers:
                                    1-  688     ;   STK00
                                    1-  689     ;   r0x1017
                                    1-  690     ;   r0x1018
                                    1-  691     ;; Starting pCode block
                                    1-  692     .segment "code"; module=main, function=_checkLVD
     0000                           1-  694     _checkLVD:
                                    1-  695     ; 0 exit points
                                    1-  696     	.line	196, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0000 2115                      1-  697     	MOVIA	0x15
     0001 000r                      1-  698     	IOST	_PCON1
                                    1-  699     	.line	197, "main.c"; 	delay(80);
     0002 2150                      1-  700     	MOVIA	0x50
     0003 00rr                      1-  701     	MOVAR	STK00
     0004 2100                      1-  702     	MOVIA	0x00
     0005 2rrr                      1-  703     	LCALL	_delay
                                    1-  704     	.line	199, "main.c"; 	if((PCON1 >> 6)&1)
     0006 001r                      1-  705     	IOSTR	_PCON1
                                    1-  706     ;;1	MOVAR	r0x1017
     0007 2240                      1-  707     	ANDIA	0x40
     0008 0903                      1-  708     	BTRSS	STATUS,2
     0009 2101                      1-  709     	MOVIA	0x01
     000A 00rr                      1-  710     	MOVAR	r0x1018
     000B 01rr                      1-  711     	MOVR	r0x1018,W
     000C 0D03                      1-  712     	BTRSC	STATUS,2
     000D 3rrr                      1-  713     	LGOTO	_00225_DS_
                                    1-  714     	.line	201, "main.c"; 	lvdFlag = 0;
     000E 02rr                      1-  715     	CLRR	_lvdFlag
                                    1-  716     	.line	202, "main.c"; 	if(workStep)
     000F 01rr                      1-  717     	MOVR	_workStep,W
     0010 0D03                      1-  718     	BTRSC	STATUS,2
     0011 3rrr                      1-  719     	LGOTO	_00227_DS_
                                    1-  720     	.line	203, "main.c"; 	PWM1DUTY = 0x08;	//45%
     0012 2108                      1-  721     	MOVIA	0x08
     0013 002r                      1-  722     	SFUN	_PWM1DUTY
     0014 3rrr                      1-  723     	LGOTO	_00227_DS_
     0015                           1-  724     _00225_DS_:
                                    1-  725     	.line	207, "main.c"; 	lvdFlag = 1;
     0015 2101                      1-  726     	MOVIA	0x01
     0016 00rr                      1-  727     	MOVAR	_lvdFlag
                                    1-  728     	.line	208, "main.c"; 	workStep = 0;
     0017 02rr                      1-  729     	CLRR	_workStep
                                    1-  730     	.line	209, "main.c"; 	PORTB |= 0x20;
     0018 1Arr                      1-  731     	BSR	_PORTB,5
                                    1-  732     	.line	210, "main.c"; 	if(++sleepDelay >= 10)
     0019 05rr                      1-  733     	INCR	_sleepDelay,F
                                    1-  734     ;;unsigned compare: left < lit (0xA=10), size=1
     001A 210A                      1-  735     	MOVIA	0x0a
     001B 04rr                      1-  736     	SUBAR	_sleepDelay,W
     001C 0C03                      1-  737     	BTRSC	STATUS,0
                                    1-  738     	.line	211, "main.c"; 	gotoSleep();
     001D 2rrr                      1-  739     	LCALL	_gotoSleep
     001E                           1-  740     _00227_DS_:
                                    1-  741     	.line	213, "main.c"; 	}
                                    1-  742     	RETURN	
     001E 0010                      3-   26 m1      ret
                                    1-  744     ;***
                                    1-  745     ;  pBlock Stats: dbName = C
                                    1-  746     ;***
                                    1-  747     ;functions called:
                                    1-  748     ;   _gotoSleep
                                    1-  749     ;   _pwmStop
                                    1-  750     ;   _pwmStart
                                    1-  751     ;   _pwmStop
                                    1-  752     ;   _gotoSleep
                                    1-  753     ;   _pwmStop
                                    1-  754     ;   _pwmStart
                                    1-  755     ;   _pwmStop
                                    1-  756     ;; Starting pCode block
                                    1-  757     .segment "code"; module=main, function=_delayCon
     0000                           1-  759     _delayCon:
                                    1-  760     ; 0 exit points
                                    1-  761     	.line	156, "main.c"; 	if(++count500ms == 50)
     0000 05rr                      1-  762     	INCR	_count500ms,F
     0001 0D03                      1-  763     	BTRSC	STATUS,2
     0002 05rr                      1-  764     	INCR	(_count500ms + 1),F
     0003 01rr                      1-  765     	MOVR	_count500ms,W
     0004 2432                      1-  766     	XORIA	0x32
     0005 0903                      1-  767     	BTRSS	STATUS,2
     0006 3rrr                      1-  768     	LGOTO	_00174_DS_
     0007 01rr                      1-  769     	MOVR	(_count500ms + 1),W
     0008 2400                      1-  770     	XORIA	0x00
     0009 0903                      1-  771     	BTRSS	STATUS,2
     000A 3rrr                      1-  772     	LGOTO	_00174_DS_
                                    1-  773     	.line	158, "main.c"; 	count500ms = 0;
     000B 02rr                      1-  774     	CLRR	_count500ms
     000C 02rr                      1-  775     	CLRR	(_count500ms + 1)
                                    1-  776     	.line	159, "main.c"; 	count4Hour++;
     000D 05rr                      1-  777     	INCR	_count4Hour,F
     000E 0D03                      1-  778     	BTRSC	STATUS,2
     000F 05rr                      1-  779     	INCR	(_count4Hour + 1),F
                                    1-  780     ;;unsigned compare: left < lit (0x7080=28800), size=2
                                    1-  781     	.line	161, "main.c"; 	if(count4Hour >= 28800 || (workStep == 0 && (PORTB & 0x20)))
     0010 2170                      1-  782     	MOVIA	0x70
     0011 04rr                      1-  783     	SUBAR	(_count4Hour + 1),W
     0012 0903                      1-  784     	BTRSS	STATUS,2
     0013 3rrr                      1-  785     	LGOTO	_00215_DS_
     0014 2180                      1-  786     	MOVIA	0x80
     0015 04rr                      1-  787     	SUBAR	_count4Hour,W
     0016                           1-  788     _00215_DS_:
     0016 0C03                      1-  789     	BTRSC	STATUS,0
     0017 3rrr                      1-  790     	LGOTO	_00169_DS_
     0018 01rr                      1-  791     	MOVR	_workStep,W
     0019 0903                      1-  792     	BTRSS	STATUS,2
     001A 3rrr                      1-  793     	LGOTO	_00174_DS_
     001B 0Arr                      1-  794     	BTRSS	_PORTB,5
     001C 3rrr                      1-  795     	LGOTO	_00174_DS_
     001D                           1-  796     _00169_DS_:
                                    1-  797     	.line	163, "main.c"; 	PORTB |= 0x20;
     001D 1Arr                      1-  798     	BSR	_PORTB,5
                                    1-  799     	.line	164, "main.c"; 	if(++sleepDelay >= 10)
     001E 05rr                      1-  800     	INCR	_sleepDelay,F
                                    1-  801     ;;unsigned compare: left < lit (0xA=10), size=1
     001F 210A                      1-  802     	MOVIA	0x0a
     0020 04rr                      1-  803     	SUBAR	_sleepDelay,W
     0021 0C03                      1-  804     	BTRSC	STATUS,0
                                    1-  805     	.line	165, "main.c"; 	gotoSleep();
     0022 2rrr                      1-  806     	LCALL	_gotoSleep
     0023                           1-  807     _00174_DS_:
                                    1-  808     	.line	169, "main.c"; 	if(workStep == 2)
     0023 01rr                      1-  809     	MOVR	_workStep,W
     0024 2402                      1-  810     	XORIA	0x02
     0025 0903                      1-  811     	BTRSS	STATUS,2
     0026 3rrr                      1-  812     	LGOTO	_00184_DS_
                                    1-  813     	.line	171, "main.c"; 	if(!count500ms)
     0027 01rr                      1-  814     	MOVR	_count500ms,W
     0028 11rr                      1-  815     	IORAR	(_count500ms + 1),W
     0029 0903                      1-  816     	BTRSS	STATUS,2
     002A 3rrr                      1-  817     	LGOTO	_00186_DS_
                                    1-  818     	.line	173, "main.c"; 	PORTB^=1;
     002B 2101                      1-  819     	MOVIA	0x01
     002C 12rr                      1-  820     	XORAR	_PORTB,F
                                    1-  821     	.line	174, "main.c"; 	if(step2Count == 20)
     002D 01rr                      1-  822     	MOVR	_step2Count,W
     002E 2414                      1-  823     	XORIA	0x14
     002F 0D03                      1-  824     	BTRSC	STATUS,2
                                    1-  825     	.line	175, "main.c"; 	pwmStop();
     0030 2rrr                      1-  826     	LCALL	_pwmStop
                                    1-  827     	.line	176, "main.c"; 	if(step2Count >= 30)
     0031 211E                      1-  828     	MOVIA	0x1e
     0032 04rr                      1-  829     	SUBAR	_step2Count,W
     0033 0803                      1-  830     	BTRSS	STATUS,0
     0034 3rrr                      1-  831     	LGOTO	_00178_DS_
                                    1-  832     	.line	178, "main.c"; 	step2Count = 0;
     0035 02rr                      1-  833     	CLRR	_step2Count
                                    1-  834     	.line	179, "main.c"; 	pwmStart();
     0036 2rrr                      1-  835     	LCALL	_pwmStart
     0037                           1-  836     _00178_DS_:
                                    1-  837     	.line	181, "main.c"; 	step2Count++;
     0037 05rr                      1-  838     	INCR	_step2Count,F
     0038 3rrr                      1-  839     	LGOTO	_00186_DS_
     0039                           1-  840     _00184_DS_:
                                    1-  841     	.line	184, "main.c"; 	else if(workStep == 0)
     0039 01rr                      1-  842     	MOVR	_workStep,W
     003A 0D03                      1-  843     	BTRSC	STATUS,2
                                    1-  844     	.line	186, "main.c"; 	pwmStop();
     003B 2rrr                      1-  845     	LCALL	_pwmStop
     003C                           1-  846     _00186_DS_:
                                    1-  847     	.line	191, "main.c"; 	}
                                    1-  848     	RETURN	
     003C 0010                      3-   26 m1      ret
                                    1-  850     ;***
                                    1-  851     ;  pBlock Stats: dbName = C
                                    1-  852     ;***
                                    1-  853     ;has an exit
                                    1-  854     ;functions called:
                                    1-  855     ;   _pwmStop
                                    1-  856     ;   _pwmStop
                                    1-  857     ;; Starting pCode block
                                    1-  858     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  860     _gotoSleep:
                                    1-  861     ; 2 exit points
                                    1-  862     	.line	136, "main.c"; 	count4Hour = 0;
     0000 02rr                      1-  863     	CLRR	_count4Hour
     0001 02rr                      1-  864     	CLRR	(_count4Hour + 1)
                                    1-  865     	.line	137, "main.c"; 	pwmStop();
     0002 2rrr                      1-  866     	LCALL	_pwmStop
                                    1-  867     	.line	138, "main.c"; 	sleepDelay = 0;
     0003 02rr                      1-  868     	CLRR	_sleepDelay
                                    1-  869     	.line	139, "main.c"; 	workStep = 0;
     0004 02rr                      1-  870     	CLRR	_workStep
                                    1-  871     	.line	140, "main.c"; 	BWUCON = 0x01;
     0005 2101                      1-  872     	MOVIA	0x01
     0006 00rr                      1-  873     	MOVAR	_BWUCON
                                    1-  874     	.line	141, "main.c"; 	INTE =  C_INT_TMR1 | C_INT_PBKey;
     0007 210A                      1-  875     	MOVIA	0x0a
     0008 00rr                      1-  876     	MOVAR	_INTE
                                    1-  877     	.line	142, "main.c"; 	PCON =  C_LVR_En;	
     0009 2108                      1-  878     	MOVIA	0x08
     000A 00rr                      1-  879     	MOVAR	_PCON
                                    1-  880     	.line	143, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000B 02rr                      1-  881     	CLRR	_INTF
                                    1-  882     	.line	144, "main.c"; 	CLRWDT();
     000C 0002                      1-  883     	clrwdt
                                    1-  884     	.line	145, "main.c"; 	sleepFlag = 1;
     000D 2101                      1-  885     	MOVIA	0x01
     000E 00rr                      1-  886     	MOVAR	_sleepFlag
                                    1-  887     	.line	146, "main.c"; 	SLEEP();
     000F 0001                      1-  888     	sleep
                                    1-  889     	.line	147, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1;	// Enable Timer0、Timer1、WDT overflow interrupt
     0010 2109                      1-  890     	MOVIA	0x09
     0011 00rr                      1-  891     	MOVAR	_INTE
                                    1-  892     	.line	148, "main.c"; 	INTF = 0;
     0012 02rr                      1-  893     	CLRR	_INTF
                                    1-  894     	.line	150, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0013 21A8                      1-  895     	MOVIA	0xa8
     0014 00rr                      1-  896     	MOVAR	_PCON
                                    1-  897     	.line	151, "main.c"; 	}
                                    1-  898     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  899     ; exit point of _gotoSleep
                                    1-  902     ;	code size estimation:
                                    1-  903     ;	  311+    0 =   311 instructions (  622 byte)
                                    1-  905     	end
                                    1-  905     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00124_DS_              Label    00000033
_00125_DS_              Label    0000003E
_00130_DS_              Label    00000014
_00169_DS_              Label    0000001D
_00174_DS_              Label    00000023
_00178_DS_              Label    00000037
_00184_DS_              Label    00000039
_00186_DS_              Label    0000003C
_00215_DS_              Label    00000016
_00225_DS_              Label    00000015
_00227_DS_              Label    0000001E
_00251_DS_              Label    00000024
_00252_DS_              Label    00000030
_00254_DS_              Label    00000017
_00255_DS_              Label    00000032
_00256_DS_              Label    00000033
_00273_DS_              Label    0000000B
_00274_DS_              Label    0000001D
_00275_DS_              Label    0000002A
_00282_DS_              Label    00000005
_00284_DS_              Label    00000011
_00293_DS_              Label    0000000B
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_count4Hour             Label    00000000
_count500ms             Label    00000000
_delay                  Label    00000000
_delayCon               Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_KeyStatus              Label    00000000
_ledCount               Label    00000000
_ledYellowFlag          Label    00000000
_longPressFlag          Label    00000000
_lvdFlag                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_sleepDelay             Label    00000000
_sleepFlag              Label    00000000
_STATUS                 Label    00000000
_step2Count             Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1014                 Label    00000000
r0x1015                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
