
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__gptrget1
                                    1-   53     	extern	__nyc_ny8_startup
                                    1-   54     ;--------------------------------------------------------
                                    1-   55     ; global declarations
                                    1-   56     ;--------------------------------------------------------
                                    1-   57     	extern	_delay
                                    1-   58     	extern	_keyRead
                                    1-   59     	extern	_KeyScan
                                    1-   60     	extern	_pwmStop
                                    1-   61     	extern	_pwmStart
                                    1-   62     	extern	_checkLVD
                                    1-   63     	extern	_pwmCon
                                    1-   64     	extern	_gotoSleep
                                    1-   65     	extern	_isr
                                    1-   66     	extern	_main
                                    1-   67     	extern	_KeyStatus
                                    1-   68     	extern	_keyCount
                                    1-   69     	extern	_intCount
                                    1-   70     	extern	_IntFlag
                                    1-   71     	extern	_lvdFlag
                                    1-   72     	extern	_workStep
                                    1-   73     	extern	_powerFlag
                                    1-   74     	extern	_lvdCount
                                    1-   75     	extern	_sleepFlag
                                    1-   76     	extern	_sleepDelay
                                    1-   77     	extern	_longPressFlag
                                    1-   78     	extern	_PWM1DUTYS
                                    1-   80     	extern PSAVE
                                    1-   81     	extern SSAVE
                                    1-   82     	extern WSAVE
                                    1-   83     	extern STK12
                                    1-   84     	extern STK11
                                    1-   85     	extern STK10
                                    1-   86     	extern STK09
                                    1-   87     	extern STK08
                                    1-   88     	extern STK07
                                    1-   89     	extern STK06
                                    1-   90     	extern STK05
                                    1-   91     	extern STK04
                                    1-   92     	extern STK03
                                    1-   93     	extern STK02
                                    1-   94     	extern STK01
                                    1-   95     	extern STK00
                                    1-   97     .segment "uninit", 0x20000010
 20000010                           1-   98     PSAVE:
                                    1-   99     	.res 1
 20000011                           1-  100     SSAVE:
                                    1-  101     	.res 1
 20000012                           1-  102     WSAVE:
                                    1-  103     	.res 1
 20000013                           1-  104     STK12:
                                    1-  105     	.res 1
 20000014                           1-  106     STK11:
                                    1-  107     	.res 1
 20000015                           1-  108     STK10:
                                    1-  109     	.res 1
 20000016                           1-  110     STK09:
                                    1-  111     	.res 1
 20000017                           1-  112     STK08:
                                    1-  113     	.res 1
 20000018                           1-  114     STK07:
                                    1-  115     	.res 1
 20000019                           1-  116     STK06:
                                    1-  117     	.res 1
 2000001A                           1-  118     STK05:
                                    1-  119     	.res 1
 2000001B                           1-  120     STK04:
                                    1-  121     	.res 1
 2000001C                           1-  122     STK03:
                                    1-  123     	.res 1
 2000001D                           1-  124     STK02:
                                    1-  125     	.res 1
 2000001E                           1-  126     STK01:
                                    1-  127     	.res 1
 2000001F                           1-  128     STK00:
                                    1-  129     	.res 1
                                    1-  131     ;--------------------------------------------------------
                                    1-  132     ; global definitions
                                    1-  133     ;--------------------------------------------------------
                                    1-  134     .segment "uninit"
     0000                           1-  135     _KeyStatus:
                                    1-  136     	.res	1
                                    1-  139     ;--------------------------------------------------------
                                    1-  140     ; absolute symbol definitions
                                    1-  141     ;--------------------------------------------------------
                                    1-  142     ;--------------------------------------------------------
                                    1-  143     ; compiler-defined variables
                                    1-  144     ;--------------------------------------------------------
                                    1-  145     .segment "uninit"
     0000                           1-  146     r0x101C:
                                    1-  147     	.res	1
                                    1-  148     .segment "uninit"
     0000                           1-  149     r0x1019:
                                    1-  150     	.res	1
                                    1-  151     .segment "uninit"
     0000                           1-  152     r0x101A:
                                    1-  153     	.res	1
                                    1-  154     .segment "uninit"
     0000                           1-  155     r0x1018:
                                    1-  156     	.res	1
                                    1-  157     .segment "uninit"
     0000                           1-  158     r0x1013:
                                    1-  159     	.res	1
                                    1-  160     .segment "uninit"
     0000                           1-  161     r0x1012:
                                    1-  162     	.res	1
                                    1-  163     .segment "uninit"
     0000                           1-  164     r0x1014:
                                    1-  165     	.res	1
                                    1-  166     .segment "uninit"
     0000                           1-  167     r0x1015:
                                    1-  168     	.res	1
                                    1-  169     ;--------------------------------------------------------
                                    1-  170     ; initialized data
                                    1-  171     ;--------------------------------------------------------
                                    1-  173     .segment "idata"
     0000                           1-  174     _keyCount:
     0000 0000 0000                 1-  175     	dw	0x00, 0x00
                                    1-  179     .segment "idata"
     0000                           1-  180     _intCount:
     0000 0000                      1-  181     	dw	0x00
                                    1-  185     .segment "idata"
     0000                           1-  186     _IntFlag:
     0000 0000                      1-  187     	dw	0x00
                                    1-  191     .segment "idata"
     0000                           1-  192     _lvdFlag:
     0000 0000                      1-  193     	dw	0x00
                                    1-  197     .segment "idata"
     0000                           1-  198     _workStep:
     0000 0000                      1-  199     	dw	0x00
                                    1-  203     .segment "idata"
     0000                           1-  204     _powerFlag:
     0000 0000                      1-  205     	dw	0x00
                                    1-  209     .segment "idata"
     0000                           1-  210     _lvdCount:
     0000 0000                      1-  211     	dw	0x00
                                    1-  215     .segment "idata"
     0000                           1-  216     _sleepFlag:
     0000 0000                      1-  217     	dw	0x00
                                    1-  221     .segment "idata"
     0000                           1-  222     _sleepDelay:
     0000 0000                      1-  223     	dw	0x00
                                    1-  227     .segment "idata"
     0000                           1-  228     _longPressFlag:
     0000 0000                      1-  229     	dw	0x00
                                    1-  233     .segment "idata"
     0000                           1-  234     _PWM1DUTYS:
     0000 0000                      1-  235     	dw	0x00
     0001 0032                      1-  236     	dw	0x32
     0002 0046                      1-  237     	dw	0x46
     0003 005A                      1-  238     	dw	0x5a
                                    1-  241     ;--------------------------------------------------------
                                    1-  242     ; overlayable items in internal ram 
                                    1-  243     ;--------------------------------------------------------
                                    1-  244     ;	udata_ovr
                                    1-  245     ;--------------------------------------------------------
                                    1-  246     ; reset vector 
                                    1-  247     ;--------------------------------------------------------
                                    1-  248     ORG	0x0000
     0000 3rrr                      1-  249     	LGOTO	__nyc_ny8_startup
                                    1-  250     ;--------------------------------------------------------
                                    1-  251     ; interrupt and initialization code
                                    1-  252     ;--------------------------------------------------------
                                    1-  253     ORG 0x0008
     0008 3rrr                      1-  254     	lgoto	__sdcc_interrupt
                                    1-  256     .segment "code"
     0000                           1-  257     __sdcc_interrupt:
                                    1-  258     ;***
                                    1-  259     ;  pBlock Stats: dbName = I
                                    1-  260     ;***
                                    1-  261     ;2 compiler assigned registers:
                                    1-  262     ;   STK00
                                    1-  263     ;   STK01
                                    1-  264     ;; Starting pCode block
     0000                           1-  265     _isr:
                                    1-  266     ; 0 exit points
                                    1-  267     	.line	44, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  268     	MOVAR	WSAVE
     0001 1503                      1-  269     	SWAPR	STATUS,W
     0002 0283                      1-  270     	CLRR	STATUS
     0003 00rr                      1-  271     	MOVAR	SSAVE
     0004 010A                      1-  272     	MOVR	PCHBUF,W
     0005 028A                      1-  273     	CLRR	PCHBUF
     0006 00rr                      1-  274     	MOVAR	PSAVE
     0007 0104                      1-  275     	MOVR	FSR,W
     0008 00rr                      1-  276     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  277     	MOVR	STK00,W
     000A 00rr                      1-  278     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  279     	MOVR	STK01,W
     000C 00rr                      1-  280     	MOVAR	___sdcc_saved_stk01
                                    1-  281     	.line	46, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  282     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  283     	LGOTO	_00108_DS_
                                    1-  284     	.line	48, "main.c"; 	TMR0 = 55;
     000F 2137                      1-  285     	MOVIA	0x37
     0010 00rr                      1-  286     	MOVAR	_TMR0
                                    1-  287     	.line	49, "main.c"; 	intCount++;
     0011 05rr                      1-  288     	INCR	_intCount,F
                                    1-  289     	.line	50, "main.c"; 	if(intCount == 100)
     0012 01rr                      1-  290     	MOVR	_intCount,W
     0013 2464                      1-  291     	XORIA	0x64
     0014 0903                      1-  292     	BTRSS	STATUS,2
     0015 3rrr                      1-  293     	LGOTO	_00108_DS_
                                    1-  294     	.line	52, "main.c"; 	intCount = 0;
     0016 02rr                      1-  295     	CLRR	_intCount
                                    1-  296     	.line	53, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  297     	MOVIA	0x01
     0018 00rr                      1-  298     	MOVAR	_IntFlag
     0019                           1-  299     _00108_DS_:
                                    1-  300     	.line	56, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  301     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  302     	LGOTO	_00110_DS_
                                    1-  303     	.line	58, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  304     	MOVIA	0xfd
     001C 00rr                      1-  305     	MOVAR	_INTF
     001D                           1-  306     _00110_DS_:
                                    1-  307     	.line	61, "main.c"; 	INTF = 0;
     001D 02rr                      1-  308     	CLRR	_INTF
                                    1-  309     	.line	63, "main.c"; 	}
     001E 01rr                      1-  310     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  311     	MOVAR	STK01
     0020 01rr                      1-  312     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  313     	MOVAR	STK00
     0022 01rr                      1-  314     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  315     	MOVAR	FSR
     0024 01rr                      1-  316     	MOVR	PSAVE,W
     0025 008A                      1-  317     	MOVAR	PCHBUF
     0026 0283                      1-  318     	CLRR	STATUS
     0027 15rr                      1-  319     	SWAPR	SSAVE,W
     0028 0083                      1-  320     	MOVAR	STATUS
     0029 15rr                      1-  321     	SWAPR	WSAVE,F
     002A 15rr                      1-  322     	SWAPR	WSAVE,W
     002B                           1-  323     END_OF_INTERRUPT:
     002B 0011                      1-  324     	RETIE	
                                    1-  326     ;--------------------------------------------------------
                                    1-  327     ; code
                                    1-  328     ;--------------------------------------------------------
                                    1-  329     ;***
                                    1-  330     ;  pBlock Stats: dbName = M
                                    1-  331     ;***
                                    1-  332     ;has an exit
                                    1-  333     ;functions called:
                                    1-  334     ;   _gotoSleep
                                    1-  335     ;   _checkLVD
                                    1-  336     ;   _pwmCon
                                    1-  337     ;   _KeyScan
                                    1-  338     ;   _keyRead
                                    1-  339     ;   _gotoSleep
                                    1-  340     ;   _pwmStart
                                    1-  341     ;   _gotoSleep
                                    1-  342     ;   _checkLVD
                                    1-  343     ;   _pwmCon
                                    1-  344     ;   _KeyScan
                                    1-  345     ;   _keyRead
                                    1-  346     ;   _gotoSleep
                                    1-  347     ;   _pwmStart
                                    1-  348     ;1 compiler assigned register :
                                    1-  349     ;   r0x101C
                                    1-  350     ;; Starting pCode block
                                    1-  351     .segment "code"; module=main, function=_main
                                    1-  353     ;local variable name mapping:
     0000                           1-  355     _main:
                                    1-  356     ; 2 exit points
                                    1-  357     	.line	69, "main.c"; 	PORTB = 0xF8;
     0000 21F8                      1-  358     	MOVIA	0xf8
     0001 00rr                      1-  359     	MOVAR	_PORTB
                                    1-  360     	.line	70, "main.c"; 	BPHCON = 0xF7;
     0002 21F7                      1-  361     	MOVIA	0xf7
     0003 00rr                      1-  362     	MOVAR	_BPHCON
                                    1-  363     	.line	72, "main.c"; 	IOSTB =  C_PB3_Input;	
     0004 2108                      1-  364     	MOVIA	0x08
     0005 000r                      1-  365     	IOST	_IOSTB
                                    1-  366     	.line	73, "main.c"; 	PORTB = 0xF8;                        	// PortB Data Register = 0x00
     0006 21F8                      1-  367     	MOVIA	0xf8
     0007 00rr                      1-  368     	MOVAR	_PORTB
                                    1-  369     	.line	74, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     0008 21A8                      1-  370     	MOVIA	0xa8
     0009 00rr                      1-  371     	MOVAR	_PCON
                                    1-  372     	.line	75, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000A 2101                      1-  373     	MOVIA	0x01
     000B 00rr                      1-  374     	MOVAR	_INTE
                                    1-  375     	.line	76, "main.c"; 	INTF = 0;
     000C 02rr                      1-  376     	CLRR	_INTF
                                    1-  377     	.line	79, "main.c"; 	PCON1 = C_TMR0_Dis;
     000D 0200                      1-  378     	CLRA	
     000E 000r                      1-  379     	IOST	_PCON1
                                    1-  380     	.line	81, "main.c"; 	TMR0 = 55;
     000F 2137                      1-  381     	MOVIA	0x37
     0010 00rr                      1-  382     	MOVAR	_TMR0
                                    1-  383     	.line	82, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0011 0200                      1-  384     	CLRA	
     0012 0003                      1-  385     	T0MD	
                                    1-  386     	.line	84, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0013 2115                      1-  387     	MOVIA	0x15
     0014 000r                      1-  388     	IOST	_PCON1
                                    1-  389     	.line	88, "main.c"; 	ENI();	
     0015 0004                      1-  390     	ENI
                                    1-  391     	.line	89, "main.c"; 	gotoSleep();
     0016 2rrr                      1-  392     	LCALL	_gotoSleep
     0017                           1-  393     _00135_DS_:
                                    1-  394     	.line	92, "main.c"; 	CLRWDT();  
     0017 0002                      1-  395     	clrwdt
                                    1-  396     	.line	93, "main.c"; 	if(!IntFlag)
     0018 01rr                      1-  397     	MOVR	_IntFlag,W
     0019 0D03                      1-  398     	BTRSC	STATUS,2
     001A 3rrr                      1-  399     	LGOTO	_00135_DS_
                                    1-  400     	.line	96, "main.c"; 	IntFlag = 0;
     001B 02rr                      1-  401     	CLRR	_IntFlag
                                    1-  402     	.line	98, "main.c"; 	checkLVD();
     001C 2rrr                      1-  403     	LCALL	_checkLVD
                                    1-  404     	.line	99, "main.c"; 	pwmCon();
     001D 2rrr                      1-  405     	LCALL	_pwmCon
                                    1-  406     	.line	100, "main.c"; 	KeyStatus = KeyScan() & 0x1F;	//
     001E 2rrr                      1-  407     	LCALL	_KeyScan
     001F 00rr                      1-  408     	MOVAR	r0x101C
     0020 211F                      1-  409     	MOVIA	0x1f
     0021 10rr                      1-  410     	ANDAR	r0x101C,W
     0022 00rr                      1-  411     	MOVAR	_KeyStatus
                                    1-  412     	.line	101, "main.c"; 	keyClick = keyRead();
     0023 2rrr                      1-  413     	LCALL	_keyRead
     0024 00rr                      1-  414     	MOVAR	r0x101C
                                    1-  415     	.line	103, "main.c"; 	if(keyClick == 1)
     0025 2401                      1-  416     	XORIA	0x01
     0026 0903                      1-  417     	BTRSS	STATUS,2
     0027 3rrr                      1-  418     	LGOTO	_00129_DS_
                                    1-  419     	.line	105, "main.c"; 	if(workStep == 0)
     0028 01rr                      1-  420     	MOVR	_workStep,W
     0029 0D03                      1-  421     	BTRSC	STATUS,2
     002A 3rrr                      1-  422     	LGOTO	_00135_DS_
                                    1-  423     	.line	109, "main.c"; 	workStep++;
     002B 05rr                      1-  424     	INCR	_workStep,F
                                    1-  425     ;;unsigned compare: left < lit (0x4=4), size=1
                                    1-  426     	.line	110, "main.c"; 	if(workStep >= 4)
     002C 2104                      1-  427     	MOVIA	0x04
     002D 04rr                      1-  428     	SUBAR	_workStep,W
     002E 0803                      1-  429     	BTRSS	STATUS,0
     002F 3rrr                      1-  430     	LGOTO	_00130_DS_
                                    1-  431     	.line	111, "main.c"; 	gotoSleep();
     0030 2rrr                      1-  432     	LCALL	_gotoSleep
     0031 3rrr                      1-  433     	LGOTO	_00130_DS_
     0032                           1-  434     _00129_DS_:
                                    1-  435     	.line	114, "main.c"; 	else if(keyClick == 2)
     0032 01rr                      1-  436     	MOVR	r0x101C,W
     0033 2402                      1-  437     	XORIA	0x02
     0034 0903                      1-  438     	BTRSS	STATUS,2
     0035 3rrr                      1-  439     	LGOTO	_00130_DS_
                                    1-  440     	.line	118, "main.c"; 	if(workStep == 0 && !lvdFlag)  //低于3.6V不能开机
     0036 01rr                      1-  441     	MOVR	_workStep,W
     0037 0903                      1-  442     	BTRSS	STATUS,2
     0038 3rrr                      1-  443     	LGOTO	_00123_DS_
     0039 01rr                      1-  444     	MOVR	_lvdFlag,W
     003A 0903                      1-  445     	BTRSS	STATUS,2
     003B 3rrr                      1-  446     	LGOTO	_00123_DS_
                                    1-  447     	.line	119, "main.c"; 	workStep = 1;
     003C 2101                      1-  448     	MOVIA	0x01
     003D 00rr                      1-  449     	MOVAR	_workStep
     003E 3rrr                      1-  450     	LGOTO	_00130_DS_
     003F                           1-  451     _00123_DS_:
                                    1-  452     	.line	121, "main.c"; 	workStep = 0;
     003F 02rr                      1-  453     	CLRR	_workStep
     0040                           1-  454     _00130_DS_:
                                    1-  455     	.line	125, "main.c"; 	if(keyClick && workStep)
     0040 01rr                      1-  456     	MOVR	r0x101C,W
     0041 0D03                      1-  457     	BTRSC	STATUS,2
     0042 3rrr                      1-  458     	LGOTO	_00135_DS_
     0043 01rr                      1-  459     	MOVR	_workStep,W
     0044 0D03                      1-  460     	BTRSC	STATUS,2
     0045 3rrr                      1-  461     	LGOTO	_00135_DS_
                                    1-  462     	.line	127, "main.c"; 	pwmStart();
     0046 2rrr                      1-  463     	LCALL	_pwmStart
     0047 3rrr                      1-  464     	LGOTO	_00135_DS_
                                    1-  465     	.line	131, "main.c"; 	}
                                    1-  466     	RETURN	
     0048 0010                      3-   26 m1      ret
                                    1-  467     ; exit point of _main
                                    1-  469     ;***
                                    1-  470     ;  pBlock Stats: dbName = C
                                    1-  471     ;***
                                    1-  472     ;has an exit
                                    1-  473     ;5 compiler assigned registers:
                                    1-  474     ;   r0x1012
                                    1-  475     ;   STK00
                                    1-  476     ;   r0x1013
                                    1-  477     ;   r0x1014
                                    1-  478     ;   r0x1015
                                    1-  479     ;; Starting pCode block
                                    1-  480     .segment "code"; module=main, function=_delay
                                    1-  482     ;local variable name mapping:
     0000                           1-  487     _delay:
                                    1-  488     ; 2 exit points
                                    1-  489     	.line	274, "main.c"; 	void delay(u16t time)
     0000 00rr                      1-  490     	MOVAR	r0x1012
     0001 01rr                      1-  491     	MOVR	STK00,W
     0002 00rr                      1-  492     	MOVAR	r0x1013
                                    1-  493     	.line	276, "main.c"; 	for(u16t i=0;i<time;i++);
     0003 02rr                      1-  494     	CLRR	r0x1014
     0004 02rr                      1-  495     	CLRR	r0x1015
     0005                           1-  496     _00220_DS_:
     0005 01rr                      1-  497     	MOVR	r0x1012,W
     0006 04rr                      1-  498     	SUBAR	r0x1015,W
     0007 0903                      1-  499     	BTRSS	STATUS,2
     0008 3rrr                      1-  500     	LGOTO	_00231_DS_
     0009 01rr                      1-  501     	MOVR	r0x1013,W
     000A 04rr                      1-  502     	SUBAR	r0x1014,W
     000B                           1-  503     _00231_DS_:
     000B 0C03                      1-  504     	BTRSC	STATUS,0
     000C 3rrr                      1-  505     	LGOTO	_00222_DS_
     000D 05rr                      1-  506     	INCR	r0x1014,F
     000E 0D03                      1-  507     	BTRSC	STATUS,2
     000F 05rr                      1-  508     	INCR	r0x1015,F
     0010 3rrr                      1-  509     	LGOTO	_00220_DS_
     0011                           1-  510     _00222_DS_:
                                    1-  511     	.line	277, "main.c"; 	}
                                    1-  512     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  513     ; exit point of _delay
                                    1-  515     ;***
                                    1-  516     ;  pBlock Stats: dbName = C
                                    1-  517     ;***
                                    1-  518     ;has an exit
                                    1-  519     ;; Starting pCode block
                                    1-  520     .segment "code"; module=main, function=_keyRead
     0000                           1-  522     _keyRead:
                                    1-  523     ; 2 exit points
                                    1-  524     	.line	243, "main.c"; 	if (KeyStatus & 0x08)
     0000 09rr                      1-  525     	BTRSS	_KeyStatus,3
     0001 3rrr                      1-  526     	LGOTO	_00192_DS_
                                    1-  527     	.line	245, "main.c"; 	keyCount++;
     0002 05rr                      1-  528     	INCR	_keyCount,F
     0003 0D03                      1-  529     	BTRSC	STATUS,2
     0004 05rr                      1-  530     	INCR	(_keyCount + 1),F
                                    1-  531     ;;unsigned compare: left < lit (0xC8=200), size=2
                                    1-  532     	.line	246, "main.c"; 	if(keyCount >= 200)
     0005 2100                      1-  533     	MOVIA	0x00
     0006 04rr                      1-  534     	SUBAR	(_keyCount + 1),W
     0007 0903                      1-  535     	BTRSS	STATUS,2
     0008 3rrr                      1-  536     	LGOTO	_00211_DS_
     0009 21C8                      1-  537     	MOVIA	0xc8
     000A 04rr                      1-  538     	SUBAR	_keyCount,W
     000B                           1-  539     _00211_DS_:
     000B 0803                      1-  540     	BTRSS	STATUS,0
     000C 3rrr                      1-  541     	LGOTO	_00193_DS_
                                    1-  542     	.line	248, "main.c"; 	keyCount = 200;
     000D 21C8                      1-  543     	MOVIA	0xc8
     000E 00rr                      1-  544     	MOVAR	_keyCount
     000F 02rr                      1-  545     	CLRR	(_keyCount + 1)
                                    1-  546     	.line	249, "main.c"; 	if(!longPressFlag)
     0010 01rr                      1-  547     	MOVR	_longPressFlag,W
     0011 0903                      1-  548     	BTRSS	STATUS,2
     0012 3rrr                      1-  549     	LGOTO	_00193_DS_
                                    1-  550     	.line	251, "main.c"; 	longPressFlag = 1;
     0013 2101                      1-  551     	MOVIA	0x01
     0014 00rr                      1-  552     	MOVAR	_longPressFlag
                                    1-  553     	.line	252, "main.c"; 	return 2;
     0015 2102                      1-  554     	MOVIA	0x02
     0016 3rrr                      1-  555     	LGOTO	_00194_DS_
                                    1-  556     ;;unsigned compare: left < lit (0xC8=200), size=2
     0017                           1-  557     _00192_DS_:
                                    1-  558     	.line	258, "main.c"; 	if(keyCount >= 200)
     0017 2100                      1-  559     	MOVIA	0x00
     0018 04rr                      1-  560     	SUBAR	(_keyCount + 1),W
     0019 0903                      1-  561     	BTRSS	STATUS,2
     001A 3rrr                      1-  562     	LGOTO	_00212_DS_
     001B 21C8                      1-  563     	MOVIA	0xc8
     001C 04rr                      1-  564     	SUBAR	_keyCount,W
     001D                           1-  565     _00212_DS_:
     001D 0803                      1-  566     	BTRSS	STATUS,0
     001E 3rrr                      1-  567     	LGOTO	_00189_DS_
                                    1-  568     	.line	260, "main.c"; 	keyCount = 0;
     001F 02rr                      1-  569     	CLRR	_keyCount
     0020 02rr                      1-  570     	CLRR	(_keyCount + 1)
                                    1-  571     	.line	261, "main.c"; 	longPressFlag = 0;
     0021 02rr                      1-  572     	CLRR	_longPressFlag
                                    1-  573     	.line	262, "main.c"; 	return	0;
     0022 2100                      1-  574     	MOVIA	0x00
     0023 3rrr                      1-  575     	LGOTO	_00194_DS_
                                    1-  576     ;;unsigned compare: left < lit (0x8=8), size=2
     0024                           1-  577     _00189_DS_:
                                    1-  578     	.line	264, "main.c"; 	else if(keyCount >= 8)
     0024 2100                      1-  579     	MOVIA	0x00
     0025 04rr                      1-  580     	SUBAR	(_keyCount + 1),W
     0026 0903                      1-  581     	BTRSS	STATUS,2
     0027 3rrr                      1-  582     	LGOTO	_00213_DS_
     0028 2108                      1-  583     	MOVIA	0x08
     0029 04rr                      1-  584     	SUBAR	_keyCount,W
     002A                           1-  585     _00213_DS_:
     002A 0803                      1-  586     	BTRSS	STATUS,0
     002B 3rrr                      1-  587     	LGOTO	_00190_DS_
                                    1-  588     	.line	266, "main.c"; 	keyCount = 0;
     002C 02rr                      1-  589     	CLRR	_keyCount
     002D 02rr                      1-  590     	CLRR	(_keyCount + 1)
                                    1-  591     	.line	267, "main.c"; 	return	1;
     002E 2101                      1-  592     	MOVIA	0x01
     002F 3rrr                      1-  593     	LGOTO	_00194_DS_
     0030                           1-  594     _00190_DS_:
                                    1-  595     	.line	269, "main.c"; 	keyCount = 0;
     0030 02rr                      1-  596     	CLRR	_keyCount
     0031 02rr                      1-  597     	CLRR	(_keyCount + 1)
     0032                           1-  598     _00193_DS_:
                                    1-  599     	.line	271, "main.c"; 	return 0;
     0032 2100                      1-  600     	MOVIA	0x00
     0033                           1-  601     _00194_DS_:
                                    1-  602     	.line	272, "main.c"; 	}
                                    1-  603     	RETURN	
     0033 0010                      3-   26 m1      ret
                                    1-  604     ; exit point of _keyRead
                                    1-  606     ;***
                                    1-  607     ;  pBlock Stats: dbName = C
                                    1-  608     ;***
                                    1-  609     ;has an exit
                                    1-  610     ;1 compiler assigned register :
                                    1-  611     ;   r0x1016
                                    1-  612     ;; Starting pCode block
                                    1-  613     .segment "code"; module=main, function=_KeyScan
                                    1-  615     ;local variable name mapping:
     0000                           1-  617     _KeyScan:
                                    1-  618     ; 2 exit points
                                    1-  619     	.line	234, "main.c"; 	KeyStatus = ~PORTB;
     0000 07rr                      1-  620     	COMR	_PORTB,W
                                    1-  621     ;;1	MOVAR	r0x1016
                                    1-  622     	.line	237, "main.c"; 	}
                                    1-  623     	RETURN	
     0001 0010                      3-   26 m1      ret
                                    1-  624     ; exit point of _KeyScan
                                    1-  626     ;***
                                    1-  627     ;  pBlock Stats: dbName = C
                                    1-  628     ;***
                                    1-  629     ;has an exit
                                    1-  630     ;; Starting pCode block
                                    1-  631     .segment "code"; module=main, function=_pwmStop
     0000                           1-  633     _pwmStop:
                                    1-  634     ; 2 exit points
                                    1-  635     	.line	221, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  636     	CLRA	
     0001 002r                      1-  637     	SFUN	_T1CR1
                                    1-  638     	.line	223, "main.c"; 	PWM1DUTY = 0;
     0002 002r                      1-  639     	SFUN	_PWM1DUTY
                                    1-  640     	.line	225, "main.c"; 	}
                                    1-  641     	RETURN	
     0003 0010                      3-   26 m1      ret
                                    1-  642     ; exit point of _pwmStop
                                    1-  644     ;***
                                    1-  645     ;  pBlock Stats: dbName = C
                                    1-  646     ;***
                                    1-  647     ;has an exit
                                    1-  648     ;; Starting pCode block
                                    1-  649     .segment "code"; module=main, function=_pwmStart
     0000                           1-  651     _pwmStart:
                                    1-  652     ; 2 exit points
                                    1-  653     	.line	212, "main.c"; 	TMR1 = 99;							//频率为20K
     0000 2163                      1-  654     	MOVIA	0x63
     0001 002r                      1-  655     	SFUN	_TMR1
                                    1-  656     	.line	213, "main.c"; 	PWM1DUTY = 0x07;				// 		
     0002 2107                      1-  657     	MOVIA	0x07
     0003 002r                      1-  658     	SFUN	_PWM1DUTY
                                    1-  659     	.line	215, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0004 0200                      1-  660     	CLRA	
     0005 002r                      1-  661     	SFUN	_T1CR2
                                    1-  662     	.line	216, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0006 2183                      1-  663     	MOVIA	0x83
     0007 002r                      1-  664     	SFUN	_T1CR1
                                    1-  665     	.line	217, "main.c"; 	}
                                    1-  666     	RETURN	
     0008 0010                      3-   26 m1      ret
                                    1-  667     ; exit point of _pwmStart
                                    1-  669     ;***
                                    1-  670     ;  pBlock Stats: dbName = C
                                    1-  671     ;***
                                    1-  672     ;has an exit
                                    1-  673     ;functions called:
                                    1-  674     ;   _delay
                                    1-  675     ;   _delay
                                    1-  676     ;3 compiler assigned registers:
                                    1-  677     ;   STK00
                                    1-  678     ;   r0x1017
                                    1-  679     ;   r0x1018
                                    1-  680     ;; Starting pCode block
                                    1-  681     .segment "code"; module=main, function=_checkLVD
     0000                           1-  683     _checkLVD:
                                    1-  684     ; 2 exit points
                                    1-  685     	.line	187, "main.c"; 	if(workStep)
     0000 01rr                      1-  686     	MOVR	_workStep,W
     0001 0D03                      1-  687     	BTRSC	STATUS,2
     0002 3rrr                      1-  688     	LGOTO	_00160_DS_
                                    1-  689     	.line	190, "main.c"; 	PCON1 = C_LVD_3P0V | C_TMR0_En;
     0003 2115                      1-  690     	MOVIA	0x15
     0004 000r                      1-  691     	IOST	_PCON1
                                    1-  692     	.line	191, "main.c"; 	PORTB &= 0xDF;
     0005 1Err                      1-  693     	BCR	_PORTB,5
     0006 3rrr                      1-  694     	LGOTO	_00161_DS_
     0007                           1-  695     _00160_DS_:
                                    1-  696     	.line	195, "main.c"; 	PCON1 = C_LVD_3P6V | C_TMR0_En;
     0007 211D                      1-  697     	MOVIA	0x1d
     0008 000r                      1-  698     	IOST	_PCON1
     0009                           1-  699     _00161_DS_:
                                    1-  700     	.line	197, "main.c"; 	delay(80);
     0009 2150                      1-  701     	MOVIA	0x50
     000A 00rr                      1-  702     	MOVAR	STK00
     000B 2100                      1-  703     	MOVIA	0x00
     000C 2rrr                      1-  704     	LCALL	_delay
                                    1-  705     	.line	198, "main.c"; 	if((PCON1 >> 6)&1)
     000D 001r                      1-  706     	IOSTR	_PCON1
                                    1-  707     ;;1	MOVAR	r0x1017
     000E 2240                      1-  708     	ANDIA	0x40
     000F 0903                      1-  709     	BTRSS	STATUS,2
     0010 2101                      1-  710     	MOVIA	0x01
     0011 00rr                      1-  711     	MOVAR	r0x1018
     0012 01rr                      1-  712     	MOVR	r0x1018,W
     0013 0D03                      1-  713     	BTRSC	STATUS,2
     0014 3rrr                      1-  714     	LGOTO	_00163_DS_
                                    1-  715     	.line	200, "main.c"; 	lvdFlag = 0;
     0015 02rr                      1-  716     	CLRR	_lvdFlag
     0016 3rrr                      1-  717     	LGOTO	_00165_DS_
     0017                           1-  718     _00163_DS_:
                                    1-  719     	.line	204, "main.c"; 	lvdFlag = 1;
     0017 2101                      1-  720     	MOVIA	0x01
     0018 00rr                      1-  721     	MOVAR	_lvdFlag
     0019                           1-  722     _00165_DS_:
                                    1-  723     	.line	206, "main.c"; 	}
                                    1-  724     	RETURN	
     0019 0010                      3-   26 m1      ret
                                    1-  725     ; exit point of _checkLVD
                                    1-  727     ;***
                                    1-  728     ;  pBlock Stats: dbName = C
                                    1-  729     ;***
                                    1-  730     ;has an exit
                                    1-  731     ;functions called:
                                    1-  732     ;   __gptrget1
                                    1-  733     ;   _gotoSleep
                                    1-  734     ;   _gotoSleep
                                    1-  735     ;   __gptrget1
                                    1-  736     ;   _gotoSleep
                                    1-  737     ;   _gotoSleep
                                    1-  738     ;5 compiler assigned registers:
                                    1-  739     ;   r0x1019
                                    1-  740     ;   r0x101A
                                    1-  741     ;   STK01
                                    1-  742     ;   STK00
                                    1-  743     ;   r0x101B
                                    1-  744     ;; Starting pCode block
                                    1-  745     .segment "code"; module=main, function=_pwmCon
     0000                           1-  747     _pwmCon:
                                    1-  748     ; 2 exit points
                                    1-  749     	.line	159, "main.c"; 	PWM1DUTY = PWM1DUTYS[workStep];
     0000 01rr                      1-  750     	MOVR	_workStep,W
     0001 25rr                      1-  751     	ADDIA	(_PWM1DUTYS + 0)
     0002 00rr                      1-  752     	MOVAR	r0x1019
     0003 21rr                      1-  753     	MOVIA	((_PWM1DUTYS + 0) >> 8) & 0xff
     0004 0C03                      1-  754     	BTRSC	STATUS,0
     0005 2501                      1-  755     	ADDIA	0x01
     0006 00rr                      1-  756     	MOVAR	r0x101A
     0007 01rr                      1-  757     	MOVR	r0x1019,W
     0008 00rr                      1-  758     	MOVAR	STK01
     0009 01rr                      1-  759     	MOVR	r0x101A,W
     000A 00rr                      1-  760     	MOVAR	STK00
     000B 2100                      1-  761     	MOVIA	0x00
     000C 2rrr                      1-  762     	LCALL	__gptrget1
                                    1-  763     ;;1	MOVAR	r0x101B
     000D 002r                      1-  764     	SFUN	_PWM1DUTY
                                    1-  765     	.line	160, "main.c"; 	if(workStep == 0)
     000E 01rr                      1-  766     	MOVR	_workStep,W
     000F 0903                      1-  767     	BTRSS	STATUS,2
     0010 3rrr                      1-  768     	LGOTO	_00148_DS_
                                    1-  769     	.line	163, "main.c"; 	if(++sleepDelay > 20 && !keyCount)
     0011 05rr                      1-  770     	INCR	_sleepDelay,F
                                    1-  771     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  772     ;;unsigned compare: left >= lit (0x15=21), size=1
     0012 2115                      1-  773     	MOVIA	0x15
     0013 04rr                      1-  774     	SUBAR	_sleepDelay,W
     0014 0803                      1-  775     	BTRSS	STATUS,0
     0015 3rrr                      1-  776     	LGOTO	_00148_DS_
     0016 01rr                      1-  777     	MOVR	_keyCount,W
     0017 11rr                      1-  778     	IORAR	(_keyCount + 1),W
     0018 0D03                      1-  779     	BTRSC	STATUS,2
                                    1-  780     	.line	164, "main.c"; 	gotoSleep();
     0019 2rrr                      1-  781     	LCALL	_gotoSleep
     001A                           1-  782     _00148_DS_:
                                    1-  783     	.line	168, "main.c"; 	if(lvdFlag)
     001A 01rr                      1-  784     	MOVR	_lvdFlag,W
     001B 0D03                      1-  785     	BTRSC	STATUS,2
     001C 3rrr                      1-  786     	LGOTO	_00152_DS_
                                    1-  787     	.line	170, "main.c"; 	lvdCount++;
     001D 05rr                      1-  788     	INCR	_lvdCount,F
                                    1-  789     ;;unsigned compare: left < lit (0x32=50), size=1
                                    1-  790     	.line	171, "main.c"; 	if(lvdCount >= 50)	//检测50次还是低电平，关机睡眠
     001E 2132                      1-  791     	MOVIA	0x32
     001F 04rr                      1-  792     	SUBAR	_lvdCount,W
     0020 0803                      1-  793     	BTRSS	STATUS,0
     0021 3rrr                      1-  794     	LGOTO	_00154_DS_
                                    1-  795     	.line	173, "main.c"; 	lvdCount = 0;
     0022 02rr                      1-  796     	CLRR	_lvdCount
                                    1-  797     	.line	174, "main.c"; 	gotoSleep();
     0023 2rrr                      1-  798     	LCALL	_gotoSleep
     0024 3rrr                      1-  799     	LGOTO	_00154_DS_
     0025                           1-  800     _00152_DS_:
                                    1-  801     	.line	179, "main.c"; 	lvdCount = 0;
     0025 02rr                      1-  802     	CLRR	_lvdCount
     0026                           1-  803     _00154_DS_:
                                    1-  804     	.line	182, "main.c"; 	}
                                    1-  805     	RETURN	
     0026 0010                      3-   26 m1      ret
                                    1-  806     ; exit point of _pwmCon
                                    1-  808     ;***
                                    1-  809     ;  pBlock Stats: dbName = C
                                    1-  810     ;***
                                    1-  811     ;has an exit
                                    1-  812     ;functions called:
                                    1-  813     ;   _pwmStop
                                    1-  814     ;   _pwmStop
                                    1-  815     ;; Starting pCode block
                                    1-  816     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  818     _gotoSleep:
                                    1-  819     ; 2 exit points
                                    1-  820     	.line	136, "main.c"; 	pwmStop();
     0000 2rrr                      1-  821     	LCALL	_pwmStop
                                    1-  822     	.line	137, "main.c"; 	PORTB = 0xE0;
     0001 21E0                      1-  823     	MOVIA	0xe0
     0002 00rr                      1-  824     	MOVAR	_PORTB
                                    1-  825     	.line	138, "main.c"; 	sleepDelay = 0;
     0003 02rr                      1-  826     	CLRR	_sleepDelay
                                    1-  827     	.line	139, "main.c"; 	workStep = 0;
     0004 02rr                      1-  828     	CLRR	_workStep
                                    1-  829     	.line	140, "main.c"; 	keyCount = 0;
     0005 02rr                      1-  830     	CLRR	_keyCount
     0006 02rr                      1-  831     	CLRR	(_keyCount + 1)
                                    1-  832     	.line	141, "main.c"; 	lvdFlag = 0;
     0007 02rr                      1-  833     	CLRR	_lvdFlag
                                    1-  834     	.line	142, "main.c"; 	BWUCON = 0x08;		//PB3唤醒
     0008 2108                      1-  835     	MOVIA	0x08
     0009 00rr                      1-  836     	MOVAR	_BWUCON
                                    1-  837     	.line	143, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     000A 2103                      1-  838     	MOVIA	0x03
     000B 00rr                      1-  839     	MOVAR	_INTE
                                    1-  840     	.line	144, "main.c"; 	PCON =  C_LVR_En | C_LVR_En;	
     000C 2108                      1-  841     	MOVIA	0x08
     000D 00rr                      1-  842     	MOVAR	_PCON
                                    1-  843     	.line	145, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000E 02rr                      1-  844     	CLRR	_INTF
                                    1-  845     	.line	146, "main.c"; 	CLRWDT();
     000F 0002                      1-  846     	clrwdt
                                    1-  847     	.line	147, "main.c"; 	sleepFlag = 1;
     0010 2101                      1-  848     	MOVIA	0x01
     0011 00rr                      1-  849     	MOVAR	_sleepFlag
                                    1-  850     	.line	148, "main.c"; 	SLEEP();
     0012 0001                      1-  851     	sleep
                                    1-  852     	.line	149, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     0013 2101                      1-  853     	MOVIA	0x01
     0014 00rr                      1-  854     	MOVAR	_INTE
                                    1-  855     	.line	150, "main.c"; 	INTF = 0;
     0015 02rr                      1-  856     	CLRR	_INTF
                                    1-  857     	.line	152, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0016 21A8                      1-  858     	MOVIA	0xa8
     0017 00rr                      1-  859     	MOVAR	_PCON
                                    1-  860     	.line	153, "main.c"; 	}
                                    1-  861     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  862     ; exit point of _gotoSleep
                                    1-  865     ;	code size estimation:
                                    1-  866     ;	  288+    0 =   288 instructions (  576 byte)
                                    1-  868     	end
                                    1-  868     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__gptrget1              Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00123_DS_              Label    0000003F
_00129_DS_              Label    00000032
_00130_DS_              Label    00000040
_00135_DS_              Label    00000017
_00148_DS_              Label    0000001A
_00152_DS_              Label    00000025
_00154_DS_              Label    00000026
_00160_DS_              Label    00000007
_00161_DS_              Label    00000009
_00163_DS_              Label    00000017
_00165_DS_              Label    00000019
_00189_DS_              Label    00000024
_00190_DS_              Label    00000030
_00192_DS_              Label    00000017
_00193_DS_              Label    00000032
_00194_DS_              Label    00000033
_00211_DS_              Label    0000000B
_00212_DS_              Label    0000001D
_00213_DS_              Label    0000002A
_00220_DS_              Label    00000005
_00222_DS_              Label    00000011
_00231_DS_              Label    0000000B
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_delay                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_KeyStatus              Label    00000000
_longPressFlag          Label    00000000
_lvdCount               Label    00000000
_lvdFlag                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM1DUTYS              Label    00000000
_pwmCon                 Label    00000000
_pwmStart               Label    00000000
_pwmStop                Label    00000000
_sleepDelay             Label    00000000
_sleepFlag              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1014                 Label    00000000
r0x1015                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101C                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
