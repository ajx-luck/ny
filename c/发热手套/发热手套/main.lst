
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_KeyScan
                                    1-   15     	extern	_keyRead
                                    1-   16     	extern	_PORTAbits
                                    1-   17     	extern	_PORTBbits
                                    1-   18     	extern	_PCONbits
                                    1-   19     	extern	_BWUCONbits
                                    1-   20     	extern	_ABPLCONbits
                                    1-   21     	extern	_BPHCONbits
                                    1-   22     	extern	_INTEbits
                                    1-   23     	extern	_INTFbits
                                    1-   24     	extern	_ADMDbits
                                    1-   25     	extern	_ADRbits
                                    1-   26     	extern	_ADVREFHbits
                                    1-   27     	extern	_ADCRbits
                                    1-   28     	extern	_AWUCONbits
                                    1-   29     	extern	_PACONbits
                                    1-   30     	extern	_INTEDGbits
                                    1-   31     	extern	_ANAENbits
                                    1-   32     	extern	_RFCbits
                                    1-   33     	extern	_INTE2bits
                                    1-   34     	extern	_INDF
                                    1-   35     	extern	_TMR0
                                    1-   36     	extern	_PCL
                                    1-   37     	extern	_STATUS
                                    1-   38     	extern	_FSR
                                    1-   39     	extern	_PORTA
                                    1-   40     	extern	_PORTB
                                    1-   41     	extern	_PCON
                                    1-   42     	extern	_BWUCON
                                    1-   43     	extern	_PCHBUF
                                    1-   44     	extern	_ABPLCON
                                    1-   45     	extern	_BPHCON
                                    1-   46     	extern	_INTE
                                    1-   47     	extern	_INTF
                                    1-   48     	extern	_ADMD
                                    1-   49     	extern	_ADR
                                    1-   50     	extern	_ADD
                                    1-   51     	extern	_ADVREFH
                                    1-   52     	extern	_ADCR
                                    1-   53     	extern	_AWUCON
                                    1-   54     	extern	_PACON
                                    1-   55     	extern	_INTEDG
                                    1-   56     	extern	_TMRH
                                    1-   57     	extern	_ANAEN
                                    1-   58     	extern	_RFC
                                    1-   59     	extern	_TM3RH
                                    1-   60     	extern	_INTE2
                                    1-   61     	extern	_TMR1
                                    1-   62     	extern	_T1CR1
                                    1-   63     	extern	_T1CR2
                                    1-   64     	extern	_PWM1DUTY
                                    1-   65     	extern	_PS1CV
                                    1-   66     	extern	_BZ1CR
                                    1-   67     	extern	_IRCR
                                    1-   68     	extern	_TBHP
                                    1-   69     	extern	_TBHD
                                    1-   70     	extern	_TMR2
                                    1-   71     	extern	_T2CR1
                                    1-   72     	extern	_T2CR2
                                    1-   73     	extern	_PWM2DUTY
                                    1-   74     	extern	_PS2CV
                                    1-   75     	extern	_BZ2CR
                                    1-   76     	extern	_OSCCR
                                    1-   77     	extern	_TMR3
                                    1-   78     	extern	_T3CR1
                                    1-   79     	extern	_T3CR2
                                    1-   80     	extern	_PWM3DUTY
                                    1-   81     	extern	_PS3CV
                                    1-   82     	extern	_BZ3CR
                                    1-   83     	extern	_IOSTA
                                    1-   84     	extern	_IOSTB
                                    1-   85     	extern	_APHCON
                                    1-   86     	extern	_PS0CV
                                    1-   87     	extern	_BODCON
                                    1-   88     	extern	_CMPCR
                                    1-   89     	extern	_PCON1
                                    1-   90     	extern	_T0MD
                                    1-   91     	extern	___sdcc_saved_fsr
                                    1-   92     	extern	___sdcc_saved_stk00
                                    1-   93     	extern	___sdcc_saved_stk01
                                    1-   94     	extern	__nyc_ny8_startup
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     ; global declarations
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     	extern	_delay
                                    1-   99     	extern	_F_wait_eoc
                                    1-  100     	extern	_gotoSleep
                                    1-  101     	extern	_F_AIN0_Convert
                                    1-  102     	extern	_initAD
                                    1-  103     	extern	_init
                                    1-  104     	extern	_checkAD
                                    1-  105     	extern	_isr
                                    1-  106     	extern	_main
                                    1-  107     	extern	_R_AIN0_DATA
                                    1-  108     	extern	_R_AIN0_DATA_LB
                                    1-  109     	extern	_intCount
                                    1-  110     	extern	_IntFlag
                                    1-  111     	extern	_keyClick
                                    1-  112     	extern	_workFlag
                                    1-  113     	extern	_sleepDelay
                                    1-  115     	extern PSAVE
                                    1-  116     	extern SSAVE
                                    1-  117     	extern WSAVE
                                    1-  118     	extern STK12
                                    1-  119     	extern STK11
                                    1-  120     	extern STK10
                                    1-  121     	extern STK09
                                    1-  122     	extern STK08
                                    1-  123     	extern STK07
                                    1-  124     	extern STK06
                                    1-  125     	extern STK05
                                    1-  126     	extern STK04
                                    1-  127     	extern STK03
                                    1-  128     	extern STK02
                                    1-  129     	extern STK01
                                    1-  130     	extern STK00
                                    1-  132     .segment "uninit", 0x20000040
 20000040                           1-  133     PSAVE:
                                    1-  134     	.res 1
 20000041                           1-  135     SSAVE:
                                    1-  136     	.res 1
 20000042                           1-  137     WSAVE:
                                    1-  138     	.res 1
 20000043                           1-  139     STK12:
                                    1-  140     	.res 1
 20000044                           1-  141     STK11:
                                    1-  142     	.res 1
 20000045                           1-  143     STK10:
                                    1-  144     	.res 1
 20000046                           1-  145     STK09:
                                    1-  146     	.res 1
 20000047                           1-  147     STK08:
                                    1-  148     	.res 1
 20000048                           1-  149     STK07:
                                    1-  150     	.res 1
 20000049                           1-  151     STK06:
                                    1-  152     	.res 1
 2000004A                           1-  153     STK05:
                                    1-  154     	.res 1
 2000004B                           1-  155     STK04:
                                    1-  156     	.res 1
 2000004C                           1-  157     STK03:
                                    1-  158     	.res 1
 2000004D                           1-  159     STK02:
                                    1-  160     	.res 1
 2000004E                           1-  161     STK01:
                                    1-  162     	.res 1
 2000004F                           1-  163     STK00:
                                    1-  164     	.res 1
                                    1-  166     ;--------------------------------------------------------
                                    1-  167     ; global definitions
                                    1-  168     ;--------------------------------------------------------
                                    1-  169     .segment "uninit"
     0000                           1-  170     _R_AIN0_DATA:
                                    1-  171     	.res	2
                                    1-  174     .segment "uninit"
     0000                           1-  175     _R_AIN0_DATA_LB:
                                    1-  176     	.res	1
                                    1-  179     ;--------------------------------------------------------
                                    1-  180     ; absolute symbol definitions
                                    1-  181     ;--------------------------------------------------------
                                    1-  182     ;--------------------------------------------------------
                                    1-  183     ; compiler-defined variables
                                    1-  184     ;--------------------------------------------------------
                                    1-  185     .segment "uninit"
     0000                           1-  186     r0x101B:
                                    1-  187     	.res	1
                                    1-  188     .segment "uninit"
     0000                           1-  189     r0x1019:
                                    1-  190     	.res	1
                                    1-  191     .segment "uninit"
     0000                           1-  192     r0x101A:
                                    1-  193     	.res	1
                                    1-  194     .segment "uninit"
     0000                           1-  195     r0x1011:
                                    1-  196     	.res	1
                                    1-  197     .segment "uninit"
     0000                           1-  198     r0x1012:
                                    1-  199     	.res	1
                                    1-  200     .segment "uninit"
     0000                           1-  201     r0x1013:
                                    1-  202     	.res	1
                                    1-  203     .segment "uninit"
     0000                           1-  204     r0x1016:
                                    1-  205     	.res	1
                                    1-  206     .segment "uninit"
     0000                           1-  207     r0x100D:
                                    1-  208     	.res	1
                                    1-  209     .segment "uninit"
     0000                           1-  210     r0x100C:
                                    1-  211     	.res	1
                                    1-  212     .segment "uninit"
     0000                           1-  213     r0x100E:
                                    1-  214     	.res	1
                                    1-  215     .segment "uninit"
     0000                           1-  216     r0x100F:
                                    1-  217     	.res	1
                                    1-  218     .segment "uninit"
     0000                           1-  219     r0x1010:
                                    1-  220     	.res	1
                                    1-  221     ;--------------------------------------------------------
                                    1-  222     ; initialized data
                                    1-  223     ;--------------------------------------------------------
                                    1-  225     .segment "idata"
     0000                           1-  226     _intCount:
     0000 0000                      1-  227     	dw	0x00
                                    1-  231     .segment "idata"
     0000                           1-  232     _IntFlag:
     0000 0000                      1-  233     	dw	0x00
                                    1-  237     .segment "idata"
     0000                           1-  238     _keyClick:
     0000 0000                      1-  239     	dw	0x00
                                    1-  243     .segment "idata"
     0000                           1-  244     _workFlag:
     0000 0000                      1-  245     	dw	0x00
                                    1-  249     .segment "idata"
     0000                           1-  250     _sleepDelay:
     0000 0000 0000                 1-  251     	dw	0x00, 0x00
                                    1-  254     ;--------------------------------------------------------
                                    1-  255     ; overlayable items in internal ram 
                                    1-  256     ;--------------------------------------------------------
                                    1-  257     ;	udata_ovr
                                    1-  258     ;--------------------------------------------------------
                                    1-  259     ; reset vector 
                                    1-  260     ;--------------------------------------------------------
                                    1-  261     ORG	0x0000
     0000 3rrr                      1-  262     	LGOTO	__nyc_ny8_startup
                                    1-  263     ;--------------------------------------------------------
                                    1-  264     ; interrupt and initialization code
                                    1-  265     ;--------------------------------------------------------
                                    1-  266     ORG 0x0008
     0008 3rrr                      1-  267     	lgoto	__sdcc_interrupt
                                    1-  269     .segment "code"
     0000                           1-  270     __sdcc_interrupt:
                                    1-  271     ;***
                                    1-  272     ;  pBlock Stats: dbName = I
                                    1-  273     ;***
                                    1-  274     ;2 compiler assigned registers:
                                    1-  275     ;   STK00
                                    1-  276     ;   STK01
                                    1-  277     ;; Starting pCode block
     0000                           1-  278     _isr:
                                    1-  279     ; 0 exit points
                                    1-  280     	.line	42, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  281     	MOVAR	WSAVE
     0001 1503                      1-  282     	SWAPR	STATUS,W
     0002 0283                      1-  283     	CLRR	STATUS
     0003 00rr                      1-  284     	MOVAR	SSAVE
     0004 010A                      1-  285     	MOVR	PCHBUF,W
     0005 028A                      1-  286     	CLRR	PCHBUF
     0006 00rr                      1-  287     	MOVAR	PSAVE
     0007 0104                      1-  288     	MOVR	FSR,W
                                    1-  289     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  290     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  291     	MOVR	STK00,W
                                    1-  292     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  293     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  294     	MOVR	STK01,W
                                    1-  295     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  296     	MOVAR	___sdcc_saved_stk01
                                    1-  297     	.line	44, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  298     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  299     	LGOTO	_00108_DS_
                                    1-  300     	.line	46, "main.c"; 	TMR0 = 55;
     0012 2137                      1-  301     	MOVIA	0x37
     0013 00rr                      1-  302     	MOVAR	_TMR0
                                    1-  303     	.line	47, "main.c"; 	intCount++;
                                    1-  304     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  305     	INCR	_intCount,F
                                    1-  306     	.line	48, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  307     	MOVR	_intCount,W
     0017 2464                      1-  308     	XORIA	0x64
     0018 0903                      1-  309     	BTRSS	STATUS,2
     0019 3rrr                      1-  310     	LGOTO	_00108_DS_
                                    1-  311     	.line	50, "main.c"; 	intCount = 0;
     001A 02rr                      1-  312     	CLRR	_intCount
                                    1-  313     	.line	51, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  314     	MOVIA	0x01
                                    1-  315     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  316     	MOVAR	_IntFlag
     001E                           1-  317     _00108_DS_:
                                    1-  318     	.line	54, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  319     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  320     	LGOTO	_00110_DS_
                                    1-  321     	.line	56, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  322     	MOVIA	0xfd
     0021 00rr                      1-  323     	MOVAR	_INTF
     0022                           1-  324     _00110_DS_:
                                    1-  325     	.line	59, "main.c"; 	INTF = 0;	
     0022 02rr                      1-  326     	CLRR	_INTF
                                    1-  327     	.line	61, "main.c"; 	}
                                    1-  328     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  329     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  330     	MOVAR	STK01
                                    1-  331     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  332     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  333     	MOVAR	STK00
                                    1-  334     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  335     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  336     	MOVAR	FSR
     002C 01rr                      1-  337     	MOVR	PSAVE,W
     002D 008A                      1-  338     	MOVAR	PCHBUF
     002E 0283                      1-  339     	CLRR	STATUS
     002F 15rr                      1-  340     	SWAPR	SSAVE,W
     0030 0083                      1-  341     	MOVAR	STATUS
     0031 15rr                      1-  342     	SWAPR	WSAVE,F
     0032 15rr                      1-  343     	SWAPR	WSAVE,W
     0033                           1-  344     END_OF_INTERRUPT:
     0033 0011                      1-  345     	RETIE	
                                    1-  347     ;--------------------------------------------------------
                                    1-  348     ; code
                                    1-  349     ;--------------------------------------------------------
                                    1-  350     ;***
                                    1-  351     ;  pBlock Stats: dbName = M
                                    1-  352     ;***
                                    1-  353     ;has an exit
                                    1-  354     ;functions called:
                                    1-  355     ;   _init
                                    1-  356     ;   _initAD
                                    1-  357     ;   _KeyScan
                                    1-  358     ;   _keyRead
                                    1-  359     ;   _checkAD
                                    1-  360     ;   _gotoSleep
                                    1-  361     ;   _init
                                    1-  362     ;   _initAD
                                    1-  363     ;   _KeyScan
                                    1-  364     ;   _keyRead
                                    1-  365     ;   _checkAD
                                    1-  366     ;   _gotoSleep
                                    1-  367     ;1 compiler assigned register :
                                    1-  368     ;   r0x101B
                                    1-  369     ;; Starting pCode block
                                    1-  370     .segment "code"; module=main, function=_main
     0000                           1-  372     _main:
                                    1-  373     ; 2 exit points
                                    1-  374     	.line	65, "main.c"; 	init();
     0000 2rrr                      1-  375     	LCALL	_init
                                    1-  376     	.line	66, "main.c"; 	initAD();
     0001 2rrr                      1-  377     	LCALL	_initAD
     0002                           1-  378     _00125_DS_:
                                    1-  379     	.line	69, "main.c"; 	CLRWDT(); 
     0002 0002                      1-  380     	clrwdt
                                    1-  381     	.line	70, "main.c"; 	if(!IntFlag)
                                    1-  382     	BANKSEL	_IntFlag
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1-  383     	MOVR	_IntFlag,W
     0005 0D03                      1-  384     	BTRSC	STATUS,2
     0006 3rrr                      1-  385     	LGOTO	_00125_DS_
                                    1-  386     	.line	72, "main.c"; 	IntFlag = 0;
     0007 02rr                      1-  387     	CLRR	_IntFlag
                                    1-  388     	.line	73, "main.c"; 	keyClick = keyRead(KeyScan() & 0x80);
     0008 2rrr                      1-  389     	LCALL	_KeyScan
                                    1-  390     	BANKSEL	r0x101B
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1-  391     	MOVAR	r0x101B
     000B 2180                      1-  392     	MOVIA	0x80
     000C 10rr                      1-  393     	ANDAR	r0x101B,F
     000D 01rr                      1-  394     	MOVR	r0x101B,W
     000E 2rrr                      1-  395     	LCALL	_keyRead
                                    1-  396     	BANKSEL	_keyClick
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 00rr                      1-  397     	MOVAR	_keyClick
                                    1-  398     	.line	74, "main.c"; 	if(keyClick)
     0011 01rr                      1-  399     	MOVR	_keyClick,W
     0012 0D03                      1-  400     	BTRSC	STATUS,2
     0013 3rrr                      1-  401     	LGOTO	_00118_DS_
                                    1-  402     	.line	76, "main.c"; 	workFlag = ~workFlag;
                                    1-  403     	BANKSEL	_workFlag
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 07rr                      1-  404     	COMR	_workFlag,W
     0016 00rr                      1-  405     	MOVAR	_workFlag
     0017                           1-  406     _00118_DS_:
                                    1-  407     	.line	78, "main.c"; 	if(workFlag)
                                    1-  408     	BANKSEL	_workFlag
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1-  409     	MOVR	_workFlag,W
     0019 0D03                      1-  410     	BTRSC	STATUS,2
     001A 3rrr                      1-  411     	LGOTO	_00122_DS_
                                    1-  412     	.line	80, "main.c"; 	checkAD();
     001B 2rrr                      1-  413     	LCALL	_checkAD
                                    1-  414     	.line	81, "main.c"; 	sleepDelay = 0;
                                    1-  415     	BANKSEL	_sleepDelay
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 02rr                      1-  416     	CLRR	_sleepDelay
     001E 02rr                      1-  417     	CLRR	(_sleepDelay + 1)
     001F 3rrr                      1-  418     	LGOTO	_00125_DS_
     0020                           1-  419     _00122_DS_:
                                    1-  420     	.line	87, "main.c"; 	resetbit(PORTB, 3);		//LED灯关闭
     0020 1Drr                      1-  421     	BCR	_PORTB,3
                                    1-  422     	.line	88, "main.c"; 	resetbit(PORTA, 2);		// 加热关闭
     0021 1Drr                      1-  423     	BCR	_PORTA,2
                                    1-  424     	.line	89, "main.c"; 	if(++sleepDelay == 200)
                                    1-  425     	BANKSEL	_sleepDelay
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 05rr                      1-  426     	INCR	_sleepDelay,F
     0024 0D03                      1-  427     	BTRSC	STATUS,2
     0025 05rr                      1-  428     	INCR	(_sleepDelay + 1),F
     0026 01rr                      1-  429     	MOVR	_sleepDelay,W
     0027 24C8                      1-  430     	XORIA	0xc8
     0028 0903                      1-  431     	BTRSS	STATUS,2
     0029 3rrr                      1-  432     	LGOTO	_00125_DS_
     002A 01rr                      1-  433     	MOVR	(_sleepDelay + 1),W
     002B 2400                      1-  434     	XORIA	0x00
     002C 0903                      1-  435     	BTRSS	STATUS,2
     002D 3rrr                      1-  436     	LGOTO	_00125_DS_
                                    1-  437     	.line	90, "main.c"; 	gotoSleep();
     002E 2rrr                      1-  438     	LCALL	_gotoSleep
     002F 3rrr                      1-  439     	LGOTO	_00125_DS_
                                    1-  440     	.line	93, "main.c"; 	}
                                    1-  441     	RETURN	
     0030 0010                      3-   26 m1      ret
                                    1-  442     ; exit point of _main
                                    1-  444     ;***
                                    1-  445     ;  pBlock Stats: dbName = C
                                    1-  446     ;***
                                    1-  447     ;has an exit
                                    1-  448     ;6 compiler assigned registers:
                                    1-  449     ;   r0x100C
                                    1-  450     ;   STK00
                                    1-  451     ;   r0x100D
                                    1-  452     ;   r0x100E
                                    1-  453     ;   r0x100F
                                    1-  454     ;   r0x1010
                                    1-  455     ;; Starting pCode block
                                    1-  456     .segment "code"; module=main, function=_delay
                                    1-  458     ;local variable name mapping:
     0000                           1-  463     _delay:
                                    1-  464     ; 2 exit points
                                    1-  465     	.line	218, "main.c"; 	void delay(int count)
                                    1-  466     	BANKSEL	r0x100C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  467     	MOVAR	r0x100C
     0002 01rr                      1-  468     	MOVR	STK00,W
                                    1-  469     	BANKSEL	r0x100D
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  470     	MOVAR	r0x100D
                                    1-  471     	.line	221, "main.c"; 	for(i=1;i<=count;i++)
     0005 2101                      1-  472     	MOVIA	0x01
                                    1-  473     	BANKSEL	r0x100E
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 00rr                      1-  474     	MOVAR	r0x100E
                                    1-  475     	BANKSEL	r0x100F
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 02rr                      1-  476     	CLRR	r0x100F
     000A                           1-  477     _00177_DS_:
                                    1-  478     	BANKSEL	r0x100C
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 01rr                      1-  479     	MOVR	r0x100C,W
     000C 2580                      1-  480     	ADDIA	0x80
                                    1-  481     	BANKSEL	r0x1010
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 00rr                      1-  482     	MOVAR	r0x1010
                                    1-  483     	BANKSEL	r0x100F
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  484     	MOVR	r0x100F,W
     0011 2580                      1-  485     	ADDIA	0x80
                                    1-  486     	BANKSEL	r0x1010
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1-  487     	SUBAR	r0x1010,W
     0014 0903                      1-  488     	BTRSS	STATUS,2
     0015 3rrr                      1-  489     	LGOTO	_00188_DS_
                                    1-  490     	BANKSEL	r0x100E
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1-  491     	MOVR	r0x100E,W
                                    1-  492     	BANKSEL	r0x100D
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 04rr                      1-  493     	SUBAR	r0x100D,W
     001A                           1-  494     _00188_DS_:
     001A 0803                      1-  495     	BTRSS	STATUS,0
     001B 3rrr                      1-  496     	LGOTO	_00179_DS_
                                    1-  497     	BANKSEL	r0x100E
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 05rr                      1-  498     	INCR	r0x100E,F
     001E 0903                      1-  499     	BTRSS	STATUS,2
     001F 3rrr                      1-  500     	LGOTO	_00001_DS_
                                    1-  501     	BANKSEL	r0x100F
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 05rr                      1-  502     	INCR	r0x100F,F
     0022                           1-  503     _00001_DS_:
     0022 3rrr                      1-  504     	LGOTO	_00177_DS_
     0023                           1-  505     _00179_DS_:
                                    1-  506     	.line	223, "main.c"; 	}
                                    1-  507     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  508     ; exit point of _delay
                                    1-  510     ;***
                                    1-  511     ;  pBlock Stats: dbName = C
                                    1-  512     ;***
                                    1-  513     ;has an exit
                                    1-  514     ;; Starting pCode block
                                    1-  515     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  517     _F_wait_eoc:
                                    1-  518     ; 2 exit points
     0000                           1-  519     _00170_DS_:
                                    1-  520     	.line	213, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  521     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  522     	LGOTO	_00170_DS_
                                    1-  523     	.line	215, "main.c"; 	}
                                    1-  524     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  525     ; exit point of _F_wait_eoc
                                    1-  527     ;***
                                    1-  528     ;  pBlock Stats: dbName = C
                                    1-  529     ;***
                                    1-  530     ;has an exit
                                    1-  531     ;functions called:
                                    1-  532     ;   _initAD
                                    1-  533     ;   _initAD
                                    1-  534     ;; Starting pCode block
                                    1-  535     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  537     _gotoSleep:
                                    1-  538     ; 2 exit points
                                    1-  539     	.line	193, "main.c"; 	sleepDelay = 0;
                                    1-  540     	BANKSEL	_sleepDelay
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  541     	CLRR	_sleepDelay
     0002 02rr                      1-  542     	CLRR	(_sleepDelay + 1)
                                    1-  543     	.line	194, "main.c"; 	AWUCON = 0x80;		//PA7唤醒
     0003 2180                      1-  544     	MOVIA	0x80
     0004 00rr                      1-  545     	MOVAR	_AWUCON
                                    1-  546     	.line	195, "main.c"; 	PORTB = 0x00; 	//关闭
     0005 02rr                      1-  547     	CLRR	_PORTB
                                    1-  548     	.line	196, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  549     	CLRR	_PORTA
                                    1-  550     	.line	198, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     0007 2103                      1-  551     	MOVIA	0x03
     0008 00rr                      1-  552     	MOVAR	_INTE
                                    1-  553     	.line	199, "main.c"; 	PCON =  C_LVR_En;	
     0009 2108                      1-  554     	MOVIA	0x08
     000A 00rr                      1-  555     	MOVAR	_PCON
                                    1-  556     	.line	200, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000B 02rr                      1-  557     	CLRR	_INTF
                                    1-  558     	.line	201, "main.c"; 	CLRWDT();
     000C 0002                      1-  559     	clrwdt
                                    1-  560     	.line	202, "main.c"; 	SLEEP();
     000D 0001                      1-  561     	sleep
                                    1-  562     	.line	203, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000E 2101                      1-  563     	MOVIA	0x01
     000F 00rr                      1-  564     	MOVAR	_INTE
                                    1-  565     	.line	204, "main.c"; 	INTF = 0;
     0010 02rr                      1-  566     	CLRR	_INTF
                                    1-  567     	.line	206, "main.c"; 	PCON = C_WDT_En | C_LVR_En ;				// Enable WDT ,  Enable LVR
     0011 2188                      1-  568     	MOVIA	0x88
     0012 00rr                      1-  569     	MOVAR	_PCON
                                    1-  570     	.line	207, "main.c"; 	initAD();
     0013 2rrr                      1-  571     	LCALL	_initAD
                                    1-  572     	.line	208, "main.c"; 	}
                                    1-  573     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  574     ; exit point of _gotoSleep
                                    1-  576     ;***
                                    1-  577     ;  pBlock Stats: dbName = C
                                    1-  578     ;***
                                    1-  579     ;has an exit
                                    1-  580     ;functions called:
                                    1-  581     ;   _F_wait_eoc
                                    1-  582     ;   _F_wait_eoc
                                    1-  583     ;6 compiler assigned registers:
                                    1-  584     ;   r0x1011
                                    1-  585     ;   r0x1012
                                    1-  586     ;   r0x1013
                                    1-  587     ;   r0x1014
                                    1-  588     ;   r0x1015
                                    1-  589     ;   r0x1016
                                    1-  590     ;; Starting pCode block
                                    1-  591     .segment "code"; module=main, function=_F_AIN0_Convert
                                    1-  593     ;local variable name mapping:
     0000                           1-  596     _F_AIN0_Convert:
                                    1-  597     ; 2 exit points
                                    1-  598     	.line	176, "main.c"; 	void F_AIN0_Convert(char count)
                                    1-  599     	BANKSEL	r0x1011
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  600     	MOVAR	r0x1011
                                    1-  601     	.line	178, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;   
                                    1-  602     	BANKSEL	_R_AIN0_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  603     	CLRR	_R_AIN0_DATA_LB
                                    1-  604     	BANKSEL	_R_AIN0_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  605     	CLRR	_R_AIN0_DATA
     0006 02rr                      1-  606     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  607     	.line	180, "main.c"; 	ADMD  = 0x90 | C_ADC_PA0;				// Select AIN0(PA0) pad as ADC input
     0007 2190                      1-  608     	MOVIA	0x90
     0008 00rr                      1-  609     	MOVAR	_ADMD
                                    1-  610     	.line	181, "main.c"; 	for(i=1;i<=count;i++)
     0009 2101                      1-  611     	MOVIA	0x01
                                    1-  612     	BANKSEL	r0x1012
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1-  613     	MOVAR	r0x1012
     000C                           1-  614     _00159_DS_:
                                    1-  615     	BANKSEL	r0x1012
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 01rr                      1-  616     	MOVR	r0x1012,W
                                    1-  617     	BANKSEL	r0x1011
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 04rr                      1-  618     	SUBAR	r0x1011,W
     0010 0803                      1-  619     	BTRSS	STATUS,0
     0011 3rrr                      1-  620     	LGOTO	_00161_DS_
                                    1-  621     	.line	183, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0012 1Brr                      1-  622     	BSR	_ADMDbits,6
                                    1-  623     	.line	184, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0013 2rrr                      1-  624     	LCALL	_F_wait_eoc
                                    1-  625     	.line	185, "main.c"; 	R_AIN0_DATA_LB += ( 0x0F & ADR); 
     0014 210F                      1-  626     	MOVIA	0x0f
     0015 10rr                      1-  627     	ANDAR	_ADR,W
                                    1-  628     ;;3	MOVAR	r0x1013
                                    1-  629     	BANKSEL	_R_AIN0_DATA_LB
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 03rr                      1-  630     	ADDAR	_R_AIN0_DATA_LB,F
                                    1-  631     	.line	186, "main.c"; 	R_AIN0_DATA    += ADD; 
     0018 01rr                      1-  632     	MOVR	_ADD,W
                                    1-  633     	BANKSEL	r0x1013
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  634     	MOVAR	r0x1013
                                    1-  635     ;;1	CLRR	r0x1014
                                    1-  636     ;;102	MOVR	r0x1013,W
                                    1-  637     ;;100	MOVAR	r0x1015
     001B 2100                      1-  638     	MOVIA	0x00
                                    1-  639     	BANKSEL	r0x1016
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  640     	MOVAR	r0x1016
                                    1-  641     ;;101	MOVR	r0x1015,W
                                    1-  642     	BANKSEL	r0x1013
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1-  643     	MOVR	r0x1013,W
                                    1-  644     	BANKSEL	_R_AIN0_DATA
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 03rr                      1-  645     	ADDAR	_R_AIN0_DATA,F
                                    1-  646     	BANKSEL	r0x1016
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  647     	MOVR	r0x1016,W
     0024 0C03                      1-  648     	BTRSC	STATUS,0
     0025 05rr                      1-  649     	INCR	r0x1016,W
     0026 0D03                      1-  650     	BTRSC	STATUS,2
     0027 3rrr                      1-  651     	LGOTO	_00002_DS_
                                    1-  652     	BANKSEL	_R_AIN0_DATA
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 03rr                      1-  653     	ADDAR	(_R_AIN0_DATA + 1),F
     002A                           1-  654     _00002_DS_:
                                    1-  655     	.line	181, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  656     	BANKSEL	r0x1012
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 05rr                      1-  657     	INCR	r0x1012,F
     002C 3rrr                      1-  658     	LGOTO	_00159_DS_
     002D                           1-  659     _00161_DS_:
                                    1-  660     	.line	188, "main.c"; 	}
                                    1-  661     	RETURN	
     002D 0010                      3-   26 m1      ret
                                    1-  662     ; exit point of _F_AIN0_Convert
                                    1-  664     ;***
                                    1-  665     ;  pBlock Stats: dbName = C
                                    1-  666     ;***
                                    1-  667     ;has an exit
                                    1-  668     ;functions called:
                                    1-  669     ;   _delay
                                    1-  670     ;   _delay
                                    1-  671     ;1 compiler assigned register :
                                    1-  672     ;   STK00
                                    1-  673     ;; Starting pCode block
                                    1-  674     .segment "code"; module=main, function=_initAD
     0000                           1-  676     _initAD:
                                    1-  677     ; 2 exit points
                                    1-  678     	.line	152, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA0 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2180                      1-  679     	MOVIA	0x80
     0001 00rr                      1-  680     	MOVAR	_ADMD
                                    1-  681     	.line	155, "main.c"; 	ADVREFH = C_Vrefh_VDD;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 2103                      1-  682     	MOVIA	0x03
     0003 00rr                      1-  683     	MOVAR	_ADVREFH
                                    1-  684     	.line	162, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  685     	MOVIA	0x10
     0005 00rr                      1-  686     	MOVAR	_ADR
                                    1-  687     	.line	164, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  688     	MOVIA	0x03
     0007 00rr                      1-  689     	MOVAR	_ADCR
                                    1-  690     	.line	166, "main.c"; 	PACON = C_PA0_AIN0;						// Set AIN0(PA0) as pure ADC input for reduce power consumption (SFR "PACON")
     0008 2101                      1-  691     	MOVIA	0x01
     0009 00rr                      1-  692     	MOVAR	_PACON
                                    1-  693     	.line	167, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     000A 1Arr                      1-  694     	BSR	_ADMDbits,4
                                    1-  695     	.line	168, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     000B 2164                      1-  696     	MOVIA	0x64
     000C 00rr                      1-  697     	MOVAR	STK00
     000D 2100                      1-  698     	MOVIA	0x00
     000E 2rrr                      1-  699     	LCALL	_delay
                                    1-  700     	.line	171, "main.c"; 	}
                                    1-  701     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1-  702     ; exit point of _initAD
                                    1-  704     ;***
                                    1-  705     ;  pBlock Stats: dbName = C
                                    1-  706     ;***
                                    1-  707     ;has an exit
                                    1-  708     ;; Starting pCode block
                                    1-  709     .segment "code"; module=main, function=_init
     0000                           1-  711     _init:
                                    1-  712     ; 2 exit points
                                    1-  713     	.line	122, "main.c"; 	PORTA = 0;
     0000 02rr                      1-  714     	CLRR	_PORTA
                                    1-  715     	.line	123, "main.c"; 	PORTB = 0;
     0001 02rr                      1-  716     	CLRR	_PORTB
                                    1-  717     	.line	125, "main.c"; 	IOSTA = 0x81;		//PA0  PA7输入
     0002 2181                      1-  718     	MOVIA	0x81
     0003 000r                      1-  719     	IOST	_IOSTA
                                    1-  720     	.line	126, "main.c"; 	IOSTB =  0;								// Set PB to output mode
     0004 0200                      1-  721     	CLRA	
     0005 000r                      1-  722     	IOST	_IOSTB
                                    1-  723     	.line	127, "main.c"; 	PORTA = 0;
     0006 02rr                      1-  724     	CLRR	_PORTA
                                    1-  725     	.line	128, "main.c"; 	PORTB = 0x00;                           	
     0007 02rr                      1-  726     	CLRR	_PORTB
                                    1-  727     	.line	129, "main.c"; 	APHCON = 0x5F;		//PA7打开上拉
     0008 215F                      1-  728     	MOVIA	0x5f
     0009 000r                      1-  729     	IOST	_APHCON
                                    1-  730     	.line	132, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     000A 2188                      1-  731     	MOVIA	0x88
     000B 00rr                      1-  732     	MOVAR	_PCON
                                    1-  733     	.line	133, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1-  734     	MOVIA	0x01
     000D 00rr                      1-  735     	MOVAR	_INTE
                                    1-  736     	.line	134, "main.c"; 	INTF = 0;
     000E 02rr                      1-  737     	CLRR	_INTF
                                    1-  738     	.line	137, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1-  739     	CLRA	
     0010 000r                      1-  740     	IOST	_PCON1
                                    1-  741     	.line	139, "main.c"; 	TMR0 = 55;
     0011 2137                      1-  742     	MOVIA	0x37
     0012 00rr                      1-  743     	MOVAR	_TMR0
                                    1-  744     	.line	140, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1-  745     	CLRA	
     0014 0003                      1-  746     	T0MD	
                                    1-  747     	.line	142, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1-  748     	MOVIA	0x01
     0016 000r                      1-  749     	IOST	_PCON1
                                    1-  750     	.line	144, "main.c"; 	ENI();
     0017 0004                      1-  751     	ENI
                                    1-  752     	.line	145, "main.c"; 	}
                                    1-  753     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  754     ; exit point of _init
                                    1-  756     ;***
                                    1-  757     ;  pBlock Stats: dbName = C
                                    1-  758     ;***
                                    1-  759     ;has an exit
                                    1-  760     ;functions called:
                                    1-  761     ;   _F_AIN0_Convert
                                    1-  762     ;   _F_AIN0_Convert
                                    1-  763     ;4 compiler assigned registers:
                                    1-  764     ;   r0x1017
                                    1-  765     ;   r0x1018
                                    1-  766     ;   r0x1019
                                    1-  767     ;   r0x101A
                                    1-  768     ;; Starting pCode block
                                    1-  769     .segment "code"; module=main, function=_checkAD
     0000                           1-  771     _checkAD:
                                    1-  772     ; 2 exit points
                                    1-  773     	.line	98, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;            
                                    1-  774     	BANKSEL	_R_AIN0_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  775     	CLRR	_R_AIN0_DATA_LB
                                    1-  776     	BANKSEL	_R_AIN0_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  777     	CLRR	_R_AIN0_DATA
     0004 02rr                      1-  778     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  779     	.line	99, "main.c"; 	F_AIN0_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  780     	MOVIA	0x08
     0006 2rrr                      1-  781     	LCALL	_F_AIN0_Convert
                                    1-  782     	.line	100, "main.c"; 	R_AIN0_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  783     	BANKSEL	_R_AIN0_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1-  784     	SWAPR	(_R_AIN0_DATA + 1),W
     0009 22F0                      1-  785     	ANDIA	0xf0
     000A 00rr                      1-  786     	MOVAR	(_R_AIN0_DATA + 1)
     000B 15rr                      1-  787     	SWAPR	_R_AIN0_DATA,W
     000C 00rr                      1-  788     	MOVAR	_R_AIN0_DATA
     000D 220F                      1-  789     	ANDIA	0x0f
     000E 11rr                      1-  790     	IORAR	(_R_AIN0_DATA + 1),F
     000F 12rr                      1-  791     	XORAR	_R_AIN0_DATA,F
                                    1-  792     	.line	101, "main.c"; 	R_AIN0_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  793     	MOVIA	0xf0
                                    1-  794     	BANKSEL	_R_AIN0_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1-  795     	ANDAR	_R_AIN0_DATA_LB,F
                                    1-  796     	.line	102, "main.c"; 	R_AIN0_DATA += R_AIN0_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  797     	MOVR	_R_AIN0_DATA_LB,W
                                    1-  798     	BANKSEL	r0x1019
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1-  799     	MOVAR	r0x1019
                                    1-  800     ;;1	MOVAR	r0x1017
                                    1-  801     ;;1	CLRR	r0x1018
                                    1-  802     ;;99	MOVR	r0x1017,W
     0016 2100                      1-  803     	MOVIA	0x00
                                    1-  804     	BANKSEL	r0x101A
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  805     	MOVAR	r0x101A
                                    1-  806     	BANKSEL	r0x1019
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  807     	MOVR	r0x1019,W
                                    1-  808     	BANKSEL	_R_AIN0_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1-  809     	ADDAR	_R_AIN0_DATA,F
                                    1-  810     	BANKSEL	r0x101A
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  811     	MOVR	r0x101A,W
     001F 0C03                      1-  812     	BTRSC	STATUS,0
     0020 05rr                      1-  813     	INCR	r0x101A,W
     0021 0D03                      1-  814     	BTRSC	STATUS,2
     0022 3rrr                      1-  815     	LGOTO	_00003_DS_
                                    1-  816     	BANKSEL	_R_AIN0_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1-  817     	ADDAR	(_R_AIN0_DATA + 1),F
                                    1-  818     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  819     _00003_DS_:
                                    1-  820     	.line	103, "main.c"; 	R_AIN0_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  821     	BCR	STATUS,0
                                    1-  822     	BANKSEL	_R_AIN0_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1-  823     	RRR	(_R_AIN0_DATA + 1),F
     0028 13rr                      1-  824     	RRR	_R_AIN0_DATA,F
                                    1-  825     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  826     	BCR	STATUS,0
     002A 13rr                      1-  827     	RRR	(_R_AIN0_DATA + 1),F
     002B 13rr                      1-  828     	RRR	_R_AIN0_DATA,F
                                    1-  829     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  830     	BCR	STATUS,0
     002D 13rr                      1-  831     	RRR	(_R_AIN0_DATA + 1),F
     002E 13rr                      1-  832     	RRR	_R_AIN0_DATA,F
                                    1-  833     ;;unsigned compare: left < lit (0xBC8=3016), size=2
                                    1-  834     	.line	105, "main.c"; 	if(R_AIN0_DATA < 3016)
     002F 210B                      1-  835     	MOVIA	0x0b
     0030 04rr                      1-  836     	SUBAR	(_R_AIN0_DATA + 1),W
     0031 0903                      1-  837     	BTRSS	STATUS,2
     0032 3rrr                      1-  838     	LGOTO	_00143_DS_
     0033 21C8                      1-  839     	MOVIA	0xc8
     0034 04rr                      1-  840     	SUBAR	_R_AIN0_DATA,W
     0035                           1-  841     _00143_DS_:
     0035 0C03                      1-  842     	BTRSC	STATUS,0
     0036 3rrr                      1-  843     	LGOTO	_00133_DS_
                                    1-  844     	.line	107, "main.c"; 	setbit(PORTA, 2);		// 小于 50度 加热打开
     0037 19rr                      1-  845     	BSR	_PORTA,2
                                    1-  846     	.line	108, "main.c"; 	setbit(PORTB, 3);		//LED灯打开
     0038 19rr                      1-  847     	BSR	_PORTB,3
     0039 3rrr                      1-  848     	LGOTO	_00135_DS_
                                    1-  849     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  850     ;;unsigned compare: left >= lit (0xC57=3159), size=2
     003A                           1-  851     _00133_DS_:
                                    1-  852     	.line	111, "main.c"; 	else if(R_AIN0_DATA > 3158)
     003A 210C                      1-  853     	MOVIA	0x0c
                                    1-  854     	BANKSEL	_R_AIN0_DATA
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 04rr                      1-  855     	SUBAR	(_R_AIN0_DATA + 1),W
     003D 0903                      1-  856     	BTRSS	STATUS,2
     003E 3rrr                      1-  857     	LGOTO	_00144_DS_
     003F 2157                      1-  858     	MOVIA	0x57
     0040 04rr                      1-  859     	SUBAR	_R_AIN0_DATA,W
     0041                           1-  860     _00144_DS_:
     0041 0803                      1-  861     	BTRSS	STATUS,0
     0042 3rrr                      1-  862     	LGOTO	_00135_DS_
                                    1-  863     	.line	113, "main.c"; 	resetbit(PORTB, 3);		//LED灯关闭
     0043 1Drr                      1-  864     	BCR	_PORTB,3
                                    1-  865     	.line	114, "main.c"; 	resetbit(PORTA, 2);		//大于 55度 加热关闭
     0044 1Drr                      1-  866     	BCR	_PORTA,2
     0045                           1-  867     _00135_DS_:
                                    1-  868     	.line	117, "main.c"; 	}
                                    1-  869     	RETURN	
     0045 0010                      3-   26 m1      ret
                                    1-  870     ; exit point of _checkAD
                                    1-  873     ;	code size estimation:
                                    1-  874     ;	  260+   54 =   314 instructions (  736 byte)
                                    1-  876     	end
                                    1-  876     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000022
_00002_DS_              Label    0000002A
_00003_DS_              Label    00000025
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00118_DS_              Label    00000017
_00122_DS_              Label    00000020
_00125_DS_              Label    00000002
_00133_DS_              Label    0000003A
_00135_DS_              Label    00000045
_00143_DS_              Label    00000035
_00144_DS_              Label    00000041
_00159_DS_              Label    0000000C
_00161_DS_              Label    0000002D
_00170_DS_              Label    00000000
_00177_DS_              Label    0000000A
_00179_DS_              Label    00000023
_00188_DS_              Label    0000001A
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkAD                Label    00000000
_CMPCR                  Label    00000000
_delay                  Label    00000000
_F_AIN0_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN0_DATA            Label    00000000
_R_AIN0_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sleepDelay             Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workFlag               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100C                 Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
r0x100F                 Label    00000000
r0x1010                 Label    00000000
r0x1011                 Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1016                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
