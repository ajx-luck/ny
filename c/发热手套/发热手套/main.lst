
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_KeyScan
                                    1-   15     	extern	_keyRead
                                    1-   16     	extern	_sinf
                                    1-   17     	extern	_cosf
                                    1-   18     	extern	_tanf
                                    1-   19     	extern	_cotf
                                    1-   20     	extern	_asinf
                                    1-   21     	extern	_acosf
                                    1-   22     	extern	_atanf
                                    1-   23     	extern	_atan2f
                                    1-   24     	extern	_sinhf
                                    1-   25     	extern	_coshf
                                    1-   26     	extern	_tanhf
                                    1-   27     	extern	_expf
                                    1-   28     	extern	_logf
                                    1-   29     	extern	_log10f
                                    1-   30     	extern	_powf
                                    1-   31     	extern	_sqrtf
                                    1-   32     	extern	_fabsf
                                    1-   33     	extern	_frexpf
                                    1-   34     	extern	_ldexpf
                                    1-   35     	extern	_ceilf
                                    1-   36     	extern	_floorf
                                    1-   37     	extern	_modff
                                    1-   38     	extern	_isnan
                                    1-   39     	extern	_isinf
                                    1-   40     	extern	_PORTAbits
                                    1-   41     	extern	_PORTBbits
                                    1-   42     	extern	_PCONbits
                                    1-   43     	extern	_BWUCONbits
                                    1-   44     	extern	_ABPLCONbits
                                    1-   45     	extern	_BPHCONbits
                                    1-   46     	extern	_INTEbits
                                    1-   47     	extern	_INTFbits
                                    1-   48     	extern	_ADMDbits
                                    1-   49     	extern	_ADRbits
                                    1-   50     	extern	_ADVREFHbits
                                    1-   51     	extern	_ADCRbits
                                    1-   52     	extern	_AWUCONbits
                                    1-   53     	extern	_PACONbits
                                    1-   54     	extern	_INTEDGbits
                                    1-   55     	extern	_ANAENbits
                                    1-   56     	extern	_RFCbits
                                    1-   57     	extern	_INTE2bits
                                    1-   58     	extern	_INDF
                                    1-   59     	extern	_TMR0
                                    1-   60     	extern	_PCL
                                    1-   61     	extern	_STATUS
                                    1-   62     	extern	_FSR
                                    1-   63     	extern	_PORTA
                                    1-   64     	extern	_PORTB
                                    1-   65     	extern	_PCON
                                    1-   66     	extern	_BWUCON
                                    1-   67     	extern	_PCHBUF
                                    1-   68     	extern	_ABPLCON
                                    1-   69     	extern	_BPHCON
                                    1-   70     	extern	_INTE
                                    1-   71     	extern	_INTF
                                    1-   72     	extern	_ADMD
                                    1-   73     	extern	_ADR
                                    1-   74     	extern	_ADD
                                    1-   75     	extern	_ADVREFH
                                    1-   76     	extern	_ADCR
                                    1-   77     	extern	_AWUCON
                                    1-   78     	extern	_PACON
                                    1-   79     	extern	_INTEDG
                                    1-   80     	extern	_TMRH
                                    1-   81     	extern	_ANAEN
                                    1-   82     	extern	_RFC
                                    1-   83     	extern	_TM3RH
                                    1-   84     	extern	_INTE2
                                    1-   85     	extern	_TMR1
                                    1-   86     	extern	_T1CR1
                                    1-   87     	extern	_T1CR2
                                    1-   88     	extern	_PWM1DUTY
                                    1-   89     	extern	_PS1CV
                                    1-   90     	extern	_BZ1CR
                                    1-   91     	extern	_IRCR
                                    1-   92     	extern	_TBHP
                                    1-   93     	extern	_TBHD
                                    1-   94     	extern	_TMR2
                                    1-   95     	extern	_T2CR1
                                    1-   96     	extern	_T2CR2
                                    1-   97     	extern	_PWM2DUTY
                                    1-   98     	extern	_PS2CV
                                    1-   99     	extern	_BZ2CR
                                    1-  100     	extern	_OSCCR
                                    1-  101     	extern	_TMR3
                                    1-  102     	extern	_T3CR1
                                    1-  103     	extern	_T3CR2
                                    1-  104     	extern	_PWM3DUTY
                                    1-  105     	extern	_PS3CV
                                    1-  106     	extern	_BZ3CR
                                    1-  107     	extern	_IOSTA
                                    1-  108     	extern	_IOSTB
                                    1-  109     	extern	_APHCON
                                    1-  110     	extern	_PS0CV
                                    1-  111     	extern	_BODCON
                                    1-  112     	extern	_CMPCR
                                    1-  113     	extern	_PCON1
                                    1-  114     	extern	_T0MD
                                    1-  115     	extern	___sdcc_saved_fsr
                                    1-  116     	extern	___sdcc_saved_stk00
                                    1-  117     	extern	___sdcc_saved_stk01
                                    1-  118     	extern	__nyc_ny8_startup
                                    1-  119     ;--------------------------------------------------------
                                    1-  120     ; global declarations
                                    1-  121     ;--------------------------------------------------------
                                    1-  122     	extern	_delay
                                    1-  123     	extern	_F_wait_eoc
                                    1-  124     	extern	_gotoSleep
                                    1-  125     	extern	_F_AIN0_Convert
                                    1-  126     	extern	_initAD
                                    1-  127     	extern	_init
                                    1-  128     	extern	_checkAD
                                    1-  129     	extern	_isr
                                    1-  130     	extern	_main
                                    1-  131     	extern	_R_AIN0_DATA
                                    1-  132     	extern	_R_AIN0_DATA_LB
                                    1-  133     	extern	_intCount
                                    1-  134     	extern	_IntFlag
                                    1-  135     	extern	_keyClick
                                    1-  136     	extern	_workFlag
                                    1-  137     	extern	_sleepDelay
                                    1-  139     	extern PSAVE
                                    1-  140     	extern SSAVE
                                    1-  141     	extern WSAVE
                                    1-  142     	extern STK12
                                    1-  143     	extern STK11
                                    1-  144     	extern STK10
                                    1-  145     	extern STK09
                                    1-  146     	extern STK08
                                    1-  147     	extern STK07
                                    1-  148     	extern STK06
                                    1-  149     	extern STK05
                                    1-  150     	extern STK04
                                    1-  151     	extern STK03
                                    1-  152     	extern STK02
                                    1-  153     	extern STK01
                                    1-  154     	extern STK00
                                    1-  156     .segment "uninit", 0x20000040
 20000040                           1-  157     PSAVE:
                                    1-  158     	.res 1
 20000041                           1-  159     SSAVE:
                                    1-  160     	.res 1
 20000042                           1-  161     WSAVE:
                                    1-  162     	.res 1
 20000043                           1-  163     STK12:
                                    1-  164     	.res 1
 20000044                           1-  165     STK11:
                                    1-  166     	.res 1
 20000045                           1-  167     STK10:
                                    1-  168     	.res 1
 20000046                           1-  169     STK09:
                                    1-  170     	.res 1
 20000047                           1-  171     STK08:
                                    1-  172     	.res 1
 20000048                           1-  173     STK07:
                                    1-  174     	.res 1
 20000049                           1-  175     STK06:
                                    1-  176     	.res 1
 2000004A                           1-  177     STK05:
                                    1-  178     	.res 1
 2000004B                           1-  179     STK04:
                                    1-  180     	.res 1
 2000004C                           1-  181     STK03:
                                    1-  182     	.res 1
 2000004D                           1-  183     STK02:
                                    1-  184     	.res 1
 2000004E                           1-  185     STK01:
                                    1-  186     	.res 1
 2000004F                           1-  187     STK00:
                                    1-  188     	.res 1
                                    1-  190     ;--------------------------------------------------------
                                    1-  191     ; global definitions
                                    1-  192     ;--------------------------------------------------------
                                    1-  193     .segment "uninit"
     0000                           1-  194     _R_AIN0_DATA:
                                    1-  195     	.res	2
                                    1-  198     .segment "uninit"
     0000                           1-  199     _R_AIN0_DATA_LB:
                                    1-  200     	.res	1
                                    1-  203     ;--------------------------------------------------------
                                    1-  204     ; absolute symbol definitions
                                    1-  205     ;--------------------------------------------------------
                                    1-  206     ;--------------------------------------------------------
                                    1-  207     ; compiler-defined variables
                                    1-  208     ;--------------------------------------------------------
                                    1-  209     .segment "uninit"
     0000                           1-  210     r0x101B:
                                    1-  211     	.res	1
                                    1-  212     .segment "uninit"
     0000                           1-  213     r0x1019:
                                    1-  214     	.res	1
                                    1-  215     .segment "uninit"
     0000                           1-  216     r0x101A:
                                    1-  217     	.res	1
                                    1-  218     .segment "uninit"
     0000                           1-  219     r0x1011:
                                    1-  220     	.res	1
                                    1-  221     .segment "uninit"
     0000                           1-  222     r0x1012:
                                    1-  223     	.res	1
                                    1-  224     .segment "uninit"
     0000                           1-  225     r0x1013:
                                    1-  226     	.res	1
                                    1-  227     .segment "uninit"
     0000                           1-  228     r0x1016:
                                    1-  229     	.res	1
                                    1-  230     .segment "uninit"
     0000                           1-  231     r0x100D:
                                    1-  232     	.res	1
                                    1-  233     .segment "uninit"
     0000                           1-  234     r0x100C:
                                    1-  235     	.res	1
                                    1-  236     .segment "uninit"
     0000                           1-  237     r0x100E:
                                    1-  238     	.res	1
                                    1-  239     .segment "uninit"
     0000                           1-  240     r0x100F:
                                    1-  241     	.res	1
                                    1-  242     .segment "uninit"
     0000                           1-  243     r0x1010:
                                    1-  244     	.res	1
                                    1-  245     ;--------------------------------------------------------
                                    1-  246     ; initialized data
                                    1-  247     ;--------------------------------------------------------
                                    1-  249     .segment "idata"
     0000                           1-  250     _intCount:
     0000 0000                      1-  251     	dw	0x00
                                    1-  255     .segment "idata"
     0000                           1-  256     _IntFlag:
     0000 0000                      1-  257     	dw	0x00
                                    1-  261     .segment "idata"
     0000                           1-  262     _keyClick:
     0000 0000                      1-  263     	dw	0x00
                                    1-  267     .segment "idata"
     0000                           1-  268     _workFlag:
     0000 0000                      1-  269     	dw	0x00
                                    1-  273     .segment "idata"
     0000                           1-  274     _sleepDelay:
     0000 0000 0000                 1-  275     	dw	0x00, 0x00
                                    1-  278     ;--------------------------------------------------------
                                    1-  279     ; overlayable items in internal ram 
                                    1-  280     ;--------------------------------------------------------
                                    1-  281     ;	udata_ovr
                                    1-  282     ;--------------------------------------------------------
                                    1-  283     ; reset vector 
                                    1-  284     ;--------------------------------------------------------
                                    1-  285     ORG	0x0000
     0000 3rrr                      1-  286     	LGOTO	__nyc_ny8_startup
                                    1-  287     ;--------------------------------------------------------
                                    1-  288     ; interrupt and initialization code
                                    1-  289     ;--------------------------------------------------------
                                    1-  290     ORG 0x0008
     0008 3rrr                      1-  291     	lgoto	__sdcc_interrupt
                                    1-  293     .segment "code"
     0000                           1-  294     __sdcc_interrupt:
                                    1-  295     ;***
                                    1-  296     ;  pBlock Stats: dbName = I
                                    1-  297     ;***
                                    1-  298     ;2 compiler assigned registers:
                                    1-  299     ;   STK00
                                    1-  300     ;   STK01
                                    1-  301     ;; Starting pCode block
     0000                           1-  302     _isr:
                                    1-  303     ; 0 exit points
                                    1-  304     	.line	51, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  305     	MOVAR	WSAVE
     0001 1503                      1-  306     	SWAPR	STATUS,W
     0002 0283                      1-  307     	CLRR	STATUS
     0003 00rr                      1-  308     	MOVAR	SSAVE
     0004 010A                      1-  309     	MOVR	PCHBUF,W
     0005 028A                      1-  310     	CLRR	PCHBUF
     0006 00rr                      1-  311     	MOVAR	PSAVE
     0007 0104                      1-  312     	MOVR	FSR,W
                                    1-  313     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  314     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  315     	MOVR	STK00,W
                                    1-  316     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  317     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  318     	MOVR	STK01,W
                                    1-  319     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  320     	MOVAR	___sdcc_saved_stk01
                                    1-  321     	.line	53, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  322     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  323     	LGOTO	_00108_DS_
                                    1-  324     	.line	55, "main.c"; 	TMR0 = 55;
     0012 2137                      1-  325     	MOVIA	0x37
     0013 00rr                      1-  326     	MOVAR	_TMR0
                                    1-  327     	.line	56, "main.c"; 	intCount++;
                                    1-  328     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  329     	INCR	_intCount,F
                                    1-  330     	.line	57, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  331     	MOVR	_intCount,W
     0017 2464                      1-  332     	XORIA	0x64
     0018 0903                      1-  333     	BTRSS	STATUS,2
     0019 3rrr                      1-  334     	LGOTO	_00108_DS_
                                    1-  335     	.line	59, "main.c"; 	intCount = 0;
     001A 02rr                      1-  336     	CLRR	_intCount
                                    1-  337     	.line	60, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  338     	MOVIA	0x01
                                    1-  339     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  340     	MOVAR	_IntFlag
     001E                           1-  341     _00108_DS_:
                                    1-  342     	.line	63, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  343     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  344     	LGOTO	_00110_DS_
                                    1-  345     	.line	65, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  346     	MOVIA	0xfd
     0021 00rr                      1-  347     	MOVAR	_INTF
     0022                           1-  348     _00110_DS_:
                                    1-  349     	.line	68, "main.c"; 	INTF = 0;	
     0022 02rr                      1-  350     	CLRR	_INTF
                                    1-  351     	.line	70, "main.c"; 	}
                                    1-  352     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  353     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  354     	MOVAR	STK01
                                    1-  355     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  356     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  357     	MOVAR	STK00
                                    1-  358     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  359     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  360     	MOVAR	FSR
     002C 01rr                      1-  361     	MOVR	PSAVE,W
     002D 008A                      1-  362     	MOVAR	PCHBUF
     002E 0283                      1-  363     	CLRR	STATUS
     002F 15rr                      1-  364     	SWAPR	SSAVE,W
     0030 0083                      1-  365     	MOVAR	STATUS
     0031 15rr                      1-  366     	SWAPR	WSAVE,F
     0032 15rr                      1-  367     	SWAPR	WSAVE,W
     0033                           1-  368     END_OF_INTERRUPT:
     0033 0011                      1-  369     	RETIE	
                                    1-  371     ;--------------------------------------------------------
                                    1-  372     ; code
                                    1-  373     ;--------------------------------------------------------
                                    1-  374     ;***
                                    1-  375     ;  pBlock Stats: dbName = M
                                    1-  376     ;***
                                    1-  377     ;has an exit
                                    1-  378     ;functions called:
                                    1-  379     ;   _init
                                    1-  380     ;   _initAD
                                    1-  381     ;   _KeyScan
                                    1-  382     ;   _keyRead
                                    1-  383     ;   _checkAD
                                    1-  384     ;   _gotoSleep
                                    1-  385     ;   _init
                                    1-  386     ;   _initAD
                                    1-  387     ;   _KeyScan
                                    1-  388     ;   _keyRead
                                    1-  389     ;   _checkAD
                                    1-  390     ;   _gotoSleep
                                    1-  391     ;1 compiler assigned register :
                                    1-  392     ;   r0x101B
                                    1-  393     ;; Starting pCode block
                                    1-  394     .segment "code"; module=main, function=_main
     0000                           1-  396     _main:
                                    1-  397     ; 2 exit points
                                    1-  398     	.line	74, "main.c"; 	init();
     0000 2rrr                      1-  399     	LCALL	_init
                                    1-  400     	.line	75, "main.c"; 	initAD();
     0001 2rrr                      1-  401     	LCALL	_initAD
     0002                           1-  402     _00125_DS_:
                                    1-  403     	.line	78, "main.c"; 	CLRWDT(); 
     0002 0002                      1-  404     	clrwdt
                                    1-  405     	.line	79, "main.c"; 	if(!IntFlag)
                                    1-  406     	BANKSEL	_IntFlag
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1-  407     	MOVR	_IntFlag,W
     0005 0D03                      1-  408     	BTRSC	STATUS,2
     0006 3rrr                      1-  409     	LGOTO	_00125_DS_
                                    1-  410     	.line	81, "main.c"; 	IntFlag = 0;
     0007 02rr                      1-  411     	CLRR	_IntFlag
                                    1-  412     	.line	82, "main.c"; 	keyClick = keyRead(KeyScan() & 0x80);
     0008 2rrr                      1-  413     	LCALL	_KeyScan
                                    1-  414     	BANKSEL	r0x101B
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1-  415     	MOVAR	r0x101B
     000B 2180                      1-  416     	MOVIA	0x80
     000C 10rr                      1-  417     	ANDAR	r0x101B,F
     000D 01rr                      1-  418     	MOVR	r0x101B,W
     000E 2rrr                      1-  419     	LCALL	_keyRead
                                    1-  420     	BANKSEL	_keyClick
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 00rr                      1-  421     	MOVAR	_keyClick
                                    1-  422     	.line	83, "main.c"; 	if(keyClick)
     0011 01rr                      1-  423     	MOVR	_keyClick,W
     0012 0D03                      1-  424     	BTRSC	STATUS,2
     0013 3rrr                      1-  425     	LGOTO	_00118_DS_
                                    1-  426     	.line	85, "main.c"; 	workFlag = ~workFlag;
                                    1-  427     	BANKSEL	_workFlag
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 07rr                      1-  428     	COMR	_workFlag,W
     0016 00rr                      1-  429     	MOVAR	_workFlag
     0017                           1-  430     _00118_DS_:
                                    1-  431     	.line	87, "main.c"; 	if(workFlag)
                                    1-  432     	BANKSEL	_workFlag
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1-  433     	MOVR	_workFlag,W
     0019 0D03                      1-  434     	BTRSC	STATUS,2
     001A 3rrr                      1-  435     	LGOTO	_00122_DS_
                                    1-  436     	.line	89, "main.c"; 	checkAD();
     001B 2rrr                      1-  437     	LCALL	_checkAD
                                    1-  438     	.line	90, "main.c"; 	sleepDelay = 0;
                                    1-  439     	BANKSEL	_sleepDelay
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 02rr                      1-  440     	CLRR	_sleepDelay
     001E 02rr                      1-  441     	CLRR	(_sleepDelay + 1)
     001F 3rrr                      1-  442     	LGOTO	_00125_DS_
     0020                           1-  443     _00122_DS_:
                                    1-  444     	.line	96, "main.c"; 	resetbit(PORTB, 3);		//LED灯关闭
     0020 1Drr                      1-  445     	BCR	_PORTB,3
                                    1-  446     	.line	97, "main.c"; 	resetbit(PORTA, 2);		// 加热关闭
     0021 1Drr                      1-  447     	BCR	_PORTA,2
                                    1-  448     	.line	98, "main.c"; 	if(++sleepDelay == 200)
                                    1-  449     	BANKSEL	_sleepDelay
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 05rr                      1-  450     	INCR	_sleepDelay,F
     0024 0D03                      1-  451     	BTRSC	STATUS,2
     0025 05rr                      1-  452     	INCR	(_sleepDelay + 1),F
     0026 01rr                      1-  453     	MOVR	_sleepDelay,W
     0027 24C8                      1-  454     	XORIA	0xc8
     0028 0903                      1-  455     	BTRSS	STATUS,2
     0029 3rrr                      1-  456     	LGOTO	_00125_DS_
     002A 01rr                      1-  457     	MOVR	(_sleepDelay + 1),W
     002B 2400                      1-  458     	XORIA	0x00
     002C 0903                      1-  459     	BTRSS	STATUS,2
     002D 3rrr                      1-  460     	LGOTO	_00125_DS_
                                    1-  461     	.line	99, "main.c"; 	gotoSleep();
     002E 2rrr                      1-  462     	LCALL	_gotoSleep
     002F 3rrr                      1-  463     	LGOTO	_00125_DS_
                                    1-  464     	.line	102, "main.c"; 	}
                                    1-  465     	RETURN	
     0030 0010                      3-   26 m1      ret
                                    1-  466     ; exit point of _main
                                    1-  468     ;***
                                    1-  469     ;  pBlock Stats: dbName = C
                                    1-  470     ;***
                                    1-  471     ;has an exit
                                    1-  472     ;6 compiler assigned registers:
                                    1-  473     ;   r0x100C
                                    1-  474     ;   STK00
                                    1-  475     ;   r0x100D
                                    1-  476     ;   r0x100E
                                    1-  477     ;   r0x100F
                                    1-  478     ;   r0x1010
                                    1-  479     ;; Starting pCode block
                                    1-  480     .segment "code"; module=main, function=_delay
                                    1-  482     ;local variable name mapping:
     0000                           1-  487     _delay:
                                    1-  488     ; 2 exit points
                                    1-  489     	.line	227, "main.c"; 	void delay(int count)
                                    1-  490     	BANKSEL	r0x100C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  491     	MOVAR	r0x100C
     0002 01rr                      1-  492     	MOVR	STK00,W
                                    1-  493     	BANKSEL	r0x100D
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  494     	MOVAR	r0x100D
                                    1-  495     	.line	230, "main.c"; 	for(i=1;i<=count;i++)
     0005 2101                      1-  496     	MOVIA	0x01
                                    1-  497     	BANKSEL	r0x100E
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 00rr                      1-  498     	MOVAR	r0x100E
                                    1-  499     	BANKSEL	r0x100F
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 02rr                      1-  500     	CLRR	r0x100F
     000A                           1-  501     _00177_DS_:
                                    1-  502     	BANKSEL	r0x100C
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 01rr                      1-  503     	MOVR	r0x100C,W
     000C 2580                      1-  504     	ADDIA	0x80
                                    1-  505     	BANKSEL	r0x1010
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 00rr                      1-  506     	MOVAR	r0x1010
                                    1-  507     	BANKSEL	r0x100F
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  508     	MOVR	r0x100F,W
     0011 2580                      1-  509     	ADDIA	0x80
                                    1-  510     	BANKSEL	r0x1010
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1-  511     	SUBAR	r0x1010,W
     0014 0903                      1-  512     	BTRSS	STATUS,2
     0015 3rrr                      1-  513     	LGOTO	_00188_DS_
                                    1-  514     	BANKSEL	r0x100E
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1-  515     	MOVR	r0x100E,W
                                    1-  516     	BANKSEL	r0x100D
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 04rr                      1-  517     	SUBAR	r0x100D,W
     001A                           1-  518     _00188_DS_:
     001A 0803                      1-  519     	BTRSS	STATUS,0
     001B 3rrr                      1-  520     	LGOTO	_00179_DS_
                                    1-  521     	BANKSEL	r0x100E
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 05rr                      1-  522     	INCR	r0x100E,F
     001E 0903                      1-  523     	BTRSS	STATUS,2
     001F 3rrr                      1-  524     	LGOTO	_00001_DS_
                                    1-  525     	BANKSEL	r0x100F
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 05rr                      1-  526     	INCR	r0x100F,F
     0022                           1-  527     _00001_DS_:
     0022 3rrr                      1-  528     	LGOTO	_00177_DS_
     0023                           1-  529     _00179_DS_:
                                    1-  530     	.line	232, "main.c"; 	}
                                    1-  531     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  532     ; exit point of _delay
                                    1-  534     ;***
                                    1-  535     ;  pBlock Stats: dbName = C
                                    1-  536     ;***
                                    1-  537     ;has an exit
                                    1-  538     ;; Starting pCode block
                                    1-  539     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  541     _F_wait_eoc:
                                    1-  542     ; 2 exit points
     0000                           1-  543     _00170_DS_:
                                    1-  544     	.line	222, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  545     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  546     	LGOTO	_00170_DS_
                                    1-  547     	.line	224, "main.c"; 	}
                                    1-  548     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  549     ; exit point of _F_wait_eoc
                                    1-  551     ;***
                                    1-  552     ;  pBlock Stats: dbName = C
                                    1-  553     ;***
                                    1-  554     ;has an exit
                                    1-  555     ;functions called:
                                    1-  556     ;   _initAD
                                    1-  557     ;   _initAD
                                    1-  558     ;; Starting pCode block
                                    1-  559     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  561     _gotoSleep:
                                    1-  562     ; 2 exit points
                                    1-  563     	.line	202, "main.c"; 	sleepDelay = 0;
                                    1-  564     	BANKSEL	_sleepDelay
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  565     	CLRR	_sleepDelay
     0002 02rr                      1-  566     	CLRR	(_sleepDelay + 1)
                                    1-  567     	.line	203, "main.c"; 	AWUCON = 0x80;		//PA7唤醒
     0003 2180                      1-  568     	MOVIA	0x80
     0004 00rr                      1-  569     	MOVAR	_AWUCON
                                    1-  570     	.line	204, "main.c"; 	PORTB = 0x00; 	//关闭
     0005 02rr                      1-  571     	CLRR	_PORTB
                                    1-  572     	.line	205, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  573     	CLRR	_PORTA
                                    1-  574     	.line	207, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     0007 2103                      1-  575     	MOVIA	0x03
     0008 00rr                      1-  576     	MOVAR	_INTE
                                    1-  577     	.line	208, "main.c"; 	PCON =  C_LVR_En;	
     0009 2108                      1-  578     	MOVIA	0x08
     000A 00rr                      1-  579     	MOVAR	_PCON
                                    1-  580     	.line	209, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000B 02rr                      1-  581     	CLRR	_INTF
                                    1-  582     	.line	210, "main.c"; 	CLRWDT();
     000C 0002                      1-  583     	clrwdt
                                    1-  584     	.line	211, "main.c"; 	SLEEP();
     000D 0001                      1-  585     	sleep
                                    1-  586     	.line	212, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000E 2101                      1-  587     	MOVIA	0x01
     000F 00rr                      1-  588     	MOVAR	_INTE
                                    1-  589     	.line	213, "main.c"; 	INTF = 0;
     0010 02rr                      1-  590     	CLRR	_INTF
                                    1-  591     	.line	215, "main.c"; 	PCON = C_WDT_En | C_LVR_En ;				// Enable WDT ,  Enable LVR
     0011 2188                      1-  592     	MOVIA	0x88
     0012 00rr                      1-  593     	MOVAR	_PCON
                                    1-  594     	.line	216, "main.c"; 	initAD();
     0013 2rrr                      1-  595     	LCALL	_initAD
                                    1-  596     	.line	217, "main.c"; 	}
                                    1-  597     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  598     ; exit point of _gotoSleep
                                    1-  600     ;***
                                    1-  601     ;  pBlock Stats: dbName = C
                                    1-  602     ;***
                                    1-  603     ;has an exit
                                    1-  604     ;functions called:
                                    1-  605     ;   _F_wait_eoc
                                    1-  606     ;   _F_wait_eoc
                                    1-  607     ;6 compiler assigned registers:
                                    1-  608     ;   r0x1011
                                    1-  609     ;   r0x1012
                                    1-  610     ;   r0x1013
                                    1-  611     ;   r0x1014
                                    1-  612     ;   r0x1015
                                    1-  613     ;   r0x1016
                                    1-  614     ;; Starting pCode block
                                    1-  615     .segment "code"; module=main, function=_F_AIN0_Convert
                                    1-  617     ;local variable name mapping:
     0000                           1-  620     _F_AIN0_Convert:
                                    1-  621     ; 2 exit points
                                    1-  622     	.line	185, "main.c"; 	void F_AIN0_Convert(char count)
                                    1-  623     	BANKSEL	r0x1011
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  624     	MOVAR	r0x1011
                                    1-  625     	.line	187, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;   
                                    1-  626     	BANKSEL	_R_AIN0_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  627     	CLRR	_R_AIN0_DATA_LB
                                    1-  628     	BANKSEL	_R_AIN0_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  629     	CLRR	_R_AIN0_DATA
     0006 02rr                      1-  630     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  631     	.line	189, "main.c"; 	ADMD  = 0x90 | C_ADC_PA0;				// Select AIN0(PA0) pad as ADC input
     0007 2190                      1-  632     	MOVIA	0x90
     0008 00rr                      1-  633     	MOVAR	_ADMD
                                    1-  634     	.line	190, "main.c"; 	for(i=1;i<=count;i++)
     0009 2101                      1-  635     	MOVIA	0x01
                                    1-  636     	BANKSEL	r0x1012
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1-  637     	MOVAR	r0x1012
     000C                           1-  638     _00159_DS_:
                                    1-  639     	BANKSEL	r0x1012
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 01rr                      1-  640     	MOVR	r0x1012,W
                                    1-  641     	BANKSEL	r0x1011
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 04rr                      1-  642     	SUBAR	r0x1011,W
     0010 0803                      1-  643     	BTRSS	STATUS,0
     0011 3rrr                      1-  644     	LGOTO	_00161_DS_
                                    1-  645     	.line	192, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0012 1Brr                      1-  646     	BSR	_ADMDbits,6
                                    1-  647     	.line	193, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0013 2rrr                      1-  648     	LCALL	_F_wait_eoc
                                    1-  649     	.line	194, "main.c"; 	R_AIN0_DATA_LB += ( 0x0F & ADR); 
     0014 210F                      1-  650     	MOVIA	0x0f
     0015 10rr                      1-  651     	ANDAR	_ADR,W
                                    1-  652     ;;3	MOVAR	r0x1013
                                    1-  653     	BANKSEL	_R_AIN0_DATA_LB
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 03rr                      1-  654     	ADDAR	_R_AIN0_DATA_LB,F
                                    1-  655     	.line	195, "main.c"; 	R_AIN0_DATA    += ADD; 
     0018 01rr                      1-  656     	MOVR	_ADD,W
                                    1-  657     	BANKSEL	r0x1013
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1-  658     	MOVAR	r0x1013
                                    1-  659     ;;1	CLRR	r0x1014
                                    1-  660     ;;102	MOVR	r0x1013,W
                                    1-  661     ;;100	MOVAR	r0x1015
     001B 2100                      1-  662     	MOVIA	0x00
                                    1-  663     	BANKSEL	r0x1016
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  664     	MOVAR	r0x1016
                                    1-  665     ;;101	MOVR	r0x1015,W
                                    1-  666     	BANKSEL	r0x1013
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1-  667     	MOVR	r0x1013,W
                                    1-  668     	BANKSEL	_R_AIN0_DATA
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 03rr                      1-  669     	ADDAR	_R_AIN0_DATA,F
                                    1-  670     	BANKSEL	r0x1016
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  671     	MOVR	r0x1016,W
     0024 0C03                      1-  672     	BTRSC	STATUS,0
     0025 05rr                      1-  673     	INCR	r0x1016,W
     0026 0D03                      1-  674     	BTRSC	STATUS,2
     0027 3rrr                      1-  675     	LGOTO	_00002_DS_
                                    1-  676     	BANKSEL	_R_AIN0_DATA
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 03rr                      1-  677     	ADDAR	(_R_AIN0_DATA + 1),F
     002A                           1-  678     _00002_DS_:
                                    1-  679     	.line	190, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  680     	BANKSEL	r0x1012
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 05rr                      1-  681     	INCR	r0x1012,F
     002C 3rrr                      1-  682     	LGOTO	_00159_DS_
     002D                           1-  683     _00161_DS_:
                                    1-  684     	.line	197, "main.c"; 	}
                                    1-  685     	RETURN	
     002D 0010                      3-   26 m1      ret
                                    1-  686     ; exit point of _F_AIN0_Convert
                                    1-  688     ;***
                                    1-  689     ;  pBlock Stats: dbName = C
                                    1-  690     ;***
                                    1-  691     ;has an exit
                                    1-  692     ;functions called:
                                    1-  693     ;   _delay
                                    1-  694     ;   _delay
                                    1-  695     ;1 compiler assigned register :
                                    1-  696     ;   STK00
                                    1-  697     ;; Starting pCode block
                                    1-  698     .segment "code"; module=main, function=_initAD
     0000                           1-  700     _initAD:
                                    1-  701     ; 2 exit points
                                    1-  702     	.line	161, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA0 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2180                      1-  703     	MOVIA	0x80
     0001 00rr                      1-  704     	MOVAR	_ADMD
                                    1-  705     	.line	164, "main.c"; 	ADVREFH = C_Vrefh_VDD;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 2103                      1-  706     	MOVIA	0x03
     0003 00rr                      1-  707     	MOVAR	_ADVREFH
                                    1-  708     	.line	171, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  709     	MOVIA	0x10
     0005 00rr                      1-  710     	MOVAR	_ADR
                                    1-  711     	.line	173, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  712     	MOVIA	0x03
     0007 00rr                      1-  713     	MOVAR	_ADCR
                                    1-  714     	.line	175, "main.c"; 	PACON = C_PA0_AIN0;						// Set AIN0(PA0) as pure ADC input for reduce power consumption (SFR "PACON")
     0008 2101                      1-  715     	MOVIA	0x01
     0009 00rr                      1-  716     	MOVAR	_PACON
                                    1-  717     	.line	176, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     000A 1Arr                      1-  718     	BSR	_ADMDbits,4
                                    1-  719     	.line	177, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     000B 2164                      1-  720     	MOVIA	0x64
     000C 00rr                      1-  721     	MOVAR	STK00
     000D 2100                      1-  722     	MOVIA	0x00
     000E 2rrr                      1-  723     	LCALL	_delay
                                    1-  724     	.line	180, "main.c"; 	}
                                    1-  725     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1-  726     ; exit point of _initAD
                                    1-  728     ;***
                                    1-  729     ;  pBlock Stats: dbName = C
                                    1-  730     ;***
                                    1-  731     ;has an exit
                                    1-  732     ;; Starting pCode block
                                    1-  733     .segment "code"; module=main, function=_init
     0000                           1-  735     _init:
                                    1-  736     ; 2 exit points
                                    1-  737     	.line	131, "main.c"; 	PORTA = 0;
     0000 02rr                      1-  738     	CLRR	_PORTA
                                    1-  739     	.line	132, "main.c"; 	PORTB = 0;
     0001 02rr                      1-  740     	CLRR	_PORTB
                                    1-  741     	.line	134, "main.c"; 	IOSTA = 0x81;		//PA0  PA7输入
     0002 2181                      1-  742     	MOVIA	0x81
     0003 000r                      1-  743     	IOST	_IOSTA
                                    1-  744     	.line	135, "main.c"; 	IOSTB =  0;								// Set PB to output mode
     0004 0200                      1-  745     	CLRA	
     0005 000r                      1-  746     	IOST	_IOSTB
                                    1-  747     	.line	136, "main.c"; 	PORTA = 0;
     0006 02rr                      1-  748     	CLRR	_PORTA
                                    1-  749     	.line	137, "main.c"; 	PORTB = 0x00;                           	
     0007 02rr                      1-  750     	CLRR	_PORTB
                                    1-  751     	.line	138, "main.c"; 	APHCON = 0x5F;		//PA7打开上拉
     0008 215F                      1-  752     	MOVIA	0x5f
     0009 000r                      1-  753     	IOST	_APHCON
                                    1-  754     	.line	141, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     000A 2188                      1-  755     	MOVIA	0x88
     000B 00rr                      1-  756     	MOVAR	_PCON
                                    1-  757     	.line	142, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1-  758     	MOVIA	0x01
     000D 00rr                      1-  759     	MOVAR	_INTE
                                    1-  760     	.line	143, "main.c"; 	INTF = 0;
     000E 02rr                      1-  761     	CLRR	_INTF
                                    1-  762     	.line	146, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1-  763     	CLRA	
     0010 000r                      1-  764     	IOST	_PCON1
                                    1-  765     	.line	148, "main.c"; 	TMR0 = 55;
     0011 2137                      1-  766     	MOVIA	0x37
     0012 00rr                      1-  767     	MOVAR	_TMR0
                                    1-  768     	.line	149, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1-  769     	CLRA	
     0014 0003                      1-  770     	T0MD	
                                    1-  771     	.line	151, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1-  772     	MOVIA	0x01
     0016 000r                      1-  773     	IOST	_PCON1
                                    1-  774     	.line	153, "main.c"; 	ENI();
     0017 0004                      1-  775     	ENI
                                    1-  776     	.line	154, "main.c"; 	}
                                    1-  777     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  778     ; exit point of _init
                                    1-  780     ;***
                                    1-  781     ;  pBlock Stats: dbName = C
                                    1-  782     ;***
                                    1-  783     ;has an exit
                                    1-  784     ;functions called:
                                    1-  785     ;   _F_AIN0_Convert
                                    1-  786     ;   _F_AIN0_Convert
                                    1-  787     ;4 compiler assigned registers:
                                    1-  788     ;   r0x1017
                                    1-  789     ;   r0x1018
                                    1-  790     ;   r0x1019
                                    1-  791     ;   r0x101A
                                    1-  792     ;; Starting pCode block
                                    1-  793     .segment "code"; module=main, function=_checkAD
     0000                           1-  795     _checkAD:
                                    1-  796     ; 2 exit points
                                    1-  797     	.line	107, "main.c"; 	R_AIN0_DATA=R_AIN0_DATA_LB=0x00;            
                                    1-  798     	BANKSEL	_R_AIN0_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  799     	CLRR	_R_AIN0_DATA_LB
                                    1-  800     	BANKSEL	_R_AIN0_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  801     	CLRR	_R_AIN0_DATA
     0004 02rr                      1-  802     	CLRR	(_R_AIN0_DATA + 1)
                                    1-  803     	.line	108, "main.c"; 	F_AIN0_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  804     	MOVIA	0x08
     0006 2rrr                      1-  805     	LCALL	_F_AIN0_Convert
                                    1-  806     	.line	109, "main.c"; 	R_AIN0_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  807     	BANKSEL	_R_AIN0_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1-  808     	SWAPR	(_R_AIN0_DATA + 1),W
     0009 22F0                      1-  809     	ANDIA	0xf0
     000A 00rr                      1-  810     	MOVAR	(_R_AIN0_DATA + 1)
     000B 15rr                      1-  811     	SWAPR	_R_AIN0_DATA,W
     000C 00rr                      1-  812     	MOVAR	_R_AIN0_DATA
     000D 220F                      1-  813     	ANDIA	0x0f
     000E 11rr                      1-  814     	IORAR	(_R_AIN0_DATA + 1),F
     000F 12rr                      1-  815     	XORAR	_R_AIN0_DATA,F
                                    1-  816     	.line	110, "main.c"; 	R_AIN0_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  817     	MOVIA	0xf0
                                    1-  818     	BANKSEL	_R_AIN0_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1-  819     	ANDAR	_R_AIN0_DATA_LB,F
                                    1-  820     	.line	111, "main.c"; 	R_AIN0_DATA += R_AIN0_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  821     	MOVR	_R_AIN0_DATA_LB,W
                                    1-  822     	BANKSEL	r0x1019
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1-  823     	MOVAR	r0x1019
                                    1-  824     ;;1	MOVAR	r0x1017
                                    1-  825     ;;1	CLRR	r0x1018
                                    1-  826     ;;99	MOVR	r0x1017,W
     0016 2100                      1-  827     	MOVIA	0x00
                                    1-  828     	BANKSEL	r0x101A
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  829     	MOVAR	r0x101A
                                    1-  830     	BANKSEL	r0x1019
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  831     	MOVR	r0x1019,W
                                    1-  832     	BANKSEL	_R_AIN0_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1-  833     	ADDAR	_R_AIN0_DATA,F
                                    1-  834     	BANKSEL	r0x101A
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  835     	MOVR	r0x101A,W
     001F 0C03                      1-  836     	BTRSC	STATUS,0
     0020 05rr                      1-  837     	INCR	r0x101A,W
     0021 0D03                      1-  838     	BTRSC	STATUS,2
     0022 3rrr                      1-  839     	LGOTO	_00003_DS_
                                    1-  840     	BANKSEL	_R_AIN0_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1-  841     	ADDAR	(_R_AIN0_DATA + 1),F
                                    1-  842     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  843     _00003_DS_:
                                    1-  844     	.line	112, "main.c"; 	R_AIN0_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  845     	BCR	STATUS,0
                                    1-  846     	BANKSEL	_R_AIN0_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1-  847     	RRR	(_R_AIN0_DATA + 1),F
     0028 13rr                      1-  848     	RRR	_R_AIN0_DATA,F
                                    1-  849     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  850     	BCR	STATUS,0
     002A 13rr                      1-  851     	RRR	(_R_AIN0_DATA + 1),F
     002B 13rr                      1-  852     	RRR	_R_AIN0_DATA,F
                                    1-  853     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  854     	BCR	STATUS,0
     002D 13rr                      1-  855     	RRR	(_R_AIN0_DATA + 1),F
     002E 13rr                      1-  856     	RRR	_R_AIN0_DATA,F
                                    1-  857     ;;unsigned compare: left < lit (0xBC8=3016), size=2
                                    1-  858     	.line	114, "main.c"; 	if(R_AIN0_DATA < MINTE)			
     002F 210B                      1-  859     	MOVIA	0x0b
     0030 04rr                      1-  860     	SUBAR	(_R_AIN0_DATA + 1),W
     0031 0903                      1-  861     	BTRSS	STATUS,2
     0032 3rrr                      1-  862     	LGOTO	_00143_DS_
     0033 21C8                      1-  863     	MOVIA	0xc8
     0034 04rr                      1-  864     	SUBAR	_R_AIN0_DATA,W
     0035                           1-  865     _00143_DS_:
     0035 0C03                      1-  866     	BTRSC	STATUS,0
     0036 3rrr                      1-  867     	LGOTO	_00133_DS_
                                    1-  868     	.line	116, "main.c"; 	setbit(PORTA, 2);		// 小于 50度 加热打开
     0037 19rr                      1-  869     	BSR	_PORTA,2
                                    1-  870     	.line	117, "main.c"; 	setbit(PORTB, 3);		//LED灯打开
     0038 19rr                      1-  871     	BSR	_PORTB,3
     0039 3rrr                      1-  872     	LGOTO	_00135_DS_
                                    1-  873     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  874     ;;unsigned compare: left >= lit (0xC57=3159), size=2
     003A                           1-  875     _00133_DS_:
                                    1-  876     	.line	120, "main.c"; 	else if(R_AIN0_DATA > MAXTE)
     003A 210C                      1-  877     	MOVIA	0x0c
                                    1-  878     	BANKSEL	_R_AIN0_DATA
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 04rr                      1-  879     	SUBAR	(_R_AIN0_DATA + 1),W
     003D 0903                      1-  880     	BTRSS	STATUS,2
     003E 3rrr                      1-  881     	LGOTO	_00144_DS_
     003F 2157                      1-  882     	MOVIA	0x57
     0040 04rr                      1-  883     	SUBAR	_R_AIN0_DATA,W
     0041                           1-  884     _00144_DS_:
     0041 0803                      1-  885     	BTRSS	STATUS,0
     0042 3rrr                      1-  886     	LGOTO	_00135_DS_
                                    1-  887     	.line	122, "main.c"; 	resetbit(PORTB, 3);		//LED灯关闭
     0043 1Drr                      1-  888     	BCR	_PORTB,3
                                    1-  889     	.line	123, "main.c"; 	resetbit(PORTA, 2);		//大于 55度 加热关闭
     0044 1Drr                      1-  890     	BCR	_PORTA,2
     0045                           1-  891     _00135_DS_:
                                    1-  892     	.line	126, "main.c"; 	}
                                    1-  893     	RETURN	
     0045 0010                      3-   26 m1      ret
                                    1-  894     ; exit point of _checkAD
                                    1-  897     ;	code size estimation:
                                    1-  898     ;	  260+   54 =   314 instructions (  736 byte)
                                    1-  900     	end
                                    1-  900     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000022
_00002_DS_              Label    0000002A
_00003_DS_              Label    00000025
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00118_DS_              Label    00000017
_00122_DS_              Label    00000020
_00125_DS_              Label    00000002
_00133_DS_              Label    0000003A
_00135_DS_              Label    00000045
_00143_DS_              Label    00000035
_00144_DS_              Label    00000041
_00159_DS_              Label    0000000C
_00161_DS_              Label    0000002D
_00170_DS_              Label    00000000
_00177_DS_              Label    0000000A
_00179_DS_              Label    00000023
_00188_DS_              Label    0000001A
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_acosf                  Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_asinf                  Label    00000000
_atan2f                 Label    00000000
_atanf                  Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_ceilf                  Label    00000000
_checkAD                Label    00000000
_CMPCR                  Label    00000000
_cosf                   Label    00000000
_coshf                  Label    00000000
_cotf                   Label    00000000
_delay                  Label    00000000
_expf                   Label    00000000
_F_AIN0_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_fabsf                  Label    00000000
_floorf                 Label    00000000
_frexpf                 Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_init                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isinf                  Label    00000000
_isnan                  Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyRead                Label    00000000
_KeyScan                Label    00000000
_ldexpf                 Label    00000000
_log10f                 Label    00000000
_logf                   Label    00000000
_main                   Label    00000000
_modff                  Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powf                   Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN0_DATA            Label    00000000
_R_AIN0_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sinf                   Label    00000000
_sinhf                  Label    00000000
_sleepDelay             Label    00000000
_sqrtf                  Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_tanf                   Label    00000000
_tanhf                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workFlag               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100C                 Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
r0x100F                 Label    00000000
r0x1010                 Label    00000000
r0x1011                 Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1016                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
