
                    Nyquest Technology Co., Ltd.

NYASM 2.26

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A054D,c=on
                                    1-    9     	#include "ny8a054d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_AWUCONbits
                                    1-   23     	extern	_INTEDGbits
                                    1-   24     	extern	_RFCbits
                                    1-   25     	extern	_INTE2bits
                                    1-   26     	extern	_INDF
                                    1-   27     	extern	_TMR0
                                    1-   28     	extern	_PCL
                                    1-   29     	extern	_STATUS
                                    1-   30     	extern	_FSR
                                    1-   31     	extern	_PORTA
                                    1-   32     	extern	_PORTB
                                    1-   33     	extern	_PCON
                                    1-   34     	extern	_BWUCON
                                    1-   35     	extern	_PCHBUF
                                    1-   36     	extern	_ABPLCON
                                    1-   37     	extern	_BPHCON
                                    1-   38     	extern	_INTE
                                    1-   39     	extern	_INTF
                                    1-   40     	extern	_AWUCON
                                    1-   41     	extern	_INTEDG
                                    1-   42     	extern	_TMRH
                                    1-   43     	extern	_RFC
                                    1-   44     	extern	_TM34RH
                                    1-   45     	extern	_INTE2
                                    1-   46     	extern	_TMR1
                                    1-   47     	extern	_T1CR1
                                    1-   48     	extern	_T1CR2
                                    1-   49     	extern	_PWM1DUTY
                                    1-   50     	extern	_PS1CV
                                    1-   51     	extern	_BZ1CR
                                    1-   52     	extern	_IRCR
                                    1-   53     	extern	_TBHP
                                    1-   54     	extern	_TBHD
                                    1-   55     	extern	_P2CR1
                                    1-   56     	extern	_PWM2DUTY
                                    1-   57     	extern	_OSCCR
                                    1-   58     	extern	_TMR3
                                    1-   59     	extern	_T3CR1
                                    1-   60     	extern	_T3CR2
                                    1-   61     	extern	_PWM3DUTY
                                    1-   62     	extern	_PS3CV
                                    1-   63     	extern	_P4CR1
                                    1-   64     	extern	_PWM4DUTY
                                    1-   65     	extern	_P5CR1
                                    1-   66     	extern	_PWM5DUTY
                                    1-   67     	extern	_PWM5RH
                                    1-   68     	extern	_IOSTA
                                    1-   69     	extern	_IOSTB
                                    1-   70     	extern	_APHCON
                                    1-   71     	extern	_PS0CV
                                    1-   72     	extern	_BODCON
                                    1-   73     	extern	_CMPCR
                                    1-   74     	extern	_PCON1
                                    1-   75     	extern	_T0MD
                                    1-   76     	extern	___sdcc_saved_fsr
                                    1-   77     	extern	___sdcc_saved_stk00
                                    1-   78     	extern	___sdcc_saved_stk01
                                    1-   79     	extern	__nyc_ny8_startup
                                    1-   80     ;--------------------------------------------------------
                                    1-   81     ; global declarations
                                    1-   82     ;--------------------------------------------------------
                                    1-   83     	extern	_delay
                                    1-   84     	extern	_checkLVD
                                    1-   85     	extern	_gotoSleep
                                    1-   86     	extern	_keyCtr
                                    1-   87     	extern	_keyRead
                                    1-   88     	extern	_pwmOFF
                                    1-   89     	extern	_pwmOn
                                    1-   90     	extern	_workCtr
                                    1-   91     	extern	_isr
                                    1-   92     	extern	_main
                                    1-   93     	extern	_keyCount
                                    1-   94     	extern	_count1s
                                    1-   95     	extern	_count900s
                                    1-   96     	extern	_count4Hour
                                    1-   97     	extern	_count6s
                                    1-   98     	extern	_longPressFlag
                                    1-   99     	extern	_sleepDelay
                                    1-  100     	extern	_workStep
                                    1-  101     	extern	_duty
                                    1-  102     	extern	_maxDuty
                                    1-  103     	extern	_lvdTime
                                    1-  104     	extern	_intCount
                                    1-  105     	extern	_IntFlag
                                    1-  107     	extern PSAVE
                                    1-  108     	extern SSAVE
                                    1-  109     	extern WSAVE
                                    1-  110     	extern STK12
                                    1-  111     	extern STK11
                                    1-  112     	extern STK10
                                    1-  113     	extern STK09
                                    1-  114     	extern STK08
                                    1-  115     	extern STK07
                                    1-  116     	extern STK06
                                    1-  117     	extern STK05
                                    1-  118     	extern STK04
                                    1-  119     	extern STK03
                                    1-  120     	extern STK02
                                    1-  121     	extern STK01
                                    1-  122     	extern STK00
                                    1-  124     .segment "uninit", 0x20000040
 20000040                           1-  125     PSAVE:
                                    1-  126     	.res 1
 20000041                           1-  127     SSAVE:
                                    1-  128     	.res 1
 20000042                           1-  129     WSAVE:
                                    1-  130     	.res 1
 20000043                           1-  131     STK12:
                                    1-  132     	.res 1
 20000044                           1-  133     STK11:
                                    1-  134     	.res 1
 20000045                           1-  135     STK10:
                                    1-  136     	.res 1
 20000046                           1-  137     STK09:
                                    1-  138     	.res 1
 20000047                           1-  139     STK08:
                                    1-  140     	.res 1
 20000048                           1-  141     STK07:
                                    1-  142     	.res 1
 20000049                           1-  143     STK06:
                                    1-  144     	.res 1
 2000004A                           1-  145     STK05:
                                    1-  146     	.res 1
 2000004B                           1-  147     STK04:
                                    1-  148     	.res 1
 2000004C                           1-  149     STK03:
                                    1-  150     	.res 1
 2000004D                           1-  151     STK02:
                                    1-  152     	.res 1
 2000004E                           1-  153     STK01:
                                    1-  154     	.res 1
 2000004F                           1-  155     STK00:
                                    1-  156     	.res 1
                                    1-  158     ;--------------------------------------------------------
                                    1-  159     ; global definitions
                                    1-  160     ;--------------------------------------------------------
                                    1-  161     ;--------------------------------------------------------
                                    1-  162     ; absolute symbol definitions
                                    1-  163     ;--------------------------------------------------------
                                    1-  164     ;--------------------------------------------------------
                                    1-  165     ; compiler-defined variables
                                    1-  166     ;--------------------------------------------------------
                                    1-  167     .segment "uninit"
     0000                           1-  168     r0x1019:
                                    1-  169     	.res	1
                                    1-  170     .segment "uninit"
     0000                           1-  171     r0x1017:
                                    1-  172     	.res	1
                                    1-  173     .segment "uninit"
     0000                           1-  174     r0x1018:
                                    1-  175     	.res	1
                                    1-  176     .segment "uninit"
     0000                           1-  177     r0x1016:
                                    1-  178     	.res	1
                                    1-  179     .segment "uninit"
     0000                           1-  180     r0x1012:
                                    1-  181     	.res	1
                                    1-  182     .segment "uninit"
     0000                           1-  183     r0x1011:
                                    1-  184     	.res	1
                                    1-  185     .segment "uninit"
     0000                           1-  186     r0x1013:
                                    1-  187     	.res	1
                                    1-  188     .segment "uninit"
     0000                           1-  189     r0x1014:
                                    1-  190     	.res	1
                                    1-  191     ;--------------------------------------------------------
                                    1-  192     ; initialized data
                                    1-  193     ;--------------------------------------------------------
                                    1-  195     .segment "idata"
     0000                           1-  196     _keyCount:
     0000 0000 0000                 1-  197     	dw	0x00, 0x00
                                    1-  201     .segment "idata"
     0000                           1-  202     _count1s:
     0000 0000 0000                 1-  203     	dw	0x00, 0x00
                                    1-  207     .segment "idata"
     0000                           1-  208     _count900s:
     0000 0000 0000                 1-  209     	dw	0x00, 0x00
                                    1-  213     .segment "idata"
     0000                           1-  214     _count4Hour:
     0000 0000 0000                 1-  215     	dw	0x00, 0x00
                                    1-  219     .segment "idata"
     0000                           1-  220     _count6s:
     0000 0000                      1-  221     	dw	0x00
                                    1-  225     .segment "idata"
     0000                           1-  226     _longPressFlag:
     0000 0000                      1-  227     	dw	0x00
                                    1-  231     .segment "idata"
     0000                           1-  232     _sleepDelay:
     0000 0000                      1-  233     	dw	0x00
                                    1-  237     .segment "idata"
     0000                           1-  238     _workStep:
     0000 0000                      1-  239     	dw	0x00
                                    1-  243     .segment "idata"
     0000                           1-  244     _duty:
     0000 0000                      1-  245     	dw	0x00
                                    1-  249     .segment "idata"
     0000                           1-  250     _maxDuty:
     0000 004B                      1-  251     	dw	0x4b
                                    1-  255     .segment "idata"
     0000                           1-  256     _lvdTime:
     0000 0000                      1-  257     	dw	0x00
                                    1-  261     .segment "idata"
     0000                           1-  262     _intCount:
     0000 0000                      1-  263     	dw	0x00
                                    1-  267     .segment "idata"
     0000                           1-  268     _IntFlag:
     0000 0000                      1-  269     	dw	0x00
                                    1-  272     ;--------------------------------------------------------
                                    1-  273     ; overlayable items in internal ram 
                                    1-  274     ;--------------------------------------------------------
                                    1-  275     ;	udata_ovr
                                    1-  276     ;--------------------------------------------------------
                                    1-  277     ; reset vector 
                                    1-  278     ;--------------------------------------------------------
                                    1-  279     ORG	0x0000
     0000 3rrr                      1-  280     	LGOTO	__nyc_ny8_startup
                                    1-  281     ;--------------------------------------------------------
                                    1-  282     ; interrupt and initialization code
                                    1-  283     ;--------------------------------------------------------
                                    1-  284     ORG 0x0008
     0008 3rrr                      1-  285     	lgoto	__sdcc_interrupt
                                    1-  287     .segment "code"
     0000                           1-  288     __sdcc_interrupt:
                                    1-  289     ;***
                                    1-  290     ;  pBlock Stats: dbName = I
                                    1-  291     ;***
                                    1-  292     ;2 compiler assigned registers:
                                    1-  293     ;   STK00
                                    1-  294     ;   STK01
                                    1-  295     ;; Starting pCode block
     0000                           1-  296     _isr:
                                    1-  297     ; 0 exit points
                                    1-  298     	.line	49, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  299     	MOVAR	WSAVE
     0001 1503                      1-  300     	SWAPR	STATUS,W
     0002 0283                      1-  301     	CLRR	STATUS
     0003 00rr                      1-  302     	MOVAR	SSAVE
     0004 010A                      1-  303     	MOVR	PCHBUF,W
     0005 028A                      1-  304     	CLRR	PCHBUF
     0006 00rr                      1-  305     	MOVAR	PSAVE
     0007 0104                      1-  306     	MOVR	FSR,W
                                    1-  307     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  308     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  309     	MOVR	STK00,W
                                    1-  310     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  311     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  312     	MOVR	STK01,W
                                    1-  313     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  314     	MOVAR	___sdcc_saved_stk01
                                    1-  315     	.line	51, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  316     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  317     	LGOTO	_00112_DS_
                                    1-  318     	.line	53, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  319     	MOVIA	0x37
     0013 03rr                      1-  320     	ADDAR	_TMR0,F
                                    1-  321     	.line	54, "main.c"; 	if(++intCount >= 100)
                                    1-  322     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  323     	INCR	_intCount,F
                                    1-  324     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  325     	MOVIA	0x64
     0017 04rr                      1-  326     	SUBAR	_intCount,W
     0018 0803                      1-  327     	BTRSS	STATUS,0
     0019 3rrr                      1-  328     	LGOTO	_00112_DS_
                                    1-  329     	.line	56, "main.c"; 	intCount = 0;
     001A 02rr                      1-  330     	CLRR	_intCount
                                    1-  331     	.line	57, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  332     	MOVIA	0x01
                                    1-  333     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  334     	MOVAR	_IntFlag
                                    1-  335     	.line	58, "main.c"; 	if(workStep)
                                    1-  336     	BANKSEL	_workStep
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1-  337     	MOVR	_workStep,W
     0020 0D03                      1-  338     	BTRSC	STATUS,2
     0021 3rrr                      1-  339     	LGOTO	_00112_DS_
                                    1-  340     	.line	60, "main.c"; 	if(++count1s>= 100)
                                    1-  341     	BANKSEL	_count1s
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 05rr                      1-  342     	INCR	_count1s,F
     0024 0D03                      1-  343     	BTRSC	STATUS,2
     0025 05rr                      1-  344     	INCR	(_count1s + 1),F
                                    1-  345     ;;unsigned compare: left < lit (0x64=100), size=2
     0026 2100                      1-  346     	MOVIA	0x00
     0027 04rr                      1-  347     	SUBAR	(_count1s + 1),W
     0028 0903                      1-  348     	BTRSS	STATUS,2
     0029 3rrr                      1-  349     	LGOTO	_00133_DS_
     002A 2164                      1-  350     	MOVIA	0x64
     002B 04rr                      1-  351     	SUBAR	_count1s,W
     002C                           1-  352     _00133_DS_:
     002C 0803                      1-  353     	BTRSS	STATUS,0
     002D 3rrr                      1-  354     	LGOTO	_00112_DS_
                                    1-  355     	.line	62, "main.c"; 	count1s = 0;
                                    1-  356     	BANKSEL	_count1s
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 02rr                      1-  357     	CLRR	_count1s
     0030 02rr                      1-  358     	CLRR	(_count1s + 1)
                                    1-  359     	.line	63, "main.c"; 	count900s++;
                                    1-  360     	BANKSEL	_count900s
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 05rr                      1-  361     	INCR	_count900s,F
     0033 0D03                      1-  362     	BTRSC	STATUS,2
     0034 05rr                      1-  363     	INCR	(_count900s + 1),F
     0035                           1-  364     _00112_DS_:
                                    1-  365     	.line	68, "main.c"; 	if(INTFbits.PABIF)
     0035 08rr                      1-  366     	BTRSS	_INTFbits,1
     0036 3rrr                      1-  367     	LGOTO	_00114_DS_
                                    1-  368     	.line	70, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0037 21FD                      1-  369     	MOVIA	0xfd
     0038 00rr                      1-  370     	MOVAR	_INTF
     0039                           1-  371     _00114_DS_:
                                    1-  372     	.line	73, "main.c"; 	INTF = 0;
     0039 02rr                      1-  373     	CLRR	_INTF
                                    1-  374     	.line	75, "main.c"; 	}
                                    1-  375     	BANKSEL	___sdcc_saved_stk01
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 01rr                      1-  376     	MOVR	___sdcc_saved_stk01,W
     003C 00rr                      1-  377     	MOVAR	STK01
                                    1-  378     	BANKSEL	___sdcc_saved_stk00
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1-  379     	MOVR	___sdcc_saved_stk00,W
     003F 00rr                      1-  380     	MOVAR	STK00
                                    1-  381     	BANKSEL	___sdcc_saved_fsr
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 01rr                      1-  382     	MOVR	___sdcc_saved_fsr,W
     0042 0084                      1-  383     	MOVAR	FSR
     0043 01rr                      1-  384     	MOVR	PSAVE,W
     0044 008A                      1-  385     	MOVAR	PCHBUF
     0045 0283                      1-  386     	CLRR	STATUS
     0046 15rr                      1-  387     	SWAPR	SSAVE,W
     0047 0083                      1-  388     	MOVAR	STATUS
     0048 15rr                      1-  389     	SWAPR	WSAVE,F
     0049 15rr                      1-  390     	SWAPR	WSAVE,W
     004A                           1-  391     END_OF_INTERRUPT:
     004A 0011                      1-  392     	RETIE	
                                    1-  394     ;--------------------------------------------------------
                                    1-  395     ; code
                                    1-  396     ;--------------------------------------------------------
                                    1-  397     ;***
                                    1-  398     ;  pBlock Stats: dbName = M
                                    1-  399     ;***
                                    1-  400     ;has an exit
                                    1-  401     ;functions called:
                                    1-  402     ;   _checkLVD
                                    1-  403     ;   _keyCtr
                                    1-  404     ;   _workCtr
                                    1-  405     ;   _checkLVD
                                    1-  406     ;   _keyCtr
                                    1-  407     ;   _workCtr
                                    1-  408     ;; Starting pCode block
                                    1-  409     .segment "code"; module=main, function=_main
     0000                           1-  411     _main:
                                    1-  412     ; 2 exit points
                                    1-  413     	.line	79, "main.c"; 	PORTA = 0x00;
     0000 02rr                      1-  414     	CLRR	_PORTA
                                    1-  415     	.line	80, "main.c"; 	PORTB = 0x00;
     0001 02rr                      1-  416     	CLRR	_PORTB
                                    1-  417     	.line	81, "main.c"; 	APHCON = 0xFE;		//PA0上拉
     0002 21FE                      1-  418     	MOVIA	0xfe
     0003 000r                      1-  419     	IOST	_APHCON
                                    1-  420     	.line	83, "main.c"; 	IOSTA =  C_PA0_Input;					//PA0输入
     0004 2101                      1-  421     	MOVIA	0x01
     0005 000r                      1-  422     	IOST	_IOSTA
                                    1-  423     	.line	84, "main.c"; 	IOSTB = 0x00;
     0006 0200                      1-  424     	CLRA	
     0007 000r                      1-  425     	IOST	_IOSTB
                                    1-  426     	.line	85, "main.c"; 	PORTA = 0x00;
     0008 02rr                      1-  427     	CLRR	_PORTA
                                    1-  428     	.line	86, "main.c"; 	PORTB = 0x00;                       	
     0009 02rr                      1-  429     	CLRR	_PORTB
                                    1-  430     	.line	87, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     000A 21A8                      1-  431     	MOVIA	0xa8
     000B 00rr                      1-  432     	MOVAR	_PCON
                                    1-  433     	.line	89, "main.c"; 	PCON1 = C_TMR0_Dis;
     000C 0200                      1-  434     	CLRA	
     000D 000r                      1-  435     	IOST	_PCON1
                                    1-  436     	.line	91, "main.c"; 	TMR0 = 55;
     000E 2137                      1-  437     	MOVIA	0x37
     000F 00rr                      1-  438     	MOVAR	_TMR0
                                    1-  439     	.line	92, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0010 0200                      1-  440     	CLRA	
     0011 0003                      1-  441     	T0MD	
                                    1-  442     	.line	93, "main.c"; 	INTE =  C_INT_TMR0;
     0012 2101                      1-  443     	MOVIA	0x01
     0013 00rr                      1-  444     	MOVAR	_INTE
                                    1-  445     	.line	94, "main.c"; 	PCON1 = C_LVD_2P4V | C_TMR0_En;
     0014 2109                      1-  446     	MOVIA	0x09
     0015 000r                      1-  447     	IOST	_PCON1
                                    1-  448     	.line	95, "main.c"; 	P2CR1 = 0x00;
     0016 0200                      1-  449     	CLRA	
     0017 00rr                      1-  450     	SFUN	_P2CR1
                                    1-  451     	.line	96, "main.c"; 	ENI();
     0018 0004                      1-  452     	ENI
     0019                           1-  453     _00141_DS_:
                                    1-  454     	.line	99, "main.c"; 	CLRWDT();  
     0019 0002                      1-  455     	clrwdt
                                    1-  456     	.line	100, "main.c"; 	if(!IntFlag)
                                    1-  457     	BANKSEL	_IntFlag
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 01rr                      1-  458     	MOVR	_IntFlag,W
     001C 0D03                      1-  459     	BTRSC	STATUS,2
     001D 3rrr                      1-  460     	LGOTO	_00141_DS_
                                    1-  461     	.line	102, "main.c"; 	IntFlag = 0;
     001E 02rr                      1-  462     	CLRR	_IntFlag
                                    1-  463     	.line	103, "main.c"; 	checkLVD();
     001F 2rrr                      1-  464     	LCALL	_checkLVD
                                    1-  465     	.line	104, "main.c"; 	keyCtr();
     0020 2rrr                      1-  466     	LCALL	_keyCtr
                                    1-  467     	.line	105, "main.c"; 	workCtr();
     0021 2rrr                      1-  468     	LCALL	_workCtr
     0022 3rrr                      1-  469     	LGOTO	_00141_DS_
                                    1-  470     	.line	108, "main.c"; 	}
                                    1-  471     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  472     ; exit point of _main
                                    1-  474     ;***
                                    1-  475     ;  pBlock Stats: dbName = C
                                    1-  476     ;***
                                    1-  477     ;has an exit
                                    1-  478     ;5 compiler assigned registers:
                                    1-  479     ;   r0x1011
                                    1-  480     ;   STK00
                                    1-  481     ;   r0x1012
                                    1-  482     ;   r0x1013
                                    1-  483     ;   r0x1014
                                    1-  484     ;; Starting pCode block
                                    1-  485     .segment "code"; module=main, function=_delay
                                    1-  487     ;local variable name mapping:
     0000                           1-  492     _delay:
                                    1-  493     ; 2 exit points
                                    1-  494     	.line	280, "main.c"; 	void delay(u16t time)
                                    1-  495     	BANKSEL	r0x1011
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  496     	MOVAR	r0x1011
     0002 01rr                      1-  497     	MOVR	STK00,W
                                    1-  498     	BANKSEL	r0x1012
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  499     	MOVAR	r0x1012
                                    1-  500     	.line	282, "main.c"; 	for(u16t i=0;i<time;i++);
                                    1-  501     	BANKSEL	r0x1013
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  502     	CLRR	r0x1013
                                    1-  503     	BANKSEL	r0x1014
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  504     	CLRR	r0x1014
     0009                           1-  505     _00264_DS_:
                                    1-  506     	BANKSEL	r0x1011
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  507     	MOVR	r0x1011,W
                                    1-  508     	BANKSEL	r0x1014
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  509     	SUBAR	r0x1014,W
     000D 0903                      1-  510     	BTRSS	STATUS,2
     000E 3rrr                      1-  511     	LGOTO	_00275_DS_
                                    1-  512     	BANKSEL	r0x1012
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  513     	MOVR	r0x1012,W
                                    1-  514     	BANKSEL	r0x1013
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1-  515     	SUBAR	r0x1013,W
     0013                           1-  516     _00275_DS_:
     0013 0C03                      1-  517     	BTRSC	STATUS,0
     0014 3rrr                      1-  518     	LGOTO	_00266_DS_
                                    1-  519     	BANKSEL	r0x1013
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  520     	INCR	r0x1013,F
     0017 0903                      1-  521     	BTRSS	STATUS,2
     0018 3rrr                      1-  522     	LGOTO	_00001_DS_
                                    1-  523     	BANKSEL	r0x1014
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1-  524     	INCR	r0x1014,F
     001B                           1-  525     _00001_DS_:
     001B 3rrr                      1-  526     	LGOTO	_00264_DS_
     001C                           1-  527     _00266_DS_:
                                    1-  528     	.line	283, "main.c"; 	}
                                    1-  529     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  530     ; exit point of _delay
                                    1-  532     ;***
                                    1-  533     ;  pBlock Stats: dbName = C
                                    1-  534     ;***
                                    1-  535     ;functions called:
                                    1-  536     ;   _delay
                                    1-  537     ;   _gotoSleep
                                    1-  538     ;   _delay
                                    1-  539     ;   _gotoSleep
                                    1-  540     ;3 compiler assigned registers:
                                    1-  541     ;   STK00
                                    1-  542     ;   r0x1015
                                    1-  543     ;   r0x1016
                                    1-  544     ;; Starting pCode block
                                    1-  545     .segment "code"; module=main, function=_checkLVD
     0000                           1-  547     _checkLVD:
                                    1-  548     ; 0 exit points
                                    1-  549     	.line	264, "main.c"; 	PCON1 = C_LVD_2P4V | C_TMR0_En;
     0000 2109                      1-  550     	MOVIA	0x09
     0001 000r                      1-  551     	IOST	_PCON1
                                    1-  552     	.line	265, "main.c"; 	delay(80);
     0002 2150                      1-  553     	MOVIA	0x50
     0003 00rr                      1-  554     	MOVAR	STK00
     0004 2100                      1-  555     	MOVIA	0x00
     0005 2rrr                      1-  556     	LCALL	_delay
                                    1-  557     	.line	267, "main.c"; 	if((PCON1 >> 6)&1)
     0006 001r                      1-  558     	IOSTR	_PCON1
                                    1-  559     ;;1	MOVAR	r0x1015
     0007 2240                      1-  560     	ANDIA	0x40
     0008 0903                      1-  561     	BTRSS	STATUS,2
     0009 2101                      1-  562     	MOVIA	0x01
                                    1-  563     	BANKSEL	r0x1016
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1-  564     	MOVAR	r0x1016
     000C 01rr                      1-  565     	MOVR	r0x1016,W
     000D 0D03                      1-  566     	BTRSC	STATUS,2
     000E 3rrr                      1-  567     	LGOTO	_00255_DS_
                                    1-  568     	.line	269, "main.c"; 	lvdTime = 0;
                                    1-  569     	BANKSEL	_lvdTime
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 02rr                      1-  570     	CLRR	_lvdTime
     0011 3rrr                      1-  571     	LGOTO	_00257_DS_
     0012                           1-  572     _00255_DS_:
                                    1-  573     	.line	273, "main.c"; 	if(workStep && duty > 10)
                                    1-  574     	BANKSEL	_workStep
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 01rr                      1-  575     	MOVR	_workStep,W
     0014 0D03                      1-  576     	BTRSC	STATUS,2
     0015 3rrr                      1-  577     	LGOTO	_00250_DS_
                                    1-  578     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  579     ;;unsigned compare: left >= lit (0xB=11), size=1
     0016 210B                      1-  580     	MOVIA	0x0b
                                    1-  581     	BANKSEL	_duty
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 04rr                      1-  582     	SUBAR	_duty,W
     0019 0803                      1-  583     	BTRSS	STATUS,0
     001A 3rrr                      1-  584     	LGOTO	_00250_DS_
                                    1-  585     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=1, sign=0, same=1, offr=0
                                    1-  586     	.line	274, "main.c"; 	duty = duty/2;
     001B 1C03                      1-  587     	BCR	STATUS,0
     001C 13rr                      1-  588     	RRR	_duty,F
     001D                           1-  589     _00250_DS_:
                                    1-  590     	.line	275, "main.c"; 	if(++lvdTime >= 20)
                                    1-  591     	BANKSEL	_lvdTime
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 05rr                      1-  592     	INCR	_lvdTime,F
                                    1-  593     ;;unsigned compare: left < lit (0x14=20), size=1
     001F 2114                      1-  594     	MOVIA	0x14
     0020 04rr                      1-  595     	SUBAR	_lvdTime,W
     0021 0C03                      1-  596     	BTRSC	STATUS,0
                                    1-  597     	.line	276, "main.c"; 	gotoSleep();
     0022 2rrr                      1-  598     	LCALL	_gotoSleep
     0023                           1-  599     _00257_DS_:
                                    1-  600     	.line	278, "main.c"; 	}
                                    1-  601     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  603     ;***
                                    1-  604     ;  pBlock Stats: dbName = C
                                    1-  605     ;***
                                    1-  606     ;has an exit
                                    1-  607     ;functions called:
                                    1-  608     ;   _pwmOFF
                                    1-  609     ;   _pwmOFF
                                    1-  610     ;; Starting pCode block
                                    1-  611     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  613     _gotoSleep:
                                    1-  614     ; 2 exit points
                                    1-  615     	.line	242, "main.c"; 	count900s = 0;
                                    1-  616     	BANKSEL	_count900s
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  617     	CLRR	_count900s
     0002 02rr                      1-  618     	CLRR	(_count900s + 1)
                                    1-  619     	.line	243, "main.c"; 	sleepDelay = 0;
                                    1-  620     	BANKSEL	_sleepDelay
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 02rr                      1-  621     	CLRR	_sleepDelay
                                    1-  622     	.line	244, "main.c"; 	workStep = 0;
                                    1-  623     	BANKSEL	_workStep
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  624     	CLRR	_workStep
                                    1-  625     	.line	245, "main.c"; 	pwmOFF();
     0007 2rrr                      1-  626     	LCALL	_pwmOFF
                                    1-  627     	.line	246, "main.c"; 	LAOFF();
     0008 21E3                      1-  628     	MOVIA	0xe3
     0009 10rr                      1-  629     	ANDAR	_PORTA,F
                                    1-  630     	.line	247, "main.c"; 	LBOFF();
     000A 21F8                      1-  631     	MOVIA	0xf8
     000B 10rr                      1-  632     	ANDAR	_PORTB,F
                                    1-  633     	.line	248, "main.c"; 	PB5OFF();
     000C 1Err                      1-  634     	BCR	_PORTB,5
                                    1-  635     	.line	249, "main.c"; 	AWUCON = 0x01;
     000D 2101                      1-  636     	MOVIA	0x01
     000E 00rr                      1-  637     	MOVAR	_AWUCON
                                    1-  638     	.line	250, "main.c"; 	INTE =  C_INT_PABKey;
     000F 2102                      1-  639     	MOVIA	0x02
     0010 00rr                      1-  640     	MOVAR	_INTE
                                    1-  641     	.line	251, "main.c"; 	PCON =  C_LVR_En;	
     0011 2108                      1-  642     	MOVIA	0x08
     0012 00rr                      1-  643     	MOVAR	_PCON
                                    1-  644     	.line	252, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0013 02rr                      1-  645     	CLRR	_INTF
                                    1-  646     	.line	253, "main.c"; 	CLRWDT();
     0014 0002                      1-  647     	clrwdt
                                    1-  648     	.line	254, "main.c"; 	SLEEP();
     0015 0001                      1-  649     	sleep
                                    1-  650     	.line	255, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     0016 2101                      1-  651     	MOVIA	0x01
     0017 00rr                      1-  652     	MOVAR	_INTE
                                    1-  653     	.line	256, "main.c"; 	INTF = 0;
     0018 02rr                      1-  654     	CLRR	_INTF
                                    1-  655     	.line	258, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0019 21A8                      1-  656     	MOVIA	0xa8
     001A 00rr                      1-  657     	MOVAR	_PCON
                                    1-  658     	.line	259, "main.c"; 	}
                                    1-  659     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1-  660     ; exit point of _gotoSleep
                                    1-  662     ;***
                                    1-  663     ;  pBlock Stats: dbName = C
                                    1-  664     ;***
                                    1-  665     ;functions called:
                                    1-  666     ;   _keyRead
                                    1-  667     ;   _keyRead
                                    1-  668     ;1 compiler assigned register :
                                    1-  669     ;   r0x1018
                                    1-  670     ;; Starting pCode block
                                    1-  671     .segment "code"; module=main, function=_keyCtr
                                    1-  673     ;local variable name mapping:
     0000                           1-  675     _keyCtr:
                                    1-  676     ; 0 exit points
                                    1-  677     	.line	227, "main.c"; 	char kclick = keyRead(0x01 & (~PORTA));
     0000 07rr                      1-  678     	COMR	_PORTA,W
                                    1-  679     	BANKSEL	r0x1018
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  680     	MOVAR	r0x1018
     0003 2101                      1-  681     	MOVIA	0x01
     0004 10rr                      1-  682     	ANDAR	r0x1018,F
     0005 01rr                      1-  683     	MOVR	r0x1018,W
     0006 2rrr                      1-  684     	LCALL	_keyRead
                                    1-  685     	BANKSEL	r0x1018
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  686     	MOVAR	r0x1018
                                    1-  687     	.line	228, "main.c"; 	if(kclick == 1)
     0009 2401                      1-  688     	XORIA	0x01
     000A 0903                      1-  689     	BTRSS	STATUS,2
     000B 3rrr                      1-  690     	LGOTO	_00238_DS_
                                    1-  691     	.line	230, "main.c"; 	if(++workStep >= 7)
                                    1-  692     	BANKSEL	_workStep
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 05rr                      1-  693     	INCR	_workStep,F
                                    1-  694     ;;unsigned compare: left < lit (0x7=7), size=1
     000E 2107                      1-  695     	MOVIA	0x07
     000F 04rr                      1-  696     	SUBAR	_workStep,W
     0010 0803                      1-  697     	BTRSS	STATUS,0
     0011 3rrr                      1-  698     	LGOTO	_00002_DS_
                                    1-  699     	.line	231, "main.c"; 	workStep = 0;
     0012 02rr                      1-  700     	CLRR	_workStep
     0013 3rrr                      1-  701     	LGOTO	_00002_DS_
     0014                           1-  702     _00238_DS_:
                                    1-  703     	.line	233, "main.c"; 	else if(kclick == 2)
                                    1-  704     	BANKSEL	r0x1018
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1-  705     	MOVR	r0x1018,W
     0016 2402                      1-  706     	XORIA	0x02
     0017 0903                      1-  707     	BTRSS	STATUS,2
     0018 3rrr                      1-  708     	LGOTO	_00002_DS_
                                    1-  709     	.line	235, "main.c"; 	workStep = 0;
                                    1-  710     	BANKSEL	_workStep
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 02rr                      1-  711     	CLRR	_workStep
     001B                           1-  712     _00002_DS_:
                                    1-  713     	.line	238, "main.c"; 	}
                                    1-  714     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1-  716     ;***
                                    1-  717     ;  pBlock Stats: dbName = C
                                    1-  718     ;***
                                    1-  719     ;has an exit
                                    1-  720     ;1 compiler assigned register :
                                    1-  721     ;   r0x1017
                                    1-  722     ;; Starting pCode block
                                    1-  723     .segment "code"; module=main, function=_keyRead
                                    1-  725     ;local variable name mapping:
     0000                           1-  727     _keyRead:
                                    1-  728     ; 2 exit points
                                    1-  729     	.line	191, "main.c"; 	char keyRead(char KeyStatus)	
                                    1-  730     	BANKSEL	r0x1017
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  731     	MOVAR	r0x1017
                                    1-  732     	.line	193, "main.c"; 	if (KeyStatus)
     0002 01rr                      1-  733     	MOVR	r0x1017,W
     0003 0D03                      1-  734     	BTRSC	STATUS,2
     0004 3rrr                      1-  735     	LGOTO	_00207_DS_
                                    1-  736     	.line	195, "main.c"; 	if(++keyCount >= 200)
                                    1-  737     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  738     	INCR	_keyCount,F
     0007 0D03                      1-  739     	BTRSC	STATUS,2
     0008 05rr                      1-  740     	INCR	(_keyCount + 1),F
                                    1-  741     ;;unsigned compare: left < lit (0xC8=200), size=2
     0009 2100                      1-  742     	MOVIA	0x00
     000A 04rr                      1-  743     	SUBAR	(_keyCount + 1),W
     000B 0903                      1-  744     	BTRSS	STATUS,2
     000C 3rrr                      1-  745     	LGOTO	_00226_DS_
     000D 21C8                      1-  746     	MOVIA	0xc8
     000E 04rr                      1-  747     	SUBAR	_keyCount,W
     000F                           1-  748     _00226_DS_:
     000F 0803                      1-  749     	BTRSS	STATUS,0
     0010 3rrr                      1-  750     	LGOTO	_00208_DS_
                                    1-  751     	.line	197, "main.c"; 	keyCount = 200;
     0011 21C8                      1-  752     	MOVIA	0xc8
                                    1-  753     	BANKSEL	_keyCount
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 00rr                      1-  754     	MOVAR	_keyCount
     0014 02rr                      1-  755     	CLRR	(_keyCount + 1)
                                    1-  756     	.line	198, "main.c"; 	if(!longPressFlag)
                                    1-  757     	BANKSEL	_longPressFlag
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1-  758     	MOVR	_longPressFlag,W
     0017 0903                      1-  759     	BTRSS	STATUS,2
     0018 3rrr                      1-  760     	LGOTO	_00208_DS_
                                    1-  761     	.line	200, "main.c"; 	longPressFlag = 1;
     0019 2101                      1-  762     	MOVIA	0x01
     001A 00rr                      1-  763     	MOVAR	_longPressFlag
                                    1-  764     	.line	201, "main.c"; 	return 2;
     001B 2102                      1-  765     	MOVIA	0x02
     001C 3rrr                      1-  766     	LGOTO	_00209_DS_
                                    1-  767     ;;unsigned compare: left < lit (0xC8=200), size=2
     001D                           1-  768     _00207_DS_:
                                    1-  769     	.line	208, "main.c"; 	if(keyCount >= 200)
     001D 2100                      1-  770     	MOVIA	0x00
                                    1-  771     	BANKSEL	_keyCount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 04rr                      1-  772     	SUBAR	(_keyCount + 1),W
     0020 0903                      1-  773     	BTRSS	STATUS,2
     0021 3rrr                      1-  774     	LGOTO	_00227_DS_
     0022 21C8                      1-  775     	MOVIA	0xc8
     0023 04rr                      1-  776     	SUBAR	_keyCount,W
     0024                           1-  777     _00227_DS_:
     0024 0803                      1-  778     	BTRSS	STATUS,0
     0025 3rrr                      1-  779     	LGOTO	_00204_DS_
                                    1-  780     	.line	210, "main.c"; 	keyCount = 0;
                                    1-  781     	BANKSEL	_keyCount
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 02rr                      1-  782     	CLRR	_keyCount
     0028 02rr                      1-  783     	CLRR	(_keyCount + 1)
                                    1-  784     	.line	211, "main.c"; 	longPressFlag = 0;
                                    1-  785     	BANKSEL	_longPressFlag
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 02rr                      1-  786     	CLRR	_longPressFlag
                                    1-  787     	.line	212, "main.c"; 	return	0;
     002B 2100                      1-  788     	MOVIA	0x00
     002C 3rrr                      1-  789     	LGOTO	_00209_DS_
                                    1-  790     ;;unsigned compare: left < lit (0x8=8), size=2
     002D                           1-  791     _00204_DS_:
                                    1-  792     	.line	214, "main.c"; 	else if(keyCount >= 8)
     002D 2100                      1-  793     	MOVIA	0x00
                                    1-  794     	BANKSEL	_keyCount
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 04rr                      1-  795     	SUBAR	(_keyCount + 1),W
     0030 0903                      1-  796     	BTRSS	STATUS,2
     0031 3rrr                      1-  797     	LGOTO	_00228_DS_
     0032 2108                      1-  798     	MOVIA	0x08
     0033 04rr                      1-  799     	SUBAR	_keyCount,W
     0034                           1-  800     _00228_DS_:
     0034 0803                      1-  801     	BTRSS	STATUS,0
     0035 3rrr                      1-  802     	LGOTO	_00205_DS_
                                    1-  803     	.line	216, "main.c"; 	keyCount = 0;
                                    1-  804     	BANKSEL	_keyCount
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 02rr                      1-  805     	CLRR	_keyCount
     0038 02rr                      1-  806     	CLRR	(_keyCount + 1)
                                    1-  807     	.line	217, "main.c"; 	return	1;
     0039 2101                      1-  808     	MOVIA	0x01
     003A 3rrr                      1-  809     	LGOTO	_00209_DS_
     003B                           1-  810     _00205_DS_:
                                    1-  811     	.line	219, "main.c"; 	keyCount = 0;
                                    1-  812     	BANKSEL	_keyCount
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 02rr                      1-  813     	CLRR	_keyCount
     003D 02rr                      1-  814     	CLRR	(_keyCount + 1)
     003E                           1-  815     _00208_DS_:
                                    1-  816     	.line	221, "main.c"; 	return 0;
     003E 2100                      1-  817     	MOVIA	0x00
     003F                           1-  818     _00209_DS_:
                                    1-  819     	.line	222, "main.c"; 	}
                                    1-  820     	RETURN	
     003F 0010                      3-   26 m1      ret
                                    1-  821     ; exit point of _keyRead
                                    1-  823     ;***
                                    1-  824     ;  pBlock Stats: dbName = C
                                    1-  825     ;***
                                    1-  826     ;has an exit
                                    1-  827     ;; Starting pCode block
                                    1-  828     .segment "code"; module=main, function=_pwmOFF
     0000                           1-  830     _pwmOFF:
                                    1-  831     ; 2 exit points
                                    1-  832     	.line	186, "main.c"; 	PWM4DUTY = 0;
     0000 0200                      1-  833     	CLRA	
     0001 00rr                      1-  834     	SFUN	_PWM4DUTY
                                    1-  835     	.line	187, "main.c"; 	P4CR1 = 0x00;
     0002 00rr                      1-  836     	SFUN	_P4CR1
                                    1-  837     	.line	188, "main.c"; 	T3CR1 = 0x00;
     0003 00rr                      1-  838     	SFUN	_T3CR1
                                    1-  839     	.line	189, "main.c"; 	}
                                    1-  840     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1-  841     ; exit point of _pwmOFF
                                    1-  843     ;***
                                    1-  844     ;  pBlock Stats: dbName = C
                                    1-  845     ;***
                                    1-  846     ;has an exit
                                    1-  847     ;1 compiler assigned register :
                                    1-  848     ;   r0x1019
                                    1-  849     ;; Starting pCode block
                                    1-  850     .segment "code"; module=main, function=_pwmOn
     0000                           1-  852     _pwmOn:
                                    1-  853     ; 2 exit points
                                    1-  854     	.line	173, "main.c"; 	PWM4DUTY = duty;				// 		频率为40K
                                    1-  855     	BANKSEL	_duty
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  856     	MOVR	_duty,W
     0002 00rr                      1-  857     	SFUN	_PWM4DUTY
                                    1-  858     	.line	174, "main.c"; 	if(P4CR1 & 0x80)
     0003 00rr                      1-  859     	SFUNR	_P4CR1
                                    1-  860     	BANKSEL	r0x1019
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 00rr                      1-  861     	MOVAR	r0x1019
     0006 0Frr                      1-  862     	BTRSC	r0x1019,7
                                    1-  863     	.line	175, "main.c"; 	return;
     0007 3rrr                      1-  864     	LGOTO	_00188_DS_
                                    1-  865     	.line	176, "main.c"; 	TM34RH = 0x00;
     0008 02rr                      1-  866     	CLRR	_TM34RH
                                    1-  867     	.line	177, "main.c"; 	TMR3 = 50;
     0009 2132                      1-  868     	MOVIA	0x32
     000A 00rr                      1-  869     	SFUN	_TMR3
                                    1-  870     	.line	178, "main.c"; 	T3CR2 = 0x00;
     000B 0200                      1-  871     	CLRA	
     000C 00rr                      1-  872     	SFUN	_T3CR2
                                    1-  873     	.line	179, "main.c"; 	T3CR1 =  C_TMR3_Reload | C_TMR3_En;
     000D 2103                      1-  874     	MOVIA	0x03
     000E 00rr                      1-  875     	SFUN	_T3CR1
                                    1-  876     	.line	180, "main.c"; 	P4CR1 = C_PWM4_En | C_TMR3_Reload | C_TMR3_En;
     000F 2183                      1-  877     	MOVIA	0x83
     0010 00rr                      1-  878     	SFUN	_P4CR1
     0011                           1-  879     _00188_DS_:
                                    1-  880     	.line	181, "main.c"; 	}
                                    1-  881     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  882     ; exit point of _pwmOn
                                    1-  884     ;***
                                    1-  885     ;  pBlock Stats: dbName = C
                                    1-  886     ;***
                                    1-  887     ;functions called:
                                    1-  888     ;   _pwmOFF
                                    1-  889     ;   _gotoSleep
                                    1-  890     ;   _pwmOn
                                    1-  891     ;   _pwmOn
                                    1-  892     ;   _pwmOn
                                    1-  893     ;   _pwmOn
                                    1-  894     ;   _pwmOn
                                    1-  895     ;   _pwmOn
                                    1-  896     ;   _gotoSleep
                                    1-  897     ;   _pwmOFF
                                    1-  898     ;   _gotoSleep
                                    1-  899     ;   _pwmOn
                                    1-  900     ;   _pwmOn
                                    1-  901     ;   _pwmOn
                                    1-  902     ;   _pwmOn
                                    1-  903     ;   _pwmOn
                                    1-  904     ;   _pwmOn
                                    1-  905     ;   _gotoSleep
                                    1-  906     ;; Starting pCode block
                                    1-  907     .segment "code"; module=main, function=_workCtr
     0000                           1-  909     _workCtr:
                                    1-  910     ; 0 exit points
                                    1-  911     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  912     ;;unsigned compare: left >= lit (0x7=7), size=1
                                    1-  913     	.line	113, "main.c"; 	switch(workStep)
     0000 2107                      1-  914     	MOVIA	0x07
                                    1-  915     	BANKSEL	_workStep
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 04rr                      1-  916     	SUBAR	_workStep,W
     0003 0C03                      1-  917     	BTRSC	STATUS,0
     0004 3rrr                      1-  918     	LGOTO	_00155_DS_
     0005 21rr                      1-  919     	MOVIA	((_00179_DS_ >> 8) & 0xff)
     0006 008A                      1-  920     	MOVAR	PCHBUF
     0007 01rr                      1-  921     	MOVR	_workStep,W
     0008 25rr                      1-  922     	ADDIA	_00179_DS_
     0009 0C03                      1-  923     	BTRSC	STATUS,0
     000A 058A                      1-  924     	INCR	PCHBUF,F
     000B 0082                      1-  925     	MOVAR	PCL
     000C                           1-  926     _00179_DS_:
     000C 3rrr                      1-  927     	LGOTO	_00146_DS_
     000D 3rrr                      1-  928     	LGOTO	_00149_DS_
     000E 3rrr                      1-  929     	LGOTO	_00150_DS_
     000F 3rrr                      1-  930     	LGOTO	_00151_DS_
     0010 3rrr                      1-  931     	LGOTO	_00152_DS_
     0011 3rrr                      1-  932     	LGOTO	_00153_DS_
     0012 3rrr                      1-  933     	LGOTO	_00154_DS_
     0013                           1-  934     _00146_DS_:
                                    1-  935     	.line	116, "main.c"; 	duty = 0;
                                    1-  936     	BANKSEL	_duty
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 02rr                      1-  937     	CLRR	_duty
                                    1-  938     	.line	117, "main.c"; 	pwmOFF();
     0015 2rrr                      1-  939     	LCALL	_pwmOFF
                                    1-  940     	.line	118, "main.c"; 	LAOFF();
     0016 21E3                      1-  941     	MOVIA	0xe3
     0017 10rr                      1-  942     	ANDAR	_PORTA,F
                                    1-  943     	.line	119, "main.c"; 	LBOFF();
     0018 21F8                      1-  944     	MOVIA	0xf8
     0019 10rr                      1-  945     	ANDAR	_PORTB,F
                                    1-  946     	.line	120, "main.c"; 	PB5OFF();
     001A 1Err                      1-  947     	BCR	_PORTB,5
                                    1-  948     	.line	121, "main.c"; 	if(keyCount == 0)
                                    1-  949     	BANKSEL	_keyCount
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1-  950     	MOVR	_keyCount,W
     001D 11rr                      1-  951     	IORAR	(_keyCount + 1),W
     001E 0903                      1-  952     	BTRSS	STATUS,2
     001F 3rrr                      1-  953     	LGOTO	_00155_DS_
                                    1-  954     	.line	122, "main.c"; 	gotoSleep();
     0020 2rrr                      1-  955     	LCALL	_gotoSleep
                                    1-  956     	.line	123, "main.c"; 	break;
     0021 3rrr                      1-  957     	LGOTO	_00155_DS_
     0022                           1-  958     _00149_DS_:
                                    1-  959     	.line	125, "main.c"; 	maxDuty = 37;
     0022 2125                      1-  960     	MOVIA	0x25
                                    1-  961     	BANKSEL	_maxDuty
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1-  962     	MOVAR	_maxDuty
                                    1-  963     	.line	126, "main.c"; 	pwmOn();
     0025 2rrr                      1-  964     	LCALL	_pwmOn
                                    1-  965     	.line	127, "main.c"; 	L1ON();
     0026 19rr                      1-  966     	BSR	_PORTB,2
                                    1-  967     	.line	128, "main.c"; 	break;
     0027 3rrr                      1-  968     	LGOTO	_00155_DS_
     0028                           1-  969     _00150_DS_:
                                    1-  970     	.line	130, "main.c"; 	maxDuty = 40;
     0028 2128                      1-  971     	MOVIA	0x28
                                    1-  972     	BANKSEL	_maxDuty
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 00rr                      1-  973     	MOVAR	_maxDuty
                                    1-  974     	.line	131, "main.c"; 	pwmOn();
     002B 2rrr                      1-  975     	LCALL	_pwmOn
                                    1-  976     	.line	132, "main.c"; 	L2ON();
     002C 18rr                      1-  977     	BSR	_PORTB,1
                                    1-  978     	.line	133, "main.c"; 	break;
     002D 3rrr                      1-  979     	LGOTO	_00155_DS_
     002E                           1-  980     _00151_DS_:
                                    1-  981     	.line	135, "main.c"; 	maxDuty = 42;
     002E 212A                      1-  982     	MOVIA	0x2a
                                    1-  983     	BANKSEL	_maxDuty
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 00rr                      1-  984     	MOVAR	_maxDuty
                                    1-  985     	.line	136, "main.c"; 	pwmOn();
     0031 2rrr                      1-  986     	LCALL	_pwmOn
                                    1-  987     	.line	137, "main.c"; 	L3ON();
     0032 18rr                      1-  988     	BSR	_PORTB,0
                                    1-  989     	.line	138, "main.c"; 	break;
     0033 3rrr                      1-  990     	LGOTO	_00155_DS_
     0034                           1-  991     _00152_DS_:
                                    1-  992     	.line	140, "main.c"; 	maxDuty = 45;
     0034 212D                      1-  993     	MOVIA	0x2d
                                    1-  994     	BANKSEL	_maxDuty
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 00rr                      1-  995     	MOVAR	_maxDuty
                                    1-  996     	.line	141, "main.c"; 	pwmOn();
     0037 2rrr                      1-  997     	LCALL	_pwmOn
                                    1-  998     	.line	142, "main.c"; 	L4ON();
     0038 19rr                      1-  999     	BSR	_PORTA,2
                                    1- 1000     	.line	143, "main.c"; 	break;
     0039 3rrr                      1- 1001     	LGOTO	_00155_DS_
     003A                           1- 1002     _00153_DS_:
                                    1- 1003     	.line	145, "main.c"; 	maxDuty = 47;
     003A 212F                      1- 1004     	MOVIA	0x2f
                                    1- 1005     	BANKSEL	_maxDuty
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 00rr                      1- 1006     	MOVAR	_maxDuty
                                    1- 1007     	.line	146, "main.c"; 	pwmOn();
     003D 2rrr                      1- 1008     	LCALL	_pwmOn
                                    1- 1009     	.line	147, "main.c"; 	L5ON();
     003E 19rr                      1- 1010     	BSR	_PORTA,3
                                    1- 1011     	.line	148, "main.c"; 	break;
     003F 3rrr                      1- 1012     	LGOTO	_00155_DS_
     0040                           1- 1013     _00154_DS_:
                                    1- 1014     	.line	150, "main.c"; 	maxDuty = 49;
     0040 2131                      1- 1015     	MOVIA	0x31
                                    1- 1016     	BANKSEL	_maxDuty
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 00rr                      1- 1017     	MOVAR	_maxDuty
                                    1- 1018     	.line	151, "main.c"; 	pwmOn();
     0043 2rrr                      1- 1019     	LCALL	_pwmOn
                                    1- 1020     	.line	152, "main.c"; 	L6ON();
     0044 1Arr                      1- 1021     	BSR	_PORTA,4
     0045                           1- 1022     _00155_DS_:
                                    1- 1023     	.line	162, "main.c"; 	if(duty < maxDuty)
                                    1- 1024     	BANKSEL	_maxDuty
     0045 rrrr                      3-   71 m1      .banksel ram_address
     0046 01rr                      1- 1025     	MOVR	_maxDuty,W
                                    1- 1026     	BANKSEL	_duty
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 04rr                      1- 1027     	SUBAR	_duty,W
     0049 0803                      1- 1028     	BTRSS	STATUS,0
                                    1- 1029     	.line	163, "main.c"; 	duty++;
     004A 05rr                      1- 1030     	INCR	_duty,F
                                    1- 1031     	.line	165, "main.c"; 	if(count900s >= 900 && keyCount == 0)
     004B 2103                      1- 1032     	MOVIA	0x03
                                    1- 1033     	BANKSEL	_count900s
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 04rr                      1- 1034     	SUBAR	(_count900s + 1),W
     004E 0903                      1- 1035     	BTRSS	STATUS,2
     004F 3rrr                      1- 1036     	LGOTO	_00181_DS_
     0050 2184                      1- 1037     	MOVIA	0x84
     0051 04rr                      1- 1038     	SUBAR	_count900s,W
     0052                           1- 1039     _00181_DS_:
     0052 0803                      1- 1040     	BTRSS	STATUS,0
     0053 3rrr                      1- 1041     	LGOTO	_00161_DS_
                                    1- 1042     	BANKSEL	_keyCount
     0054 rrrr                      3-   71 m1      .banksel ram_address
     0055 01rr                      1- 1043     	MOVR	_keyCount,W
     0056 11rr                      1- 1044     	IORAR	(_keyCount + 1),W
     0057 0D03                      1- 1045     	BTRSC	STATUS,2
                                    1- 1046     	.line	166, "main.c"; 	gotoSleep();
     0058 2rrr                      1- 1047     	LCALL	_gotoSleep
     0059                           1- 1048     _00161_DS_:
                                    1- 1049     	.line	167, "main.c"; 	}
                                    1- 1050     	RETURN	
     0059 0010                      3-   26 m1      ret
                                    1- 1053     ;	code size estimation:
                                    1- 1054     ;	  344+   61 =   405 instructions (  932 byte)
                                    1- 1056     	end
                                    1- 1056     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00800543
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000001B
_00002_DS_              Label    0000001B
_00112_DS_              Label    00000035
_00114_DS_              Label    00000039
_00133_DS_              Label    0000002C
_00141_DS_              Label    00000019
_00146_DS_              Label    00000013
_00149_DS_              Label    00000022
_00150_DS_              Label    00000028
_00151_DS_              Label    0000002E
_00152_DS_              Label    00000034
_00153_DS_              Label    0000003A
_00154_DS_              Label    00000040
_00155_DS_              Label    00000045
_00161_DS_              Label    00000059
_00179_DS_              Label    0000000C
_00181_DS_              Label    00000052
_00188_DS_              Label    00000011
_00204_DS_              Label    0000002D
_00205_DS_              Label    0000003B
_00207_DS_              Label    0000001D
_00208_DS_              Label    0000003E
_00209_DS_              Label    0000003F
_00226_DS_              Label    0000000F
_00227_DS_              Label    00000024
_00228_DS_              Label    00000034
_00238_DS_              Label    00000014
_00250_DS_              Label    0000001D
_00255_DS_              Label    00000012
_00257_DS_              Label    00000023
_00264_DS_              Label    00000009
_00266_DS_              Label    0000001C
_00275_DS_              Label    00000013
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_checkLVD               Label    00000000
_CMPCR                  Label    00000000
_count1s                Label    00000000
_count4Hour             Label    00000000
_count6s                Label    00000000
_count900s              Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_longPressFlag          Label    00000000
_lvdTime                Label    00000000
_main                   Label    00000000
_maxDuty                Label    00000000
_OSCCR                  Label    00000000
_P2CR1                  Label    00000000
_P4CR1                  Label    00000000
_P5CR1                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_PWM4DUTY               Label    00000000
_PWM5DUTY               Label    00000000
_PWM5RH                 Label    00000000
_pwmOFF                 Label    00000000
_pwmOn                  Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sleepDelay             Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM34RH                 Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    0000004A
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1011                 Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1014                 Label    00000000
r0x1016                 Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a054d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A054D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
