
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B061D,c=on
                                    1-    9     	#include "ny8b061d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_IO_Init
                                    1-   15     	extern	_ledCtr
                                    1-   16     	extern	_workCtr
                                    1-   17     	extern	_fgCtr
                                    1-   18     	extern	_LedCtr2
                                    1-   19     	extern	_checkInAD
                                    1-   20     	extern	_PORTAbits
                                    1-   21     	extern	_PORTBbits
                                    1-   22     	extern	_PCONbits
                                    1-   23     	extern	_BWUCONbits
                                    1-   24     	extern	_ABPLCONbits
                                    1-   25     	extern	_BPHCONbits
                                    1-   26     	extern	_INTEbits
                                    1-   27     	extern	_INTFbits
                                    1-   28     	extern	_ADMDbits
                                    1-   29     	extern	_ADRbits
                                    1-   30     	extern	_ADVREFHbits
                                    1-   31     	extern	_ADCRbits
                                    1-   32     	extern	_AWUCONbits
                                    1-   33     	extern	_PACONbits
                                    1-   34     	extern	_INTEDGbits
                                    1-   35     	extern	_RFCbits
                                    1-   36     	extern	_INTE2bits
                                    1-   37     	extern	_INDF
                                    1-   38     	extern	_TMR0
                                    1-   39     	extern	_PCL
                                    1-   40     	extern	_STATUS
                                    1-   41     	extern	_FSR
                                    1-   42     	extern	_PORTA
                                    1-   43     	extern	_PORTB
                                    1-   44     	extern	_PCON
                                    1-   45     	extern	_BWUCON
                                    1-   46     	extern	_PCHBUF
                                    1-   47     	extern	_ABPLCON
                                    1-   48     	extern	_BPHCON
                                    1-   49     	extern	_INTE
                                    1-   50     	extern	_INTF
                                    1-   51     	extern	_ADMD
                                    1-   52     	extern	_ADR
                                    1-   53     	extern	_ADD
                                    1-   54     	extern	_ADVREFH
                                    1-   55     	extern	_ADCR
                                    1-   56     	extern	_AWUCON
                                    1-   57     	extern	_PACON
                                    1-   58     	extern	_INTEDG
                                    1-   59     	extern	_TMRH
                                    1-   60     	extern	_RFC
                                    1-   61     	extern	_TM3RH
                                    1-   62     	extern	_INTE2
                                    1-   63     	extern	_TMR1
                                    1-   64     	extern	_T1CR1
                                    1-   65     	extern	_T1CR2
                                    1-   66     	extern	_PWM1DUTY
                                    1-   67     	extern	_PS1CV
                                    1-   68     	extern	_BZ1CR
                                    1-   69     	extern	_IRCR
                                    1-   70     	extern	_TBHP
                                    1-   71     	extern	_TBHD
                                    1-   72     	extern	_TMR2
                                    1-   73     	extern	_T2CR1
                                    1-   74     	extern	_T2CR2
                                    1-   75     	extern	_PWM2DUTY
                                    1-   76     	extern	_PS2CV
                                    1-   77     	extern	_BZ2CR
                                    1-   78     	extern	_OSCCR
                                    1-   79     	extern	_TMR3
                                    1-   80     	extern	_T3CR1
                                    1-   81     	extern	_T3CR2
                                    1-   82     	extern	_PWM3DUTY
                                    1-   83     	extern	_PS3CV
                                    1-   84     	extern	_BZ3CR
                                    1-   85     	extern	_IOSTA
                                    1-   86     	extern	_IOSTB
                                    1-   87     	extern	_APHCON
                                    1-   88     	extern	_PS0CV
                                    1-   89     	extern	_BODCON
                                    1-   90     	extern	_PCON1
                                    1-   91     	extern	_T0MD
                                    1-   92     	extern	___sdcc_saved_fsr
                                    1-   93     	extern	___sdcc_saved_stk00
                                    1-   94     	extern	___sdcc_saved_stk01
                                    1-   95     	extern	__mulchar
                                    1-   96     	extern	__nyc_ny8_startup
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ; global declarations
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     	extern	_F_wait_eoc
                                    1-  101     	extern	_F_AIN2_Convert
                                    1-  102     	extern	_F_AIN3_Convert
                                    1-  103     	extern	_F_AIN4_Convert
                                    1-  104     	extern	_checkOutA
                                    1-  105     	extern	_checkChrgV
                                    1-  106     	extern	_checkBatAD
                                    1-  107     	extern	_initAD
                                    1-  108     	extern	_delay
                                    1-  109     	extern	_chrgCtr
                                    1-  110     	extern	_keyRead
                                    1-  111     	extern	_gotoSleep
                                    1-  112     	extern	_pwmStop
                                    1-  113     	extern	_pwmInit
                                    1-  114     	extern	_pwm1Stop
                                    1-  115     	extern	_pwm1Init
                                    1-  116     	extern	_LED6ON
                                    1-  117     	extern	_LED5ON
                                    1-  118     	extern	_LED4ON
                                    1-  119     	extern	_LED3ON
                                    1-  120     	extern	_LED2ON
                                    1-  121     	extern	_LED1ON
                                    1-  122     	extern	_LedInput
                                    1-  123     	extern	_ledShow
                                    1-  124     	extern	_initSys
                                    1-  125     	extern	_powerOff
                                    1-  126     	extern	_keyCtr
                                    1-  127     	extern	_isr
                                    1-  128     	extern	_main
                                    1-  129     	extern	_Status
                                    1-  130     	extern	_duty
                                    1-  131     	extern	_intCount
                                    1-  132     	extern	_count500ms
                                    1-  133     	extern	_keyCount
                                    1-  134     	extern	_workStep
                                    1-  135     	extern	_ledStep
                                    1-  136     	extern	_fgCount
                                    1-  137     	extern	_fgPRD
                                    1-  138     	extern	_preFG
                                    1-  139     	extern	_maxDuty
                                    1-  140     	extern	_pwStep
                                    1-  141     	extern	_R_AIN4_DATA
                                    1-  142     	extern	_R_AIN4_DATA_LB
                                    1-  143     	extern	_R_AIN3_DATA
                                    1-  144     	extern	_R_AIN3_DATA_LB
                                    1-  145     	extern	_R_AIN2_DATA
                                    1-  146     	extern	_R_AIN2_DATA_LB
                                    1-  147     	extern	_chrgTime
                                    1-  148     	extern	_startStep
                                    1-  149     	extern	_sleepTime
                                    1-  150     	extern	_count200ms
                                    1-  151     	extern	_count1s
                                    1-  152     	extern	_count900s
                                    1-  153     	extern	_lowBatTime
                                    1-  154     	extern	_ledTime
                                    1-  155     	extern	_overCount
                                    1-  156     	extern	_chrgCount
                                    1-  157     	extern	_ledLightTime
                                    1-  158     	extern	_currentDuty
                                    1-  159     	extern	_fullCount
                                    1-  160     	extern	_shanshuoTime
                                    1-  161     	extern	_firstTime
                                    1-  162     	extern	_tempDuty
                                    1-  163     	extern	_lowCount
                                    1-  164     	extern	_debug
                                    1-  166     	extern PSAVE
                                    1-  167     	extern SSAVE
                                    1-  168     	extern WSAVE
                                    1-  169     	extern STK02
                                    1-  170     	extern STK01
                                    1-  171     	extern STK00
                                    1-  173     .segment "uninit", 0x20000020
 20000020                           1-  174     PSAVE:
                                    1-  175     	.res 1
 20000021                           1-  176     SSAVE:
                                    1-  177     	.res 1
 20000022                           1-  178     WSAVE:
                                    1-  179     	.res 1
 20000023                           1-  180     STK02:
                                    1-  181     	.res 1
 20000024                           1-  182     STK01:
                                    1-  183     	.res 1
 20000025                           1-  184     STK00:
                                    1-  185     	.res 1
                                    1-  187     ;--------------------------------------------------------
                                    1-  188     ; global definitions
                                    1-  189     ;--------------------------------------------------------
                                    1-  190     .segment "uninit"
     0000                           1-  191     _R_AIN4_DATA:
                                    1-  192     	.res	2
                                    1-  195     .segment "uninit"
     0000                           1-  196     _R_AIN4_DATA_LB:
                                    1-  197     	.res	1
                                    1-  200     .segment "uninit"
     0000                           1-  201     _R_AIN3_DATA:
                                    1-  202     	.res	2
                                    1-  205     .segment "uninit"
     0000                           1-  206     _R_AIN3_DATA_LB:
                                    1-  207     	.res	1
                                    1-  210     .segment "uninit"
     0000                           1-  211     _R_AIN2_DATA:
                                    1-  212     	.res	2
                                    1-  215     .segment "uninit"
     0000                           1-  216     _R_AIN2_DATA_LB:
                                    1-  217     	.res	1
                                    1-  220     ;--------------------------------------------------------
                                    1-  221     ; absolute symbol definitions
                                    1-  222     ;--------------------------------------------------------
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     ; compiler-defined variables
                                    1-  225     ;--------------------------------------------------------
                                    1-  226     .segment "uninit"
     0000                           1-  227     r0x1055:
                                    1-  228     	.res	1
                                    1-  229     .segment "uninit"
     0000                           1-  230     r0x104C:
                                    1-  231     	.res	1
                                    1-  232     .segment "uninit"
     0000                           1-  233     r0x1054:
                                    1-  234     	.res	1
                                    1-  235     .segment "uninit"
     0000                           1-  236     r0x1053:
                                    1-  237     	.res	1
                                    1-  238     .segment "uninit"
     0000                           1-  239     r0x1052:
                                    1-  240     	.res	1
                                    1-  241     .segment "uninit"
     0000                           1-  242     r0x1051:
                                    1-  243     	.res	1
                                    1-  244     .segment "uninit"
     0000                           1-  245     r0x1050:
                                    1-  246     	.res	1
                                    1-  247     .segment "uninit"
     0000                           1-  248     r0x104F:
                                    1-  249     	.res	1
                                    1-  250     .segment "uninit"
     0000                           1-  251     r0x1049:
                                    1-  252     	.res	1
                                    1-  253     .segment "uninit"
     0000                           1-  254     r0x104E:
                                    1-  255     	.res	1
                                    1-  256     .segment "uninit"
     0000                           1-  257     r0x104D:
                                    1-  258     	.res	1
                                    1-  259     .segment "uninit"
     0000                           1-  260     r0x104B:
                                    1-  261     	.res	1
                                    1-  262     .segment "uninit"
     0000                           1-  263     r0x104A:
                                    1-  264     	.res	1
                                    1-  265     .segment "uninit"
     0000                           1-  266     r0x1029:
                                    1-  267     	.res	1
                                    1-  268     .segment "uninit"
     0000                           1-  269     r0x102A:
                                    1-  270     	.res	1
                                    1-  271     .segment "uninit"
     0000                           1-  272     r0x1047:
                                    1-  273     	.res	1
                                    1-  274     .segment "uninit"
     0000                           1-  275     r0x1048:
                                    1-  276     	.res	1
                                    1-  277     .segment "uninit"
     0000                           1-  278     r0x1043:
                                    1-  279     	.res	1
                                    1-  280     .segment "uninit"
     0000                           1-  281     r0x1044:
                                    1-  282     	.res	1
                                    1-  283     .segment "uninit"
     0000                           1-  284     r0x103D:
                                    1-  285     	.res	1
                                    1-  286     .segment "uninit"
     0000                           1-  287     r0x1040:
                                    1-  288     	.res	1
                                    1-  289     .segment "uninit"
     0000                           1-  290     r0x1037:
                                    1-  291     	.res	1
                                    1-  292     .segment "uninit"
     0000                           1-  293     r0x1038:
                                    1-  294     	.res	1
                                    1-  295     .segment "uninit"
     0000                           1-  296     r0x1039:
                                    1-  297     	.res	1
                                    1-  298     .segment "uninit"
     0000                           1-  299     r0x103C:
                                    1-  300     	.res	1
                                    1-  301     .segment "uninit"
     0000                           1-  302     r0x1031:
                                    1-  303     	.res	1
                                    1-  304     .segment "uninit"
     0000                           1-  305     r0x1032:
                                    1-  306     	.res	1
                                    1-  307     .segment "uninit"
     0000                           1-  308     r0x1033:
                                    1-  309     	.res	1
                                    1-  310     .segment "uninit"
     0000                           1-  311     r0x1036:
                                    1-  312     	.res	1
                                    1-  313     .segment "uninit"
     0000                           1-  314     r0x102B:
                                    1-  315     	.res	1
                                    1-  316     .segment "uninit"
     0000                           1-  317     r0x102C:
                                    1-  318     	.res	1
                                    1-  319     .segment "uninit"
     0000                           1-  320     r0x102D:
                                    1-  321     	.res	1
                                    1-  322     .segment "uninit"
     0000                           1-  323     r0x1030:
                                    1-  324     	.res	1
                                    1-  325     ;--------------------------------------------------------
                                    1-  326     ; initialized data
                                    1-  327     ;--------------------------------------------------------
                                    1-  329     .segment "idata"
     0000                           1-  330     _Status:
     0000 0000                      1-  331     	dw	0x00
                                    1-  335     .segment "idata"
     0000                           1-  336     _duty:
     0000 0000 0000                 1-  337     	dw	0x00, 0x00
                                    1-  341     .segment "idata"
     0000                           1-  342     _intCount:
     0000 0000                      1-  343     	dw	0x00
                                    1-  347     .segment "idata"
     0000                           1-  348     _count500ms:
     0000 0000                      1-  349     	dw	0x00
                                    1-  353     .segment "idata"
     0000                           1-  354     _keyCount:
     0000 0000                      1-  355     	dw	0x00
                                    1-  359     .segment "idata"
     0000                           1-  360     _workStep:
     0000 0000                      1-  361     	dw	0x00
                                    1-  365     .segment "idata"
     0000                           1-  366     _ledStep:
     0000 0000                      1-  367     	dw	0x00
                                    1-  371     .segment "idata"
     0000                           1-  372     _fgCount:
     0000 0000 0000                 1-  373     	dw	0x00, 0x00
                                    1-  377     .segment "idata"
     0000                           1-  378     _fgPRD:
     0000 0000 0000                 1-  379     	dw	0x00, 0x00
                                    1-  383     .segment "idata"
     0000                           1-  384     _preFG:
     0000 0000                      1-  385     	dw	0x00
                                    1-  389     .segment "idata"
     0000                           1-  390     _maxDuty:
     0000 0000                      1-  391     	dw	0x00
                                    1-  395     .segment "idata"
     0000                           1-  396     _pwStep:
     0000 0000                      1-  397     	dw	0x00
                                    1-  401     .segment "idata"
     0000                           1-  402     _chrgTime:
     0000 0000 0000                 1-  403     	dw	0x00, 0x00
                                    1-  407     .segment "idata"
     0000                           1-  408     _startStep:
     0000 0000                      1-  409     	dw	0x00
                                    1-  413     .segment "idata"
     0000                           1-  414     _sleepTime:
     0000 0000 0000                 1-  415     	dw	0x00, 0x00
                                    1-  419     .segment "idata"
     0000                           1-  420     _count200ms:
     0000 0000                      1-  421     	dw	0x00
                                    1-  425     .segment "idata"
     0000                           1-  426     _count1s:
     0000 0000                      1-  427     	dw	0x00
                                    1-  431     .segment "idata"
     0000                           1-  432     _count900s:
     0000 0000 0000                 1-  433     	dw	0x00, 0x00
                                    1-  437     .segment "idata"
     0000                           1-  438     _lowBatTime:
     0000 0000                      1-  439     	dw	0x00
                                    1-  443     .segment "idata"
     0000                           1-  444     _ledTime:
     0000 0000                      1-  445     	dw	0x00
                                    1-  449     .segment "idata"
     0000                           1-  450     _overCount:
     0000 0000                      1-  451     	dw	0x00
                                    1-  455     .segment "idata"
     0000                           1-  456     _chrgCount:
     0000 0000                      1-  457     	dw	0x00
                                    1-  461     .segment "idata"
     0000                           1-  462     _ledLightTime:
     0000 0000                      1-  463     	dw	0x00
                                    1-  467     .segment "idata"
     0000                           1-  468     _currentDuty:
     0000 0000                      1-  469     	dw	0x00
                                    1-  473     .segment "idata"
     0000                           1-  474     _fullCount:
     0000 0000                      1-  475     	dw	0x00
                                    1-  479     .segment "idata"
     0000                           1-  480     _shanshuoTime:
     0000 0000                      1-  481     	dw	0x00
                                    1-  485     .segment "idata"
     0000                           1-  486     _firstTime:
     0000 0000                      1-  487     	dw	0x00
                                    1-  491     .segment "idata"
     0000                           1-  492     _tempDuty:
     0000 0000                      1-  493     	dw	0x00
                                    1-  497     .segment "idata"
     0000                           1-  498     _lowCount:
     0000 0000                      1-  499     	dw	0x00
                                    1-  503     .segment "idata"
     0000                           1-  504     _debug:
     0000 0000                      1-  505     	dw	0x00
                                    1-  508     ;--------------------------------------------------------
                                    1-  509     ; overlayable items in internal ram 
                                    1-  510     ;--------------------------------------------------------
                                    1-  511     ;	udata_ovr
                                    1-  512     ;--------------------------------------------------------
                                    1-  513     ; reset vector 
                                    1-  514     ;--------------------------------------------------------
                                    1-  515     ORG	0x0000
     0000 3rrr                      1-  516     	LGOTO	__nyc_ny8_startup
                                    1-  517     ;--------------------------------------------------------
                                    1-  518     ; interrupt and initialization code
                                    1-  519     ;--------------------------------------------------------
                                    1-  520     ORG 0x0008
     0008 3rrr                      1-  521     	lgoto	__sdcc_interrupt
                                    1-  523     .segment "code"
     0000                           1-  524     __sdcc_interrupt:
                                    1-  525     ;***
                                    1-  526     ;  pBlock Stats: dbName = I
                                    1-  527     ;***
                                    1-  528     ;2 compiler assigned registers:
                                    1-  529     ;   STK00
                                    1-  530     ;   STK01
                                    1-  531     ;; Starting pCode block
     0000                           1-  532     _isr:
                                    1-  533     ; 0 exit points
                                    1-  534     	.line	107, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  535     	MOVAR	WSAVE
     0001 1503                      1-  536     	SWAPR	STATUS,W
     0002 0283                      1-  537     	CLRR	STATUS
     0003 00rr                      1-  538     	MOVAR	SSAVE
     0004 010A                      1-  539     	MOVR	PCHBUF,W
     0005 028A                      1-  540     	CLRR	PCHBUF
     0006 00rr                      1-  541     	MOVAR	PSAVE
     0007 0104                      1-  542     	MOVR	FSR,W
     0008 00rr                      1-  543     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  544     	MOVR	STK00,W
     000A 00rr                      1-  545     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  546     	MOVR	STK01,W
     000C 00rr                      1-  547     	MOVAR	___sdcc_saved_stk01
                                    1-  548     	.line	109, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  549     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  550     	LGOTO	_00126_DS_
                                    1-  551     	.line	111, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  552     	MOVIA	0x37
     0010 03rr                      1-  553     	ADDAR	_TMR0,F
                                    1-  554     	.line	113, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  555     	INCR	_intCount,F
                                    1-  556     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  557     	MOVIA	0x64
     0013 04rr                      1-  558     	SUBAR	_intCount,W
     0014 0803                      1-  559     	BTRSS	STATUS,0
     0015 3rrr                      1-  560     	LGOTO	_00126_DS_
                                    1-  561     	.line	115, "main.c"; 	IntFlag = 1;
     0016 18rr                      1-  562     	BSR	_Status,0
                                    1-  563     	.line	116, "main.c"; 	intCount = 0;
     0017 02rr                      1-  564     	CLRR	_intCount
                                    1-  565     	.line	117, "main.c"; 	if(workStep)
     0018 01rr                      1-  566     	MOVR	_workStep,W
     0019 0D03                      1-  567     	BTRSC	STATUS,2
     001A 3rrr                      1-  568     	LGOTO	_00106_DS_
                                    1-  569     	.line	118, "main.c"; 	++fgCount;
     001B 05rr                      1-  570     	INCR	_fgCount,F
     001C 0D03                      1-  571     	BTRSC	STATUS,2
     001D 05rr                      1-  572     	INCR	(_fgCount + 1),F
     001E                           1-  573     _00106_DS_:
                                    1-  574     	.line	119, "main.c"; 	if(++count500ms >= 40)
     001E 05rr                      1-  575     	INCR	_count500ms,F
                                    1-  576     ;;unsigned compare: left < lit (0x28=40), size=1
     001F 2128                      1-  577     	MOVIA	0x28
     0020 04rr                      1-  578     	SUBAR	_count500ms,W
     0021 0C03                      1-  579     	BTRSC	STATUS,0
                                    1-  580     	.line	120, "main.c"; 	count500ms = 0;
     0022 02rr                      1-  581     	CLRR	_count500ms
                                    1-  582     	.line	121, "main.c"; 	if(++count200ms >= 20)
     0023 05rr                      1-  583     	INCR	_count200ms,F
     0024 2114                      1-  584     	MOVIA	0x14
     0025 04rr                      1-  585     	SUBAR	_count200ms,W
     0026 0C03                      1-  586     	BTRSC	STATUS,0
                                    1-  587     	.line	122, "main.c"; 	count200ms = 0;
     0027 02rr                      1-  588     	CLRR	_count200ms
                                    1-  589     	.line	123, "main.c"; 	if(++count1s >= 100)
     0028 05rr                      1-  590     	INCR	_count1s,F
     0029 2164                      1-  591     	MOVIA	0x64
     002A 04rr                      1-  592     	SUBAR	_count1s,W
     002B 0803                      1-  593     	BTRSS	STATUS,0
     002C 3rrr                      1-  594     	LGOTO	_00126_DS_
                                    1-  595     	.line	125, "main.c"; 	count1s = 0;
     002D 02rr                      1-  596     	CLRR	_count1s
                                    1-  597     	.line	126, "main.c"; 	if(chrgFlag == 1 && pwStep == 6)
     002E 09rr                      1-  598     	BTRSS	_Status,3
     002F 3rrr                      1-  599     	LGOTO	_00112_DS_
     0030 01rr                      1-  600     	MOVR	_pwStep,W
     0031 2406                      1-  601     	XORIA	0x06
     0032 0903                      1-  602     	BTRSS	STATUS,2
     0033 3rrr                      1-  603     	LGOTO	_00112_DS_
                                    1-  604     	.line	128, "main.c"; 	++chrgTime;
     0034 05rr                      1-  605     	INCR	_chrgTime,F
     0035 0D03                      1-  606     	BTRSC	STATUS,2
     0036 05rr                      1-  607     	INCR	(_chrgTime + 1),F
                                    1-  608     	.line	129, "main.c"; 	PWM1DUTY = 7;
     0037 2107                      1-  609     	MOVIA	0x07
     0038 00rr                      1-  610     	SFUN	_PWM1DUTY
     0039                           1-  611     _00112_DS_:
                                    1-  612     	.line	131, "main.c"; 	if(ledLightTime > 0)
     0039 01rr                      1-  613     	MOVR	_ledLightTime,W
     003A 0903                      1-  614     	BTRSS	STATUS,2
                                    1-  615     	.line	132, "main.c"; 	--ledLightTime;
     003B 06rr                      1-  616     	DECR	_ledLightTime,F
                                    1-  617     	.line	133, "main.c"; 	if(shanshuoTime > 0)
     003C 01rr                      1-  618     	MOVR	_shanshuoTime,W
     003D 0903                      1-  619     	BTRSS	STATUS,2
                                    1-  620     	.line	134, "main.c"; 	--shanshuoTime;
     003E 06rr                      1-  621     	DECR	_shanshuoTime,F
                                    1-  622     	.line	135, "main.c"; 	if(workStep)
     003F 01rr                      1-  623     	MOVR	_workStep,W
     0040 0D03                      1-  624     	BTRSC	STATUS,2
     0041 3rrr                      1-  625     	LGOTO	_00119_DS_
                                    1-  626     	.line	137, "main.c"; 	++count900s;
     0042 05rr                      1-  627     	INCR	_count900s,F
     0043 0D03                      1-  628     	BTRSC	STATUS,2
     0044 05rr                      1-  629     	INCR	(_count900s + 1),F
     0045 3rrr                      1-  630     	LGOTO	_00126_DS_
     0046                           1-  631     _00119_DS_:
                                    1-  632     	.line	141, "main.c"; 	count900s = 0;
     0046 02rr                      1-  633     	CLRR	_count900s
     0047 02rr                      1-  634     	CLRR	(_count900s + 1)
     0048                           1-  635     _00126_DS_:
                                    1-  636     	.line	150, "main.c"; 	if(INTFbits.PABIF)
     0048 08rr                      1-  637     	BTRSS	_INTFbits,1
     0049 3rrr                      1-  638     	LGOTO	_00128_DS_
                                    1-  639     	.line	152, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     004A 21FD                      1-  640     	MOVIA	0xfd
     004B 00rr                      1-  641     	MOVAR	_INTF
     004C                           1-  642     _00128_DS_:
                                    1-  643     	.line	155, "main.c"; 	INTF = 0;
     004C 02rr                      1-  644     	CLRR	_INTF
                                    1-  645     	.line	157, "main.c"; 	}
     004D 01rr                      1-  646     	MOVR	___sdcc_saved_stk01,W
     004E 00rr                      1-  647     	MOVAR	STK01
     004F 01rr                      1-  648     	MOVR	___sdcc_saved_stk00,W
     0050 00rr                      1-  649     	MOVAR	STK00
     0051 01rr                      1-  650     	MOVR	___sdcc_saved_fsr,W
     0052 0084                      1-  651     	MOVAR	FSR
     0053 01rr                      1-  652     	MOVR	PSAVE,W
     0054 008A                      1-  653     	MOVAR	PCHBUF
     0055 0283                      1-  654     	CLRR	STATUS
     0056 15rr                      1-  655     	SWAPR	SSAVE,W
     0057 0083                      1-  656     	MOVAR	STATUS
     0058 15rr                      1-  657     	SWAPR	WSAVE,F
     0059 15rr                      1-  658     	SWAPR	WSAVE,W
     005A                           1-  659     END_OF_INTERRUPT:
     005A 0011                      1-  660     	RETIE	
                                    1-  662     ;--------------------------------------------------------
                                    1-  663     ; code
                                    1-  664     ;--------------------------------------------------------
                                    1-  665     ;***
                                    1-  666     ;  pBlock Stats: dbName = M
                                    1-  667     ;***
                                    1-  668     ;has an exit
                                    1-  669     ;functions called:
                                    1-  670     ;   _initSys
                                    1-  671     ;   _initAD
                                    1-  672     ;   _ledShow
                                    1-  673     ;   _keyCtr
                                    1-  674     ;   _checkBatAD
                                    1-  675     ;   _checkOutA
                                    1-  676     ;   _checkChrgV
                                    1-  677     ;   _chrgCtr
                                    1-  678     ;   _gotoSleep
                                    1-  679     ;   _powerOff
                                    1-  680     ;   _initSys
                                    1-  681     ;   _initAD
                                    1-  682     ;   _ledShow
                                    1-  683     ;   _keyCtr
                                    1-  684     ;   _checkBatAD
                                    1-  685     ;   _checkOutA
                                    1-  686     ;   _checkChrgV
                                    1-  687     ;   _chrgCtr
                                    1-  688     ;   _gotoSleep
                                    1-  689     ;   _powerOff
                                    1-  690     ;; Starting pCode block
                                    1-  691     .segment "code"; module=main, function=_main
     0000                           1-  693     _main:
                                    1-  694     ; 2 exit points
                                    1-  695     	.line	161, "main.c"; 	initSys();
     0000 2rrr                      1-  696     	LCALL	_initSys
                                    1-  697     	.line	162, "main.c"; 	initAD();
     0001 2rrr                      1-  698     	LCALL	_initAD
     0002                           1-  699     _00160_DS_:
                                    1-  700     	.line	165, "main.c"; 	CLRWDT();
     0002 0002                      1-  701     	clrwdt
                                    1-  702     	.line	166, "main.c"; 	ledShow();
     0003 2rrr                      1-  703     	LCALL	_ledShow
                                    1-  704     	.line	167, "main.c"; 	if(!IntFlag)
     0004 08rr                      1-  705     	BTRSS	_Status,0
     0005 3rrr                      1-  706     	LGOTO	_00160_DS_
                                    1-  707     	.line	169, "main.c"; 	IntFlag = 0;
     0006 1Crr                      1-  708     	BCR	_Status,0
                                    1-  709     	.line	170, "main.c"; 	if(chrgFlag == 0)
     0007 09rr                      1-  710     	BTRSS	_Status,3
                                    1-  711     	.line	171, "main.c"; 	keyCtr();
     0008 2rrr                      1-  712     	LCALL	_keyCtr
                                    1-  713     	.line	172, "main.c"; 	if(count200ms < 5)
     0009 2105                      1-  714     	MOVIA	0x05
     000A 04rr                      1-  715     	SUBAR	_count200ms,W
     000B 0C03                      1-  716     	BTRSC	STATUS,0
     000C 3rrr                      1-  717     	LGOTO	_00145_DS_
                                    1-  718     	.line	174, "main.c"; 	checkBatAD();
     000D 2rrr                      1-  719     	LCALL	_checkBatAD
     000E 3rrr                      1-  720     	LGOTO	_00146_DS_
                                    1-  721     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  722     ;;unsigned compare: left >= lit (0x9=9), size=1
     000F                           1-  723     _00145_DS_:
                                    1-  724     	.line	176, "main.c"; 	else if(count200ms > 8 && count200ms < 11)
     000F 2109                      1-  725     	MOVIA	0x09
     0010 04rr                      1-  726     	SUBAR	_count200ms,W
     0011 0803                      1-  727     	BTRSS	STATUS,0
     0012 3rrr                      1-  728     	LGOTO	_00141_DS_
                                    1-  729     ;;unsigned compare: left < lit (0xB=11), size=1
     0013 210B                      1-  730     	MOVIA	0x0b
     0014 04rr                      1-  731     	SUBAR	_count200ms,W
     0015 0C03                      1-  732     	BTRSC	STATUS,0
     0016 3rrr                      1-  733     	LGOTO	_00141_DS_
                                    1-  734     	.line	178, "main.c"; 	checkOutA();
     0017 2rrr                      1-  735     	LCALL	_checkOutA
     0018 3rrr                      1-  736     	LGOTO	_00146_DS_
                                    1-  737     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  738     ;;unsigned compare: left >= lit (0xE=14), size=1
     0019                           1-  739     _00141_DS_:
                                    1-  740     	.line	180, "main.c"; 	else if(count200ms > 13 && count200ms < 16)
     0019 210E                      1-  741     	MOVIA	0x0e
     001A 04rr                      1-  742     	SUBAR	_count200ms,W
     001B 0803                      1-  743     	BTRSS	STATUS,0
     001C 3rrr                      1-  744     	LGOTO	_00146_DS_
                                    1-  745     ;;unsigned compare: left < lit (0x10=16), size=1
     001D 2110                      1-  746     	MOVIA	0x10
     001E 04rr                      1-  747     	SUBAR	_count200ms,W
     001F 0803                      1-  748     	BTRSS	STATUS,0
                                    1-  749     	.line	182, "main.c"; 	checkChrgV();
     0020 2rrr                      1-  750     	LCALL	_checkChrgV
     0021                           1-  751     _00146_DS_:
                                    1-  752     	.line	185, "main.c"; 	chrgCtr();
     0021 2rrr                      1-  753     	LCALL	_chrgCtr
                                    1-  754     	.line	187, "main.c"; 	if(workStep > 0 && currentDuty > maxDuty)
     0022 01rr                      1-  755     	MOVR	_workStep,W
     0023 0D03                      1-  756     	BTRSC	STATUS,2
     0024 3rrr                      1-  757     	LGOTO	_00148_DS_
     0025 01rr                      1-  758     	MOVR	_currentDuty,W
     0026 04rr                      1-  759     	SUBAR	_maxDuty,W
     0027 0C03                      1-  760     	BTRSC	STATUS,0
     0028 3rrr                      1-  761     	LGOTO	_00148_DS_
                                    1-  762     	.line	189, "main.c"; 	currentDuty = currentDuty - 10;
     0029 21F6                      1-  763     	MOVIA	0xf6
     002A 03rr                      1-  764     	ADDAR	_currentDuty,F
                                    1-  765     	.line	190, "main.c"; 	PWM2DUTY = currentDuty;
     002B 01rr                      1-  766     	MOVR	_currentDuty,W
     002C 00rr                      1-  767     	SFUN	_PWM2DUTY
     002D                           1-  768     _00148_DS_:
                                    1-  769     	.line	192, "main.c"; 	if(workStep == 0 && keyCount == 0 && (PORTA & 0x08) == 0 && ledLightTime == 0)
     002D 01rr                      1-  770     	MOVR	_workStep,W
     002E 0903                      1-  771     	BTRSS	STATUS,2
     002F 3rrr                      1-  772     	LGOTO	_00153_DS_
     0030 01rr                      1-  773     	MOVR	_keyCount,W
     0031 0903                      1-  774     	BTRSS	STATUS,2
     0032 3rrr                      1-  775     	LGOTO	_00153_DS_
     0033 0Drr                      1-  776     	BTRSC	_PORTA,3
     0034 3rrr                      1-  777     	LGOTO	_00153_DS_
     0035 01rr                      1-  778     	MOVR	_ledLightTime,W
     0036 0903                      1-  779     	BTRSS	STATUS,2
     0037 3rrr                      1-  780     	LGOTO	_00153_DS_
                                    1-  781     	.line	194, "main.c"; 	if(++sleepTime > 2000)
     0038 05rr                      1-  782     	INCR	_sleepTime,F
     0039 0D03                      1-  783     	BTRSC	STATUS,2
     003A 05rr                      1-  784     	INCR	(_sleepTime + 1),F
                                    1-  785     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  786     ;;unsigned compare: left >= lit (0x7D1=2001), size=2
     003B 2107                      1-  787     	MOVIA	0x07
     003C 04rr                      1-  788     	SUBAR	(_sleepTime + 1),W
     003D 0903                      1-  789     	BTRSS	STATUS,2
     003E 3rrr                      1-  790     	LGOTO	_00218_DS_
     003F 21D1                      1-  791     	MOVIA	0xd1
     0040 04rr                      1-  792     	SUBAR	_sleepTime,W
     0041                           1-  793     _00218_DS_:
     0041 0803                      1-  794     	BTRSS	STATUS,0
     0042 3rrr                      1-  795     	LGOTO	_00153_DS_
                                    1-  796     	.line	196, "main.c"; 	gotoSleep();
     0043 2rrr                      1-  797     	LCALL	_gotoSleep
                                    1-  798     ;;unsigned compare: left < lit (0x384=900), size=2
     0044                           1-  799     _00153_DS_:
                                    1-  800     	.line	200, "main.c"; 	if(count900s >= 900)
     0044 2103                      1-  801     	MOVIA	0x03
     0045 04rr                      1-  802     	SUBAR	(_count900s + 1),W
     0046 0903                      1-  803     	BTRSS	STATUS,2
     0047 3rrr                      1-  804     	LGOTO	_00219_DS_
     0048 2184                      1-  805     	MOVIA	0x84
     0049 04rr                      1-  806     	SUBAR	_count900s,W
     004A                           1-  807     _00219_DS_:
     004A 0803                      1-  808     	BTRSS	STATUS,0
     004B 3rrr                      1-  809     	LGOTO	_00160_DS_
                                    1-  810     	.line	202, "main.c"; 	powerOff();
     004C 2rrr                      1-  811     	LCALL	_powerOff
     004D 3rrr                      1-  812     	LGOTO	_00160_DS_
                                    1-  813     	.line	206, "main.c"; 	}
                                    1-  814     	RETURN	
     004E 0010                      3-   26 m1      ret
                                    1-  815     ; exit point of _main
                                    1-  817     ;***
                                    1-  818     ;  pBlock Stats: dbName = C
                                    1-  819     ;***
                                    1-  820     ;has an exit
                                    1-  821     ;; Starting pCode block
                                    1-  822     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  824     _F_wait_eoc:
                                    1-  825     ; 2 exit points
     0000                           1-  826     _00886_DS_:
                                    1-  827     	.line	927, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  828     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  829     	LGOTO	_00886_DS_
                                    1-  830     	.line	929, "main.c"; 	}
                                    1-  831     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  832     ; exit point of _F_wait_eoc
                                    1-  834     ;***
                                    1-  835     ;  pBlock Stats: dbName = C
                                    1-  836     ;***
                                    1-  837     ;has an exit
                                    1-  838     ;functions called:
                                    1-  839     ;   _delay
                                    1-  840     ;   _F_wait_eoc
                                    1-  841     ;   _delay
                                    1-  842     ;   _F_wait_eoc
                                    1-  843     ;6 compiler assigned registers:
                                    1-  844     ;   r0x102B
                                    1-  845     ;   r0x102C
                                    1-  846     ;   r0x102D
                                    1-  847     ;   r0x102E
                                    1-  848     ;   r0x102F
                                    1-  849     ;   r0x1030
                                    1-  850     ;; Starting pCode block
                                    1-  851     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1-  853     ;local variable name mapping:
     0000                           1-  856     _F_AIN2_Convert:
                                    1-  857     ; 2 exit points
                                    1-  858     	.line	910, "main.c"; 	void F_AIN2_Convert(char count)
     0000 00rr                      1-  859     	MOVAR	r0x102B
                                    1-  860     	.line	912, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;   
     0001 02rr                      1-  861     	CLRR	_R_AIN2_DATA_LB
     0002 02rr                      1-  862     	CLRR	_R_AIN2_DATA
     0003 02rr                      1-  863     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  864     	.line	914, "main.c"; 	ADMD  = 0x90 | C_ADC_PA2;				// Select AIN6(PB1) pad as ADC input
     0004 2192                      1-  865     	MOVIA	0x92
     0005 00rr                      1-  866     	MOVAR	_ADMD
                                    1-  867     	.line	915, "main.c"; 	delay(200);	
     0006 21C8                      1-  868     	MOVIA	0xc8
     0007 2rrr                      1-  869     	LCALL	_delay
                                    1-  870     	.line	916, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1-  871     	MOVIA	0x01
     0009 00rr                      1-  872     	MOVAR	r0x102C
     000A                           1-  873     _00879_DS_:
     000A 01rr                      1-  874     	MOVR	r0x102C,W
     000B 04rr                      1-  875     	SUBAR	r0x102B,W
     000C 0803                      1-  876     	BTRSS	STATUS,0
     000D 3rrr                      1-  877     	LGOTO	_00881_DS_
                                    1-  878     	.line	918, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1-  879     	BSR	_ADMDbits,6
                                    1-  880     	.line	919, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000F 2rrr                      1-  881     	LCALL	_F_wait_eoc
                                    1-  882     	.line	920, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1-  883     	MOVIA	0x0f
     0011 10rr                      1-  884     	ANDAR	_ADR,W
                                    1-  885     ;;3	MOVAR	r0x102D
     0012 03rr                      1-  886     	ADDAR	_R_AIN2_DATA_LB,F
                                    1-  887     	.line	921, "main.c"; 	R_AIN2_DATA    += ADD; 
     0013 01rr                      1-  888     	MOVR	_ADD,W
     0014 00rr                      1-  889     	MOVAR	r0x102D
                                    1-  890     ;;1	CLRR	r0x102E
                                    1-  891     ;;112	MOVR	r0x102D,W
                                    1-  892     ;;110	MOVAR	r0x102F
     0015 2100                      1-  893     	MOVIA	0x00
     0016 00rr                      1-  894     	MOVAR	r0x1030
                                    1-  895     ;;111	MOVR	r0x102F,W
     0017 01rr                      1-  896     	MOVR	r0x102D,W
     0018 03rr                      1-  897     	ADDAR	_R_AIN2_DATA,F
     0019 01rr                      1-  898     	MOVR	r0x1030,W
     001A 0C03                      1-  899     	BTRSC	STATUS,0
     001B 16rr                      1-  900     	INCRSZ	r0x1030,W
     001C 03rr                      1-  901     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1-  902     	.line	916, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1-  903     	INCR	r0x102C,F
     001E 3rrr                      1-  904     	LGOTO	_00879_DS_
     001F                           1-  905     _00881_DS_:
                                    1-  906     	.line	923, "main.c"; 	}
                                    1-  907     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  908     ; exit point of _F_AIN2_Convert
                                    1-  910     ;***
                                    1-  911     ;  pBlock Stats: dbName = C
                                    1-  912     ;***
                                    1-  913     ;has an exit
                                    1-  914     ;functions called:
                                    1-  915     ;   _delay
                                    1-  916     ;   _F_wait_eoc
                                    1-  917     ;   _delay
                                    1-  918     ;   _F_wait_eoc
                                    1-  919     ;6 compiler assigned registers:
                                    1-  920     ;   r0x1031
                                    1-  921     ;   r0x1032
                                    1-  922     ;   r0x1033
                                    1-  923     ;   r0x1034
                                    1-  924     ;   r0x1035
                                    1-  925     ;   r0x1036
                                    1-  926     ;; Starting pCode block
                                    1-  927     .segment "code"; module=main, function=_F_AIN3_Convert
                                    1-  929     ;local variable name mapping:
     0000                           1-  932     _F_AIN3_Convert:
                                    1-  933     ; 2 exit points
                                    1-  934     	.line	895, "main.c"; 	void F_AIN3_Convert(char count)
     0000 00rr                      1-  935     	MOVAR	r0x1031
                                    1-  936     	.line	897, "main.c"; 	R_AIN3_DATA=R_AIN3_DATA_LB=0x00;   
     0001 02rr                      1-  937     	CLRR	_R_AIN3_DATA_LB
     0002 02rr                      1-  938     	CLRR	_R_AIN3_DATA
     0003 02rr                      1-  939     	CLRR	(_R_AIN3_DATA + 1)
                                    1-  940     	.line	899, "main.c"; 	ADMD  = 0x90 | C_ADC_PA3;				// Select AIN6(PB1) pad as ADC input
     0004 2193                      1-  941     	MOVIA	0x93
     0005 00rr                      1-  942     	MOVAR	_ADMD
                                    1-  943     	.line	900, "main.c"; 	delay(200);	
     0006 21C8                      1-  944     	MOVIA	0xc8
     0007 2rrr                      1-  945     	LCALL	_delay
                                    1-  946     	.line	901, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1-  947     	MOVIA	0x01
     0009 00rr                      1-  948     	MOVAR	r0x1032
     000A                           1-  949     _00870_DS_:
     000A 01rr                      1-  950     	MOVR	r0x1032,W
     000B 04rr                      1-  951     	SUBAR	r0x1031,W
     000C 0803                      1-  952     	BTRSS	STATUS,0
     000D 3rrr                      1-  953     	LGOTO	_00872_DS_
                                    1-  954     	.line	903, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1-  955     	BSR	_ADMDbits,6
                                    1-  956     	.line	904, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000F 2rrr                      1-  957     	LCALL	_F_wait_eoc
                                    1-  958     	.line	905, "main.c"; 	R_AIN3_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1-  959     	MOVIA	0x0f
     0011 10rr                      1-  960     	ANDAR	_ADR,W
                                    1-  961     ;;3	MOVAR	r0x1033
     0012 03rr                      1-  962     	ADDAR	_R_AIN3_DATA_LB,F
                                    1-  963     	.line	906, "main.c"; 	R_AIN3_DATA    += ADD; 
     0013 01rr                      1-  964     	MOVR	_ADD,W
     0014 00rr                      1-  965     	MOVAR	r0x1033
                                    1-  966     ;;1	CLRR	r0x1034
                                    1-  967     ;;109	MOVR	r0x1033,W
                                    1-  968     ;;107	MOVAR	r0x1035
     0015 2100                      1-  969     	MOVIA	0x00
     0016 00rr                      1-  970     	MOVAR	r0x1036
                                    1-  971     ;;108	MOVR	r0x1035,W
     0017 01rr                      1-  972     	MOVR	r0x1033,W
     0018 03rr                      1-  973     	ADDAR	_R_AIN3_DATA,F
     0019 01rr                      1-  974     	MOVR	r0x1036,W
     001A 0C03                      1-  975     	BTRSC	STATUS,0
     001B 16rr                      1-  976     	INCRSZ	r0x1036,W
     001C 03rr                      1-  977     	ADDAR	(_R_AIN3_DATA + 1),F
                                    1-  978     	.line	901, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1-  979     	INCR	r0x1032,F
     001E 3rrr                      1-  980     	LGOTO	_00870_DS_
     001F                           1-  981     _00872_DS_:
                                    1-  982     	.line	908, "main.c"; 	}
                                    1-  983     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  984     ; exit point of _F_AIN3_Convert
                                    1-  986     ;***
                                    1-  987     ;  pBlock Stats: dbName = C
                                    1-  988     ;***
                                    1-  989     ;has an exit
                                    1-  990     ;functions called:
                                    1-  991     ;   _delay
                                    1-  992     ;   _F_wait_eoc
                                    1-  993     ;   _delay
                                    1-  994     ;   _F_wait_eoc
                                    1-  995     ;6 compiler assigned registers:
                                    1-  996     ;   r0x1037
                                    1-  997     ;   r0x1038
                                    1-  998     ;   r0x1039
                                    1-  999     ;   r0x103A
                                    1- 1000     ;   r0x103B
                                    1- 1001     ;   r0x103C
                                    1- 1002     ;; Starting pCode block
                                    1- 1003     .segment "code"; module=main, function=_F_AIN4_Convert
                                    1- 1005     ;local variable name mapping:
     0000                           1- 1008     _F_AIN4_Convert:
                                    1- 1009     ; 2 exit points
                                    1- 1010     	.line	880, "main.c"; 	void F_AIN4_Convert(char count)
     0000 00rr                      1- 1011     	MOVAR	r0x1037
                                    1- 1012     	.line	882, "main.c"; 	R_AIN4_DATA=R_AIN4_DATA_LB=0x00;   
     0001 02rr                      1- 1013     	CLRR	_R_AIN4_DATA_LB
     0002 02rr                      1- 1014     	CLRR	_R_AIN4_DATA
     0003 02rr                      1- 1015     	CLRR	(_R_AIN4_DATA + 1)
                                    1- 1016     	.line	884, "main.c"; 	ADMD  = 0x90 | C_ADC_PA4;				// Select AIN6(PB1) pad as ADC input
     0004 2194                      1- 1017     	MOVIA	0x94
     0005 00rr                      1- 1018     	MOVAR	_ADMD
                                    1- 1019     	.line	885, "main.c"; 	delay(200);	
     0006 21C8                      1- 1020     	MOVIA	0xc8
     0007 2rrr                      1- 1021     	LCALL	_delay
                                    1- 1022     	.line	886, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1- 1023     	MOVIA	0x01
     0009 00rr                      1- 1024     	MOVAR	r0x1038
     000A                           1- 1025     _00861_DS_:
     000A 01rr                      1- 1026     	MOVR	r0x1038,W
     000B 04rr                      1- 1027     	SUBAR	r0x1037,W
     000C 0803                      1- 1028     	BTRSS	STATUS,0
     000D 3rrr                      1- 1029     	LGOTO	_00863_DS_
                                    1- 1030     	.line	888, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1- 1031     	BSR	_ADMDbits,6
                                    1- 1032     	.line	889, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000F 2rrr                      1- 1033     	LCALL	_F_wait_eoc
                                    1- 1034     	.line	890, "main.c"; 	R_AIN4_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1- 1035     	MOVIA	0x0f
     0011 10rr                      1- 1036     	ANDAR	_ADR,W
                                    1- 1037     ;;3	MOVAR	r0x1039
     0012 03rr                      1- 1038     	ADDAR	_R_AIN4_DATA_LB,F
                                    1- 1039     	.line	891, "main.c"; 	R_AIN4_DATA    += ADD; 
     0013 01rr                      1- 1040     	MOVR	_ADD,W
     0014 00rr                      1- 1041     	MOVAR	r0x1039
                                    1- 1042     ;;1	CLRR	r0x103A
                                    1- 1043     ;;106	MOVR	r0x1039,W
                                    1- 1044     ;;104	MOVAR	r0x103B
     0015 2100                      1- 1045     	MOVIA	0x00
     0016 00rr                      1- 1046     	MOVAR	r0x103C
                                    1- 1047     ;;105	MOVR	r0x103B,W
     0017 01rr                      1- 1048     	MOVR	r0x1039,W
     0018 03rr                      1- 1049     	ADDAR	_R_AIN4_DATA,F
     0019 01rr                      1- 1050     	MOVR	r0x103C,W
     001A 0C03                      1- 1051     	BTRSC	STATUS,0
     001B 16rr                      1- 1052     	INCRSZ	r0x103C,W
     001C 03rr                      1- 1053     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1- 1054     	.line	886, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1- 1055     	INCR	r0x1038,F
     001E 3rrr                      1- 1056     	LGOTO	_00861_DS_
     001F                           1- 1057     _00863_DS_:
                                    1- 1058     	.line	893, "main.c"; 	}
                                    1- 1059     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1- 1060     ; exit point of _F_AIN4_Convert
                                    1- 1062     ;***
                                    1- 1063     ;  pBlock Stats: dbName = C
                                    1- 1064     ;***
                                    1- 1065     ;has an exit
                                    1- 1066     ;functions called:
                                    1- 1067     ;   _F_AIN4_Convert
                                    1- 1068     ;   __mulchar
                                    1- 1069     ;   __mulchar
                                    1- 1070     ;   __mulchar
                                    1- 1071     ;   __mulchar
                                    1- 1072     ;   __mulchar
                                    1- 1073     ;   __mulchar
                                    1- 1074     ;   __mulchar
                                    1- 1075     ;   __mulchar
                                    1- 1076     ;   _F_AIN4_Convert
                                    1- 1077     ;   __mulchar
                                    1- 1078     ;   __mulchar
                                    1- 1079     ;   __mulchar
                                    1- 1080     ;   __mulchar
                                    1- 1081     ;   __mulchar
                                    1- 1082     ;   __mulchar
                                    1- 1083     ;   __mulchar
                                    1- 1084     ;   __mulchar
                                    1- 1085     ;5 compiler assigned registers:
                                    1- 1086     ;   r0x103D
                                    1- 1087     ;   r0x103E
                                    1- 1088     ;   r0x103F
                                    1- 1089     ;   r0x1040
                                    1- 1090     ;   STK00
                                    1- 1091     ;; Starting pCode block
                                    1- 1092     .segment "code"; module=main, function=_checkOutA
     0000                           1- 1094     _checkOutA:
                                    1- 1095     ; 2 exit points
                                    1- 1096     	.line	790, "main.c"; 	R_AIN4_DATA = R_AIN4_DATA_LB = 0x00;
     0000 02rr                      1- 1097     	CLRR	_R_AIN4_DATA_LB
     0001 02rr                      1- 1098     	CLRR	_R_AIN4_DATA
     0002 02rr                      1- 1099     	CLRR	(_R_AIN4_DATA + 1)
                                    1- 1100     	.line	791, "main.c"; 	F_AIN4_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1- 1101     	MOVIA	0x08
     0004 2rrr                      1- 1102     	LCALL	_F_AIN4_Convert
                                    1- 1103     	.line	792, "main.c"; 	R_AIN4_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1- 1104     	SWAPR	(_R_AIN4_DATA + 1),W
     0006 22F0                      1- 1105     	ANDIA	0xf0
     0007 00rr                      1- 1106     	MOVAR	(_R_AIN4_DATA + 1)
     0008 15rr                      1- 1107     	SWAPR	_R_AIN4_DATA,W
     0009 00rr                      1- 1108     	MOVAR	_R_AIN4_DATA
     000A 220F                      1- 1109     	ANDIA	0x0f
     000B 11rr                      1- 1110     	IORAR	(_R_AIN4_DATA + 1),F
     000C 12rr                      1- 1111     	XORAR	_R_AIN4_DATA,F
                                    1- 1112     	.line	793, "main.c"; 	R_AIN4_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1- 1113     	MOVIA	0xf0
     000E 10rr                      1- 1114     	ANDAR	_R_AIN4_DATA_LB,F
                                    1- 1115     	.line	794, "main.c"; 	R_AIN4_DATA += R_AIN4_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1- 1116     	MOVR	_R_AIN4_DATA_LB,W
     0010 00rr                      1- 1117     	MOVAR	r0x103D
                                    1- 1118     ;;1	CLRR	r0x103E
                                    1- 1119     ;;103	MOVR	r0x103D,W
                                    1- 1120     ;;101	MOVAR	r0x103F
     0011 2100                      1- 1121     	MOVIA	0x00
     0012 00rr                      1- 1122     	MOVAR	r0x1040
                                    1- 1123     ;;102	MOVR	r0x103F,W
     0013 01rr                      1- 1124     	MOVR	r0x103D,W
     0014 03rr                      1- 1125     	ADDAR	_R_AIN4_DATA,F
     0015 01rr                      1- 1126     	MOVR	r0x1040,W
     0016 0C03                      1- 1127     	BTRSC	STATUS,0
     0017 16rr                      1- 1128     	INCRSZ	r0x1040,W
     0018 03rr                      1- 1129     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1- 1130     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1- 1131     	.line	795, "main.c"; 	R_AIN4_DATA >>=3;					// R_AIN0_DATA divided 8
     0019 1C03                      1- 1132     	BCR	STATUS,0
     001A 13rr                      1- 1133     	RRR	(_R_AIN4_DATA + 1),F
     001B 13rr                      1- 1134     	RRR	_R_AIN4_DATA,F
                                    1- 1135     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1- 1136     	BCR	STATUS,0
     001D 13rr                      1- 1137     	RRR	(_R_AIN4_DATA + 1),F
     001E 13rr                      1- 1138     	RRR	_R_AIN4_DATA,F
                                    1- 1139     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1- 1140     	BCR	STATUS,0
     0020 13rr                      1- 1141     	RRR	(_R_AIN4_DATA + 1),F
     0021 13rr                      1- 1142     	RRR	_R_AIN4_DATA,F
                                    1- 1143     	.line	796, "main.c"; 	if(debug)
     0022 01rr                      1- 1144     	MOVR	_debug,W
     0023 0D03                      1- 1145     	BTRSC	STATUS,2
     0024 3rrr                      1- 1146     	LGOTO	_00737_DS_
                                    1- 1147     	.line	797, "main.c"; 	R_AIN4_DATA = OUTA;
     0025 212D                      1- 1148     	MOVIA	0x2d
     0026 00rr                      1- 1149     	MOVAR	_R_AIN4_DATA
     0027 2101                      1- 1150     	MOVIA	0x01
     0028 00rr                      1- 1151     	MOVAR	(_R_AIN4_DATA + 1)
                                    1- 1152     ;;unsigned compare: left < lit (0x6=6), size=1
     0029                           1- 1153     _00737_DS_:
                                    1- 1154     	.line	798, "main.c"; 	if(workStep < 6 && R_AIN4_DATA > 200)
     0029 2106                      1- 1155     	MOVIA	0x06
     002A 04rr                      1- 1156     	SUBAR	_workStep,W
     002B 0C03                      1- 1157     	BTRSC	STATUS,0
     002C 3rrr                      1- 1158     	LGOTO	_00780_DS_
                                    1- 1159     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1160     ;;unsigned compare: left >= lit (0xC9=201), size=2
     002D 2100                      1- 1161     	MOVIA	0x00
     002E 04rr                      1- 1162     	SUBAR	(_R_AIN4_DATA + 1),W
     002F 0903                      1- 1163     	BTRSS	STATUS,2
     0030 3rrr                      1- 1164     	LGOTO	_00846_DS_
     0031 21C9                      1- 1165     	MOVIA	0xc9
     0032 04rr                      1- 1166     	SUBAR	_R_AIN4_DATA,W
     0033                           1- 1167     _00846_DS_:
     0033 0803                      1- 1168     	BTRSS	STATUS,0
     0034 3rrr                      1- 1169     	LGOTO	_00780_DS_
                                    1- 1170     	.line	800, "main.c"; 	if(++overCount > 5)
     0035 05rr                      1- 1171     	INCR	_overCount,F
                                    1- 1172     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1173     ;;unsigned compare: left >= lit (0x6=6), size=1
     0036 2106                      1- 1174     	MOVIA	0x06
     0037 04rr                      1- 1175     	SUBAR	_overCount,W
     0038 0803                      1- 1176     	BTRSS	STATUS,0
     0039 3rrr                      1- 1177     	LGOTO	_00783_DS_
                                    1- 1178     	.line	802, "main.c"; 	overCount = 5;
     003A 2105                      1- 1179     	MOVIA	0x05
     003B 00rr                      1- 1180     	MOVAR	_overCount
     003C 3rrr                      1- 1181     	LGOTO	_00783_DS_
                                    1- 1182     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1183     ;;unsigned compare: left >= lit (0x191=401), size=2
     003D                           1- 1184     _00780_DS_:
                                    1- 1185     	.line	805, "main.c"; 	else if(R_AIN4_DATA > 400)
     003D 2101                      1- 1186     	MOVIA	0x01
     003E 04rr                      1- 1187     	SUBAR	(_R_AIN4_DATA + 1),W
     003F 0903                      1- 1188     	BTRSS	STATUS,2
     0040 3rrr                      1- 1189     	LGOTO	_00848_DS_
     0041 2191                      1- 1190     	MOVIA	0x91
     0042 04rr                      1- 1191     	SUBAR	_R_AIN4_DATA,W
     0043                           1- 1192     _00848_DS_:
     0043 0803                      1- 1193     	BTRSS	STATUS,0
     0044 3rrr                      1- 1194     	LGOTO	_00777_DS_
                                    1- 1195     	.line	807, "main.c"; 	if(++overCount > 5)
     0045 05rr                      1- 1196     	INCR	_overCount,F
                                    1- 1197     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1198     ;;unsigned compare: left >= lit (0x6=6), size=1
     0046 2106                      1- 1199     	MOVIA	0x06
     0047 04rr                      1- 1200     	SUBAR	_overCount,W
     0048 0803                      1- 1201     	BTRSS	STATUS,0
     0049 3rrr                      1- 1202     	LGOTO	_00783_DS_
                                    1- 1203     	.line	809, "main.c"; 	overCount = 5;
     004A 2105                      1- 1204     	MOVIA	0x05
     004B 00rr                      1- 1205     	MOVAR	_overCount
     004C 3rrr                      1- 1206     	LGOTO	_00783_DS_
                                    1- 1207     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1208     ;;unsigned compare: left >= lit (0x2E=46), size=2
     004D                           1- 1209     _00777_DS_:
                                    1- 1210     	.line	817, "main.c"; 	else if(R_AIN4_DATA > 45)
     004D 2100                      1- 1211     	MOVIA	0x00
     004E 04rr                      1- 1212     	SUBAR	(_R_AIN4_DATA + 1),W
     004F 0903                      1- 1213     	BTRSS	STATUS,2
     0050 3rrr                      1- 1214     	LGOTO	_00850_DS_
     0051 212E                      1- 1215     	MOVIA	0x2e
     0052 04rr                      1- 1216     	SUBAR	_R_AIN4_DATA,W
     0053                           1- 1217     _00850_DS_:
     0053 0803                      1- 1218     	BTRSS	STATUS,0
     0054 3rrr                      1- 1219     	LGOTO	_00774_DS_
                                    1- 1220     	.line	819, "main.c"; 	if(overCount > 0)
     0055 01rr                      1- 1221     	MOVR	_overCount,W
     0056 0903                      1- 1222     	BTRSS	STATUS,2
                                    1- 1223     	.line	821, "main.c"; 	overCount--;
     0057 06rr                      1- 1224     	DECR	_overCount,F
                                    1- 1225     	.line	823, "main.c"; 	if(workStep < 4)
     0058 2104                      1- 1226     	MOVIA	0x04
     0059 04rr                      1- 1227     	SUBAR	_workStep,W
     005A 0C03                      1- 1228     	BTRSC	STATUS,0
     005B 3rrr                      1- 1229     	LGOTO	_00753_DS_
                                    1- 1230     	.line	825, "main.c"; 	if(workStep == 1)
     005C 01rr                      1- 1231     	MOVR	_workStep,W
     005D 2401                      1- 1232     	XORIA	0x01
     005E 0903                      1- 1233     	BTRSS	STATUS,2
     005F 3rrr                      1- 1234     	LGOTO	_00750_DS_
                                    1- 1235     	.line	827, "main.c"; 	tempDuty = maxDuty + workStep*4 + 51;
     0060 2104                      1- 1236     	MOVIA	0x04
     0061 00rr                      1- 1237     	MOVAR	STK00
     0062 01rr                      1- 1238     	MOVR	_workStep,W
     0063 2rrr                      1- 1239     	LCALL	__mulchar
                                    1- 1240     ;;3	MOVAR	r0x103D
     0064 03rr                      1- 1241     	ADDAR	_maxDuty,W
     0065 00rr                      1- 1242     	MOVAR	r0x103D
     0066 2133                      1- 1243     	MOVIA	0x33
     0067 03rr                      1- 1244     	ADDAR	r0x103D,W
     0068 00rr                      1- 1245     	MOVAR	_tempDuty
     0069 3rrr                      1- 1246     	LGOTO	_00751_DS_
     006A                           1- 1247     _00750_DS_:
                                    1- 1248     	.line	829, "main.c"; 	else if(workStep == 2)
     006A 01rr                      1- 1249     	MOVR	_workStep,W
     006B 2402                      1- 1250     	XORIA	0x02
     006C 0903                      1- 1251     	BTRSS	STATUS,2
     006D 3rrr                      1- 1252     	LGOTO	_00747_DS_
                                    1- 1253     	.line	831, "main.c"; 	tempDuty = maxDuty + workStep*4 + 48;
     006E 2104                      1- 1254     	MOVIA	0x04
     006F 00rr                      1- 1255     	MOVAR	STK00
     0070 01rr                      1- 1256     	MOVR	_workStep,W
     0071 2rrr                      1- 1257     	LCALL	__mulchar
                                    1- 1258     ;;3	MOVAR	r0x103D
     0072 03rr                      1- 1259     	ADDAR	_maxDuty,W
     0073 00rr                      1- 1260     	MOVAR	r0x103D
     0074 2130                      1- 1261     	MOVIA	0x30
     0075 03rr                      1- 1262     	ADDAR	r0x103D,W
     0076 00rr                      1- 1263     	MOVAR	_tempDuty
     0077 3rrr                      1- 1264     	LGOTO	_00751_DS_
     0078                           1- 1265     _00747_DS_:
                                    1- 1266     	.line	833, "main.c"; 	else if(workStep == 3)
     0078 01rr                      1- 1267     	MOVR	_workStep,W
     0079 2403                      1- 1268     	XORIA	0x03
     007A 0903                      1- 1269     	BTRSS	STATUS,2
     007B 3rrr                      1- 1270     	LGOTO	_00751_DS_
                                    1- 1271     	.line	835, "main.c"; 	tempDuty = maxDuty + workStep*4 + 46;
     007C 2104                      1- 1272     	MOVIA	0x04
     007D 00rr                      1- 1273     	MOVAR	STK00
     007E 01rr                      1- 1274     	MOVR	_workStep,W
     007F 2rrr                      1- 1275     	LCALL	__mulchar
                                    1- 1276     ;;3	MOVAR	r0x103D
     0080 03rr                      1- 1277     	ADDAR	_maxDuty,W
     0081 00rr                      1- 1278     	MOVAR	r0x103D
     0082 212E                      1- 1279     	MOVIA	0x2e
     0083 03rr                      1- 1280     	ADDAR	r0x103D,W
     0084 00rr                      1- 1281     	MOVAR	_tempDuty
     0085                           1- 1282     _00751_DS_:
                                    1- 1283     	.line	837, "main.c"; 	tempDuty = maxDuty + workStep*4 + 45;
     0085 2104                      1- 1284     	MOVIA	0x04
     0086 00rr                      1- 1285     	MOVAR	STK00
     0087 01rr                      1- 1286     	MOVR	_workStep,W
     0088 2rrr                      1- 1287     	LCALL	__mulchar
                                    1- 1288     ;;3	MOVAR	r0x103D
     0089 03rr                      1- 1289     	ADDAR	_maxDuty,W
     008A 00rr                      1- 1290     	MOVAR	r0x103D
     008B 212D                      1- 1291     	MOVIA	0x2d
     008C 03rr                      1- 1292     	ADDAR	r0x103D,W
     008D 00rr                      1- 1293     	MOVAR	_tempDuty
     008E 3rrr                      1- 1294     	LGOTO	_00754_DS_
     008F                           1- 1295     _00753_DS_:
                                    1- 1296     	.line	840, "main.c"; 	tempDuty = maxDuty + workStep*5 + 40;
     008F 2105                      1- 1297     	MOVIA	0x05
     0090 00rr                      1- 1298     	MOVAR	STK00
     0091 01rr                      1- 1299     	MOVR	_workStep,W
     0092 2rrr                      1- 1300     	LCALL	__mulchar
                                    1- 1301     ;;3	MOVAR	r0x103D
     0093 03rr                      1- 1302     	ADDAR	_maxDuty,W
     0094 00rr                      1- 1303     	MOVAR	r0x103D
     0095 2128                      1- 1304     	MOVIA	0x28
     0096 03rr                      1- 1305     	ADDAR	r0x103D,W
     0097 00rr                      1- 1306     	MOVAR	_tempDuty
     0098                           1- 1307     _00754_DS_:
                                    1- 1308     	.line	841, "main.c"; 	PWM2DUTY = tempDuty;
     0098 01rr                      1- 1309     	MOVR	_tempDuty,W
     0099 00rr                      1- 1310     	SFUN	_PWM2DUTY
     009A 3rrr                      1- 1311     	LGOTO	_00783_DS_
     009B                           1- 1312     _00774_DS_:
                                    1- 1313     	.line	845, "main.c"; 	if(overCount > 0)
     009B 01rr                      1- 1314     	MOVR	_overCount,W
     009C 0903                      1- 1315     	BTRSS	STATUS,2
                                    1- 1316     	.line	847, "main.c"; 	overCount--;
     009D 06rr                      1- 1317     	DECR	_overCount,F
                                    1- 1318     	.line	849, "main.c"; 	if(R_AIN4_DATA > 40 && workStep < 4)
     009E 2100                      1- 1319     	MOVIA	0x00
     009F 04rr                      1- 1320     	SUBAR	(_R_AIN4_DATA + 1),W
     00A0 0903                      1- 1321     	BTRSS	STATUS,2
     00A1 3rrr                      1- 1322     	LGOTO	_00852_DS_
     00A2 2129                      1- 1323     	MOVIA	0x29
     00A3 04rr                      1- 1324     	SUBAR	_R_AIN4_DATA,W
     00A4                           1- 1325     _00852_DS_:
     00A4 0803                      1- 1326     	BTRSS	STATUS,0
     00A5 3rrr                      1- 1327     	LGOTO	_00768_DS_
                                    1- 1328     ;;unsigned compare: left < lit (0x4=4), size=1
     00A6 2104                      1- 1329     	MOVIA	0x04
     00A7 04rr                      1- 1330     	SUBAR	_workStep,W
     00A8 0C03                      1- 1331     	BTRSC	STATUS,0
     00A9 3rrr                      1- 1332     	LGOTO	_00768_DS_
                                    1- 1333     	.line	851, "main.c"; 	if(workStep == 1)
     00AA 01rr                      1- 1334     	MOVR	_workStep,W
     00AB 2401                      1- 1335     	XORIA	0x01
     00AC 0903                      1- 1336     	BTRSS	STATUS,2
     00AD 3rrr                      1- 1337     	LGOTO	_00763_DS_
                                    1- 1338     	.line	853, "main.c"; 	tempDuty = maxDuty + workStep*4 + 45;
     00AE 2104                      1- 1339     	MOVIA	0x04
     00AF 00rr                      1- 1340     	MOVAR	STK00
     00B0 01rr                      1- 1341     	MOVR	_workStep,W
     00B1 2rrr                      1- 1342     	LCALL	__mulchar
                                    1- 1343     ;;3	MOVAR	r0x103D
     00B2 03rr                      1- 1344     	ADDAR	_maxDuty,W
     00B3 00rr                      1- 1345     	MOVAR	r0x103D
     00B4 212D                      1- 1346     	MOVIA	0x2d
     00B5 03rr                      1- 1347     	ADDAR	r0x103D,W
     00B6 00rr                      1- 1348     	MOVAR	_tempDuty
     00B7 3rrr                      1- 1349     	LGOTO	_00764_DS_
     00B8                           1- 1350     _00763_DS_:
                                    1- 1351     	.line	855, "main.c"; 	else if(workStep == 2)
     00B8 01rr                      1- 1352     	MOVR	_workStep,W
     00B9 2402                      1- 1353     	XORIA	0x02
     00BA 0903                      1- 1354     	BTRSS	STATUS,2
     00BB 3rrr                      1- 1355     	LGOTO	_00760_DS_
                                    1- 1356     	.line	857, "main.c"; 	tempDuty = maxDuty + workStep*4 + 42;
     00BC 2104                      1- 1357     	MOVIA	0x04
     00BD 00rr                      1- 1358     	MOVAR	STK00
     00BE 01rr                      1- 1359     	MOVR	_workStep,W
     00BF 2rrr                      1- 1360     	LCALL	__mulchar
                                    1- 1361     ;;3	MOVAR	r0x103D
     00C0 03rr                      1- 1362     	ADDAR	_maxDuty,W
     00C1 00rr                      1- 1363     	MOVAR	r0x103D
     00C2 212A                      1- 1364     	MOVIA	0x2a
     00C3 03rr                      1- 1365     	ADDAR	r0x103D,W
     00C4 00rr                      1- 1366     	MOVAR	_tempDuty
     00C5 3rrr                      1- 1367     	LGOTO	_00764_DS_
     00C6                           1- 1368     _00760_DS_:
                                    1- 1369     	.line	859, "main.c"; 	else if(workStep == 3)
     00C6 01rr                      1- 1370     	MOVR	_workStep,W
     00C7 2403                      1- 1371     	XORIA	0x03
     00C8 0903                      1- 1372     	BTRSS	STATUS,2
     00C9 3rrr                      1- 1373     	LGOTO	_00764_DS_
                                    1- 1374     	.line	861, "main.c"; 	tempDuty = maxDuty + workStep*4 + 40;
     00CA 2104                      1- 1375     	MOVIA	0x04
     00CB 00rr                      1- 1376     	MOVAR	STK00
     00CC 01rr                      1- 1377     	MOVR	_workStep,W
     00CD 2rrr                      1- 1378     	LCALL	__mulchar
                                    1- 1379     ;;3	MOVAR	r0x103D
     00CE 03rr                      1- 1380     	ADDAR	_maxDuty,W
     00CF 00rr                      1- 1381     	MOVAR	r0x103D
     00D0 2128                      1- 1382     	MOVIA	0x28
     00D1 03rr                      1- 1383     	ADDAR	r0x103D,W
     00D2 00rr                      1- 1384     	MOVAR	_tempDuty
     00D3                           1- 1385     _00764_DS_:
                                    1- 1386     	.line	863, "main.c"; 	PWM2DUTY = tempDuty;
     00D3 01rr                      1- 1387     	MOVR	_tempDuty,W
     00D4 00rr                      1- 1388     	SFUN	_PWM2DUTY
     00D5 3rrr                      1- 1389     	LGOTO	_00769_DS_
                                    1- 1390     ;;unsigned compare: left < lit (0x44=68), size=2
     00D6                           1- 1391     _00768_DS_:
                                    1- 1392     	.line	865, "main.c"; 	else if(R_AIN4_DATA < 68)
     00D6 2100                      1- 1393     	MOVIA	0x00
     00D7 04rr                      1- 1394     	SUBAR	(_R_AIN4_DATA + 1),W
     00D8 0903                      1- 1395     	BTRSS	STATUS,2
     00D9 3rrr                      1- 1396     	LGOTO	_00854_DS_
     00DA 2144                      1- 1397     	MOVIA	0x44
     00DB 04rr                      1- 1398     	SUBAR	_R_AIN4_DATA,W
     00DC                           1- 1399     _00854_DS_:
     00DC 0C03                      1- 1400     	BTRSC	STATUS,0
     00DD 3rrr                      1- 1401     	LGOTO	_00769_DS_
                                    1- 1402     	.line	867, "main.c"; 	PWM2DUTY = maxDuty;
     00DE 01rr                      1- 1403     	MOVR	_maxDuty,W
     00DF 00rr                      1- 1404     	SFUN	_PWM2DUTY
     00E0                           1- 1405     _00769_DS_:
                                    1- 1406     	.line	869, "main.c"; 	if(workStep > 0)
     00E0 01rr                      1- 1407     	MOVR	_workStep,W
     00E1 0D03                      1- 1408     	BTRSC	STATUS,2
     00E2 3rrr                      1- 1409     	LGOTO	_00783_DS_
                                    1- 1410     	.line	870, "main.c"; 	ledStep = workStep;
     00E3 01rr                      1- 1411     	MOVR	_workStep,W
     00E4 00rr                      1- 1412     	MOVAR	_ledStep
     00E5                           1- 1413     _00783_DS_:
                                    1- 1414     	.line	874, "main.c"; 	}
                                    1- 1415     	RETURN	
     00E5 0010                      3-   26 m1      ret
                                    1- 1416     ; exit point of _checkOutA
                                    1- 1418     ;***
                                    1- 1419     ;  pBlock Stats: dbName = C
                                    1- 1420     ;***
                                    1- 1421     ;has an exit
                                    1- 1422     ;functions called:
                                    1- 1423     ;   _F_AIN3_Convert
                                    1- 1424     ;   _F_AIN3_Convert
                                    1- 1425     ;4 compiler assigned registers:
                                    1- 1426     ;   r0x1041
                                    1- 1427     ;   r0x1042
                                    1- 1428     ;   r0x1043
                                    1- 1429     ;   r0x1044
                                    1- 1430     ;; Starting pCode block
                                    1- 1431     .segment "code"; module=main, function=_checkChrgV
     0000                           1- 1433     _checkChrgV:
                                    1- 1434     ; 2 exit points
                                    1- 1435     	.line	777, "main.c"; 	R_AIN3_DATA = R_AIN3_DATA_LB = 0x00;
     0000 02rr                      1- 1436     	CLRR	_R_AIN3_DATA_LB
     0001 02rr                      1- 1437     	CLRR	_R_AIN3_DATA
     0002 02rr                      1- 1438     	CLRR	(_R_AIN3_DATA + 1)
                                    1- 1439     	.line	778, "main.c"; 	F_AIN3_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1- 1440     	MOVIA	0x08
     0004 2rrr                      1- 1441     	LCALL	_F_AIN3_Convert
                                    1- 1442     	.line	779, "main.c"; 	R_AIN3_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1- 1443     	SWAPR	(_R_AIN3_DATA + 1),W
     0006 22F0                      1- 1444     	ANDIA	0xf0
     0007 00rr                      1- 1445     	MOVAR	(_R_AIN3_DATA + 1)
     0008 15rr                      1- 1446     	SWAPR	_R_AIN3_DATA,W
     0009 00rr                      1- 1447     	MOVAR	_R_AIN3_DATA
     000A 220F                      1- 1448     	ANDIA	0x0f
     000B 11rr                      1- 1449     	IORAR	(_R_AIN3_DATA + 1),F
     000C 12rr                      1- 1450     	XORAR	_R_AIN3_DATA,F
                                    1- 1451     	.line	780, "main.c"; 	R_AIN3_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1- 1452     	MOVIA	0xf0
     000E 10rr                      1- 1453     	ANDAR	_R_AIN3_DATA_LB,F
                                    1- 1454     	.line	781, "main.c"; 	R_AIN3_DATA += R_AIN3_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1- 1455     	MOVR	_R_AIN3_DATA_LB,W
     0010 00rr                      1- 1456     	MOVAR	r0x1043
                                    1- 1457     ;;1	MOVAR	r0x1041
                                    1- 1458     ;;1	CLRR	r0x1042
                                    1- 1459     ;;100	MOVR	r0x1041,W
     0011 2100                      1- 1460     	MOVIA	0x00
     0012 00rr                      1- 1461     	MOVAR	r0x1044
     0013 01rr                      1- 1462     	MOVR	r0x1043,W
     0014 03rr                      1- 1463     	ADDAR	_R_AIN3_DATA,F
     0015 01rr                      1- 1464     	MOVR	r0x1044,W
     0016 0C03                      1- 1465     	BTRSC	STATUS,0
     0017 16rr                      1- 1466     	INCRSZ	r0x1044,W
     0018 03rr                      1- 1467     	ADDAR	(_R_AIN3_DATA + 1),F
                                    1- 1468     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1- 1469     	.line	782, "main.c"; 	R_AIN3_DATA >>=3;					// R_AIN0_DATA divided 8
     0019 1C03                      1- 1470     	BCR	STATUS,0
     001A 13rr                      1- 1471     	RRR	(_R_AIN3_DATA + 1),F
     001B 13rr                      1- 1472     	RRR	_R_AIN3_DATA,F
                                    1- 1473     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1- 1474     	BCR	STATUS,0
     001D 13rr                      1- 1475     	RRR	(_R_AIN3_DATA + 1),F
     001E 13rr                      1- 1476     	RRR	_R_AIN3_DATA,F
                                    1- 1477     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1- 1478     	BCR	STATUS,0
     0020 13rr                      1- 1479     	RRR	(_R_AIN3_DATA + 1),F
     0021 13rr                      1- 1480     	RRR	_R_AIN3_DATA,F
                                    1- 1481     	.line	783, "main.c"; 	}
                                    1- 1482     	RETURN	
     0022 0010                      3-   26 m1      ret
                                    1- 1483     ; exit point of _checkChrgV
                                    1- 1485     ;***
                                    1- 1486     ;  pBlock Stats: dbName = C
                                    1- 1487     ;***
                                    1- 1488     ;has an exit
                                    1- 1489     ;functions called:
                                    1- 1490     ;   _F_AIN2_Convert
                                    1- 1491     ;   _F_AIN2_Convert
                                    1- 1492     ;4 compiler assigned registers:
                                    1- 1493     ;   r0x1045
                                    1- 1494     ;   r0x1046
                                    1- 1495     ;   r0x1047
                                    1- 1496     ;   r0x1048
                                    1- 1497     ;; Starting pCode block
                                    1- 1498     .segment "code"; module=main, function=_checkBatAD
     0000                           1- 1500     _checkBatAD:
                                    1- 1501     ; 2 exit points
                                    1- 1502     	.line	631, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = 0x00;
     0000 02rr                      1- 1503     	CLRR	_R_AIN2_DATA_LB
     0001 02rr                      1- 1504     	CLRR	_R_AIN2_DATA
     0002 02rr                      1- 1505     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1506     	.line	632, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1- 1507     	MOVIA	0x08
     0004 2rrr                      1- 1508     	LCALL	_F_AIN2_Convert
                                    1- 1509     	.line	633, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1- 1510     	SWAPR	(_R_AIN2_DATA + 1),W
     0006 22F0                      1- 1511     	ANDIA	0xf0
     0007 00rr                      1- 1512     	MOVAR	(_R_AIN2_DATA + 1)
     0008 15rr                      1- 1513     	SWAPR	_R_AIN2_DATA,W
     0009 00rr                      1- 1514     	MOVAR	_R_AIN2_DATA
     000A 220F                      1- 1515     	ANDIA	0x0f
     000B 11rr                      1- 1516     	IORAR	(_R_AIN2_DATA + 1),F
     000C 12rr                      1- 1517     	XORAR	_R_AIN2_DATA,F
                                    1- 1518     	.line	634, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1- 1519     	MOVIA	0xf0
     000E 10rr                      1- 1520     	ANDAR	_R_AIN2_DATA_LB,F
                                    1- 1521     	.line	635, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1- 1522     	MOVR	_R_AIN2_DATA_LB,W
     0010 00rr                      1- 1523     	MOVAR	r0x1047
                                    1- 1524     ;;1	MOVAR	r0x1045
                                    1- 1525     ;;1	CLRR	r0x1046
                                    1- 1526     ;;99	MOVR	r0x1045,W
     0011 2100                      1- 1527     	MOVIA	0x00
     0012 00rr                      1- 1528     	MOVAR	r0x1048
     0013 01rr                      1- 1529     	MOVR	r0x1047,W
     0014 03rr                      1- 1530     	ADDAR	_R_AIN2_DATA,F
     0015 01rr                      1- 1531     	MOVR	r0x1048,W
     0016 0C03                      1- 1532     	BTRSC	STATUS,0
     0017 16rr                      1- 1533     	INCRSZ	r0x1048,W
     0018 03rr                      1- 1534     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1- 1535     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1- 1536     	.line	636, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 
     0019 1C03                      1- 1537     	BCR	STATUS,0
     001A 13rr                      1- 1538     	RRR	(_R_AIN2_DATA + 1),F
     001B 13rr                      1- 1539     	RRR	_R_AIN2_DATA,F
                                    1- 1540     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1- 1541     	BCR	STATUS,0
     001D 13rr                      1- 1542     	RRR	(_R_AIN2_DATA + 1),F
     001E 13rr                      1- 1543     	RRR	_R_AIN2_DATA,F
                                    1- 1544     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1- 1545     	BCR	STATUS,0
     0020 13rr                      1- 1546     	RRR	(_R_AIN2_DATA + 1),F
     0021 13rr                      1- 1547     	RRR	_R_AIN2_DATA,F
                                    1- 1548     	.line	637, "main.c"; 	if(debug)
     0022 01rr                      1- 1549     	MOVR	_debug,W
     0023 0D03                      1- 1550     	BTRSC	STATUS,2
     0024 3rrr                      1- 1551     	LGOTO	_00493_DS_
                                    1- 1552     	.line	638, "main.c"; 	R_AIN2_DATA = BATTLE;
     0025 210E                      1- 1553     	MOVIA	0x0e
     0026 00rr                      1- 1554     	MOVAR	_R_AIN2_DATA
     0027 2106                      1- 1555     	MOVIA	0x06
     0028 00rr                      1- 1556     	MOVAR	(_R_AIN2_DATA + 1)
                                    1- 1557     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1558     ;;unsigned compare: left >= lit (0x60F=1551), size=2
     0029                           1- 1559     _00493_DS_:
                                    1- 1560     	.line	640, "main.c"; 	if(R_AIN2_DATA > 1550)
     0029 2106                      1- 1561     	MOVIA	0x06
     002A 04rr                      1- 1562     	SUBAR	(_R_AIN2_DATA + 1),W
     002B 0903                      1- 1563     	BTRSS	STATUS,2
     002C 3rrr                      1- 1564     	LGOTO	_00699_DS_
     002D 210F                      1- 1565     	MOVIA	0x0f
     002E 04rr                      1- 1566     	SUBAR	_R_AIN2_DATA,W
     002F                           1- 1567     _00699_DS_:
     002F 0803                      1- 1568     	BTRSS	STATUS,0
     0030 3rrr                      1- 1569     	LGOTO	_00505_DS_
                                    1- 1570     	.line	643, "main.c"; 	lowCount = 0;
     0031 02rr                      1- 1571     	CLRR	_lowCount
     0032 3rrr                      1- 1572     	LGOTO	_00506_DS_
                                    1- 1573     ;;unsigned compare: left < lit (0x479=1145), size=2
     0033                           1- 1574     _00505_DS_:
                                    1- 1575     	.line	645, "main.c"; 	else if(R_AIN2_DATA < 1145)
     0033 2104                      1- 1576     	MOVIA	0x04
     0034 04rr                      1- 1577     	SUBAR	(_R_AIN2_DATA + 1),W
     0035 0903                      1- 1578     	BTRSS	STATUS,2
     0036 3rrr                      1- 1579     	LGOTO	_00700_DS_
     0037 2179                      1- 1580     	MOVIA	0x79
     0038 04rr                      1- 1581     	SUBAR	_R_AIN2_DATA,W
     0039                           1- 1582     _00700_DS_:
     0039 0C03                      1- 1583     	BTRSC	STATUS,0
     003A 3rrr                      1- 1584     	LGOTO	_00502_DS_
                                    1- 1585     	.line	647, "main.c"; 	if(++lowCount < 10)
     003B 05rr                      1- 1586     	INCR	_lowCount,F
                                    1- 1587     ;;unsigned compare: left < lit (0xA=10), size=1
     003C 210A                      1- 1588     	MOVIA	0x0a
     003D 04rr                      1- 1589     	SUBAR	_lowCount,W
     003E 0803                      1- 1590     	BTRSS	STATUS,0
                                    1- 1591     	.line	648, "main.c"; 	return;
     003F 3rrr                      1- 1592     	LGOTO	_00580_DS_
                                    1- 1593     	.line	649, "main.c"; 	lowCount = 10;
     0040 210A                      1- 1594     	MOVIA	0x0a
     0041 00rr                      1- 1595     	MOVAR	_lowCount
                                    1- 1596     	.line	650, "main.c"; 	pwStep = 0;
     0042 02rr                      1- 1597     	CLRR	_pwStep
                                    1- 1598     	.line	651, "main.c"; 	R_AIN2_DATA = 1145;
     0043 2179                      1- 1599     	MOVIA	0x79
     0044 00rr                      1- 1600     	MOVAR	_R_AIN2_DATA
     0045 2104                      1- 1601     	MOVIA	0x04
     0046 00rr                      1- 1602     	MOVAR	(_R_AIN2_DATA + 1)
                                    1- 1603     	.line	653, "main.c"; 	if(workStep > 0 && ++firstTime == 10)
     0047 01rr                      1- 1604     	MOVR	_workStep,W
     0048 0D03                      1- 1605     	BTRSC	STATUS,2
     0049 3rrr                      1- 1606     	LGOTO	_00497_DS_
     004A 05rr                      1- 1607     	INCR	_firstTime,F
     004B 01rr                      1- 1608     	MOVR	_firstTime,W
     004C 240A                      1- 1609     	XORIA	0x0a
     004D 0903                      1- 1610     	BTRSS	STATUS,2
     004E 3rrr                      1- 1611     	LGOTO	_00497_DS_
                                    1- 1612     	.line	655, "main.c"; 	shanshuoTime = 16;
     004F 2110                      1- 1613     	MOVIA	0x10
     0050 00rr                      1- 1614     	MOVAR	_shanshuoTime
                                    1- 1615     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1616     ;;unsigned compare: left >= lit (0xC=12), size=1
     0051                           1- 1617     _00497_DS_:
                                    1- 1618     	.line	658, "main.c"; 	if(firstTime > 11)
     0051 210C                      1- 1619     	MOVIA	0x0c
     0052 04rr                      1- 1620     	SUBAR	_firstTime,W
     0053 0803                      1- 1621     	BTRSS	STATUS,0
     0054 3rrr                      1- 1622     	LGOTO	_00506_DS_
                                    1- 1623     	.line	659, "main.c"; 	firstTime = 11;
     0055 210B                      1- 1624     	MOVIA	0x0b
     0056 00rr                      1- 1625     	MOVAR	_firstTime
     0057 3rrr                      1- 1626     	LGOTO	_00506_DS_
     0058                           1- 1627     _00502_DS_:
                                    1- 1628     	.line	663, "main.c"; 	lowCount = 0;
     0058 02rr                      1- 1629     	CLRR	_lowCount
                                    1- 1630     	.line	664, "main.c"; 	firstTime = 0;
     0059 02rr                      1- 1631     	CLRR	_firstTime
     005A                           1- 1632     _00506_DS_:
                                    1- 1633     	.line	666, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA - 1145;
     005A 2187                      1- 1634     	MOVIA	0x87
     005B 03rr                      1- 1635     	ADDAR	_R_AIN2_DATA,F
     005C 21FB                      1- 1636     	MOVIA	0xfb
     005D 0C03                      1- 1637     	BTRSC	STATUS,0
     005E 21FC                      1- 1638     	MOVIA	0xfc
     005F 03rr                      1- 1639     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1- 1640     ;;unsigned compare: left < lit (0x1A6=422), size=2
                                    1- 1641     	.line	668, "main.c"; 	if(R_AIN2_DATA >= 422)
     0060 2101                      1- 1642     	MOVIA	0x01
     0061 04rr                      1- 1643     	SUBAR	(_R_AIN2_DATA + 1),W
     0062 0903                      1- 1644     	BTRSS	STATUS,2
     0063 3rrr                      1- 1645     	LGOTO	_00703_DS_
     0064 21A6                      1- 1646     	MOVIA	0xa6
     0065 04rr                      1- 1647     	SUBAR	_R_AIN2_DATA,W
     0066                           1- 1648     _00703_DS_:
     0066 0803                      1- 1649     	BTRSS	STATUS,0
     0067 3rrr                      1- 1650     	LGOTO	_00578_DS_
                                    1- 1651     	.line	670, "main.c"; 	pwStep = 7;
     0068 2107                      1- 1652     	MOVIA	0x07
     0069 00rr                      1- 1653     	MOVAR	_pwStep
     006A 3rrr                      1- 1654     	LGOTO	_00580_DS_
                                    1- 1655     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1656     ;;unsigned compare: left >= lit (0x15F=351), size=2
     006B                           1- 1657     _00578_DS_:
                                    1- 1658     	.line	672, "main.c"; 	else if(R_AIN2_DATA > 350)
     006B 2101                      1- 1659     	MOVIA	0x01
     006C 04rr                      1- 1660     	SUBAR	(_R_AIN2_DATA + 1),W
     006D 0903                      1- 1661     	BTRSS	STATUS,2
     006E 3rrr                      1- 1662     	LGOTO	_00704_DS_
     006F 215F                      1- 1663     	MOVIA	0x5f
     0070 04rr                      1- 1664     	SUBAR	_R_AIN2_DATA,W
     0071                           1- 1665     _00704_DS_:
     0071 0803                      1- 1666     	BTRSS	STATUS,0
     0072 3rrr                      1- 1667     	LGOTO	_00575_DS_
                                    1- 1668     	.line	674, "main.c"; 	fullCount = 0;
     0073 02rr                      1- 1669     	CLRR	_fullCount
                                    1- 1670     ;;unsigned compare: left < lit (0x6=6), size=1
                                    1- 1671     	.line	675, "main.c"; 	if(pwStep < 6)
     0074 2106                      1- 1672     	MOVIA	0x06
     0075 04rr                      1- 1673     	SUBAR	_pwStep,W
     0076 0C03                      1- 1674     	BTRSC	STATUS,0
     0077 3rrr                      1- 1675     	LGOTO	_00513_DS_
                                    1- 1676     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1677     ;;unsigned compare: left >= lit (0x164=356), size=2
                                    1- 1678     	.line	677, "main.c"; 	if(R_AIN2_DATA > 355)
     0078 2101                      1- 1679     	MOVIA	0x01
     0079 04rr                      1- 1680     	SUBAR	(_R_AIN2_DATA + 1),W
     007A 0903                      1- 1681     	BTRSS	STATUS,2
     007B 3rrr                      1- 1682     	LGOTO	_00706_DS_
     007C 2164                      1- 1683     	MOVIA	0x64
     007D 04rr                      1- 1684     	SUBAR	_R_AIN2_DATA,W
     007E                           1- 1685     _00706_DS_:
     007E 0803                      1- 1686     	BTRSS	STATUS,0
     007F 3rrr                      1- 1687     	LGOTO	_00514_DS_
                                    1- 1688     	.line	678, "main.c"; 	pwStep = 6;
     0080 2106                      1- 1689     	MOVIA	0x06
     0081 00rr                      1- 1690     	MOVAR	_pwStep
     0082 3rrr                      1- 1691     	LGOTO	_00514_DS_
     0083                           1- 1692     _00513_DS_:
                                    1- 1693     	.line	680, "main.c"; 	else if(chrgTime == 0 && R_AIN2_DATA < 396)
     0083 01rr                      1- 1694     	MOVR	_chrgTime,W
     0084 11rr                      1- 1695     	IORAR	(_chrgTime + 1),W
     0085 0903                      1- 1696     	BTRSS	STATUS,2
     0086 3rrr                      1- 1697     	LGOTO	_00514_DS_
                                    1- 1698     ;;unsigned compare: left < lit (0x18C=396), size=2
     0087 2101                      1- 1699     	MOVIA	0x01
     0088 04rr                      1- 1700     	SUBAR	(_R_AIN2_DATA + 1),W
     0089 0903                      1- 1701     	BTRSS	STATUS,2
     008A 3rrr                      1- 1702     	LGOTO	_00707_DS_
     008B 218C                      1- 1703     	MOVIA	0x8c
     008C 04rr                      1- 1704     	SUBAR	_R_AIN2_DATA,W
     008D                           1- 1705     _00707_DS_:
     008D 0C03                      1- 1706     	BTRSC	STATUS,0
     008E 3rrr                      1- 1707     	LGOTO	_00514_DS_
                                    1- 1708     	.line	682, "main.c"; 	pwStep = 6;
     008F 2106                      1- 1709     	MOVIA	0x06
     0090 00rr                      1- 1710     	MOVAR	_pwStep
     0091                           1- 1711     _00514_DS_:
                                    1- 1712     	.line	686, "main.c"; 	if(chrgTime > 0 && R_AIN2_DATA > 395 && chrgTime > 600)
     0091 01rr                      1- 1713     	MOVR	_chrgTime,W
     0092 11rr                      1- 1714     	IORAR	(_chrgTime + 1),W
     0093 0D03                      1- 1715     	BTRSC	STATUS,2
     0094 3rrr                      1- 1716     	LGOTO	_00580_DS_
                                    1- 1717     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1718     ;;unsigned compare: left >= lit (0x18C=396), size=2
     0095 2101                      1- 1719     	MOVIA	0x01
     0096 04rr                      1- 1720     	SUBAR	(_R_AIN2_DATA + 1),W
     0097 0903                      1- 1721     	BTRSS	STATUS,2
     0098 3rrr                      1- 1722     	LGOTO	_00708_DS_
     0099 218C                      1- 1723     	MOVIA	0x8c
     009A 04rr                      1- 1724     	SUBAR	_R_AIN2_DATA,W
     009B                           1- 1725     _00708_DS_:
     009B 0803                      1- 1726     	BTRSS	STATUS,0
     009C 3rrr                      1- 1727     	LGOTO	_00580_DS_
                                    1- 1728     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1729     ;;unsigned compare: left >= lit (0x259=601), size=2
     009D 2102                      1- 1730     	MOVIA	0x02
     009E 04rr                      1- 1731     	SUBAR	(_chrgTime + 1),W
     009F 0903                      1- 1732     	BTRSS	STATUS,2
     00A0 3rrr                      1- 1733     	LGOTO	_00709_DS_
     00A1 2159                      1- 1734     	MOVIA	0x59
     00A2 04rr                      1- 1735     	SUBAR	_chrgTime,W
     00A3                           1- 1736     _00709_DS_:
     00A3 0803                      1- 1737     	BTRSS	STATUS,0
     00A4 3rrr                      1- 1738     	LGOTO	_00580_DS_
                                    1- 1739     	.line	688, "main.c"; 	chrgTime = 600;
     00A5 2158                      1- 1740     	MOVIA	0x58
     00A6 00rr                      1- 1741     	MOVAR	_chrgTime
     00A7 2102                      1- 1742     	MOVIA	0x02
     00A8 00rr                      1- 1743     	MOVAR	(_chrgTime + 1)
                                    1- 1744     	.line	689, "main.c"; 	pwStep = 7;
     00A9 2107                      1- 1745     	MOVIA	0x07
     00AA 00rr                      1- 1746     	MOVAR	_pwStep
     00AB 3rrr                      1- 1747     	LGOTO	_00580_DS_
                                    1- 1748     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1749     ;;unsigned compare: left >= lit (0x146=326), size=2
     00AC                           1- 1750     _00575_DS_:
                                    1- 1751     	.line	692, "main.c"; 	else if(R_AIN2_DATA > 325)
     00AC 2101                      1- 1752     	MOVIA	0x01
     00AD 04rr                      1- 1753     	SUBAR	(_R_AIN2_DATA + 1),W
     00AE 0903                      1- 1754     	BTRSS	STATUS,2
     00AF 3rrr                      1- 1755     	LGOTO	_00710_DS_
     00B0 2146                      1- 1756     	MOVIA	0x46
     00B1 04rr                      1- 1757     	SUBAR	_R_AIN2_DATA,W
     00B2                           1- 1758     _00710_DS_:
     00B2 0803                      1- 1759     	BTRSS	STATUS,0
     00B3 3rrr                      1- 1760     	LGOTO	_00572_DS_
                                    1- 1761     	.line	695, "main.c"; 	if(pwStep == 4)
     00B4 01rr                      1- 1762     	MOVR	_pwStep,W
     00B5 2404                      1- 1763     	XORIA	0x04
     00B6 0903                      1- 1764     	BTRSS	STATUS,2
     00B7 3rrr                      1- 1765     	LGOTO	_00522_DS_
                                    1- 1766     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1767     ;;unsigned compare: left >= lit (0x14B=331), size=2
                                    1- 1768     	.line	697, "main.c"; 	if(R_AIN2_DATA > 330)
     00B8 2101                      1- 1769     	MOVIA	0x01
     00B9 04rr                      1- 1770     	SUBAR	(_R_AIN2_DATA + 1),W
     00BA 0903                      1- 1771     	BTRSS	STATUS,2
     00BB 3rrr                      1- 1772     	LGOTO	_00711_DS_
     00BC 214B                      1- 1773     	MOVIA	0x4b
     00BD 04rr                      1- 1774     	SUBAR	_R_AIN2_DATA,W
     00BE                           1- 1775     _00711_DS_:
     00BE 0803                      1- 1776     	BTRSS	STATUS,0
     00BF 3rrr                      1- 1777     	LGOTO	_00522_DS_
                                    1- 1778     	.line	698, "main.c"; 	pwStep = 5;
     00C0 2105                      1- 1779     	MOVIA	0x05
     00C1 00rr                      1- 1780     	MOVAR	_pwStep
                                    1- 1781     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1782     ;;unsigned compare: left >= lit (0x6=6), size=1
     00C2                           1- 1783     _00522_DS_:
                                    1- 1784     	.line	700, "main.c"; 	if(pwStep > 5)
     00C2 2106                      1- 1785     	MOVIA	0x06
     00C3 04rr                      1- 1786     	SUBAR	_pwStep,W
     00C4 0803                      1- 1787     	BTRSS	STATUS,0
     00C5 3rrr                      1- 1788     	LGOTO	_00526_DS_
                                    1- 1789     ;;unsigned compare: left < lit (0x16D=365), size=2
                                    1- 1790     	.line	702, "main.c"; 	if(R_AIN2_DATA < 365)
     00C6 2101                      1- 1791     	MOVIA	0x01
     00C7 04rr                      1- 1792     	SUBAR	(_R_AIN2_DATA + 1),W
     00C8 0903                      1- 1793     	BTRSS	STATUS,2
     00C9 3rrr                      1- 1794     	LGOTO	_00713_DS_
     00CA 216D                      1- 1795     	MOVIA	0x6d
     00CB 04rr                      1- 1796     	SUBAR	_R_AIN2_DATA,W
     00CC                           1- 1797     _00713_DS_:
     00CC 0C03                      1- 1798     	BTRSC	STATUS,0
     00CD 3rrr                      1- 1799     	LGOTO	_00527_DS_
                                    1- 1800     	.line	703, "main.c"; 	pwStep = 5;
     00CE 2105                      1- 1801     	MOVIA	0x05
     00CF 00rr                      1- 1802     	MOVAR	_pwStep
     00D0 3rrr                      1- 1803     	LGOTO	_00527_DS_
     00D1                           1- 1804     _00526_DS_:
                                    1- 1805     	.line	706, "main.c"; 	pwStep = 5;
     00D1 2105                      1- 1806     	MOVIA	0x05
     00D2 00rr                      1- 1807     	MOVAR	_pwStep
     00D3                           1- 1808     _00527_DS_:
                                    1- 1809     	.line	707, "main.c"; 	chrgTime = 0;
     00D3 02rr                      1- 1810     	CLRR	_chrgTime
     00D4 02rr                      1- 1811     	CLRR	(_chrgTime + 1)
     00D5 3rrr                      1- 1812     	LGOTO	_00580_DS_
                                    1- 1813     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1814     ;;unsigned compare: left >= lit (0x105=261), size=2
     00D6                           1- 1815     _00572_DS_:
                                    1- 1816     	.line	709, "main.c"; 	else if(R_AIN2_DATA > 260)
     00D6 2101                      1- 1817     	MOVIA	0x01
     00D7 04rr                      1- 1818     	SUBAR	(_R_AIN2_DATA + 1),W
     00D8 0903                      1- 1819     	BTRSS	STATUS,2
     00D9 3rrr                      1- 1820     	LGOTO	_00714_DS_
     00DA 2105                      1- 1821     	MOVIA	0x05
     00DB 04rr                      1- 1822     	SUBAR	_R_AIN2_DATA,W
     00DC                           1- 1823     _00714_DS_:
     00DC 0803                      1- 1824     	BTRSS	STATUS,0
     00DD 3rrr                      1- 1825     	LGOTO	_00569_DS_
                                    1- 1826     	.line	711, "main.c"; 	if(pwStep == 3)
     00DE 01rr                      1- 1827     	MOVR	_pwStep,W
     00DF 2403                      1- 1828     	XORIA	0x03
     00E0 0903                      1- 1829     	BTRSS	STATUS,2
     00E1 3rrr                      1- 1830     	LGOTO	_00531_DS_
                                    1- 1831     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1832     ;;unsigned compare: left >= lit (0x10A=266), size=2
                                    1- 1833     	.line	713, "main.c"; 	if(R_AIN2_DATA > 265)
     00E2 2101                      1- 1834     	MOVIA	0x01
     00E3 04rr                      1- 1835     	SUBAR	(_R_AIN2_DATA + 1),W
     00E4 0903                      1- 1836     	BTRSS	STATUS,2
     00E5 3rrr                      1- 1837     	LGOTO	_00715_DS_
     00E6 210A                      1- 1838     	MOVIA	0x0a
     00E7 04rr                      1- 1839     	SUBAR	_R_AIN2_DATA,W
     00E8                           1- 1840     _00715_DS_:
     00E8 0803                      1- 1841     	BTRSS	STATUS,0
     00E9 3rrr                      1- 1842     	LGOTO	_00531_DS_
                                    1- 1843     	.line	714, "main.c"; 	pwStep = 4;
     00EA 2104                      1- 1844     	MOVIA	0x04
     00EB 00rr                      1- 1845     	MOVAR	_pwStep
                                    1- 1846     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1847     ;;unsigned compare: left >= lit (0x5=5), size=1
     00EC                           1- 1848     _00531_DS_:
                                    1- 1849     	.line	716, "main.c"; 	if(pwStep > 4)
     00EC 2105                      1- 1850     	MOVIA	0x05
     00ED 04rr                      1- 1851     	SUBAR	_pwStep,W
     00EE 0803                      1- 1852     	BTRSS	STATUS,0
     00EF 3rrr                      1- 1853     	LGOTO	_00535_DS_
                                    1- 1854     ;;unsigned compare: left < lit (0x140=320), size=2
                                    1- 1855     	.line	718, "main.c"; 	if(R_AIN2_DATA < 320)
     00F0 2101                      1- 1856     	MOVIA	0x01
     00F1 04rr                      1- 1857     	SUBAR	(_R_AIN2_DATA + 1),W
     00F2 0903                      1- 1858     	BTRSS	STATUS,2
     00F3 3rrr                      1- 1859     	LGOTO	_00717_DS_
     00F4 2140                      1- 1860     	MOVIA	0x40
     00F5 04rr                      1- 1861     	SUBAR	_R_AIN2_DATA,W
     00F6                           1- 1862     _00717_DS_:
     00F6 0C03                      1- 1863     	BTRSC	STATUS,0
     00F7 3rrr                      1- 1864     	LGOTO	_00536_DS_
                                    1- 1865     	.line	719, "main.c"; 	pwStep = 4;
     00F8 2104                      1- 1866     	MOVIA	0x04
     00F9 00rr                      1- 1867     	MOVAR	_pwStep
     00FA 3rrr                      1- 1868     	LGOTO	_00536_DS_
     00FB                           1- 1869     _00535_DS_:
                                    1- 1870     	.line	722, "main.c"; 	pwStep = 4;
     00FB 2104                      1- 1871     	MOVIA	0x04
     00FC 00rr                      1- 1872     	MOVAR	_pwStep
     00FD                           1- 1873     _00536_DS_:
                                    1- 1874     	.line	723, "main.c"; 	chrgTime = 0;
     00FD 02rr                      1- 1875     	CLRR	_chrgTime
     00FE 02rr                      1- 1876     	CLRR	(_chrgTime + 1)
     00FF 3rrr                      1- 1877     	LGOTO	_00580_DS_
                                    1- 1878     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1879     ;;unsigned compare: left >= lit (0xC9=201), size=2
     0100                           1- 1880     _00569_DS_:
                                    1- 1881     	.line	725, "main.c"; 	else if(R_AIN2_DATA > 200)
     0100 2100                      1- 1882     	MOVIA	0x00
     0101 04rr                      1- 1883     	SUBAR	(_R_AIN2_DATA + 1),W
     0102 0903                      1- 1884     	BTRSS	STATUS,2
     0103 3rrr                      1- 1885     	LGOTO	_00718_DS_
     0104 21C9                      1- 1886     	MOVIA	0xc9
     0105 04rr                      1- 1887     	SUBAR	_R_AIN2_DATA,W
     0106                           1- 1888     _00718_DS_:
     0106 0803                      1- 1889     	BTRSS	STATUS,0
     0107 3rrr                      1- 1890     	LGOTO	_00566_DS_
                                    1- 1891     	.line	727, "main.c"; 	if(pwStep == 2)
     0108 01rr                      1- 1892     	MOVR	_pwStep,W
     0109 2402                      1- 1893     	XORIA	0x02
     010A 0903                      1- 1894     	BTRSS	STATUS,2
     010B 3rrr                      1- 1895     	LGOTO	_00540_DS_
                                    1- 1896     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1897     ;;unsigned compare: left >= lit (0xD3=211), size=2
                                    1- 1898     	.line	729, "main.c"; 	if(R_AIN2_DATA > 210)
     010C 2100                      1- 1899     	MOVIA	0x00
     010D 04rr                      1- 1900     	SUBAR	(_R_AIN2_DATA + 1),W
     010E 0903                      1- 1901     	BTRSS	STATUS,2
     010F 3rrr                      1- 1902     	LGOTO	_00719_DS_
     0110 21D3                      1- 1903     	MOVIA	0xd3
     0111 04rr                      1- 1904     	SUBAR	_R_AIN2_DATA,W
     0112                           1- 1905     _00719_DS_:
     0112 0803                      1- 1906     	BTRSS	STATUS,0
     0113 3rrr                      1- 1907     	LGOTO	_00540_DS_
                                    1- 1908     	.line	730, "main.c"; 	pwStep = 3;
     0114 2103                      1- 1909     	MOVIA	0x03
     0115 00rr                      1- 1910     	MOVAR	_pwStep
                                    1- 1911     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1912     ;;unsigned compare: left >= lit (0x4=4), size=1
     0116                           1- 1913     _00540_DS_:
                                    1- 1914     	.line	732, "main.c"; 	if(pwStep > 3)
     0116 2104                      1- 1915     	MOVIA	0x04
     0117 04rr                      1- 1916     	SUBAR	_pwStep,W
     0118 0803                      1- 1917     	BTRSS	STATUS,0
     0119 3rrr                      1- 1918     	LGOTO	_00544_DS_
                                    1- 1919     ;;unsigned compare: left < lit (0x104=260), size=2
                                    1- 1920     	.line	734, "main.c"; 	if(R_AIN2_DATA < 260)
     011A 2101                      1- 1921     	MOVIA	0x01
     011B 04rr                      1- 1922     	SUBAR	(_R_AIN2_DATA + 1),W
     011C 0903                      1- 1923     	BTRSS	STATUS,2
     011D 3rrr                      1- 1924     	LGOTO	_00721_DS_
     011E 2104                      1- 1925     	MOVIA	0x04
     011F 04rr                      1- 1926     	SUBAR	_R_AIN2_DATA,W
     0120                           1- 1927     _00721_DS_:
     0120 0C03                      1- 1928     	BTRSC	STATUS,0
     0121 3rrr                      1- 1929     	LGOTO	_00545_DS_
                                    1- 1930     	.line	735, "main.c"; 	pwStep = 3;
     0122 2103                      1- 1931     	MOVIA	0x03
     0123 00rr                      1- 1932     	MOVAR	_pwStep
     0124 3rrr                      1- 1933     	LGOTO	_00545_DS_
     0125                           1- 1934     _00544_DS_:
                                    1- 1935     	.line	738, "main.c"; 	pwStep = 3;
     0125 2103                      1- 1936     	MOVIA	0x03
     0126 00rr                      1- 1937     	MOVAR	_pwStep
     0127                           1- 1938     _00545_DS_:
                                    1- 1939     	.line	739, "main.c"; 	chrgTime = 0;
     0127 02rr                      1- 1940     	CLRR	_chrgTime
     0128 02rr                      1- 1941     	CLRR	(_chrgTime + 1)
     0129 3rrr                      1- 1942     	LGOTO	_00580_DS_
                                    1- 1943     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1944     ;;unsigned compare: left >= lit (0x65=101), size=2
     012A                           1- 1945     _00566_DS_:
                                    1- 1946     	.line	741, "main.c"; 	else if(R_AIN2_DATA > 100)
     012A 2100                      1- 1947     	MOVIA	0x00
     012B 04rr                      1- 1948     	SUBAR	(_R_AIN2_DATA + 1),W
     012C 0903                      1- 1949     	BTRSS	STATUS,2
     012D 3rrr                      1- 1950     	LGOTO	_00722_DS_
     012E 2165                      1- 1951     	MOVIA	0x65
     012F 04rr                      1- 1952     	SUBAR	_R_AIN2_DATA,W
     0130                           1- 1953     _00722_DS_:
     0130 0803                      1- 1954     	BTRSS	STATUS,0
     0131 3rrr                      1- 1955     	LGOTO	_00563_DS_
                                    1- 1956     	.line	744, "main.c"; 	if(pwStep == 1)
     0132 01rr                      1- 1957     	MOVR	_pwStep,W
     0133 2401                      1- 1958     	XORIA	0x01
     0134 0903                      1- 1959     	BTRSS	STATUS,2
     0135 3rrr                      1- 1960     	LGOTO	_00549_DS_
                                    1- 1961     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1962     ;;unsigned compare: left >= lit (0x6F=111), size=2
                                    1- 1963     	.line	746, "main.c"; 	if(R_AIN2_DATA > 110)
     0136 2100                      1- 1964     	MOVIA	0x00
     0137 04rr                      1- 1965     	SUBAR	(_R_AIN2_DATA + 1),W
     0138 0903                      1- 1966     	BTRSS	STATUS,2
     0139 3rrr                      1- 1967     	LGOTO	_00723_DS_
     013A 216F                      1- 1968     	MOVIA	0x6f
     013B 04rr                      1- 1969     	SUBAR	_R_AIN2_DATA,W
     013C                           1- 1970     _00723_DS_:
     013C 0803                      1- 1971     	BTRSS	STATUS,0
     013D 3rrr                      1- 1972     	LGOTO	_00549_DS_
                                    1- 1973     	.line	747, "main.c"; 	pwStep = 2;
     013E 2102                      1- 1974     	MOVIA	0x02
     013F 00rr                      1- 1975     	MOVAR	_pwStep
                                    1- 1976     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1977     ;;unsigned compare: left >= lit (0x3=3), size=1
     0140                           1- 1978     _00549_DS_:
                                    1- 1979     	.line	749, "main.c"; 	if(pwStep > 2)
     0140 2103                      1- 1980     	MOVIA	0x03
     0141 04rr                      1- 1981     	SUBAR	_pwStep,W
     0142 0803                      1- 1982     	BTRSS	STATUS,0
     0143 3rrr                      1- 1983     	LGOTO	_00553_DS_
                                    1- 1984     ;;unsigned compare: left < lit (0xBE=190), size=2
                                    1- 1985     	.line	751, "main.c"; 	if(R_AIN2_DATA < 190)
     0144 2100                      1- 1986     	MOVIA	0x00
     0145 04rr                      1- 1987     	SUBAR	(_R_AIN2_DATA + 1),W
     0146 0903                      1- 1988     	BTRSS	STATUS,2
     0147 3rrr                      1- 1989     	LGOTO	_00725_DS_
     0148 21BE                      1- 1990     	MOVIA	0xbe
     0149 04rr                      1- 1991     	SUBAR	_R_AIN2_DATA,W
     014A                           1- 1992     _00725_DS_:
     014A 0C03                      1- 1993     	BTRSC	STATUS,0
     014B 3rrr                      1- 1994     	LGOTO	_00554_DS_
                                    1- 1995     	.line	752, "main.c"; 	pwStep = 2;
     014C 2102                      1- 1996     	MOVIA	0x02
     014D 00rr                      1- 1997     	MOVAR	_pwStep
     014E 3rrr                      1- 1998     	LGOTO	_00554_DS_
     014F                           1- 1999     _00553_DS_:
                                    1- 2000     	.line	755, "main.c"; 	pwStep = 2;
     014F 2102                      1- 2001     	MOVIA	0x02
     0150 00rr                      1- 2002     	MOVAR	_pwStep
     0151                           1- 2003     _00554_DS_:
                                    1- 2004     	.line	756, "main.c"; 	chrgTime = 0;
     0151 02rr                      1- 2005     	CLRR	_chrgTime
     0152 02rr                      1- 2006     	CLRR	(_chrgTime + 1)
     0153 3rrr                      1- 2007     	LGOTO	_00580_DS_
     0154                           1- 2008     _00563_DS_:
                                    1- 2009     	.line	758, "main.c"; 	else  if(R_AIN2_DATA > 0)
     0154 01rr                      1- 2010     	MOVR	_R_AIN2_DATA,W
     0155 11rr                      1- 2011     	IORAR	(_R_AIN2_DATA + 1),W
     0156 0D03                      1- 2012     	BTRSC	STATUS,2
     0157 3rrr                      1- 2013     	LGOTO	_00580_DS_
                                    1- 2014     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2015     ;;unsigned compare: left >= lit (0x2=2), size=1
                                    1- 2016     	.line	761, "main.c"; 	if(pwStep > 1)
     0158 2102                      1- 2017     	MOVIA	0x02
     0159 04rr                      1- 2018     	SUBAR	_pwStep,W
     015A 0803                      1- 2019     	BTRSS	STATUS,0
     015B 3rrr                      1- 2020     	LGOTO	_00558_DS_
                                    1- 2021     ;;unsigned compare: left < lit (0x5A=90), size=2
                                    1- 2022     	.line	763, "main.c"; 	if(R_AIN2_DATA < 90)
     015C 2100                      1- 2023     	MOVIA	0x00
     015D 04rr                      1- 2024     	SUBAR	(_R_AIN2_DATA + 1),W
     015E 0903                      1- 2025     	BTRSS	STATUS,2
     015F 3rrr                      1- 2026     	LGOTO	_00727_DS_
     0160 215A                      1- 2027     	MOVIA	0x5a
     0161 04rr                      1- 2028     	SUBAR	_R_AIN2_DATA,W
     0162                           1- 2029     _00727_DS_:
     0162 0C03                      1- 2030     	BTRSC	STATUS,0
     0163 3rrr                      1- 2031     	LGOTO	_00559_DS_
                                    1- 2032     	.line	764, "main.c"; 	pwStep = 1;
     0164 2101                      1- 2033     	MOVIA	0x01
     0165 00rr                      1- 2034     	MOVAR	_pwStep
     0166 3rrr                      1- 2035     	LGOTO	_00559_DS_
     0167                           1- 2036     _00558_DS_:
                                    1- 2037     	.line	767, "main.c"; 	pwStep = 1;
     0167 2101                      1- 2038     	MOVIA	0x01
     0168 00rr                      1- 2039     	MOVAR	_pwStep
     0169                           1- 2040     _00559_DS_:
                                    1- 2041     	.line	768, "main.c"; 	chrgTime = 0;
     0169 02rr                      1- 2042     	CLRR	_chrgTime
     016A 02rr                      1- 2043     	CLRR	(_chrgTime + 1)
     016B                           1- 2044     _00580_DS_:
                                    1- 2045     	.line	772, "main.c"; 	}
                                    1- 2046     	RETURN	
     016B 0010                      3-   26 m1      ret
                                    1- 2047     ; exit point of _checkBatAD
                                    1- 2049     ;***
                                    1- 2050     ;  pBlock Stats: dbName = C
                                    1- 2051     ;***
                                    1- 2052     ;has an exit
                                    1- 2053     ;functions called:
                                    1- 2054     ;   _delay
                                    1- 2055     ;   _delay
                                    1- 2056     ;; Starting pCode block
                                    1- 2057     .segment "code"; module=main, function=_initAD
     0000                           1- 2059     _initAD:
                                    1- 2060     ; 2 exit points
                                    1- 2061     	.line	607, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1- 2062     	MOVIA	0x84
     0001 00rr                      1- 2063     	MOVAR	_ADMD
                                    1- 2064     	.line	612, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 2065     	CLRR	_ADVREFH
                                    1- 2066     	.line	617, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 2067     	MOVIA	0x10
     0004 00rr                      1- 2068     	MOVAR	_ADR
                                    1- 2069     	.line	619, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 2070     	MOVIA	0x03
     0006 00rr                      1- 2071     	MOVAR	_ADCR
                                    1- 2072     	.line	622, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 2073     	BSR	_ADMDbits,4
                                    1- 2074     	.line	623, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 2075     	MOVIA	0x64
     0009 2rrr                      1- 2076     	LCALL	_delay
                                    1- 2077     	.line	626, "main.c"; 	}
                                    1- 2078     	RETURN	
     000A 0010                      3-   26 m1      ret
                                    1- 2079     ; exit point of _initAD
                                    1- 2081     ;***
                                    1- 2082     ;  pBlock Stats: dbName = C
                                    1- 2083     ;***
                                    1- 2084     ;has an exit
                                    1- 2085     ;2 compiler assigned registers:
                                    1- 2086     ;   r0x1029
                                    1- 2087     ;   r0x102A
                                    1- 2088     ;; Starting pCode block
                                    1- 2089     .segment "code"; module=main, function=_delay
                                    1- 2091     ;local variable name mapping:
     0000                           1- 2094     _delay:
                                    1- 2095     ; 2 exit points
                                    1- 2096     	.line	597, "main.c"; 	void delay(u8t time)
     0000 00rr                      1- 2097     	MOVAR	r0x1029
                                    1- 2098     	.line	599, "main.c"; 	for(u8t i=0;i<time;i++)
     0001 02rr                      1- 2099     	CLRR	r0x102A
     0002                           1- 2100     _00481_DS_:
     0002 01rr                      1- 2101     	MOVR	r0x1029,W
     0003 04rr                      1- 2102     	SUBAR	r0x102A,W
     0004 0C03                      1- 2103     	BTRSC	STATUS,0
     0005 3rrr                      1- 2104     	LGOTO	_00483_DS_
                                    1- 2105     	.line	600, "main.c"; 	NOP();
     0006 0000                      1- 2106     	nop
                                    1- 2107     	.line	599, "main.c"; 	for(u8t i=0;i<time;i++)
     0007 05rr                      1- 2108     	INCR	r0x102A,F
     0008 3rrr                      1- 2109     	LGOTO	_00481_DS_
     0009                           1- 2110     _00483_DS_:
                                    1- 2111     	.line	601, "main.c"; 	}
                                    1- 2112     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 2113     ; exit point of _delay
                                    1- 2115     ;***
                                    1- 2116     ;  pBlock Stats: dbName = C
                                    1- 2117     ;***
                                    1- 2118     ;has an exit
                                    1- 2119     ;functions called:
                                    1- 2120     ;   _pwmStop
                                    1- 2121     ;   _pwm1Stop
                                    1- 2122     ;   _pwm1Init
                                    1- 2123     ;   _pwm1Stop
                                    1- 2124     ;   _pwmStop
                                    1- 2125     ;   _pwm1Stop
                                    1- 2126     ;   _pwm1Init
                                    1- 2127     ;   _pwm1Stop
                                    1- 2128     ;1 compiler assigned register :
                                    1- 2129     ;   r0x104A
                                    1- 2130     ;; Starting pCode block
                                    1- 2131     .segment "code"; module=main, function=_chrgCtr
     0000                           1- 2133     _chrgCtr:
                                    1- 2134     ; 2 exit points
                                    1- 2135     	.line	543, "main.c"; 	if(PORTA & 0x08 || R_AIN3_DATA > 200)
     0000 0Drr                      1- 2136     	BTRSC	_PORTA,3
     0001 3rrr                      1- 2137     	LGOTO	_00444_DS_
                                    1- 2138     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2139     ;;unsigned compare: left >= lit (0xC9=201), size=2
     0002 2100                      1- 2140     	MOVIA	0x00
     0003 04rr                      1- 2141     	SUBAR	(_R_AIN3_DATA + 1),W
     0004 0903                      1- 2142     	BTRSS	STATUS,2
     0005 3rrr                      1- 2143     	LGOTO	_00474_DS_
     0006 21C9                      1- 2144     	MOVIA	0xc9
     0007 04rr                      1- 2145     	SUBAR	_R_AIN3_DATA,W
     0008                           1- 2146     _00474_DS_:
     0008 0803                      1- 2147     	BTRSS	STATUS,0
     0009 3rrr                      1- 2148     	LGOTO	_00445_DS_
     000A                           1- 2149     _00444_DS_:
                                    1- 2150     	.line	546, "main.c"; 	chrgFlag = 1;
     000A 19rr                      1- 2151     	BSR	_Status,3
                                    1- 2152     	.line	547, "main.c"; 	workStep = 0;
     000B 02rr                      1- 2153     	CLRR	_workStep
                                    1- 2154     	.line	548, "main.c"; 	ledLightTime = 0;
     000C 02rr                      1- 2155     	CLRR	_ledLightTime
                                    1- 2156     	.line	549, "main.c"; 	pwmStop();
     000D 2rrr                      1- 2157     	LCALL	_pwmStop
                                    1- 2158     	.line	551, "main.c"; 	if(pwStep == 7)
     000E 01rr                      1- 2159     	MOVR	_pwStep,W
     000F 2407                      1- 2160     	XORIA	0x07
     0010 0903                      1- 2161     	BTRSS	STATUS,2
     0011 3rrr                      1- 2162     	LGOTO	_00440_DS_
                                    1- 2163     	.line	554, "main.c"; 	ledStep = 6;
     0012 2106                      1- 2164     	MOVIA	0x06
     0013 00rr                      1- 2165     	MOVAR	_ledStep
                                    1- 2166     	.line	555, "main.c"; 	if(++fullCount > 100)
     0014 05rr                      1- 2167     	INCR	_fullCount,F
                                    1- 2168     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2169     ;;unsigned compare: left >= lit (0x65=101), size=1
     0015 2165                      1- 2170     	MOVIA	0x65
     0016 04rr                      1- 2171     	SUBAR	_fullCount,W
     0017 0C03                      1- 2172     	BTRSC	STATUS,0
                                    1- 2173     	.line	556, "main.c"; 	pwm1Stop();
     0018 2rrr                      1- 2174     	LCALL	_pwm1Stop
                                    1- 2175     	.line	558, "main.c"; 	PORTB &= 0xF7;
     0019 1Drr                      1- 2176     	BCR	_PORTB,3
                                    1- 2177     	.line	559, "main.c"; 	IOSTB |= 0X08;
     001A 001r                      1- 2178     	IOSTR	_IOSTB
     001B 00rr                      1- 2179     	MOVAR	r0x104A
     001C 19rr                      1- 2180     	BSR	r0x104A,3
     001D 01rr                      1- 2181     	MOVR	r0x104A,W
     001E 000r                      1- 2182     	IOST	_IOSTB
     001F 3rrr                      1- 2183     	LGOTO	_00448_DS_
     0020                           1- 2184     _00440_DS_:
                                    1- 2185     	.line	564, "main.c"; 	IOSTB &= 0xF7;
     0020 001r                      1- 2186     	IOSTR	_IOSTB
     0021 00rr                      1- 2187     	MOVAR	r0x104A
     0022 1Drr                      1- 2188     	BCR	r0x104A,3
     0023 01rr                      1- 2189     	MOVR	r0x104A,W
     0024 000r                      1- 2190     	IOST	_IOSTB
                                    1- 2191     	.line	566, "main.c"; 	if(count500ms == 0)
     0025 01rr                      1- 2192     	MOVR	_count500ms,W
     0026 0903                      1- 2193     	BTRSS	STATUS,2
     0027 3rrr                      1- 2194     	LGOTO	_00432_DS_
                                    1- 2195     	.line	568, "main.c"; 	if(++ledStep > 6)
     0028 05rr                      1- 2196     	INCR	_ledStep,F
                                    1- 2197     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2198     ;;unsigned compare: left >= lit (0x7=7), size=1
     0029 2107                      1- 2199     	MOVIA	0x07
     002A 04rr                      1- 2200     	SUBAR	_ledStep,W
     002B 0803                      1- 2201     	BTRSS	STATUS,0
     002C 3rrr                      1- 2202     	LGOTO	_00432_DS_
                                    1- 2203     	.line	569, "main.c"; 	ledStep = pwStep - 1;
     002D 06rr                      1- 2204     	DECR	_pwStep,W
     002E 00rr                      1- 2205     	MOVAR	_ledStep
                                    1- 2206     ;;unsigned compare: left < lit (0x2=2), size=1
     002F                           1- 2207     _00432_DS_:
                                    1- 2208     	.line	572, "main.c"; 	if(pwStep < 2)
     002F 2102                      1- 2209     	MOVIA	0x02
     0030 04rr                      1- 2210     	SUBAR	_pwStep,W
     0031 0C03                      1- 2211     	BTRSC	STATUS,0
     0032 3rrr                      1- 2212     	LGOTO	_00437_DS_
                                    1- 2213     	.line	574, "main.c"; 	PWM1DUTY = 3;
     0033 2103                      1- 2214     	MOVIA	0x03
     0034 00rr                      1- 2215     	SFUN	_PWM1DUTY
     0035 3rrr                      1- 2216     	LGOTO	_00438_DS_
                                    1- 2217     ;;unsigned compare: left < lit (0x5=5), size=1
     0036                           1- 2218     _00437_DS_:
                                    1- 2219     	.line	576, "main.c"; 	else if(pwStep < 5)
     0036 2105                      1- 2220     	MOVIA	0x05
     0037 04rr                      1- 2221     	SUBAR	_pwStep,W
     0038 0C03                      1- 2222     	BTRSC	STATUS,0
     0039 3rrr                      1- 2223     	LGOTO	_00434_DS_
                                    1- 2224     	.line	577, "main.c"; 	PWM1DUTY = 6;
     003A 2106                      1- 2225     	MOVIA	0x06
     003B 00rr                      1- 2226     	SFUN	_PWM1DUTY
     003C 3rrr                      1- 2227     	LGOTO	_00438_DS_
     003D                           1- 2228     _00434_DS_:
                                    1- 2229     	.line	579, "main.c"; 	PWM1DUTY = 7;
     003D 2107                      1- 2230     	MOVIA	0x07
     003E 00rr                      1- 2231     	SFUN	_PWM1DUTY
     003F                           1- 2232     _00438_DS_:
                                    1- 2233     	.line	580, "main.c"; 	pwm1Init();
     003F 2rrr                      1- 2234     	LCALL	_pwm1Init
     0040 3rrr                      1- 2235     	LGOTO	_00448_DS_
     0041                           1- 2236     _00445_DS_:
                                    1- 2237     	.line	586, "main.c"; 	chrgTime = 0;
     0041 02rr                      1- 2238     	CLRR	_chrgTime
     0042 02rr                      1- 2239     	CLRR	(_chrgTime + 1)
                                    1- 2240     	.line	587, "main.c"; 	pwm1Stop();
     0043 2rrr                      1- 2241     	LCALL	_pwm1Stop
                                    1- 2242     	.line	588, "main.c"; 	if(workStep == 0)
     0044 01rr                      1- 2243     	MOVR	_workStep,W
     0045 0D03                      1- 2244     	BTRSC	STATUS,2
                                    1- 2245     	.line	589, "main.c"; 	ledStep = 0;
     0046 02rr                      1- 2246     	CLRR	_ledStep
                                    1- 2247     	.line	590, "main.c"; 	chrgFlag = 0;
     0047 1Drr                      1- 2248     	BCR	_Status,3
                                    1- 2249     	.line	591, "main.c"; 	chrgTime = 0;	//���ó�����
     0048 02rr                      1- 2250     	CLRR	_chrgTime
     0049 02rr                      1- 2251     	CLRR	(_chrgTime + 1)
     004A                           1- 2252     _00448_DS_:
                                    1- 2253     	.line	594, "main.c"; 	}
                                    1- 2254     	RETURN	
     004A 0010                      3-   26 m1      ret
                                    1- 2255     ; exit point of _chrgCtr
                                    1- 2257     ;***
                                    1- 2258     ;  pBlock Stats: dbName = C
                                    1- 2259     ;***
                                    1- 2260     ;has an exit
                                    1- 2261     ;1 compiler assigned register :
                                    1- 2262     ;   r0x104B
                                    1- 2263     ;; Starting pCode block
                                    1- 2264     .segment "code"; module=main, function=_keyRead
                                    1- 2266     ;local variable name mapping:
     0000                           1- 2268     _keyRead:
                                    1- 2269     ; 2 exit points
                                    1- 2270     	.line	506, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1- 2271     	MOVAR	r0x104B
                                    1- 2272     	.line	508, "main.c"; 	if(keyStatus)
     0001 01rr                      1- 2273     	MOVR	r0x104B,W
     0002 0D03                      1- 2274     	BTRSC	STATUS,2
     0003 3rrr                      1- 2275     	LGOTO	_00420_DS_
                                    1- 2276     	.line	510, "main.c"; 	keyCount++;
     0004 05rr                      1- 2277     	INCR	_keyCount,F
                                    1- 2278     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1- 2279     	.line	511, "main.c"; 	if(keyCount >= 100)
     0005 2164                      1- 2280     	MOVIA	0x64
     0006 04rr                      1- 2281     	SUBAR	_keyCount,W
     0007 0803                      1- 2282     	BTRSS	STATUS,0
     0008 3rrr                      1- 2283     	LGOTO	_00421_DS_
                                    1- 2284     	.line	513, "main.c"; 	keyCount = 100;
     0009 2164                      1- 2285     	MOVIA	0x64
     000A 00rr                      1- 2286     	MOVAR	_keyCount
                                    1- 2287     	.line	514, "main.c"; 	if(!longPressFlag)
     000B 0Crr                      1- 2288     	BTRSC	_Status,1
     000C 3rrr                      1- 2289     	LGOTO	_00421_DS_
                                    1- 2290     	.line	516, "main.c"; 	longPressFlag = 1;
     000D 18rr                      1- 2291     	BSR	_Status,1
                                    1- 2292     	.line	517, "main.c"; 	return 2;
     000E 2102                      1- 2293     	MOVIA	0x02
     000F 3rrr                      1- 2294     	LGOTO	_00422_DS_
                                    1- 2295     ;;unsigned compare: left < lit (0x64=100), size=1
     0010                           1- 2296     _00420_DS_:
                                    1- 2297     	.line	523, "main.c"; 	if(keyCount >= 100)
     0010 2164                      1- 2298     	MOVIA	0x64
     0011 04rr                      1- 2299     	SUBAR	_keyCount,W
     0012 0803                      1- 2300     	BTRSS	STATUS,0
     0013 3rrr                      1- 2301     	LGOTO	_00417_DS_
                                    1- 2302     	.line	525, "main.c"; 	keyCount = 0;
     0014 02rr                      1- 2303     	CLRR	_keyCount
                                    1- 2304     	.line	526, "main.c"; 	longPressFlag = 0;
     0015 1Crr                      1- 2305     	BCR	_Status,1
                                    1- 2306     	.line	527, "main.c"; 	return	0;
     0016 2100                      1- 2307     	MOVIA	0x00
     0017 3rrr                      1- 2308     	LGOTO	_00422_DS_
                                    1- 2309     ;;unsigned compare: left < lit (0x8=8), size=1
     0018                           1- 2310     _00417_DS_:
                                    1- 2311     	.line	529, "main.c"; 	else if(keyCount >= 8)
     0018 2108                      1- 2312     	MOVIA	0x08
     0019 04rr                      1- 2313     	SUBAR	_keyCount,W
     001A 0803                      1- 2314     	BTRSS	STATUS,0
     001B 3rrr                      1- 2315     	LGOTO	_00418_DS_
                                    1- 2316     	.line	531, "main.c"; 	keyCount = 0;
     001C 02rr                      1- 2317     	CLRR	_keyCount
                                    1- 2318     	.line	532, "main.c"; 	return	1;
     001D 2101                      1- 2319     	MOVIA	0x01
     001E 3rrr                      1- 2320     	LGOTO	_00422_DS_
     001F                           1- 2321     _00418_DS_:
                                    1- 2322     	.line	534, "main.c"; 	keyCount = 0;
     001F 02rr                      1- 2323     	CLRR	_keyCount
     0020                           1- 2324     _00421_DS_:
                                    1- 2325     	.line	536, "main.c"; 	return 0;
     0020 2100                      1- 2326     	MOVIA	0x00
     0021                           1- 2327     _00422_DS_:
                                    1- 2328     	.line	537, "main.c"; 	}
                                    1- 2329     	RETURN	
     0021 0010                      3-   26 m1      ret
                                    1- 2330     ; exit point of _keyRead
                                    1- 2332     ;***
                                    1- 2333     ;  pBlock Stats: dbName = C
                                    1- 2334     ;***
                                    1- 2335     ;has an exit
                                    1- 2336     ;functions called:
                                    1- 2337     ;   _LedInput
                                    1- 2338     ;   _pwmStop
                                    1- 2339     ;   _pwm1Stop
                                    1- 2340     ;   _LedInput
                                    1- 2341     ;   _pwmStop
                                    1- 2342     ;   _pwm1Stop
                                    1- 2343     ;1 compiler assigned register :
                                    1- 2344     ;   r0x104D
                                    1- 2345     ;; Starting pCode block
                                    1- 2346     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 2348     _gotoSleep:
                                    1- 2349     ; 2 exit points
                                    1- 2350     	.line	476, "main.c"; 	PORTB = 0x00;
     0000 02rr                      1- 2351     	CLRR	_PORTB
                                    1- 2352     	.line	477, "main.c"; 	PORTA = 0x00;
     0001 02rr                      1- 2353     	CLRR	_PORTA
                                    1- 2354     	.line	478, "main.c"; 	IOSTA |= 0X40;
     0002 001r                      1- 2355     	IOSTR	_IOSTA
     0003 00rr                      1- 2356     	MOVAR	r0x104D
     0004 1Brr                      1- 2357     	BSR	r0x104D,6
     0005 01rr                      1- 2358     	MOVR	r0x104D,W
     0006 000r                      1- 2359     	IOST	_IOSTA
                                    1- 2360     	.line	479, "main.c"; 	LedInput();
     0007 2rrr                      1- 2361     	LCALL	_LedInput
                                    1- 2362     	.line	480, "main.c"; 	sleepTime = 0;
     0008 02rr                      1- 2363     	CLRR	_sleepTime
     0009 02rr                      1- 2364     	CLRR	(_sleepTime + 1)
                                    1- 2365     	.line	482, "main.c"; 	pwmStop();
     000A 2rrr                      1- 2366     	LCALL	_pwmStop
                                    1- 2367     	.line	483, "main.c"; 	pwm1Stop();
     000B 2rrr                      1- 2368     	LCALL	_pwm1Stop
                                    1- 2369     	.line	484, "main.c"; 	workStep = 0;
     000C 02rr                      1- 2370     	CLRR	_workStep
                                    1- 2371     	.line	485, "main.c"; 	AWUCON = 0x98;
     000D 2198                      1- 2372     	MOVIA	0x98
     000E 00rr                      1- 2373     	MOVAR	_AWUCON
                                    1- 2374     	.line	486, "main.c"; 	fgPRD = 0;
     000F 02rr                      1- 2375     	CLRR	_fgPRD
     0010 02rr                      1- 2376     	CLRR	(_fgPRD + 1)
                                    1- 2377     	.line	487, "main.c"; 	fgCount = 0;
     0011 02rr                      1- 2378     	CLRR	_fgCount
     0012 02rr                      1- 2379     	CLRR	(_fgCount + 1)
                                    1- 2380     	.line	488, "main.c"; 	redLedFlag = 0;
     0013 1Drr                      1- 2381     	BCR	_Status,2
                                    1- 2382     	.line	489, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PABKey;
     0014 210B                      1- 2383     	MOVIA	0x0b
     0015 00rr                      1- 2384     	MOVAR	_INTE
                                    1- 2385     	.line	490, "main.c"; 	PCON =  C_LVR_En | 0x10;	
     0016 2118                      1- 2386     	MOVIA	0x18
     0017 00rr                      1- 2387     	MOVAR	_PCON
                                    1- 2388     	.line	491, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0018 02rr                      1- 2389     	CLRR	_INTF
                                    1- 2390     	.line	492, "main.c"; 	CLRWDT();
     0019 0002                      1- 2391     	clrwdt
                                    1- 2392     	.line	493, "main.c"; 	ENI();
     001A 0004                      1- 2393     	ENI
                                    1- 2394     	.line	494, "main.c"; 	SLEEP();
     001B 0001                      1- 2395     	sleep
                                    1- 2396     	.line	495, "main.c"; 	AWUCON = 0x00;
     001C 02rr                      1- 2397     	CLRR	_AWUCON
                                    1- 2398     	.line	496, "main.c"; 	IOSTA &= 0XBF;
     001D 001r                      1- 2399     	IOSTR	_IOSTA
     001E 00rr                      1- 2400     	MOVAR	r0x104D
     001F 1Frr                      1- 2401     	BCR	r0x104D,6
     0020 01rr                      1- 2402     	MOVR	r0x104D,W
     0021 000r                      1- 2403     	IOST	_IOSTA
                                    1- 2404     	.line	497, "main.c"; 	PORTB &= 0xBF;
     0022 1Frr                      1- 2405     	BCR	_PORTB,6
                                    1- 2406     	.line	498, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0��Timer1��WDT overflow interrupt
     0023 2101                      1- 2407     	MOVIA	0x01
     0024 00rr                      1- 2408     	MOVAR	_INTE
                                    1- 2409     	.line	499, "main.c"; 	INTF = 0;
     0025 02rr                      1- 2410     	CLRR	_INTF
                                    1- 2411     	.line	501, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En | 0x10;				// Enable WDT ,  Enable LVR
     0026 21B8                      1- 2412     	MOVIA	0xb8
     0027 00rr                      1- 2413     	MOVAR	_PCON
                                    1- 2414     	.line	503, "main.c"; 	}
                                    1- 2415     	RETURN	
     0028 0010                      3-   26 m1      ret
                                    1- 2416     ; exit point of _gotoSleep
                                    1- 2418     ;***
                                    1- 2419     ;  pBlock Stats: dbName = C
                                    1- 2420     ;***
                                    1- 2421     ;has an exit
                                    1- 2422     ;; Starting pCode block
                                    1- 2423     .segment "code"; module=main, function=_pwmStop
     0000                           1- 2425     _pwmStop:
                                    1- 2426     ; 2 exit points
                                    1- 2427     	.line	470, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1- 2428     	CLRA	
     0001 00rr                      1- 2429     	SFUN	_T2CR1
                                    1- 2430     	.line	471, "main.c"; 	}
                                    1- 2431     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 2432     ; exit point of _pwmStop
                                    1- 2434     ;***
                                    1- 2435     ;  pBlock Stats: dbName = C
                                    1- 2436     ;***
                                    1- 2437     ;has an exit
                                    1- 2438     ;1 compiler assigned register :
                                    1- 2439     ;   r0x104E
                                    1- 2440     ;; Starting pCode block
                                    1- 2441     .segment "code"; module=main, function=_pwmInit
     0000                           1- 2443     _pwmInit:
                                    1- 2444     ; 2 exit points
                                    1- 2445     	.line	458, "main.c"; 	if(0x80&T2CR1)
     0000 00rr                      1- 2446     	SFUNR	_T2CR1
     0001 00rr                      1- 2447     	MOVAR	r0x104E
     0002 0Frr                      1- 2448     	BTRSC	r0x104E,7
                                    1- 2449     	.line	459, "main.c"; 	return;
     0003 3rrr                      1- 2450     	LGOTO	_00397_DS_
                                    1- 2451     	.line	460, "main.c"; 	TMRH = 0x00;
     0004 02rr                      1- 2452     	CLRR	_TMRH
                                    1- 2453     	.line	461, "main.c"; 	TMR2 = 128;							//Ƶ��Ϊ110K
     0005 2180                      1- 2454     	MOVIA	0x80
     0006 00rr                      1- 2455     	SFUN	_TMR2
                                    1- 2456     	.line	464, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0007 0200                      1- 2457     	CLRA	
     0008 00rr                      1- 2458     	SFUN	_T2CR2
                                    1- 2459     	.line	465, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0009 2183                      1- 2460     	MOVIA	0x83
     000A 00rr                      1- 2461     	SFUN	_T2CR1
     000B                           1- 2462     _00397_DS_:
                                    1- 2463     	.line	466, "main.c"; 	}
                                    1- 2464     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1- 2465     ; exit point of _pwmInit
                                    1- 2467     ;***
                                    1- 2468     ;  pBlock Stats: dbName = C
                                    1- 2469     ;***
                                    1- 2470     ;has an exit
                                    1- 2471     ;; Starting pCode block
                                    1- 2472     .segment "code"; module=main, function=_pwm1Stop
     0000                           1- 2474     _pwm1Stop:
                                    1- 2475     ; 2 exit points
                                    1- 2476     	.line	451, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1- 2477     	CLRA	
     0001 00rr                      1- 2478     	SFUN	_T1CR1
                                    1- 2479     	.line	452, "main.c"; 	}
                                    1- 2480     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 2481     ; exit point of _pwm1Stop
                                    1- 2483     ;***
                                    1- 2484     ;  pBlock Stats: dbName = C
                                    1- 2485     ;***
                                    1- 2486     ;has an exit
                                    1- 2487     ;1 compiler assigned register :
                                    1- 2488     ;   r0x1049
                                    1- 2489     ;; Starting pCode block
                                    1- 2490     .segment "code"; module=main, function=_pwm1Init
     0000                           1- 2492     _pwm1Init:
                                    1- 2493     ; 2 exit points
                                    1- 2494     	.line	439, "main.c"; 	if(0x80&T1CR1)
     0000 00rr                      1- 2495     	SFUNR	_T1CR1
     0001 00rr                      1- 2496     	MOVAR	r0x1049
     0002 0Frr                      1- 2497     	BTRSC	r0x1049,7
                                    1- 2498     	.line	440, "main.c"; 	return;
     0003 3rrr                      1- 2499     	LGOTO	_00386_DS_
                                    1- 2500     	.line	441, "main.c"; 	TMRH = 0x00;
     0004 02rr                      1- 2501     	CLRR	_TMRH
                                    1- 2502     	.line	442, "main.c"; 	TMR1 = 12;							//Ƶ��Ϊ110K
     0005 210C                      1- 2503     	MOVIA	0x0c
     0006 00rr                      1- 2504     	SFUN	_TMR1
                                    1- 2505     	.line	445, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0007 0200                      1- 2506     	CLRA	
     0008 00rr                      1- 2507     	SFUN	_T1CR2
                                    1- 2508     	.line	446, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0009 2183                      1- 2509     	MOVIA	0x83
     000A 00rr                      1- 2510     	SFUN	_T1CR1
     000B                           1- 2511     _00386_DS_:
                                    1- 2512     	.line	447, "main.c"; 	}
                                    1- 2513     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1- 2514     ; exit point of _pwm1Init
                                    1- 2516     ;***
                                    1- 2517     ;  pBlock Stats: dbName = C
                                    1- 2518     ;***
                                    1- 2519     ;has an exit
                                    1- 2520     ;functions called:
                                    1- 2521     ;   _delay
                                    1- 2522     ;   _LedInput
                                    1- 2523     ;   _delay
                                    1- 2524     ;   _LedInput
                                    1- 2525     ;1 compiler assigned register :
                                    1- 2526     ;   r0x104F
                                    1- 2527     ;; Starting pCode block
                                    1- 2528     .segment "code"; module=main, function=_LED6ON
     0000                           1- 2530     _LED6ON:
                                    1- 2531     ; 2 exit points
                                    1- 2532     	.line	429, "main.c"; 	L2OUT;
     0000 001r                      1- 2533     	IOSTR	_IOSTA
     0001 00rr                      1- 2534     	MOVAR	r0x104F
     0002 1Crr                      1- 2535     	BCR	r0x104F,0
     0003 01rr                      1- 2536     	MOVR	r0x104F,W
     0004 000r                      1- 2537     	IOST	_IOSTA
                                    1- 2538     	.line	430, "main.c"; 	L1OUT;
     0005 001r                      1- 2539     	IOSTR	_IOSTB
     0006 00rr                      1- 2540     	MOVAR	r0x104F
     0007 1Crr                      1- 2541     	BCR	r0x104F,1
     0008 01rr                      1- 2542     	MOVR	r0x104F,W
     0009 000r                      1- 2543     	IOST	_IOSTB
                                    1- 2544     	.line	431, "main.c"; 	L1H;
     000A 18rr                      1- 2545     	BSR	_PORTB,1
                                    1- 2546     	.line	432, "main.c"; 	L2L;
     000B 1Crr                      1- 2547     	BCR	_PORTA,0
                                    1- 2548     	.line	433, "main.c"; 	delay(100);
     000C 2164                      1- 2549     	MOVIA	0x64
     000D 2rrr                      1- 2550     	LCALL	_delay
                                    1- 2551     	.line	434, "main.c"; 	LedInput();
     000E 2rrr                      1- 2552     	LCALL	_LedInput
                                    1- 2553     	.line	435, "main.c"; 	}
                                    1- 2554     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2555     ; exit point of _LED6ON
                                    1- 2557     ;***
                                    1- 2558     ;  pBlock Stats: dbName = C
                                    1- 2559     ;***
                                    1- 2560     ;has an exit
                                    1- 2561     ;functions called:
                                    1- 2562     ;   _delay
                                    1- 2563     ;   _LedInput
                                    1- 2564     ;   _delay
                                    1- 2565     ;   _LedInput
                                    1- 2566     ;1 compiler assigned register :
                                    1- 2567     ;   r0x1050
                                    1- 2568     ;; Starting pCode block
                                    1- 2569     .segment "code"; module=main, function=_LED5ON
     0000                           1- 2571     _LED5ON:
                                    1- 2572     ; 2 exit points
                                    1- 2573     	.line	418, "main.c"; 	L2OUT;
     0000 001r                      1- 2574     	IOSTR	_IOSTA
     0001 00rr                      1- 2575     	MOVAR	r0x1050
     0002 1Crr                      1- 2576     	BCR	r0x1050,0
     0003 01rr                      1- 2577     	MOVR	r0x1050,W
     0004 000r                      1- 2578     	IOST	_IOSTA
                                    1- 2579     	.line	419, "main.c"; 	L1OUT;
     0005 001r                      1- 2580     	IOSTR	_IOSTB
     0006 00rr                      1- 2581     	MOVAR	r0x1050
     0007 1Crr                      1- 2582     	BCR	r0x1050,1
     0008 01rr                      1- 2583     	MOVR	r0x1050,W
     0009 000r                      1- 2584     	IOST	_IOSTB
                                    1- 2585     	.line	420, "main.c"; 	L2H;
     000A 18rr                      1- 2586     	BSR	_PORTA,0
                                    1- 2587     	.line	421, "main.c"; 	L1L;
     000B 1Crr                      1- 2588     	BCR	_PORTB,1
                                    1- 2589     	.line	422, "main.c"; 	delay(100);
     000C 2164                      1- 2590     	MOVIA	0x64
     000D 2rrr                      1- 2591     	LCALL	_delay
                                    1- 2592     	.line	423, "main.c"; 	LedInput();
     000E 2rrr                      1- 2593     	LCALL	_LedInput
                                    1- 2594     	.line	424, "main.c"; 	}
                                    1- 2595     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2596     ; exit point of _LED5ON
                                    1- 2598     ;***
                                    1- 2599     ;  pBlock Stats: dbName = C
                                    1- 2600     ;***
                                    1- 2601     ;has an exit
                                    1- 2602     ;functions called:
                                    1- 2603     ;   _delay
                                    1- 2604     ;   _LedInput
                                    1- 2605     ;   _delay
                                    1- 2606     ;   _LedInput
                                    1- 2607     ;1 compiler assigned register :
                                    1- 2608     ;   r0x1051
                                    1- 2609     ;; Starting pCode block
                                    1- 2610     .segment "code"; module=main, function=_LED4ON
     0000                           1- 2612     _LED4ON:
                                    1- 2613     ; 2 exit points
                                    1- 2614     	.line	408, "main.c"; 	L3OUT;
     0000 001r                      1- 2615     	IOSTR	_IOSTB
     0001 00rr                      1- 2616     	MOVAR	r0x1051
     0002 1Crr                      1- 2617     	BCR	r0x1051,0
     0003 01rr                      1- 2618     	MOVR	r0x1051,W
     0004 000r                      1- 2619     	IOST	_IOSTB
                                    1- 2620     	.line	409, "main.c"; 	L2OUT;
     0005 001r                      1- 2621     	IOSTR	_IOSTA
     0006 00rr                      1- 2622     	MOVAR	r0x1051
     0007 1Crr                      1- 2623     	BCR	r0x1051,0
     0008 01rr                      1- 2624     	MOVR	r0x1051,W
     0009 000r                      1- 2625     	IOST	_IOSTA
                                    1- 2626     	.line	410, "main.c"; 	L3H;
     000A 18rr                      1- 2627     	BSR	_PORTB,0
                                    1- 2628     	.line	411, "main.c"; 	L2L;
     000B 1Crr                      1- 2629     	BCR	_PORTA,0
                                    1- 2630     	.line	412, "main.c"; 	delay(100);
     000C 2164                      1- 2631     	MOVIA	0x64
     000D 2rrr                      1- 2632     	LCALL	_delay
                                    1- 2633     	.line	413, "main.c"; 	LedInput();
     000E 2rrr                      1- 2634     	LCALL	_LedInput
                                    1- 2635     	.line	414, "main.c"; 	}
                                    1- 2636     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2637     ; exit point of _LED4ON
                                    1- 2639     ;***
                                    1- 2640     ;  pBlock Stats: dbName = C
                                    1- 2641     ;***
                                    1- 2642     ;has an exit
                                    1- 2643     ;functions called:
                                    1- 2644     ;   _delay
                                    1- 2645     ;   _LedInput
                                    1- 2646     ;   _delay
                                    1- 2647     ;   _LedInput
                                    1- 2648     ;1 compiler assigned register :
                                    1- 2649     ;   r0x1052
                                    1- 2650     ;; Starting pCode block
                                    1- 2651     .segment "code"; module=main, function=_LED3ON
     0000                           1- 2653     _LED3ON:
                                    1- 2654     ; 2 exit points
                                    1- 2655     	.line	398, "main.c"; 	L3OUT;
     0000 001r                      1- 2656     	IOSTR	_IOSTB
     0001 00rr                      1- 2657     	MOVAR	r0x1052
     0002 1Crr                      1- 2658     	BCR	r0x1052,0
     0003 01rr                      1- 2659     	MOVR	r0x1052,W
     0004 000r                      1- 2660     	IOST	_IOSTB
                                    1- 2661     	.line	399, "main.c"; 	L1OUT;
     0005 001r                      1- 2662     	IOSTR	_IOSTB
     0006 00rr                      1- 2663     	MOVAR	r0x1052
     0007 1Crr                      1- 2664     	BCR	r0x1052,1
     0008 01rr                      1- 2665     	MOVR	r0x1052,W
     0009 000r                      1- 2666     	IOST	_IOSTB
                                    1- 2667     	.line	400, "main.c"; 	L1H;
     000A 18rr                      1- 2668     	BSR	_PORTB,1
                                    1- 2669     	.line	401, "main.c"; 	L3L;
     000B 1Crr                      1- 2670     	BCR	_PORTB,0
                                    1- 2671     	.line	402, "main.c"; 	delay(100);
     000C 2164                      1- 2672     	MOVIA	0x64
     000D 2rrr                      1- 2673     	LCALL	_delay
                                    1- 2674     	.line	403, "main.c"; 	LedInput();
     000E 2rrr                      1- 2675     	LCALL	_LedInput
                                    1- 2676     	.line	404, "main.c"; 	}
                                    1- 2677     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2678     ; exit point of _LED3ON
                                    1- 2680     ;***
                                    1- 2681     ;  pBlock Stats: dbName = C
                                    1- 2682     ;***
                                    1- 2683     ;has an exit
                                    1- 2684     ;functions called:
                                    1- 2685     ;   _delay
                                    1- 2686     ;   _LedInput
                                    1- 2687     ;   _delay
                                    1- 2688     ;   _LedInput
                                    1- 2689     ;1 compiler assigned register :
                                    1- 2690     ;   r0x1053
                                    1- 2691     ;; Starting pCode block
                                    1- 2692     .segment "code"; module=main, function=_LED2ON
     0000                           1- 2694     _LED2ON:
                                    1- 2695     ; 2 exit points
                                    1- 2696     	.line	388, "main.c"; 	L2OUT;
     0000 001r                      1- 2697     	IOSTR	_IOSTA
     0001 00rr                      1- 2698     	MOVAR	r0x1053
     0002 1Crr                      1- 2699     	BCR	r0x1053,0
     0003 01rr                      1- 2700     	MOVR	r0x1053,W
     0004 000r                      1- 2701     	IOST	_IOSTA
                                    1- 2702     	.line	389, "main.c"; 	L3OUT;
     0005 001r                      1- 2703     	IOSTR	_IOSTB
     0006 00rr                      1- 2704     	MOVAR	r0x1053
     0007 1Crr                      1- 2705     	BCR	r0x1053,0
     0008 01rr                      1- 2706     	MOVR	r0x1053,W
     0009 000r                      1- 2707     	IOST	_IOSTB
                                    1- 2708     	.line	390, "main.c"; 	L2H;
     000A 18rr                      1- 2709     	BSR	_PORTA,0
                                    1- 2710     	.line	391, "main.c"; 	L3L;
     000B 1Crr                      1- 2711     	BCR	_PORTB,0
                                    1- 2712     	.line	392, "main.c"; 	delay(100);
     000C 2164                      1- 2713     	MOVIA	0x64
     000D 2rrr                      1- 2714     	LCALL	_delay
                                    1- 2715     	.line	393, "main.c"; 	LedInput();
     000E 2rrr                      1- 2716     	LCALL	_LedInput
                                    1- 2717     	.line	394, "main.c"; 	}
                                    1- 2718     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2719     ; exit point of _LED2ON
                                    1- 2721     ;***
                                    1- 2722     ;  pBlock Stats: dbName = C
                                    1- 2723     ;***
                                    1- 2724     ;has an exit
                                    1- 2725     ;functions called:
                                    1- 2726     ;   _delay
                                    1- 2727     ;   _LedInput
                                    1- 2728     ;   _delay
                                    1- 2729     ;   _LedInput
                                    1- 2730     ;1 compiler assigned register :
                                    1- 2731     ;   r0x1054
                                    1- 2732     ;; Starting pCode block
                                    1- 2733     .segment "code"; module=main, function=_LED1ON
     0000                           1- 2735     _LED1ON:
                                    1- 2736     ; 2 exit points
                                    1- 2737     	.line	378, "main.c"; 	L3OUT;
     0000 001r                      1- 2738     	IOSTR	_IOSTB
     0001 00rr                      1- 2739     	MOVAR	r0x1054
     0002 1Crr                      1- 2740     	BCR	r0x1054,0
     0003 01rr                      1- 2741     	MOVR	r0x1054,W
     0004 000r                      1- 2742     	IOST	_IOSTB
                                    1- 2743     	.line	379, "main.c"; 	L1OUT;
     0005 001r                      1- 2744     	IOSTR	_IOSTB
     0006 00rr                      1- 2745     	MOVAR	r0x1054
     0007 1Crr                      1- 2746     	BCR	r0x1054,1
     0008 01rr                      1- 2747     	MOVR	r0x1054,W
     0009 000r                      1- 2748     	IOST	_IOSTB
                                    1- 2749     	.line	380, "main.c"; 	L3H;
     000A 18rr                      1- 2750     	BSR	_PORTB,0
                                    1- 2751     	.line	381, "main.c"; 	L1L;
     000B 1Crr                      1- 2752     	BCR	_PORTB,1
                                    1- 2753     	.line	382, "main.c"; 	delay(100);
     000C 2164                      1- 2754     	MOVIA	0x64
     000D 2rrr                      1- 2755     	LCALL	_delay
                                    1- 2756     	.line	383, "main.c"; 	LedInput();
     000E 2rrr                      1- 2757     	LCALL	_LedInput
                                    1- 2758     	.line	384, "main.c"; 	}
                                    1- 2759     	RETURN	
     000F 0010                      3-   26 m1      ret
                                    1- 2760     ; exit point of _LED1ON
                                    1- 2762     ;***
                                    1- 2763     ;  pBlock Stats: dbName = C
                                    1- 2764     ;***
                                    1- 2765     ;has an exit
                                    1- 2766     ;1 compiler assigned register :
                                    1- 2767     ;   r0x104C
                                    1- 2768     ;; Starting pCode block
                                    1- 2769     .segment "code"; module=main, function=_LedInput
     0000                           1- 2771     _LedInput:
                                    1- 2772     ; 2 exit points
                                    1- 2773     	.line	370, "main.c"; 	IOSTA |= 0x01;
     0000 001r                      1- 2774     	IOSTR	_IOSTA
     0001 00rr                      1- 2775     	MOVAR	r0x104C
     0002 18rr                      1- 2776     	BSR	r0x104C,0
     0003 01rr                      1- 2777     	MOVR	r0x104C,W
     0004 000r                      1- 2778     	IOST	_IOSTA
                                    1- 2779     	.line	371, "main.c"; 	IOSTB |= 0x03;
     0005 001r                      1- 2780     	IOSTR	_IOSTB
     0006 00rr                      1- 2781     	MOVAR	r0x104C
     0007 2103                      1- 2782     	MOVIA	0x03
     0008 11rr                      1- 2783     	IORAR	r0x104C,F
     0009 01rr                      1- 2784     	MOVR	r0x104C,W
     000A 000r                      1- 2785     	IOST	_IOSTB
                                    1- 2786     	.line	372, "main.c"; 	PORTA &= 0xFE;
     000B 1Crr                      1- 2787     	BCR	_PORTA,0
                                    1- 2788     	.line	373, "main.c"; 	PORTB &= 0xFC;
     000C 21FC                      1- 2789     	MOVIA	0xfc
     000D 10rr                      1- 2790     	ANDAR	_PORTB,F
                                    1- 2791     	.line	374, "main.c"; 	}
                                    1- 2792     	RETURN	
     000E 0010                      3-   26 m1      ret
                                    1- 2793     ; exit point of _LedInput
                                    1- 2795     ;***
                                    1- 2796     ;  pBlock Stats: dbName = C
                                    1- 2797     ;***
                                    1- 2798     ;has an exit
                                    1- 2799     ;functions called:
                                    1- 2800     ;   _pwmStop
                                    1- 2801     ;   _LedInput
                                    1- 2802     ;   _LedInput
                                    1- 2803     ;   _LED6ON
                                    1- 2804     ;   _LED5ON
                                    1- 2805     ;   _LED4ON
                                    1- 2806     ;   _LED3ON
                                    1- 2807     ;   _LED2ON
                                    1- 2808     ;   _LED1ON
                                    1- 2809     ;   _pwmStop
                                    1- 2810     ;   _LedInput
                                    1- 2811     ;   _LedInput
                                    1- 2812     ;   _LED6ON
                                    1- 2813     ;   _LED5ON
                                    1- 2814     ;   _LED4ON
                                    1- 2815     ;   _LED3ON
                                    1- 2816     ;   _LED2ON
                                    1- 2817     ;   _LED1ON
                                    1- 2818     ;; Starting pCode block
                                    1- 2819     .segment "code"; module=main, function=_ledShow
     0000                           1- 2821     _ledShow:
                                    1- 2822     ; 2 exit points
                                    1- 2823     ;;unsigned compare: left < lit (0x5=5), size=1
                                    1- 2824     	.line	314, "main.c"; 	if(overCount >= 5 && workStep > 0)
     0000 2105                      1- 2825     	MOVIA	0x05
     0001 04rr                      1- 2826     	SUBAR	_overCount,W
     0002 0803                      1- 2827     	BTRSS	STATUS,0
     0003 3rrr                      1- 2828     	LGOTO	_00274_DS_
     0004 01rr                      1- 2829     	MOVR	_workStep,W
     0005 0D03                      1- 2830     	BTRSC	STATUS,2
     0006 3rrr                      1- 2831     	LGOTO	_00274_DS_
                                    1- 2832     ;;unsigned compare: left < lit (0x32=50), size=1
                                    1- 2833     	.line	316, "main.c"; 	if(count1s < 50)
     0007 2132                      1- 2834     	MOVIA	0x32
     0008 04rr                      1- 2835     	SUBAR	_count1s,W
     0009 0C03                      1- 2836     	BTRSC	STATUS,0
     000A 3rrr                      1- 2837     	LGOTO	_00271_DS_
                                    1- 2838     	.line	317, "main.c"; 	ledStep = workStep;
     000B 01rr                      1- 2839     	MOVR	_workStep,W
     000C 00rr                      1- 2840     	MOVAR	_ledStep
     000D 3rrr                      1- 2841     	LGOTO	_00274_DS_
     000E                           1- 2842     _00271_DS_:
                                    1- 2843     	.line	319, "main.c"; 	ledStep = 0;
     000E 02rr                      1- 2844     	CLRR	_ledStep
     000F                           1- 2845     _00274_DS_:
                                    1- 2846     	.line	321, "main.c"; 	if(ledLightTime > 0 && pwStep > 0)
     000F 01rr                      1- 2847     	MOVR	_ledLightTime,W
     0010 0D03                      1- 2848     	BTRSC	STATUS,2
     0011 3rrr                      1- 2849     	LGOTO	_00282_DS_
     0012 01rr                      1- 2850     	MOVR	_pwStep,W
     0013 0D03                      1- 2851     	BTRSC	STATUS,2
     0014 3rrr                      1- 2852     	LGOTO	_00282_DS_
                                    1- 2853     	.line	323, "main.c"; 	if(ledLightTime == 2)
     0015 01rr                      1- 2854     	MOVR	_ledLightTime,W
     0016 2402                      1- 2855     	XORIA	0x02
     0017 0903                      1- 2856     	BTRSS	STATUS,2
     0018 3rrr                      1- 2857     	LGOTO	_00282_DS_
                                    1- 2858     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2859     ;;unsigned compare: left >= lit (0x7=7), size=1
                                    1- 2860     	.line	325, "main.c"; 	if(pwStep > 6 )
     0019 2107                      1- 2861     	MOVIA	0x07
     001A 04rr                      1- 2862     	SUBAR	_pwStep,W
     001B 0803                      1- 2863     	BTRSS	STATUS,0
     001C 3rrr                      1- 2864     	LGOTO	_00277_DS_
                                    1- 2865     	.line	326, "main.c"; 	ledStep = 6;
     001D 2106                      1- 2866     	MOVIA	0x06
     001E 00rr                      1- 2867     	MOVAR	_ledStep
     001F 3rrr                      1- 2868     	LGOTO	_00282_DS_
     0020                           1- 2869     _00277_DS_:
                                    1- 2870     	.line	328, "main.c"; 	ledStep = pwStep;
     0020 01rr                      1- 2871     	MOVR	_pwStep,W
     0021 00rr                      1- 2872     	MOVAR	_ledStep
     0022                           1- 2873     _00282_DS_:
                                    1- 2874     	.line	331, "main.c"; 	if(shanshuoTime > 0 && workStep > 0 && pwStep == 0)
     0022 01rr                      1- 2875     	MOVR	_shanshuoTime,W
     0023 0D03                      1- 2876     	BTRSC	STATUS,2
     0024 3rrr                      1- 2877     	LGOTO	_00288_DS_
     0025 01rr                      1- 2878     	MOVR	_workStep,W
     0026 0D03                      1- 2879     	BTRSC	STATUS,2
     0027 3rrr                      1- 2880     	LGOTO	_00288_DS_
     0028 01rr                      1- 2881     	MOVR	_pwStep,W
     0029 0903                      1- 2882     	BTRSS	STATUS,2
     002A 3rrr                      1- 2883     	LGOTO	_00288_DS_
                                    1- 2884     ;;unsigned compare: left < lit (0x32=50), size=1
                                    1- 2885     	.line	333, "main.c"; 	if(count1s < 50)
     002B 2132                      1- 2886     	MOVIA	0x32
     002C 04rr                      1- 2887     	SUBAR	_count1s,W
     002D 0C03                      1- 2888     	BTRSC	STATUS,0
     002E 3rrr                      1- 2889     	LGOTO	_00285_DS_
                                    1- 2890     	.line	334, "main.c"; 	ledStep = workStep;
     002F 01rr                      1- 2891     	MOVR	_workStep,W
     0030 00rr                      1- 2892     	MOVAR	_ledStep
     0031 3rrr                      1- 2893     	LGOTO	_00288_DS_
     0032                           1- 2894     _00285_DS_:
                                    1- 2895     	.line	336, "main.c"; 	ledStep = 0;
     0032 02rr                      1- 2896     	CLRR	_ledStep
     0033                           1- 2897     _00288_DS_:
                                    1- 2898     	.line	338, "main.c"; 	if(shanshuoTime == 0 && pwStep == 0)
     0033 01rr                      1- 2899     	MOVR	_shanshuoTime,W
     0034 0903                      1- 2900     	BTRSS	STATUS,2
     0035 3rrr                      1- 2901     	LGOTO	_00292_DS_
     0036 01rr                      1- 2902     	MOVR	_pwStep,W
     0037 0903                      1- 2903     	BTRSS	STATUS,2
     0038 3rrr                      1- 2904     	LGOTO	_00292_DS_
                                    1- 2905     	.line	340, "main.c"; 	workStep = 0;
     0039 02rr                      1- 2906     	CLRR	_workStep
                                    1- 2907     	.line	341, "main.c"; 	ledStep = 0;
     003A 02rr                      1- 2908     	CLRR	_ledStep
                                    1- 2909     	.line	342, "main.c"; 	pwmStop();
     003B 2rrr                      1- 2910     	LCALL	_pwmStop
     003C                           1- 2911     _00292_DS_:
                                    1- 2912     	.line	344, "main.c"; 	LedInput();
     003C 2rrr                      1- 2913     	LCALL	_LedInput
                                    1- 2914     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2915     ;;unsigned compare: left >= lit (0x7=7), size=1
                                    1- 2916     	.line	345, "main.c"; 	switch(ledStep)
     003D 2107                      1- 2917     	MOVIA	0x07
     003E 04rr                      1- 2918     	SUBAR	_ledStep,W
     003F 0C03                      1- 2919     	BTRSC	STATUS,0
     0040 3rrr                      1- 2920     	LGOTO	_00302_DS_
     0041 21rr                      1- 2921     	MOVIA	((_00351_DS_ >> 8) & 0xff)
     0042 008A                      1- 2922     	MOVAR	PCHBUF
     0043 01rr                      1- 2923     	MOVR	_ledStep,W
     0044 25rr                      1- 2924     	ADDIA	_00351_DS_
     0045 0C03                      1- 2925     	BTRSC	STATUS,0
     0046 058A                      1- 2926     	INCR	PCHBUF,F
     0047 0082                      1- 2927     	MOVAR	PCL
     0048                           1- 2928     _00351_DS_:
     0048 3rrr                      1- 2929     	LGOTO	_00294_DS_
     0049 3rrr                      1- 2930     	LGOTO	_00300_DS_
     004A 3rrr                      1- 2931     	LGOTO	_00299_DS_
     004B 3rrr                      1- 2932     	LGOTO	_00298_DS_
     004C 3rrr                      1- 2933     	LGOTO	_00297_DS_
     004D 3rrr                      1- 2934     	LGOTO	_00296_DS_
     004E 3rrr                      1- 2935     	LGOTO	_00295_DS_
     004F                           1- 2936     _00294_DS_:
                                    1- 2937     	.line	348, "main.c"; 	LedInput();
     004F 2rrr                      1- 2938     	LCALL	_LedInput
                                    1- 2939     	.line	349, "main.c"; 	break;
     0050 3rrr                      1- 2940     	LGOTO	_00302_DS_
     0051                           1- 2941     _00295_DS_:
                                    1- 2942     	.line	351, "main.c"; 	LED6ON();
     0051 2rrr                      1- 2943     	LCALL	_LED6ON
     0052                           1- 2944     _00296_DS_:
                                    1- 2945     	.line	353, "main.c"; 	LED5ON();
     0052 2rrr                      1- 2946     	LCALL	_LED5ON
     0053                           1- 2947     _00297_DS_:
                                    1- 2948     	.line	355, "main.c"; 	LED4ON();
     0053 2rrr                      1- 2949     	LCALL	_LED4ON
     0054                           1- 2950     _00298_DS_:
                                    1- 2951     	.line	357, "main.c"; 	LED3ON();
     0054 2rrr                      1- 2952     	LCALL	_LED3ON
     0055                           1- 2953     _00299_DS_:
                                    1- 2954     	.line	359, "main.c"; 	LED2ON();
     0055 2rrr                      1- 2955     	LCALL	_LED2ON
     0056                           1- 2956     _00300_DS_:
                                    1- 2957     	.line	361, "main.c"; 	LED1ON();
     0056 2rrr                      1- 2958     	LCALL	_LED1ON
     0057                           1- 2959     _00302_DS_:
                                    1- 2960     	.line	364, "main.c"; 	}
                                    1- 2961     	RETURN	
     0057 0010                      3-   26 m1      ret
                                    1- 2962     ; exit point of _ledShow
                                    1- 2964     ;***
                                    1- 2965     ;  pBlock Stats: dbName = C
                                    1- 2966     ;***
                                    1- 2967     ;has an exit
                                    1- 2968     ;functions called:
                                    1- 2969     ;   _LedInput
                                    1- 2970     ;   _LedInput
                                    1- 2971     ;; Starting pCode block
                                    1- 2972     .segment "code"; module=main, function=_initSys
     0000                           1- 2974     _initSys:
                                    1- 2975     ; 2 exit points
                                    1- 2976     	.line	282, "main.c"; 	DISI();
     0000 0013                      1- 2977     	DISI
                                    1- 2978     	.line	283, "main.c"; 	IOSTA = C_PA7_Input | C_PA5_Input | C_PA4_Input | C_PA3_Input | C_PA2_Input | C_PA1_Input;
     0001 21BE                      1- 2979     	MOVIA	0xbe
     0002 000r                      1- 2980     	IOST	_IOSTA
                                    1- 2981     	.line	284, "main.c"; 	IOSTB = 0x00;
     0003 0200                      1- 2982     	CLRA	
     0004 000r                      1- 2983     	IOST	_IOSTB
                                    1- 2984     	.line	285, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1- 2985     	CLRR	_PORTB
                                    1- 2986     	.line	286, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1- 2987     	CLRR	_PORTA
                                    1- 2988     	.line	287, "main.c"; 	LedInput();
     0007 2rrr                      1- 2989     	LCALL	_LedInput
                                    1- 2990     	.line	288, "main.c"; 	APHCON = 0x7F;
     0008 217F                      1- 2991     	MOVIA	0x7f
     0009 000r                      1- 2992     	IOST	_APHCON
                                    1- 2993     	.line	289, "main.c"; 	BPHCON = 0xFF;
     000A 21FF                      1- 2994     	MOVIA	0xff
     000B 00rr                      1- 2995     	MOVAR	_BPHCON
                                    1- 2996     	.line	290, "main.c"; 	ABPLCON = 0xFF;
     000C 00rr                      1- 2997     	MOVAR	_ABPLCON
                                    1- 2998     	.line	292, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0��Timer1��WDT overflow interrupt
     000D 2101                      1- 2999     	MOVIA	0x01
     000E 00rr                      1- 3000     	MOVAR	_INTE
                                    1- 3001     	.line	294, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1- 3002     	CLRA	
     0010 000r                      1- 3003     	IOST	_PCON1
                                    1- 3004     	.line	296, "main.c"; 	TMR0 = 55;
     0011 2137                      1- 3005     	MOVIA	0x37
     0012 00rr                      1- 3006     	MOVAR	_TMR0
                                    1- 3007     	.line	297, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1- 3008     	CLRA	
     0014 0003                      1- 3009     	T0MD	
                                    1- 3010     	.line	299, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1- 3011     	MOVIA	0x01
     0016 000r                      1- 3012     	IOST	_PCON1
                                    1- 3013     	.line	302, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0017 2198                      1- 3014     	MOVIA	0x98
     0018 00rr                      1- 3015     	MOVAR	_PCON
                                    1- 3016     	.line	305, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0019 2101                      1- 3017     	MOVIA	0x01
     001A 000r                      1- 3018     	IOST	_PCON1
                                    1- 3019     	.line	306, "main.c"; 	ENI();
     001B 0004                      1- 3020     	ENI
                                    1- 3021     	.line	307, "main.c"; 	}
                                    1- 3022     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1- 3023     ; exit point of _initSys
                                    1- 3025     ;***
                                    1- 3026     ;  pBlock Stats: dbName = C
                                    1- 3027     ;***
                                    1- 3028     ;has an exit
                                    1- 3029     ;functions called:
                                    1- 3030     ;   _pwmStop
                                    1- 3031     ;   _pwmStop
                                    1- 3032     ;; Starting pCode block
                                    1- 3033     .segment "code"; module=main, function=_powerOff
     0000                           1- 3035     _powerOff:
                                    1- 3036     ; 2 exit points
                                    1- 3037     	.line	273, "main.c"; 	workStep = 0;
     0000 02rr                      1- 3038     	CLRR	_workStep
                                    1- 3039     	.line	274, "main.c"; 	pwmStop();
     0001 2rrr                      1- 3040     	LCALL	_pwmStop
                                    1- 3041     	.line	275, "main.c"; 	ledStep = 5;
     0002 2105                      1- 3042     	MOVIA	0x05
     0003 00rr                      1- 3043     	MOVAR	_ledStep
                                    1- 3044     	.line	276, "main.c"; 	}
                                    1- 3045     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1- 3046     ; exit point of _powerOff
                                    1- 3048     ;***
                                    1- 3049     ;  pBlock Stats: dbName = C
                                    1- 3050     ;***
                                    1- 3051     ;has an exit
                                    1- 3052     ;functions called:
                                    1- 3053     ;   _keyRead
                                    1- 3054     ;   _pwmInit
                                    1- 3055     ;   _powerOff
                                    1- 3056     ;   _pwmInit
                                    1- 3057     ;   _keyRead
                                    1- 3058     ;   _pwmInit
                                    1- 3059     ;   _powerOff
                                    1- 3060     ;   _pwmInit
                                    1- 3061     ;1 compiler assigned register :
                                    1- 3062     ;   r0x1055
                                    1- 3063     ;; Starting pCode block
                                    1- 3064     .segment "code"; module=main, function=_keyCtr
                                    1- 3066     ;local variable name mapping:
     0000                           1- 3068     _keyCtr:
                                    1- 3069     ; 2 exit points
                                    1- 3070     	.line	211, "main.c"; 	char kclick = keyRead(0x80 & (~PORTA));
     0000 07rr                      1- 3071     	COMR	_PORTA,W
     0001 00rr                      1- 3072     	MOVAR	r0x1055
     0002 2180                      1- 3073     	MOVIA	0x80
     0003 10rr                      1- 3074     	ANDAR	r0x1055,F
     0004 01rr                      1- 3075     	MOVR	r0x1055,W
     0005 2rrr                      1- 3076     	LCALL	_keyRead
     0006 00rr                      1- 3077     	MOVAR	r0x1055
                                    1- 3078     	.line	212, "main.c"; 	if(kclick == 1)
     0007 2401                      1- 3079     	XORIA	0x01
     0008 0903                      1- 3080     	BTRSS	STATUS,2
     0009 3rrr                      1- 3081     	LGOTO	_00255_DS_
                                    1- 3082     	.line	214, "main.c"; 	count500ms = 0;
     000A 02rr                      1- 3083     	CLRR	_count500ms
                                    1- 3084     	.line	215, "main.c"; 	ledLightTime = 0;
     000B 02rr                      1- 3085     	CLRR	_ledLightTime
                                    1- 3086     	.line	216, "main.c"; 	if(workStep == 0)
     000C 01rr                      1- 3087     	MOVR	_workStep,W
     000D 0903                      1- 3088     	BTRSS	STATUS,2
     000E 3rrr                      1- 3089     	LGOTO	_00225_DS_
                                    1- 3090     	.line	218, "main.c"; 	count1s = 0;
     000F 02rr                      1- 3091     	CLRR	_count1s
                                    1- 3092     	.line	219, "main.c"; 	ledLightTime = 2;
     0010 2102                      1- 3093     	MOVIA	0x02
     0011 00rr                      1- 3094     	MOVAR	_ledLightTime
                                    1- 3095     	.line	220, "main.c"; 	return;
     0012 3rrr                      1- 3096     	LGOTO	_00257_DS_
     0013                           1- 3097     _00225_DS_:
                                    1- 3098     	.line	222, "main.c"; 	ledTime = 0;
     0013 02rr                      1- 3099     	CLRR	_ledTime
                                    1- 3100     	.line	223, "main.c"; 	if(++workStep > 6)
     0014 05rr                      1- 3101     	INCR	_workStep,F
                                    1- 3102     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 3103     ;;unsigned compare: left >= lit (0x7=7), size=1
     0015 2107                      1- 3104     	MOVIA	0x07
     0016 04rr                      1- 3105     	SUBAR	_workStep,W
     0017 0803                      1- 3106     	BTRSS	STATUS,0
     0018 3rrr                      1- 3107     	LGOTO	_00227_DS_
                                    1- 3108     	.line	224, "main.c"; 	workStep = 1;
     0019 2101                      1- 3109     	MOVIA	0x01
     001A 00rr                      1- 3110     	MOVAR	_workStep
     001B                           1- 3111     _00227_DS_:
                                    1- 3112     	.line	225, "main.c"; 	shanshuoTime = 6;
     001B 2106                      1- 3113     	MOVIA	0x06
     001C 00rr                      1- 3114     	MOVAR	_shanshuoTime
                                    1- 3115     	.line	226, "main.c"; 	if(workStep == 1)
     001D 01rr                      1- 3116     	MOVR	_workStep,W
     001E 2401                      1- 3117     	XORIA	0x01
     001F 0903                      1- 3118     	BTRSS	STATUS,2
     0020 3rrr                      1- 3119     	LGOTO	_00243_DS_
                                    1- 3120     	.line	227, "main.c"; 	maxDuty = 51;
     0021 2133                      1- 3121     	MOVIA	0x33
     0022 00rr                      1- 3122     	MOVAR	_maxDuty
     0023 3rrr                      1- 3123     	LGOTO	_00244_DS_
     0024                           1- 3124     _00243_DS_:
                                    1- 3125     	.line	228, "main.c"; 	else if(workStep == 2)
     0024 01rr                      1- 3126     	MOVR	_workStep,W
     0025 2402                      1- 3127     	XORIA	0x02
     0026 0903                      1- 3128     	BTRSS	STATUS,2
     0027 3rrr                      1- 3129     	LGOTO	_00240_DS_
                                    1- 3130     	.line	229, "main.c"; 	maxDuty = 53;
     0028 2135                      1- 3131     	MOVIA	0x35
     0029 00rr                      1- 3132     	MOVAR	_maxDuty
     002A 3rrr                      1- 3133     	LGOTO	_00244_DS_
     002B                           1- 3134     _00240_DS_:
                                    1- 3135     	.line	230, "main.c"; 	else if(workStep == 3)
     002B 01rr                      1- 3136     	MOVR	_workStep,W
     002C 2403                      1- 3137     	XORIA	0x03
     002D 0903                      1- 3138     	BTRSS	STATUS,2
     002E 3rrr                      1- 3139     	LGOTO	_00237_DS_
                                    1- 3140     	.line	231, "main.c"; 	maxDuty = 54;
     002F 2136                      1- 3141     	MOVIA	0x36
     0030 00rr                      1- 3142     	MOVAR	_maxDuty
     0031 3rrr                      1- 3143     	LGOTO	_00244_DS_
     0032                           1- 3144     _00237_DS_:
                                    1- 3145     	.line	232, "main.c"; 	else if(workStep == 4)
     0032 01rr                      1- 3146     	MOVR	_workStep,W
     0033 2404                      1- 3147     	XORIA	0x04
     0034 0903                      1- 3148     	BTRSS	STATUS,2
     0035 3rrr                      1- 3149     	LGOTO	_00234_DS_
                                    1- 3150     	.line	233, "main.c"; 	maxDuty = 55;
     0036 2137                      1- 3151     	MOVIA	0x37
     0037 00rr                      1- 3152     	MOVAR	_maxDuty
     0038 3rrr                      1- 3153     	LGOTO	_00244_DS_
     0039                           1- 3154     _00234_DS_:
                                    1- 3155     	.line	234, "main.c"; 	else if(workStep == 5)
     0039 01rr                      1- 3156     	MOVR	_workStep,W
     003A 2405                      1- 3157     	XORIA	0x05
     003B 0903                      1- 3158     	BTRSS	STATUS,2
     003C 3rrr                      1- 3159     	LGOTO	_00231_DS_
                                    1- 3160     	.line	235, "main.c"; 	maxDuty = 56;
     003D 2138                      1- 3161     	MOVIA	0x38
     003E 00rr                      1- 3162     	MOVAR	_maxDuty
     003F 3rrr                      1- 3163     	LGOTO	_00244_DS_
     0040                           1- 3164     _00231_DS_:
                                    1- 3165     	.line	236, "main.c"; 	else if(workStep == 6)
     0040 01rr                      1- 3166     	MOVR	_workStep,W
     0041 2406                      1- 3167     	XORIA	0x06
     0042 0903                      1- 3168     	BTRSS	STATUS,2
     0043 3rrr                      1- 3169     	LGOTO	_00244_DS_
                                    1- 3170     	.line	237, "main.c"; 	maxDuty = 58;
     0044 213A                      1- 3171     	MOVIA	0x3a
     0045 00rr                      1- 3172     	MOVAR	_maxDuty
     0046                           1- 3173     _00244_DS_:
                                    1- 3174     	.line	238, "main.c"; 	if(workStep > 0)
     0046 01rr                      1- 3175     	MOVR	_workStep,W
     0047 0D03                      1- 3176     	BTRSC	STATUS,2
     0048 3rrr                      1- 3177     	LGOTO	_00246_DS_
                                    1- 3178     	.line	240, "main.c"; 	PWM2DUTY = maxDuty;
     0049 01rr                      1- 3179     	MOVR	_maxDuty,W
     004A 00rr                      1- 3180     	SFUN	_PWM2DUTY
                                    1- 3181     	.line	241, "main.c"; 	pwmInit();
     004B 2rrr                      1- 3182     	LCALL	_pwmInit
     004C                           1- 3183     _00246_DS_:
                                    1- 3184     	.line	243, "main.c"; 	ledStep = workStep;
     004C 01rr                      1- 3185     	MOVR	_workStep,W
     004D 00rr                      1- 3186     	MOVAR	_ledStep
     004E 3rrr                      1- 3187     	LGOTO	_00257_DS_
     004F                           1- 3188     _00255_DS_:
                                    1- 3189     	.line	245, "main.c"; 	else if(kclick == 2)
     004F 01rr                      1- 3190     	MOVR	r0x1055,W
     0050 2402                      1- 3191     	XORIA	0x02
     0051 0903                      1- 3192     	BTRSS	STATUS,2
     0052 3rrr                      1- 3193     	LGOTO	_00257_DS_
                                    1- 3194     	.line	247, "main.c"; 	if(workStep > 0)
     0053 01rr                      1- 3195     	MOVR	_workStep,W
     0054 0D03                      1- 3196     	BTRSC	STATUS,2
     0055 3rrr                      1- 3197     	LGOTO	_00250_DS_
                                    1- 3198     	.line	249, "main.c"; 	powerOff();
     0056 2rrr                      1- 3199     	LCALL	_powerOff
     0057 3rrr                      1- 3200     	LGOTO	_00251_DS_
     0058                           1- 3201     _00250_DS_:
                                    1- 3202     	.line	253, "main.c"; 	if(pwStep == 10)
     0058 01rr                      1- 3203     	MOVR	_pwStep,W
     0059 240A                      1- 3204     	XORIA	0x0a
     005A 0903                      1- 3205     	BTRSS	STATUS,2
     005B 3rrr                      1- 3206     	LGOTO	_00248_DS_
                                    1- 3207     	.line	255, "main.c"; 	sleepTime = 0;
     005C 02rr                      1- 3208     	CLRR	_sleepTime
     005D 02rr                      1- 3209     	CLRR	(_sleepTime + 1)
                                    1- 3210     	.line	256, "main.c"; 	return;
     005E 3rrr                      1- 3211     	LGOTO	_00257_DS_
     005F                           1- 3212     _00248_DS_:
                                    1- 3213     	.line	258, "main.c"; 	workStep = 1;
     005F 2101                      1- 3214     	MOVIA	0x01
     0060 00rr                      1- 3215     	MOVAR	_workStep
                                    1- 3216     	.line	259, "main.c"; 	PWM2DUTY = 100;
     0061 2164                      1- 3217     	MOVIA	0x64
     0062 00rr                      1- 3218     	SFUN	_PWM2DUTY
                                    1- 3219     	.line	260, "main.c"; 	currentDuty = 100;
     0063 00rr                      1- 3220     	MOVAR	_currentDuty
                                    1- 3221     	.line	261, "main.c"; 	maxDuty = 50;
     0064 2132                      1- 3222     	MOVIA	0x32
     0065 00rr                      1- 3223     	MOVAR	_maxDuty
                                    1- 3224     	.line	262, "main.c"; 	pwmInit();
     0066 2rrr                      1- 3225     	LCALL	_pwmInit
                                    1- 3226     	.line	263, "main.c"; 	shanshuoTime = 16;
     0067 2110                      1- 3227     	MOVIA	0x10
     0068 00rr                      1- 3228     	MOVAR	_shanshuoTime
     0069                           1- 3229     _00251_DS_:
                                    1- 3230     	.line	266, "main.c"; 	ledStep = workStep;
     0069 01rr                      1- 3231     	MOVR	_workStep,W
     006A 00rr                      1- 3232     	MOVAR	_ledStep
     006B                           1- 3233     _00257_DS_:
                                    1- 3234     	.line	268, "main.c"; 	}
                                    1- 3235     	RETURN	
     006B 0010                      3-   26 m1      ret
                                    1- 3236     ; exit point of _keyCtr
                                    1- 3239     ;	code size estimation:
                                    1- 3240     ;	 1433+    0 =  1433 instructions ( 2866 byte)
                                    1- 3242     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__mulchar               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810613
__sdcc_interrupt        Label    00000000
_00106_DS_              Label    0000001E
_00112_DS_              Label    00000039
_00119_DS_              Label    00000046
_00126_DS_              Label    00000048
_00128_DS_              Label    0000004C
_00141_DS_              Label    00000019
_00145_DS_              Label    0000000F
_00146_DS_              Label    00000021
_00148_DS_              Label    0000002D
_00153_DS_              Label    00000044
_00160_DS_              Label    00000002
_00218_DS_              Label    00000041
_00219_DS_              Label    0000004A
_00225_DS_              Label    00000013
_00227_DS_              Label    0000001B
_00231_DS_              Label    00000040
_00234_DS_              Label    00000039
_00237_DS_              Label    00000032
_00240_DS_              Label    0000002B
_00243_DS_              Label    00000024
_00244_DS_              Label    00000046
_00246_DS_              Label    0000004C
_00248_DS_              Label    0000005F
_00250_DS_              Label    00000058
_00251_DS_              Label    00000069
_00255_DS_              Label    0000004F
_00257_DS_              Label    0000006B
_00271_DS_              Label    0000000E
_00274_DS_              Label    0000000F
_00277_DS_              Label    00000020
_00282_DS_              Label    00000022
_00285_DS_              Label    00000032
_00288_DS_              Label    00000033
_00292_DS_              Label    0000003C
_00294_DS_              Label    0000004F
_00295_DS_              Label    00000051
_00296_DS_              Label    00000052
_00297_DS_              Label    00000053
_00298_DS_              Label    00000054
_00299_DS_              Label    00000055
_00300_DS_              Label    00000056
_00302_DS_              Label    00000057
_00351_DS_              Label    00000048
_00386_DS_              Label    0000000B
_00397_DS_              Label    0000000B
_00417_DS_              Label    00000018
_00418_DS_              Label    0000001F
_00420_DS_              Label    00000010
_00421_DS_              Label    00000020
_00422_DS_              Label    00000021
_00432_DS_              Label    0000002F
_00434_DS_              Label    0000003D
_00437_DS_              Label    00000036
_00438_DS_              Label    0000003F
_00440_DS_              Label    00000020
_00444_DS_              Label    0000000A
_00445_DS_              Label    00000041
_00448_DS_              Label    0000004A
_00474_DS_              Label    00000008
_00481_DS_              Label    00000002
_00483_DS_              Label    00000009
_00493_DS_              Label    00000029
_00497_DS_              Label    00000051
_00502_DS_              Label    00000058
_00505_DS_              Label    00000033
_00506_DS_              Label    0000005A
_00513_DS_              Label    00000083
_00514_DS_              Label    00000091
_00522_DS_              Label    000000C2
_00526_DS_              Label    000000D1
_00527_DS_              Label    000000D3
_00531_DS_              Label    000000EC
_00535_DS_              Label    000000FB
_00536_DS_              Label    000000FD
_00540_DS_              Label    00000116
_00544_DS_              Label    00000125
_00545_DS_              Label    00000127
_00549_DS_              Label    00000140
_00553_DS_              Label    0000014F
_00554_DS_              Label    00000151
_00558_DS_              Label    00000167
_00559_DS_              Label    00000169
_00563_DS_              Label    00000154
_00566_DS_              Label    0000012A
_00569_DS_              Label    00000100
_00572_DS_              Label    000000D6
_00575_DS_              Label    000000AC
_00578_DS_              Label    0000006B
_00580_DS_              Label    0000016B
_00699_DS_              Label    0000002F
_00700_DS_              Label    00000039
_00703_DS_              Label    00000066
_00704_DS_              Label    00000071
_00706_DS_              Label    0000007E
_00707_DS_              Label    0000008D
_00708_DS_              Label    0000009B
_00709_DS_              Label    000000A3
_00710_DS_              Label    000000B2
_00711_DS_              Label    000000BE
_00713_DS_              Label    000000CC
_00714_DS_              Label    000000DC
_00715_DS_              Label    000000E8
_00717_DS_              Label    000000F6
_00718_DS_              Label    00000106
_00719_DS_              Label    00000112
_00721_DS_              Label    00000120
_00722_DS_              Label    00000130
_00723_DS_              Label    0000013C
_00725_DS_              Label    0000014A
_00727_DS_              Label    00000162
_00737_DS_              Label    00000029
_00747_DS_              Label    00000078
_00750_DS_              Label    0000006A
_00751_DS_              Label    00000085
_00753_DS_              Label    0000008F
_00754_DS_              Label    00000098
_00760_DS_              Label    000000C6
_00763_DS_              Label    000000B8
_00764_DS_              Label    000000D3
_00768_DS_              Label    000000D6
_00769_DS_              Label    000000E0
_00774_DS_              Label    0000009B
_00777_DS_              Label    0000004D
_00780_DS_              Label    0000003D
_00783_DS_              Label    000000E5
_00846_DS_              Label    00000033
_00848_DS_              Label    00000043
_00850_DS_              Label    00000053
_00852_DS_              Label    000000A4
_00854_DS_              Label    000000DC
_00861_DS_              Label    0000000A
_00863_DS_              Label    0000001F
_00870_DS_              Label    0000000A
_00872_DS_              Label    0000001F
_00879_DS_              Label    0000000A
_00881_DS_              Label    0000001F
_00886_DS_              Label    00000000
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkBatAD             Label    00000000
_checkChrgV             Label    00000000
_checkInAD              Label    00000000
_checkOutA              Label    00000000
_chrgCount              Label    00000000
_chrgCtr                Label    00000000
_chrgTime               Label    00000000
_count1s                Label    00000000
_count200ms             Label    00000000
_count500ms             Label    00000000
_count900s              Label    00000000
_currentDuty            Label    00000000
_debug                  Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_F_AIN2_Convert         Label    00000000
_F_AIN3_Convert         Label    00000000
_F_AIN4_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_fgCount                Label    00000000
_fgCtr                  Label    00000000
_fgPRD                  Label    00000000
_firstTime              Label    00000000
_FSR                    Label    00000000
_fullCount              Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IO_Init                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_LED1ON                 Label    00000000
_LED2ON                 Label    00000000
_LED3ON                 Label    00000000
_LED4ON                 Label    00000000
_LED5ON                 Label    00000000
_LED6ON                 Label    00000000
_ledCtr                 Label    00000000
_LedCtr2                Label    00000000
_LedInput               Label    00000000
_ledLightTime           Label    00000000
_ledShow                Label    00000000
_ledStep                Label    00000000
_ledTime                Label    00000000
_lowBatTime             Label    00000000
_lowCount               Label    00000000
_main                   Label    00000000
_maxDuty                Label    00000000
_OSCCR                  Label    00000000
_overCount              Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerOff               Label    00000000
_preFG                  Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwm1Init               Label    00000000
_pwm1Stop               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmInit                Label    00000000
_pwmStop                Label    00000000
_pwStep                 Label    00000000
_R_AIN2_DATA            Label    00000000
_R_AIN2_DATA_LB         Label    00000000
_R_AIN3_DATA            Label    00000000
_R_AIN3_DATA_LB         Label    00000000
_R_AIN4_DATA            Label    00000000
_R_AIN4_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_shanshuoTime           Label    00000000
_sleepTime              Label    00000000
_startStep              Label    00000000
_Status                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_tempDuty               Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000005A
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102B                 Label    00000000
r0x102C                 Label    00000000
r0x102D                 Label    00000000
r0x1030                 Label    00000000
r0x1031                 Label    00000000
r0x1032                 Label    00000000
r0x1033                 Label    00000000
r0x1036                 Label    00000000
r0x1037                 Label    00000000
r0x1038                 Label    00000000
r0x1039                 Label    00000000
r0x103C                 Label    00000000
r0x103D                 Label    00000000
r0x1040                 Label    00000000
r0x1043                 Label    00000000
r0x1044                 Label    00000000
r0x1047                 Label    00000000
r0x1048                 Label    00000000
r0x1049                 Label    00000000
r0x104A                 Label    00000000
r0x104B                 Label    00000000
r0x104C                 Label    00000000
r0x104D                 Label    00000000
r0x104E                 Label    00000000
r0x104F                 Label    00000000
r0x1050                 Label    00000000
r0x1051                 Label    00000000
r0x1052                 Label    00000000
r0x1053                 Label    00000000
r0x1054                 Label    00000000
r0x1055                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b061d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B061D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000005FF
DATA ROM     = 0x00000000 - 0x000005FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
