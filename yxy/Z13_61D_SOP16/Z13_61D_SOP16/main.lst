
                    Nyquest Technology Co., Ltd.

NYASM 2.26

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B061D,c=on
                                    1-    9     	#include "ny8b061d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_ADMDbits
                                    1-   23     	extern	_ADRbits
                                    1-   24     	extern	_ADVREFHbits
                                    1-   25     	extern	_ADCRbits
                                    1-   26     	extern	_AWUCONbits
                                    1-   27     	extern	_PACONbits
                                    1-   28     	extern	_INTEDGbits
                                    1-   29     	extern	_RFCbits
                                    1-   30     	extern	_INTE2bits
                                    1-   31     	extern	_INDF
                                    1-   32     	extern	_TMR0
                                    1-   33     	extern	_PCL
                                    1-   34     	extern	_STATUS
                                    1-   35     	extern	_FSR
                                    1-   36     	extern	_PORTA
                                    1-   37     	extern	_PORTB
                                    1-   38     	extern	_PCON
                                    1-   39     	extern	_BWUCON
                                    1-   40     	extern	_PCHBUF
                                    1-   41     	extern	_ABPLCON
                                    1-   42     	extern	_BPHCON
                                    1-   43     	extern	_INTE
                                    1-   44     	extern	_INTF
                                    1-   45     	extern	_ADMD
                                    1-   46     	extern	_ADR
                                    1-   47     	extern	_ADD
                                    1-   48     	extern	_ADVREFH
                                    1-   49     	extern	_ADCR
                                    1-   50     	extern	_AWUCON
                                    1-   51     	extern	_PACON
                                    1-   52     	extern	_INTEDG
                                    1-   53     	extern	_TMRH
                                    1-   54     	extern	_RFC
                                    1-   55     	extern	_TM3RH
                                    1-   56     	extern	_INTE2
                                    1-   57     	extern	_TMR1
                                    1-   58     	extern	_T1CR1
                                    1-   59     	extern	_T1CR2
                                    1-   60     	extern	_PWM1DUTY
                                    1-   61     	extern	_PS1CV
                                    1-   62     	extern	_BZ1CR
                                    1-   63     	extern	_IRCR
                                    1-   64     	extern	_TBHP
                                    1-   65     	extern	_TBHD
                                    1-   66     	extern	_TMR2
                                    1-   67     	extern	_T2CR1
                                    1-   68     	extern	_T2CR2
                                    1-   69     	extern	_PWM2DUTY
                                    1-   70     	extern	_PS2CV
                                    1-   71     	extern	_BZ2CR
                                    1-   72     	extern	_OSCCR
                                    1-   73     	extern	_TMR3
                                    1-   74     	extern	_T3CR1
                                    1-   75     	extern	_T3CR2
                                    1-   76     	extern	_PWM3DUTY
                                    1-   77     	extern	_PS3CV
                                    1-   78     	extern	_BZ3CR
                                    1-   79     	extern	_IOSTA
                                    1-   80     	extern	_IOSTB
                                    1-   81     	extern	_APHCON
                                    1-   82     	extern	_PS0CV
                                    1-   83     	extern	_BODCON
                                    1-   84     	extern	_PCON1
                                    1-   85     	extern	_T0MD
                                    1-   86     	extern	___sdcc_saved_fsr
                                    1-   87     	extern	___sdcc_saved_stk00
                                    1-   88     	extern	___sdcc_saved_stk01
                                    1-   89     	extern	__nyc_ny8_startup
                                    1-   90     ;--------------------------------------------------------
                                    1-   91     ; global declarations
                                    1-   92     ;--------------------------------------------------------
                                    1-   93     	extern	_delay
                                    1-   94     	extern	_F_wait_eoc
                                    1-   95     	extern	_initAD
                                    1-   96     	extern	_initSys
                                    1-   97     	extern	_isr
                                    1-   98     	extern	_main
                                    1-   99     	extern	_Status
                                    1-  100     	extern	_intCount
                                    1-  102     	extern PSAVE
                                    1-  103     	extern SSAVE
                                    1-  104     	extern WSAVE
                                    1-  105     	extern STK02
                                    1-  106     	extern STK01
                                    1-  107     	extern STK00
                                    1-  109     .segment "uninit", 0x20000040
 20000040                           1-  110     PSAVE:
                                    1-  111     	.res 1
 20000041                           1-  112     SSAVE:
                                    1-  113     	.res 1
 20000042                           1-  114     WSAVE:
                                    1-  115     	.res 1
 20000043                           1-  116     STK02:
                                    1-  117     	.res 1
 20000044                           1-  118     STK01:
                                    1-  119     	.res 1
 20000045                           1-  120     STK00:
                                    1-  121     	.res 1
                                    1-  123     ;--------------------------------------------------------
                                    1-  124     ; global definitions
                                    1-  125     ;--------------------------------------------------------
                                    1-  126     ;--------------------------------------------------------
                                    1-  127     ; absolute symbol definitions
                                    1-  128     ;--------------------------------------------------------
                                    1-  129     ;--------------------------------------------------------
                                    1-  130     ; compiler-defined variables
                                    1-  131     ;--------------------------------------------------------
                                    1-  132     .segment "uninit"
     0000                           1-  133     r0x1004:
                                    1-  134     	.res	1
                                    1-  135     .segment "uninit"
     0000                           1-  136     r0x1005:
                                    1-  137     	.res	1
                                    1-  138     ;--------------------------------------------------------
                                    1-  139     ; initialized data
                                    1-  140     ;--------------------------------------------------------
                                    1-  142     .segment "idata"
     0000                           1-  143     _Status:
     0000 0000                      1-  144     	dw	0x00
                                    1-  148     .segment "idata"
     0000                           1-  149     _intCount:
     0000 0000                      1-  150     	dw	0x00
                                    1-  153     ;--------------------------------------------------------
                                    1-  154     ; overlayable items in internal ram 
                                    1-  155     ;--------------------------------------------------------
                                    1-  156     ;	udata_ovr
                                    1-  157     ;--------------------------------------------------------
                                    1-  158     ; reset vector 
                                    1-  159     ;--------------------------------------------------------
                                    1-  160     ORG	0x0000
     0000 3rrr                      1-  161     	LGOTO	__nyc_ny8_startup
                                    1-  162     ;--------------------------------------------------------
                                    1-  163     ; interrupt and initialization code
                                    1-  164     ;--------------------------------------------------------
                                    1-  165     ORG 0x0008
     0008 3rrr                      1-  166     	lgoto	__sdcc_interrupt
                                    1-  168     .segment "code"
     0000                           1-  169     __sdcc_interrupt:
                                    1-  170     ;***
                                    1-  171     ;  pBlock Stats: dbName = I
                                    1-  172     ;***
                                    1-  173     ;2 compiler assigned registers:
                                    1-  174     ;   STK00
                                    1-  175     ;   STK01
                                    1-  176     ;; Starting pCode block
     0000                           1-  177     _isr:
                                    1-  178     ; 0 exit points
                                    1-  179     	.line	23, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  180     	MOVAR	WSAVE
     0001 1503                      1-  181     	SWAPR	STATUS,W
     0002 0283                      1-  182     	CLRR	STATUS
     0003 00rr                      1-  183     	MOVAR	SSAVE
     0004 010A                      1-  184     	MOVR	PCHBUF,W
     0005 028A                      1-  185     	CLRR	PCHBUF
     0006 00rr                      1-  186     	MOVAR	PSAVE
     0007 0104                      1-  187     	MOVR	FSR,W
                                    1-  188     	BANKSEL	___sdcc_saved_fsr
     0008 00rr                      1-  189     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  190     	MOVR	STK00,W
                                    1-  191     	BANKSEL	___sdcc_saved_stk00
     000A 00rr                      1-  192     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  193     	MOVR	STK01,W
                                    1-  194     	BANKSEL	___sdcc_saved_stk01
     000C 00rr                      1-  195     	MOVAR	___sdcc_saved_stk01
                                    1-  196     	.line	25, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  197     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  198     	LGOTO	_00108_DS_
                                    1-  199     	.line	27, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  200     	MOVIA	0x37
     0010 03rr                      1-  201     	ADDAR	_TMR0,F
                                    1-  202     	.line	29, "main.c"; 	if(++intCount >= 100)
                                    1-  203     	BANKSEL	_intCount
     0011 05rr                      1-  204     	INCR	_intCount,F
                                    1-  205     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  206     	MOVIA	0x64
     0013 04rr                      1-  207     	SUBAR	_intCount,W
     0014 0803                      1-  208     	BTRSS	STATUS,0
     0015 3rrr                      1-  209     	LGOTO	_00108_DS_
                                    1-  210     	.line	31, "main.c"; 	IntFlag = 1;
                                    1-  211     	BANKSEL	_Status
     0016 18rr                      1-  212     	BSR	_Status,0
                                    1-  213     	.line	32, "main.c"; 	intCount = 0;
                                    1-  214     	BANKSEL	_intCount
     0017 02rr                      1-  215     	CLRR	_intCount
     0018                           1-  216     _00108_DS_:
                                    1-  217     	.line	38, "main.c"; 	if(INTFbits.PABIF)
     0018 08rr                      1-  218     	BTRSS	_INTFbits,1
     0019 3rrr                      1-  219     	LGOTO	_00110_DS_
                                    1-  220     	.line	40, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     001A 21FD                      1-  221     	MOVIA	0xfd
     001B 00rr                      1-  222     	MOVAR	_INTF
     001C                           1-  223     _00110_DS_:
                                    1-  224     	.line	43, "main.c"; 	INTF = 0;
     001C 02rr                      1-  225     	CLRR	_INTF
                                    1-  226     	.line	45, "main.c"; 	}
                                    1-  227     	BANKSEL	___sdcc_saved_stk01
     001D 01rr                      1-  228     	MOVR	___sdcc_saved_stk01,W
     001E 00rr                      1-  229     	MOVAR	STK01
                                    1-  230     	BANKSEL	___sdcc_saved_stk00
     001F 01rr                      1-  231     	MOVR	___sdcc_saved_stk00,W
     0020 00rr                      1-  232     	MOVAR	STK00
                                    1-  233     	BANKSEL	___sdcc_saved_fsr
     0021 01rr                      1-  234     	MOVR	___sdcc_saved_fsr,W
     0022 0084                      1-  235     	MOVAR	FSR
     0023 01rr                      1-  236     	MOVR	PSAVE,W
     0024 008A                      1-  237     	MOVAR	PCHBUF
     0025 0283                      1-  238     	CLRR	STATUS
     0026 15rr                      1-  239     	SWAPR	SSAVE,W
     0027 0083                      1-  240     	MOVAR	STATUS
     0028 15rr                      1-  241     	SWAPR	WSAVE,F
     0029 15rr                      1-  242     	SWAPR	WSAVE,W
     002A                           1-  243     END_OF_INTERRUPT:
     002A 0011                      1-  244     	RETIE	
                                    1-  246     ;--------------------------------------------------------
                                    1-  247     ; code
                                    1-  248     ;--------------------------------------------------------
                                    1-  249     ;***
                                    1-  250     ;  pBlock Stats: dbName = M
                                    1-  251     ;***
                                    1-  252     ;has an exit
                                    1-  253     ;functions called:
                                    1-  254     ;   _initSys
                                    1-  255     ;   _initAD
                                    1-  256     ;   _initSys
                                    1-  257     ;   _initAD
                                    1-  258     ;; Starting pCode block
                                    1-  259     .segment "code"; module=main, function=_main
     0000                           1-  261     _main:
                                    1-  262     ; 2 exit points
                                    1-  263     	.line	76, "main.c"; 	initSys();
     0000 2rrr                      1-  264     	LCALL	_initSys
                                    1-  265     	.line	77, "main.c"; 	initAD();
     0001 2rrr                      1-  266     	LCALL	_initAD
     0002                           1-  267     _00122_DS_:
                                    1-  268     	.line	80, "main.c"; 	CLRWDT();
     0002 0002                      1-  269     	clrwdt
                                    1-  270     	.line	81, "main.c"; 	if(!IntFlag)
                                    1-  271     	BANKSEL	_Status
     0003 08rr                      1-  272     	BTRSS	_Status,0
     0004 3rrr                      1-  273     	LGOTO	_00122_DS_
                                    1-  274     	.line	83, "main.c"; 	IntFlag = 0;
     0005 1Crr                      1-  275     	BCR	_Status,0
     0006 3rrr                      1-  276     	LGOTO	_00122_DS_
                                    1-  277     	.line	86, "main.c"; 	}
                                    1-  278     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  279     ; exit point of _main
                                    1-  281     ;***
                                    1-  282     ;  pBlock Stats: dbName = C
                                    1-  283     ;***
                                    1-  284     ;has an exit
                                    1-  285     ;2 compiler assigned registers:
                                    1-  286     ;   r0x1004
                                    1-  287     ;   r0x1005
                                    1-  288     ;; Starting pCode block
                                    1-  289     .segment "code"; module=main, function=_delay
                                    1-  291     ;local variable name mapping:
     0000                           1-  294     _delay:
                                    1-  295     ; 2 exit points
                                    1-  296     	.line	122, "main.c"; 	void delay(u8t time)
                                    1-  297     	BANKSEL	r0x1004
     0000 00rr                      1-  298     	MOVAR	r0x1004
                                    1-  299     	.line	124, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  300     	BANKSEL	r0x1005
     0001 02rr                      1-  301     	CLRR	r0x1005
     0002                           1-  302     _00138_DS_:
                                    1-  303     	BANKSEL	r0x1004
     0002 01rr                      1-  304     	MOVR	r0x1004,W
                                    1-  305     	BANKSEL	r0x1005
     0003 04rr                      1-  306     	SUBAR	r0x1005,W
     0004 0C03                      1-  307     	BTRSC	STATUS,0
     0005 3rrr                      1-  308     	LGOTO	_00140_DS_
                                    1-  309     	.line	125, "main.c"; 	NOP();
     0006 0000                      1-  310     	nop
                                    1-  311     	.line	124, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  312     	BANKSEL	r0x1005
     0007 05rr                      1-  313     	INCR	r0x1005,F
     0008 3rrr                      1-  314     	LGOTO	_00138_DS_
     0009                           1-  315     _00140_DS_:
                                    1-  316     	.line	126, "main.c"; 	}
                                    1-  317     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1-  318     ; exit point of _delay
                                    1-  320     ;***
                                    1-  321     ;  pBlock Stats: dbName = C
                                    1-  322     ;***
                                    1-  323     ;has an exit
                                    1-  324     ;; Starting pCode block
                                    1-  325     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  327     _F_wait_eoc:
                                    1-  328     ; 2 exit points
     0000                           1-  329     _00131_DS_:
                                    1-  330     	.line	116, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  331     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  332     	LGOTO	_00131_DS_
                                    1-  333     	.line	118, "main.c"; 	}
                                    1-  334     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  335     ; exit point of _F_wait_eoc
                                    1-  337     ;***
                                    1-  338     ;  pBlock Stats: dbName = C
                                    1-  339     ;***
                                    1-  340     ;has an exit
                                    1-  341     ;functions called:
                                    1-  342     ;   _delay
                                    1-  343     ;   _delay
                                    1-  344     ;; Starting pCode block
                                    1-  345     .segment "code"; module=main, function=_initAD
     0000                           1-  347     _initAD:
                                    1-  348     ; 2 exit points
                                    1-  349     	.line	92, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1-  350     	MOVIA	0x84
     0001 00rr                      1-  351     	MOVAR	_ADMD
                                    1-  352     	.line	97, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1-  353     	CLRR	_ADVREFH
                                    1-  354     	.line	102, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1-  355     	MOVIA	0x10
     0004 00rr                      1-  356     	MOVAR	_ADR
                                    1-  357     	.line	104, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1-  358     	MOVIA	0x03
     0006 00rr                      1-  359     	MOVAR	_ADCR
                                    1-  360     	.line	107, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1-  361     	BSR	_ADMDbits,4
                                    1-  362     	.line	108, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1-  363     	MOVIA	0x64
     0009 2rrr                      1-  364     	LCALL	_delay
                                    1-  365     	.line	111, "main.c"; 	}
                                    1-  366     	RETURN	
     000A 0010                      3-   26 m1      ret
                                    1-  367     ; exit point of _initAD
                                    1-  369     ;***
                                    1-  370     ;  pBlock Stats: dbName = C
                                    1-  371     ;***
                                    1-  372     ;has an exit
                                    1-  373     ;; Starting pCode block
                                    1-  374     .segment "code"; module=main, function=_initSys
     0000                           1-  376     _initSys:
                                    1-  377     ; 2 exit points
                                    1-  378     	.line	49, "main.c"; 	DISI();
     0000 0013                      1-  379     	DISI
                                    1-  380     	.line	50, "main.c"; 	IOSTA = C_PA6_Input | C_PA5_Input | C_PA4_Input;
     0001 2170                      1-  381     	MOVIA	0x70
     0002 000r                      1-  382     	IOST	_IOSTA
                                    1-  383     	.line	51, "main.c"; 	IOSTB = C_PB0_Input;
     0003 2101                      1-  384     	MOVIA	0x01
     0004 000r                      1-  385     	IOST	_IOSTB
                                    1-  386     	.line	52, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  387     	CLRR	_PORTB
                                    1-  388     	.line	53, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  389     	CLRR	_PORTA
                                    1-  390     	.line	54, "main.c"; 	APHCON = 0x9F;
     0007 219F                      1-  391     	MOVIA	0x9f
     0008 000r                      1-  392     	IOST	_APHCON
                                    1-  393     	.line	55, "main.c"; 	BPHCON = 0xFF;
     0009 21FF                      1-  394     	MOVIA	0xff
     000A 00rr                      1-  395     	MOVAR	_BPHCON
                                    1-  396     	.line	57, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000B 2101                      1-  397     	MOVIA	0x01
     000C 00rr                      1-  398     	MOVAR	_INTE
                                    1-  399     	.line	59, "main.c"; 	PCON1 = C_TMR0_Dis;
     000D 0200                      1-  400     	CLRA	
     000E 000r                      1-  401     	IOST	_PCON1
                                    1-  402     	.line	61, "main.c"; 	TMR0 = 55;
     000F 2137                      1-  403     	MOVIA	0x37
     0010 00rr                      1-  404     	MOVAR	_TMR0
                                    1-  405     	.line	62, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0011 0200                      1-  406     	CLRA	
     0012 0003                      1-  407     	T0MD	
                                    1-  408     	.line	64, "main.c"; 	PCON1 = C_TMR0_En;
     0013 2101                      1-  409     	MOVIA	0x01
     0014 000r                      1-  410     	IOST	_PCON1
                                    1-  411     	.line	67, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0015 2198                      1-  412     	MOVIA	0x98
     0016 00rr                      1-  413     	MOVAR	_PCON
                                    1-  414     	.line	70, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0017 2101                      1-  415     	MOVIA	0x01
     0018 000r                      1-  416     	IOST	_PCON1
                                    1-  417     	.line	71, "main.c"; 	ENI();
     0019 0004                      1-  418     	ENI
                                    1-  419     	.line	72, "main.c"; 	}
                                    1-  420     	RETURN	
     001A 0010                      3-   26 m1      ret
                                    1-  421     ; exit point of _initSys
                                    1-  424     ;	code size estimation:
                                    1-  425     ;	   98+   15 =   113 instructions (  256 byte)
                                    1-  427     	end
                                    1-  427     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810613
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000018
_00110_DS_              Label    0000001C
_00122_DS_              Label    00000002
_00131_DS_              Label    00000000
_00138_DS_              Label    00000002
_00140_DS_              Label    00000009
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_delay                  Label    00000000
_F_wait_eoc             Label    00000000
_FSR                    Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_Status                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002A
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1004                 Label    00000000
r0x1005                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b061d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B061D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000005FF
DATA ROM     = 0x00000000 - 0x000005FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
