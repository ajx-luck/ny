
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	__divuint
                                    1-   15     	extern	_PORTAbits
                                    1-   16     	extern	_PORTBbits
                                    1-   17     	extern	_PCONbits
                                    1-   18     	extern	_BWUCONbits
                                    1-   19     	extern	_ABPLCONbits
                                    1-   20     	extern	_BPHCONbits
                                    1-   21     	extern	_INTEbits
                                    1-   22     	extern	_INTFbits
                                    1-   23     	extern	_ADMDbits
                                    1-   24     	extern	_ADRbits
                                    1-   25     	extern	_ADVREFHbits
                                    1-   26     	extern	_ADCRbits
                                    1-   27     	extern	_AWUCONbits
                                    1-   28     	extern	_PACONbits
                                    1-   29     	extern	_INTEDGbits
                                    1-   30     	extern	_ANAENbits
                                    1-   31     	extern	_RFCbits
                                    1-   32     	extern	_INTE2bits
                                    1-   33     	extern	_INDF
                                    1-   34     	extern	_TMR0
                                    1-   35     	extern	_PCL
                                    1-   36     	extern	_STATUS
                                    1-   37     	extern	_FSR
                                    1-   38     	extern	_PORTA
                                    1-   39     	extern	_PORTB
                                    1-   40     	extern	_PCON
                                    1-   41     	extern	_BWUCON
                                    1-   42     	extern	_PCHBUF
                                    1-   43     	extern	_ABPLCON
                                    1-   44     	extern	_BPHCON
                                    1-   45     	extern	_INTE
                                    1-   46     	extern	_INTF
                                    1-   47     	extern	_ADMD
                                    1-   48     	extern	_ADR
                                    1-   49     	extern	_ADD
                                    1-   50     	extern	_ADVREFH
                                    1-   51     	extern	_ADCR
                                    1-   52     	extern	_AWUCON
                                    1-   53     	extern	_PACON
                                    1-   54     	extern	_INTEDG
                                    1-   55     	extern	_TMRH
                                    1-   56     	extern	_ANAEN
                                    1-   57     	extern	_RFC
                                    1-   58     	extern	_TM3RH
                                    1-   59     	extern	_INTE2
                                    1-   60     	extern	_TMR1
                                    1-   61     	extern	_T1CR1
                                    1-   62     	extern	_T1CR2
                                    1-   63     	extern	_PWM1DUTY
                                    1-   64     	extern	_PS1CV
                                    1-   65     	extern	_BZ1CR
                                    1-   66     	extern	_IRCR
                                    1-   67     	extern	_TBHP
                                    1-   68     	extern	_TBHD
                                    1-   69     	extern	_TMR2
                                    1-   70     	extern	_T2CR1
                                    1-   71     	extern	_T2CR2
                                    1-   72     	extern	_PWM2DUTY
                                    1-   73     	extern	_PS2CV
                                    1-   74     	extern	_BZ2CR
                                    1-   75     	extern	_OSCCR
                                    1-   76     	extern	_TMR3
                                    1-   77     	extern	_T3CR1
                                    1-   78     	extern	_T3CR2
                                    1-   79     	extern	_PWM3DUTY
                                    1-   80     	extern	_PS3CV
                                    1-   81     	extern	_BZ3CR
                                    1-   82     	extern	_IOSTA
                                    1-   83     	extern	_IOSTB
                                    1-   84     	extern	_APHCON
                                    1-   85     	extern	_PS0CV
                                    1-   86     	extern	_BODCON
                                    1-   87     	extern	_CMPCR
                                    1-   88     	extern	_PCON1
                                    1-   89     	extern	_T0MD
                                    1-   90     	extern	___sdcc_saved_fsr
                                    1-   91     	extern	___sdcc_saved_stk00
                                    1-   92     	extern	___sdcc_saved_stk01
                                    1-   93     	extern	__nyc_ny8_startup
                                    1-   94     ;--------------------------------------------------------
                                    1-   95     ; global declarations
                                    1-   96     ;--------------------------------------------------------
                                    1-   97     	extern	_keyCon
                                    1-   98     	extern	_delay
                                    1-   99     	extern	_F_wait_eoc
                                    1-  100     	extern	_F_AIN8_Convert
                                    1-  101     	extern	_checkAD
                                    1-  102     	extern	_initAD
                                    1-  103     	extern	_initSys
                                    1-  104     	extern	_showRGB
                                    1-  105     	extern	_workCtr
                                    1-  106     	extern	_isr
                                    1-  107     	extern	_main
                                    1-  108     	extern	_ledCount
                                    1-  109     	extern	_IntFlag
                                    1-  110     	extern	_intCount
                                    1-  111     	extern	_ledFlag
                                    1-  112     	extern	_blue
                                    1-  113     	extern	_red
                                    1-  114     	extern	_green
                                    1-  115     	extern	_workStep
                                    1-  116     	extern	_key2Count
                                    1-  117     	extern	_longFlag
                                    1-  118     	extern	_timeCount
                                    1-  119     	extern	_workCount
                                    1-  120     	extern	_delayCount
                                    1-  121     	extern	_SKFlag
                                    1-  122     	extern	_R_AIN8_DATA
                                    1-  123     	extern	_R_AIN8_DATA_LB
                                    1-  124     	extern	_debug
                                    1-  126     	extern PSAVE
                                    1-  127     	extern SSAVE
                                    1-  128     	extern WSAVE
                                    1-  129     	extern STK02
                                    1-  130     	extern STK01
                                    1-  131     	extern STK00
                                    1-  133     .segment "uninit", 0x20000040
 20000040                           1-  134     PSAVE:
                                    1-  135     	.res 1
 20000041                           1-  136     SSAVE:
                                    1-  137     	.res 1
 20000042                           1-  138     WSAVE:
                                    1-  139     	.res 1
 20000043                           1-  140     STK02:
                                    1-  141     	.res 1
 20000044                           1-  142     STK01:
                                    1-  143     	.res 1
 20000045                           1-  144     STK00:
                                    1-  145     	.res 1
                                    1-  147     ;--------------------------------------------------------
                                    1-  148     ; global definitions
                                    1-  149     ;--------------------------------------------------------
                                    1-  150     .segment "uninit"
     0000                           1-  151     _R_AIN8_DATA_LB:
                                    1-  152     	.res	1
                                    1-  155     ;--------------------------------------------------------
                                    1-  156     ; absolute symbol definitions
                                    1-  157     ;--------------------------------------------------------
                                    1-  158     ;--------------------------------------------------------
                                    1-  159     ; compiler-defined variables
                                    1-  160     ;--------------------------------------------------------
                                    1-  161     .segment "uninit"
     0000                           1-  162     r0x102A:
                                    1-  163     	.res	1
                                    1-  164     .segment "uninit"
     0000                           1-  165     r0x102B:
                                    1-  166     	.res	1
                                    1-  167     .segment "uninit"
     0000                           1-  168     r0x1026:
                                    1-  169     	.res	1
                                    1-  170     .segment "uninit"
     0000                           1-  171     r0x1027:
                                    1-  172     	.res	1
                                    1-  173     .segment "uninit"
     0000                           1-  174     r0x1028:
                                    1-  175     	.res	1
                                    1-  176     .segment "uninit"
     0000                           1-  177     r0x1029:
                                    1-  178     	.res	1
                                    1-  179     .segment "uninit"
     0000                           1-  180     r0x1024:
                                    1-  181     	.res	1
                                    1-  182     .segment "uninit"
     0000                           1-  183     r0x1025:
                                    1-  184     	.res	1
                                    1-  185     .segment "uninit"
     0000                           1-  186     r0x101C:
                                    1-  187     	.res	1
                                    1-  188     .segment "uninit"
     0000                           1-  189     r0x101D:
                                    1-  190     	.res	1
                                    1-  191     .segment "uninit"
     0000                           1-  192     r0x101E:
                                    1-  193     	.res	1
                                    1-  194     .segment "uninit"
     0000                           1-  195     r0x1021:
                                    1-  196     	.res	1
                                    1-  197     .segment "uninit"
     0000                           1-  198     r0x101A:
                                    1-  199     	.res	1
                                    1-  200     .segment "uninit"
     0000                           1-  201     r0x101B:
                                    1-  202     	.res	1
                                    1-  203     ;--------------------------------------------------------
                                    1-  204     ; initialized data
                                    1-  205     ;--------------------------------------------------------
                                    1-  207     .segment "idata"
     0000                           1-  208     _ledCount:
     0000 0000 0000                 1-  209     	dw	0x00, 0x00
                                    1-  213     .segment "idata"
     0000                           1-  214     _IntFlag:
     0000 0000                      1-  215     	dw	0x00
                                    1-  219     .segment "idata"
     0000                           1-  220     _intCount:
     0000 0000                      1-  221     	dw	0x00
                                    1-  225     .segment "idata"
     0000                           1-  226     _ledFlag:
     0000 0000                      1-  227     	dw	0x00
                                    1-  231     .segment "idata"
     0000                           1-  232     _blue:
     0000 0000 0000                 1-  233     	dw	0x00, 0x00
                                    1-  237     .segment "idata"
     0000                           1-  238     _red:
     0000 0000 0000                 1-  239     	dw	0x00, 0x00
                                    1-  243     .segment "idata"
     0000                           1-  244     _green:
     0000 0000 0000                 1-  245     	dw	0x00, 0x00
                                    1-  249     .segment "idata"
     0000                           1-  250     _workStep:
     0000 0000                      1-  251     	dw	0x00
                                    1-  255     .segment "idata"
     0000                           1-  256     _key2Count:
     0000 0000 0000                 1-  257     	dw	0x00, 0x00
                                    1-  261     .segment "idata"
     0000                           1-  262     _longFlag:
     0000 0000                      1-  263     	dw	0x00
                                    1-  267     .segment "idata"
     0000                           1-  268     _timeCount:
     0000 0000                      1-  269     	dw	0x00
                                    1-  273     .segment "idata"
     0000                           1-  274     _workCount:
     0000 0000                      1-  275     	dw	0x00
                                    1-  279     .segment "idata"
     0000                           1-  280     _delayCount:
     0000 0000                      1-  281     	dw	0x00
                                    1-  285     .segment "idata"
     0000                           1-  286     _SKFlag:
     0000 0000                      1-  287     	dw	0x00
                                    1-  291     .segment "idata"
     0000                           1-  292     _R_AIN8_DATA:
     0000 0000 0000                 1-  293     	dw	0x00, 0x00
                                    1-  297     .segment "idata"
     0000                           1-  298     _debug:
     0000 0000                      1-  299     	dw	0x00
                                    1-  302     ;--------------------------------------------------------
                                    1-  303     ; overlayable items in internal ram 
                                    1-  304     ;--------------------------------------------------------
                                    1-  305     ;	udata_ovr
                                    1-  306     ;--------------------------------------------------------
                                    1-  307     ; reset vector 
                                    1-  308     ;--------------------------------------------------------
                                    1-  309     ORG	0x0000
     0000 3rrr                      1-  310     	LGOTO	__nyc_ny8_startup
                                    1-  311     ;--------------------------------------------------------
                                    1-  312     ; interrupt and initialization code
                                    1-  313     ;--------------------------------------------------------
                                    1-  314     ORG 0x0008
     0008 3rrr                      1-  315     	lgoto	__sdcc_interrupt
                                    1-  317     .segment "code"
     0000                           1-  318     __sdcc_interrupt:
                                    1-  319     ;***
                                    1-  320     ;  pBlock Stats: dbName = I
                                    1-  321     ;***
                                    1-  322     ;2 compiler assigned registers:
                                    1-  323     ;   STK00
                                    1-  324     ;   STK01
                                    1-  325     ;; Starting pCode block
     0000                           1-  326     _isr:
                                    1-  327     ; 0 exit points
                                    1-  328     	.line	44, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  329     	MOVAR	WSAVE
     0001 1503                      1-  330     	SWAPR	STATUS,W
     0002 0283                      1-  331     	CLRR	STATUS
     0003 00rr                      1-  332     	MOVAR	SSAVE
     0004 010A                      1-  333     	MOVR	PCHBUF,W
     0005 028A                      1-  334     	CLRR	PCHBUF
     0006 00rr                      1-  335     	MOVAR	PSAVE
     0007 0104                      1-  336     	MOVR	FSR,W
                                    1-  337     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  338     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  339     	MOVR	STK00,W
                                    1-  340     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  341     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  342     	MOVR	STK01,W
                                    1-  343     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  344     	MOVAR	___sdcc_saved_stk01
                                    1-  345     	.line	46, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  346     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  347     	LGOTO	_00108_DS_
                                    1-  348     	.line	48, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  349     	MOVIA	0x37
     0013 03rr                      1-  350     	ADDAR	_TMR0,F
                                    1-  351     	.line	50, "main.c"; 	if(++intCount >= 100)
                                    1-  352     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  353     	INCR	_intCount,F
                                    1-  354     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  355     	MOVIA	0x64
     0017 04rr                      1-  356     	SUBAR	_intCount,W
     0018 0803                      1-  357     	BTRSS	STATUS,0
     0019 3rrr                      1-  358     	LGOTO	_00108_DS_
                                    1-  359     	.line	52, "main.c"; 	IntFlag = 1;
     001A 2101                      1-  360     	MOVIA	0x01
                                    1-  361     	BANKSEL	_IntFlag
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1-  362     	MOVAR	_IntFlag
                                    1-  363     	.line	53, "main.c"; 	intCount = 0;
                                    1-  364     	BANKSEL	_intCount
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 02rr                      1-  365     	CLRR	_intCount
     001F                           1-  366     _00108_DS_:
                                    1-  367     	.line	60, "main.c"; 	if(INTFbits.PABIF)
     001F 08rr                      1-  368     	BTRSS	_INTFbits,1
     0020 3rrr                      1-  369     	LGOTO	_00110_DS_
                                    1-  370     	.line	62, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0021 21FD                      1-  371     	MOVIA	0xfd
     0022 00rr                      1-  372     	MOVAR	_INTF
     0023                           1-  373     _00110_DS_:
                                    1-  374     	.line	65, "main.c"; 	INTF = 0;
     0023 02rr                      1-  375     	CLRR	_INTF
                                    1-  376     	.line	67, "main.c"; 	}
                                    1-  377     	BANKSEL	___sdcc_saved_stk01
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1-  378     	MOVR	___sdcc_saved_stk01,W
     0026 00rr                      1-  379     	MOVAR	STK01
                                    1-  380     	BANKSEL	___sdcc_saved_stk00
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 01rr                      1-  381     	MOVR	___sdcc_saved_stk00,W
     0029 00rr                      1-  382     	MOVAR	STK00
                                    1-  383     	BANKSEL	___sdcc_saved_fsr
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 01rr                      1-  384     	MOVR	___sdcc_saved_fsr,W
     002C 0084                      1-  385     	MOVAR	FSR
     002D 01rr                      1-  386     	MOVR	PSAVE,W
     002E 008A                      1-  387     	MOVAR	PCHBUF
     002F 0283                      1-  388     	CLRR	STATUS
     0030 15rr                      1-  389     	SWAPR	SSAVE,W
     0031 0083                      1-  390     	MOVAR	STATUS
     0032 15rr                      1-  391     	SWAPR	WSAVE,F
     0033 15rr                      1-  392     	SWAPR	WSAVE,W
     0034                           1-  393     END_OF_INTERRUPT:
     0034 0011                      1-  394     	RETIE	
                                    1-  396     ;--------------------------------------------------------
                                    1-  397     ; code
                                    1-  398     ;--------------------------------------------------------
                                    1-  399     ;***
                                    1-  400     ;  pBlock Stats: dbName = M
                                    1-  401     ;***
                                    1-  402     ;has an exit
                                    1-  403     ;functions called:
                                    1-  404     ;   _initSys
                                    1-  405     ;   _initAD
                                    1-  406     ;   _showRGB
                                    1-  407     ;   _keyCon
                                    1-  408     ;   _workCtr
                                    1-  409     ;   _checkAD
                                    1-  410     ;   _initSys
                                    1-  411     ;   _initAD
                                    1-  412     ;   _showRGB
                                    1-  413     ;   _keyCon
                                    1-  414     ;   _workCtr
                                    1-  415     ;   _checkAD
                                    1-  416     ;2 compiler assigned registers:
                                    1-  417     ;   r0x102A
                                    1-  418     ;   r0x102B
                                    1-  419     ;; Starting pCode block
                                    1-  420     .segment "code"; module=main, function=_main
     0000                           1-  422     _main:
                                    1-  423     ; 2 exit points
                                    1-  424     	.line	71, "main.c"; 	initSys();
     0000 2rrr                      1-  425     	LCALL	_initSys
                                    1-  426     	.line	72, "main.c"; 	initAD();
     0001 2rrr                      1-  427     	LCALL	_initAD
     0002                           1-  428     _00120_DS_:
                                    1-  429     	.line	75, "main.c"; 	showRGB();
     0002 2rrr                      1-  430     	LCALL	_showRGB
                                    1-  431     	.line	76, "main.c"; 	if(0x80&~PORTA)
     0003 01rr                      1-  432     	MOVR	_PORTA,W
                                    1-  433     	BANKSEL	r0x102A
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 00rr                      1-  434     	MOVAR	r0x102A
                                    1-  435     	BANKSEL	r0x102B
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 02rr                      1-  436     	CLRR	r0x102B
                                    1-  437     	BANKSEL	r0x102A
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 07rr                      1-  438     	COMR	r0x102A,W
     000A 00rr                      1-  439     	MOVAR	r0x102A
                                    1-  440     	BANKSEL	r0x102B
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 07rr                      1-  441     	COMR	r0x102B,W
     000D 00rr                      1-  442     	MOVAR	r0x102B
                                    1-  443     	BANKSEL	r0x102A
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 0Brr                      1-  444     	BTRSS	r0x102A,7
     0010 3rrr                      1-  445     	LGOTO	_00116_DS_
                                    1-  446     	.line	77, "main.c"; 	key2Count++;
                                    1-  447     	BANKSEL	_key2Count
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 05rr                      1-  448     	INCR	_key2Count,F
     0013 0D03                      1-  449     	BTRSC	STATUS,2
     0014 05rr                      1-  450     	INCR	(_key2Count + 1),F
     0015                           1-  451     _00116_DS_:
                                    1-  452     	.line	78, "main.c"; 	CLRWDT();
     0015 0002                      1-  453     	clrwdt
                                    1-  454     	.line	79, "main.c"; 	if(!IntFlag)
                                    1-  455     	BANKSEL	_IntFlag
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1-  456     	MOVR	_IntFlag,W
     0018 0D03                      1-  457     	BTRSC	STATUS,2
     0019 3rrr                      1-  458     	LGOTO	_00120_DS_
                                    1-  459     	.line	81, "main.c"; 	IntFlag = 0;
     001A 02rr                      1-  460     	CLRR	_IntFlag
                                    1-  461     	.line	82, "main.c"; 	keyCon();
     001B 2rrr                      1-  462     	LCALL	_keyCon
                                    1-  463     	.line	83, "main.c"; 	workCtr();
     001C 2rrr                      1-  464     	LCALL	_workCtr
                                    1-  465     	.line	84, "main.c"; 	checkAD();
     001D 2rrr                      1-  466     	LCALL	_checkAD
     001E 3rrr                      1-  467     	LGOTO	_00120_DS_
                                    1-  468     	.line	86, "main.c"; 	}
                                    1-  469     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  470     ; exit point of _main
                                    1-  472     ;***
                                    1-  473     ;  pBlock Stats: dbName = C
                                    1-  474     ;***
                                    1-  475     ;has an exit
                                    1-  476     ;; Starting pCode block
                                    1-  477     .segment "code"; module=main, function=_keyCon
     0000                           1-  479     _keyCon:
                                    1-  480     ; 2 exit points
                                    1-  481     	.line	327, "main.c"; 	if(0x80&PORTA)
     0000 0Brr                      1-  482     	BTRSS	_PORTA,7
     0001 3rrr                      1-  483     	LGOTO	_00318_DS_
                                    1-  484     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  485     ;;unsigned compare: left >= lit (0x6=6), size=2
                                    1-  486     	.line	329, "main.c"; 	if(key2Count > 5)
     0002 2100                      1-  487     	MOVIA	0x00
                                    1-  488     	BANKSEL	_key2Count
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 04rr                      1-  489     	SUBAR	(_key2Count + 1),W
     0005 0903                      1-  490     	BTRSS	STATUS,2
     0006 3rrr                      1-  491     	LGOTO	_00334_DS_
     0007 2106                      1-  492     	MOVIA	0x06
     0008 04rr                      1-  493     	SUBAR	_key2Count,W
     0009                           1-  494     _00334_DS_:
     0009 0803                      1-  495     	BTRSS	STATUS,0
     000A 3rrr                      1-  496     	LGOTO	_00312_DS_
                                    1-  497     	.line	330, "main.c"; 	SKFlag = 1;
     000B 2101                      1-  498     	MOVIA	0x01
                                    1-  499     	BANKSEL	_SKFlag
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1-  500     	MOVAR	_SKFlag
     000E                           1-  501     _00312_DS_:
                                    1-  502     	.line	331, "main.c"; 	key2Count = 0;
                                    1-  503     	BANKSEL	_key2Count
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 02rr                      1-  504     	CLRR	_key2Count
     0010 02rr                      1-  505     	CLRR	(_key2Count + 1)
                                    1-  506     	.line	332, "main.c"; 	longFlag = 0;
                                    1-  507     	BANKSEL	_longFlag
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 02rr                      1-  508     	CLRR	_longFlag
     0013 3rrr                      1-  509     	LGOTO	_00320_DS_
                                    1-  510     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  511     ;;unsigned compare: left >= lit (0x7D1=2001), size=2
     0014                           1-  512     _00318_DS_:
                                    1-  513     	.line	336, "main.c"; 	if(key2Count > 2000)
     0014 2107                      1-  514     	MOVIA	0x07
                                    1-  515     	BANKSEL	_key2Count
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 04rr                      1-  516     	SUBAR	(_key2Count + 1),W
     0017 0903                      1-  517     	BTRSS	STATUS,2
     0018 3rrr                      1-  518     	LGOTO	_00335_DS_
     0019 21D1                      1-  519     	MOVIA	0xd1
     001A 04rr                      1-  520     	SUBAR	_key2Count,W
     001B                           1-  521     _00335_DS_:
     001B 0803                      1-  522     	BTRSS	STATUS,0
     001C 3rrr                      1-  523     	LGOTO	_00320_DS_
                                    1-  524     	.line	338, "main.c"; 	key2Count = 2000;
     001D 21D0                      1-  525     	MOVIA	0xd0
                                    1-  526     	BANKSEL	_key2Count
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 00rr                      1-  527     	MOVAR	_key2Count
     0020 2107                      1-  528     	MOVIA	0x07
     0021 00rr                      1-  529     	MOVAR	(_key2Count + 1)
                                    1-  530     	.line	339, "main.c"; 	if(!longFlag)
                                    1-  531     	BANKSEL	_longFlag
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  532     	MOVR	_longFlag,W
     0024 0903                      1-  533     	BTRSS	STATUS,2
     0025 3rrr                      1-  534     	LGOTO	_00320_DS_
                                    1-  535     	.line	341, "main.c"; 	SKFlag = 1;
     0026 2101                      1-  536     	MOVIA	0x01
                                    1-  537     	BANKSEL	_SKFlag
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 00rr                      1-  538     	MOVAR	_SKFlag
                                    1-  539     	.line	342, "main.c"; 	longFlag = 1;
                                    1-  540     	BANKSEL	_longFlag
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 00rr                      1-  541     	MOVAR	_longFlag
     002B                           1-  542     _00320_DS_:
                                    1-  543     	.line	347, "main.c"; 	}
                                    1-  544     	RETURN	
     002B 0010                      3-   26 m1      ret
                                    1-  545     ; exit point of _keyCon
                                    1-  547     ;***
                                    1-  548     ;  pBlock Stats: dbName = C
                                    1-  549     ;***
                                    1-  550     ;has an exit
                                    1-  551     ;2 compiler assigned registers:
                                    1-  552     ;   r0x101A
                                    1-  553     ;   r0x101B
                                    1-  554     ;; Starting pCode block
                                    1-  555     .segment "code"; module=main, function=_delay
                                    1-  557     ;local variable name mapping:
     0000                           1-  560     _delay:
                                    1-  561     ; 2 exit points
                                    1-  562     	.line	316, "main.c"; 	void delay(u8t time)
                                    1-  563     	BANKSEL	r0x101A
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  564     	MOVAR	r0x101A
                                    1-  565     	.line	318, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  566     	BANKSEL	r0x101B
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  567     	CLRR	r0x101B
     0004                           1-  568     _00304_DS_:
                                    1-  569     	BANKSEL	r0x101A
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 01rr                      1-  570     	MOVR	r0x101A,W
                                    1-  571     	BANKSEL	r0x101B
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 04rr                      1-  572     	SUBAR	r0x101B,W
     0008 0C03                      1-  573     	BTRSC	STATUS,0
     0009 3rrr                      1-  574     	LGOTO	_00306_DS_
                                    1-  575     	.line	319, "main.c"; 	NOP();
     000A 0000                      1-  576     	nop
                                    1-  577     	.line	318, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  578     	BANKSEL	r0x101B
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 05rr                      1-  579     	INCR	r0x101B,F
     000D 3rrr                      1-  580     	LGOTO	_00304_DS_
     000E                           1-  581     _00306_DS_:
                                    1-  582     	.line	320, "main.c"; 	}
                                    1-  583     	RETURN	
     000E 0010                      3-   26 m1      ret
                                    1-  584     ; exit point of _delay
                                    1-  586     ;***
                                    1-  587     ;  pBlock Stats: dbName = C
                                    1-  588     ;***
                                    1-  589     ;has an exit
                                    1-  590     ;; Starting pCode block
                                    1-  591     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  593     _F_wait_eoc:
                                    1-  594     ; 2 exit points
     0000                           1-  595     _00297_DS_:
                                    1-  596     	.line	312, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  597     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  598     	LGOTO	_00297_DS_
                                    1-  599     	.line	314, "main.c"; 	}
                                    1-  600     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  601     ; exit point of _F_wait_eoc
                                    1-  603     ;***
                                    1-  604     ;  pBlock Stats: dbName = C
                                    1-  605     ;***
                                    1-  606     ;has an exit
                                    1-  607     ;functions called:
                                    1-  608     ;   _delay
                                    1-  609     ;   _F_wait_eoc
                                    1-  610     ;   _delay
                                    1-  611     ;   _F_wait_eoc
                                    1-  612     ;6 compiler assigned registers:
                                    1-  613     ;   r0x101C
                                    1-  614     ;   r0x101D
                                    1-  615     ;   r0x101E
                                    1-  616     ;   r0x101F
                                    1-  617     ;   r0x1020
                                    1-  618     ;   r0x1021
                                    1-  619     ;; Starting pCode block
                                    1-  620     .segment "code"; module=main, function=_F_AIN8_Convert
                                    1-  622     ;local variable name mapping:
     0000                           1-  625     _F_AIN8_Convert:
                                    1-  626     ; 2 exit points
                                    1-  627     	.line	294, "main.c"; 	void F_AIN8_Convert(char count)
                                    1-  628     	BANKSEL	r0x101C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  629     	MOVAR	r0x101C
                                    1-  630     	.line	296, "main.c"; 	R_AIN8_DATA=R_AIN8_DATA_LB=0x00;   
                                    1-  631     	BANKSEL	_R_AIN8_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  632     	CLRR	_R_AIN8_DATA_LB
                                    1-  633     	BANKSEL	_R_AIN8_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  634     	CLRR	_R_AIN8_DATA
     0006 02rr                      1-  635     	CLRR	(_R_AIN8_DATA + 1)
                                    1-  636     	.line	298, "main.c"; 	ADMD  = 0x90 | C_ADC_PB3;				// Select AIN6(PB1) pad as ADC input
     0007 2198                      1-  637     	MOVIA	0x98
     0008 00rr                      1-  638     	MOVAR	_ADMD
                                    1-  639     	.line	299, "main.c"; 	delay(200);	
     0009 21C8                      1-  640     	MOVIA	0xc8
     000A 2rrr                      1-  641     	LCALL	_delay
                                    1-  642     	.line	300, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1-  643     	MOVIA	0x01
                                    1-  644     	BANKSEL	r0x101D
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1-  645     	MOVAR	r0x101D
     000E                           1-  646     _00290_DS_:
                                    1-  647     	BANKSEL	r0x101D
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 01rr                      1-  648     	MOVR	r0x101D,W
                                    1-  649     	BANKSEL	r0x101C
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 04rr                      1-  650     	SUBAR	r0x101C,W
     0012 0803                      1-  651     	BTRSS	STATUS,0
     0013 3rrr                      1-  652     	LGOTO	_00292_DS_
                                    1-  653     	.line	302, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1-  654     	BSR	_ADMDbits,6
                                    1-  655     	.line	303, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0015 2rrr                      1-  656     	LCALL	_F_wait_eoc
                                    1-  657     	.line	304, "main.c"; 	R_AIN8_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1-  658     	MOVIA	0x0f
     0017 10rr                      1-  659     	ANDAR	_ADR,W
                                    1-  660     ;;3	MOVAR	r0x101E
                                    1-  661     	BANKSEL	_R_AIN8_DATA_LB
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 03rr                      1-  662     	ADDAR	_R_AIN8_DATA_LB,F
                                    1-  663     	.line	305, "main.c"; 	R_AIN8_DATA    += ADD; 
     001A 01rr                      1-  664     	MOVR	_ADD,W
                                    1-  665     	BANKSEL	r0x101E
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1-  666     	MOVAR	r0x101E
                                    1-  667     ;;1	CLRR	r0x101F
                                    1-  668     ;;102	MOVR	r0x101E,W
                                    1-  669     ;;100	MOVAR	r0x1020
     001D 2100                      1-  670     	MOVIA	0x00
                                    1-  671     	BANKSEL	r0x1021
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 00rr                      1-  672     	MOVAR	r0x1021
                                    1-  673     ;;101	MOVR	r0x1020,W
                                    1-  674     	BANKSEL	r0x101E
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1-  675     	MOVR	r0x101E,W
                                    1-  676     	BANKSEL	_R_AIN8_DATA
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 03rr                      1-  677     	ADDAR	_R_AIN8_DATA,F
                                    1-  678     	BANKSEL	r0x1021
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1-  679     	MOVR	r0x1021,W
     0026 0C03                      1-  680     	BTRSC	STATUS,0
     0027 05rr                      1-  681     	INCR	r0x1021,W
     0028 0D03                      1-  682     	BTRSC	STATUS,2
     0029 3rrr                      1-  683     	LGOTO	_00001_DS_
                                    1-  684     	BANKSEL	_R_AIN8_DATA
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 03rr                      1-  685     	ADDAR	(_R_AIN8_DATA + 1),F
     002C                           1-  686     _00001_DS_:
                                    1-  687     	.line	300, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  688     	BANKSEL	r0x101D
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 05rr                      1-  689     	INCR	r0x101D,F
     002E 3rrr                      1-  690     	LGOTO	_00290_DS_
     002F                           1-  691     _00292_DS_:
                                    1-  692     	.line	307, "main.c"; 	}
                                    1-  693     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1-  694     ; exit point of _F_AIN8_Convert
                                    1-  696     ;***
                                    1-  697     ;  pBlock Stats: dbName = C
                                    1-  698     ;***
                                    1-  699     ;has an exit
                                    1-  700     ;functions called:
                                    1-  701     ;   _F_AIN8_Convert
                                    1-  702     ;   _F_AIN8_Convert
                                    1-  703     ;4 compiler assigned registers:
                                    1-  704     ;   r0x1022
                                    1-  705     ;   r0x1023
                                    1-  706     ;   r0x1024
                                    1-  707     ;   r0x1025
                                    1-  708     ;; Starting pCode block
                                    1-  709     .segment "code"; module=main, function=_checkAD
     0000                           1-  711     _checkAD:
                                    1-  712     ; 2 exit points
                                    1-  713     	.line	280, "main.c"; 	R_AIN8_DATA = R_AIN8_DATA_LB = 0x00;
                                    1-  714     	BANKSEL	_R_AIN8_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  715     	CLRR	_R_AIN8_DATA_LB
                                    1-  716     	BANKSEL	_R_AIN8_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  717     	CLRR	_R_AIN8_DATA
     0004 02rr                      1-  718     	CLRR	(_R_AIN8_DATA + 1)
                                    1-  719     	.line	281, "main.c"; 	F_AIN8_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  720     	MOVIA	0x08
     0006 2rrr                      1-  721     	LCALL	_F_AIN8_Convert
                                    1-  722     	.line	282, "main.c"; 	R_AIN8_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  723     	BANKSEL	_R_AIN8_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1-  724     	SWAPR	(_R_AIN8_DATA + 1),W
     0009 22F0                      1-  725     	ANDIA	0xf0
     000A 00rr                      1-  726     	MOVAR	(_R_AIN8_DATA + 1)
     000B 15rr                      1-  727     	SWAPR	_R_AIN8_DATA,W
     000C 00rr                      1-  728     	MOVAR	_R_AIN8_DATA
     000D 220F                      1-  729     	ANDIA	0x0f
     000E 11rr                      1-  730     	IORAR	(_R_AIN8_DATA + 1),F
     000F 12rr                      1-  731     	XORAR	_R_AIN8_DATA,F
                                    1-  732     	.line	283, "main.c"; 	R_AIN8_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  733     	MOVIA	0xf0
                                    1-  734     	BANKSEL	_R_AIN8_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1-  735     	ANDAR	_R_AIN8_DATA_LB,F
                                    1-  736     	.line	284, "main.c"; 	R_AIN8_DATA += R_AIN8_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  737     	MOVR	_R_AIN8_DATA_LB,W
                                    1-  738     	BANKSEL	r0x1024
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1-  739     	MOVAR	r0x1024
                                    1-  740     ;;1	MOVAR	r0x1022
                                    1-  741     ;;1	CLRR	r0x1023
                                    1-  742     ;;99	MOVR	r0x1022,W
     0016 2100                      1-  743     	MOVIA	0x00
                                    1-  744     	BANKSEL	r0x1025
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  745     	MOVAR	r0x1025
                                    1-  746     	BANKSEL	r0x1024
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  747     	MOVR	r0x1024,W
                                    1-  748     	BANKSEL	_R_AIN8_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1-  749     	ADDAR	_R_AIN8_DATA,F
                                    1-  750     	BANKSEL	r0x1025
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  751     	MOVR	r0x1025,W
     001F 0C03                      1-  752     	BTRSC	STATUS,0
     0020 05rr                      1-  753     	INCR	r0x1025,W
     0021 0D03                      1-  754     	BTRSC	STATUS,2
     0022 3rrr                      1-  755     	LGOTO	_00002_DS_
                                    1-  756     	BANKSEL	_R_AIN8_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1-  757     	ADDAR	(_R_AIN8_DATA + 1),F
                                    1-  758     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  759     _00002_DS_:
                                    1-  760     	.line	285, "main.c"; 	R_AIN8_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  761     	BCR	STATUS,0
                                    1-  762     	BANKSEL	_R_AIN8_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1-  763     	RRR	(_R_AIN8_DATA + 1),F
     0028 13rr                      1-  764     	RRR	_R_AIN8_DATA,F
                                    1-  765     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  766     	BCR	STATUS,0
     002A 13rr                      1-  767     	RRR	(_R_AIN8_DATA + 1),F
     002B 13rr                      1-  768     	RRR	_R_AIN8_DATA,F
                                    1-  769     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  770     	BCR	STATUS,0
     002D 13rr                      1-  771     	RRR	(_R_AIN8_DATA + 1),F
     002E 13rr                      1-  772     	RRR	_R_AIN8_DATA,F
                                    1-  773     	.line	286, "main.c"; 	if(debug)
                                    1-  774     	BANKSEL	_debug
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 01rr                      1-  775     	MOVR	_debug,W
     0031 0D03                      1-  776     	BTRSC	STATUS,2
     0032 3rrr                      1-  777     	LGOTO	_00283_DS_
                                    1-  778     	.line	287, "main.c"; 	R_AIN8_DATA = OUTA;
     0033 21A0                      1-  779     	MOVIA	0xa0
                                    1-  780     	BANKSEL	_R_AIN8_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 00rr                      1-  781     	MOVAR	_R_AIN8_DATA
     0036 210F                      1-  782     	MOVIA	0x0f
     0037 00rr                      1-  783     	MOVAR	(_R_AIN8_DATA + 1)
     0038                           1-  784     _00283_DS_:
                                    1-  785     	.line	291, "main.c"; 	}
                                    1-  786     	RETURN	
     0038 0010                      3-   26 m1      ret
                                    1-  787     ; exit point of _checkAD
                                    1-  789     ;***
                                    1-  790     ;  pBlock Stats: dbName = C
                                    1-  791     ;***
                                    1-  792     ;has an exit
                                    1-  793     ;functions called:
                                    1-  794     ;   _delay
                                    1-  795     ;   _delay
                                    1-  796     ;; Starting pCode block
                                    1-  797     .segment "code"; module=main, function=_initAD
     0000                           1-  799     _initAD:
                                    1-  800     ; 2 exit points
                                    1-  801     	.line	256, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PB3 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2188                      1-  802     	MOVIA	0x88
     0001 00rr                      1-  803     	MOVAR	_ADMD
                                    1-  804     	.line	260, "main.c"; 	ADVREFH = C_Vrefh_3V;					// ADC reference high voltage is supplied by internal 3V  (Note: ADC clock freq. must be equal or less than 500KHz)
     0002 2101                      1-  805     	MOVIA	0x01
     0003 00rr                      1-  806     	MOVAR	_ADVREFH
                                    1-  807     	.line	266, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  808     	MOVIA	0x10
     0005 00rr                      1-  809     	MOVAR	_ADR
                                    1-  810     	.line	268, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  811     	MOVIA	0x03
     0007 00rr                      1-  812     	MOVAR	_ADCR
                                    1-  813     	.line	271, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0008 1Arr                      1-  814     	BSR	_ADMDbits,4
                                    1-  815     	.line	272, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0009 2164                      1-  816     	MOVIA	0x64
     000A 2rrr                      1-  817     	LCALL	_delay
                                    1-  818     	.line	275, "main.c"; 	}
                                    1-  819     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1-  820     ; exit point of _initAD
                                    1-  822     ;***
                                    1-  823     ;  pBlock Stats: dbName = C
                                    1-  824     ;***
                                    1-  825     ;has an exit
                                    1-  826     ;; Starting pCode block
                                    1-  827     .segment "code"; module=main, function=_initSys
     0000                           1-  829     _initSys:
                                    1-  830     ; 2 exit points
                                    1-  831     	.line	224, "main.c"; 	DISI();
     0000 0013                      1-  832     	DISI
                                    1-  833     	.line	225, "main.c"; 	IOSTA = C_PA7_Input | C_PA5_Input ;
     0001 21A0                      1-  834     	MOVIA	0xa0
     0002 000r                      1-  835     	IOST	_IOSTA
                                    1-  836     	.line	226, "main.c"; 	IOSTB = C_PB3_Input;
     0003 2108                      1-  837     	MOVIA	0x08
     0004 000r                      1-  838     	IOST	_IOSTB
                                    1-  839     	.line	227, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  840     	CLRR	_PORTB
                                    1-  841     	.line	228, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  842     	CLRR	_PORTA
                                    1-  843     	.line	229, "main.c"; 	APHCON = 0x5F;
     0007 215F                      1-  844     	MOVIA	0x5f
     0008 000r                      1-  845     	IOST	_APHCON
                                    1-  846     	.line	230, "main.c"; 	BPHCON = 0xFF;
     0009 21FF                      1-  847     	MOVIA	0xff
     000A 00rr                      1-  848     	MOVAR	_BPHCON
                                    1-  849     	.line	231, "main.c"; 	ABPLCON = 0xFF;
     000B 00rr                      1-  850     	MOVAR	_ABPLCON
                                    1-  851     	.line	233, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1-  852     	MOVIA	0x01
     000D 00rr                      1-  853     	MOVAR	_INTE
                                    1-  854     	.line	235, "main.c"; 	PCON1 = C_TMR0_Dis;
     000E 0200                      1-  855     	CLRA	
     000F 000r                      1-  856     	IOST	_PCON1
                                    1-  857     	.line	237, "main.c"; 	TMR0 = 55;
     0010 2137                      1-  858     	MOVIA	0x37
     0011 00rr                      1-  859     	MOVAR	_TMR0
                                    1-  860     	.line	238, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0012 0200                      1-  861     	CLRA	
     0013 0003                      1-  862     	T0MD	
                                    1-  863     	.line	240, "main.c"; 	PCON1 = C_TMR0_En;
     0014 2101                      1-  864     	MOVIA	0x01
     0015 000r                      1-  865     	IOST	_PCON1
                                    1-  866     	.line	243, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0016 2198                      1-  867     	MOVIA	0x98
     0017 00rr                      1-  868     	MOVAR	_PCON
                                    1-  869     	.line	246, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0018 2101                      1-  870     	MOVIA	0x01
     0019 000r                      1-  871     	IOST	_PCON1
                                    1-  872     	.line	247, "main.c"; 	ENI();
     001A 0004                      1-  873     	ENI
                                    1-  874     	.line	248, "main.c"; 	}
                                    1-  875     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1-  876     ; exit point of _initSys
                                    1-  878     ;***
                                    1-  879     ;  pBlock Stats: dbName = C
                                    1-  880     ;***
                                    1-  881     ;has an exit
                                    1-  882     ;; Starting pCode block
                                    1-  883     .segment "code"; module=main, function=_showRGB
     0000                           1-  885     _showRGB:
                                    1-  886     ; 2 exit points
                                    1-  887     	.line	184, "main.c"; 	if(ledFlag == 0)
                                    1-  888     	BANKSEL	_ledFlag
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1-  889     	MOVR	_ledFlag,W
     0002 0903                      1-  890     	BTRSS	STATUS,2
     0003 3rrr                      1-  891     	LGOTO	_00236_DS_
                                    1-  892     	.line	186, "main.c"; 	PORTA &= 0xE0;
     0004 21E0                      1-  893     	MOVIA	0xe0
     0005 10rr                      1-  894     	ANDAR	_PORTA,F
                                    1-  895     	.line	187, "main.c"; 	return;
     0006 3rrr                      1-  896     	LGOTO	_00248_DS_
     0007                           1-  897     _00236_DS_:
                                    1-  898     	.line	190, "main.c"; 	if(red > ledCount)
                                    1-  899     	BANKSEL	_red
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 01rr                      1-  900     	MOVR	(_red + 1),W
                                    1-  901     	BANKSEL	_ledCount
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 04rr                      1-  902     	SUBAR	(_ledCount + 1),W
     000B 0903                      1-  903     	BTRSS	STATUS,2
     000C 3rrr                      1-  904     	LGOTO	_00265_DS_
                                    1-  905     	BANKSEL	_red
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 01rr                      1-  906     	MOVR	_red,W
                                    1-  907     	BANKSEL	_ledCount
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 04rr                      1-  908     	SUBAR	_ledCount,W
     0011                           1-  909     _00265_DS_:
     0011 0C03                      1-  910     	BTRSC	STATUS,0
     0012 3rrr                      1-  911     	LGOTO	_00238_DS_
                                    1-  912     	.line	192, "main.c"; 	PORTA |= 0x10;
     0013 1Arr                      1-  913     	BSR	_PORTA,4
     0014 3rrr                      1-  914     	LGOTO	_00239_DS_
     0015                           1-  915     _00238_DS_:
                                    1-  916     	.line	196, "main.c"; 	PORTA &= 0xEF;
     0015 1Err                      1-  917     	BCR	_PORTA,4
     0016                           1-  918     _00239_DS_:
                                    1-  919     	.line	199, "main.c"; 	if(green > ledCount)
                                    1-  920     	BANKSEL	_green
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1-  921     	MOVR	(_green + 1),W
                                    1-  922     	BANKSEL	_ledCount
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 04rr                      1-  923     	SUBAR	(_ledCount + 1),W
     001A 0903                      1-  924     	BTRSS	STATUS,2
     001B 3rrr                      1-  925     	LGOTO	_00266_DS_
                                    1-  926     	BANKSEL	_green
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 01rr                      1-  927     	MOVR	_green,W
                                    1-  928     	BANKSEL	_ledCount
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 04rr                      1-  929     	SUBAR	_ledCount,W
     0020                           1-  930     _00266_DS_:
     0020 0C03                      1-  931     	BTRSC	STATUS,0
     0021 3rrr                      1-  932     	LGOTO	_00241_DS_
                                    1-  933     	.line	201, "main.c"; 	PORTA |= 0x04;
     0022 19rr                      1-  934     	BSR	_PORTA,2
     0023 3rrr                      1-  935     	LGOTO	_00242_DS_
     0024                           1-  936     _00241_DS_:
                                    1-  937     	.line	205, "main.c"; 	PORTA &= 0xFB;
     0024 1Drr                      1-  938     	BCR	_PORTA,2
     0025                           1-  939     _00242_DS_:
                                    1-  940     	.line	208, "main.c"; 	if(blue > ledCount)
                                    1-  941     	BANKSEL	_blue
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1-  942     	MOVR	(_blue + 1),W
                                    1-  943     	BANKSEL	_ledCount
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 04rr                      1-  944     	SUBAR	(_ledCount + 1),W
     0029 0903                      1-  945     	BTRSS	STATUS,2
     002A 3rrr                      1-  946     	LGOTO	_00267_DS_
                                    1-  947     	BANKSEL	_blue
     002B rrrr                      3-   71 m1      .banksel ram_address
     002C 01rr                      1-  948     	MOVR	_blue,W
                                    1-  949     	BANKSEL	_ledCount
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 04rr                      1-  950     	SUBAR	_ledCount,W
     002F                           1-  951     _00267_DS_:
     002F 0C03                      1-  952     	BTRSC	STATUS,0
     0030 3rrr                      1-  953     	LGOTO	_00244_DS_
                                    1-  954     	.line	210, "main.c"; 	PORTA |= 0x01;
     0031 18rr                      1-  955     	BSR	_PORTA,0
     0032 3rrr                      1-  956     	LGOTO	_00245_DS_
     0033                           1-  957     _00244_DS_:
                                    1-  958     	.line	214, "main.c"; 	PORTA &= 0xFE;
     0033 1Crr                      1-  959     	BCR	_PORTA,0
     0034                           1-  960     _00245_DS_:
                                    1-  961     	.line	216, "main.c"; 	if(++ledCount > 430)
                                    1-  962     	BANKSEL	_ledCount
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 05rr                      1-  963     	INCR	_ledCount,F
     0036 0D03                      1-  964     	BTRSC	STATUS,2
     0037 05rr                      1-  965     	INCR	(_ledCount + 1),F
                                    1-  966     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  967     ;;unsigned compare: left >= lit (0x1AF=431), size=2
     0038 2101                      1-  968     	MOVIA	0x01
     0039 04rr                      1-  969     	SUBAR	(_ledCount + 1),W
     003A 0903                      1-  970     	BTRSS	STATUS,2
     003B 3rrr                      1-  971     	LGOTO	_00268_DS_
     003C 21AF                      1-  972     	MOVIA	0xaf
     003D 04rr                      1-  973     	SUBAR	_ledCount,W
     003E                           1-  974     _00268_DS_:
     003E 0803                      1-  975     	BTRSS	STATUS,0
     003F 3rrr                      1-  976     	LGOTO	_00248_DS_
                                    1-  977     	.line	217, "main.c"; 	ledCount = 0;
                                    1-  978     	BANKSEL	_ledCount
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 02rr                      1-  979     	CLRR	_ledCount
     0042 02rr                      1-  980     	CLRR	(_ledCount + 1)
     0043                           1-  981     _00248_DS_:
                                    1-  982     	.line	218, "main.c"; 	}
                                    1-  983     	RETURN	
     0043 0010                      3-   26 m1      ret
                                    1-  984     ; exit point of _showRGB
                                    1-  986     ;***
                                    1-  987     ;  pBlock Stats: dbName = C
                                    1-  988     ;***
                                    1-  989     ;has an exit
                                    1-  990     ;functions called:
                                    1-  991     ;   __divuint
                                    1-  992     ;   __divuint
                                    1-  993     ;7 compiler assigned registers:
                                    1-  994     ;   r0x1026
                                    1-  995     ;   r0x1027
                                    1-  996     ;   r0x1028
                                    1-  997     ;   r0x1029
                                    1-  998     ;   STK02
                                    1-  999     ;   STK01
                                    1- 1000     ;   STK00
                                    1- 1001     ;; Starting pCode block
                                    1- 1002     .segment "code"; module=main, function=_workCtr
     0000                           1- 1004     _workCtr:
                                    1- 1005     ; 2 exit points
                                    1- 1006     	.line	90, "main.c"; 	if(workStep > 0)
                                    1- 1007     	BANKSEL	_workStep
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1008     	MOVR	_workStep,W
     0002 0D03                      1- 1009     	BTRSC	STATUS,2
     0003 3rrr                      1- 1010     	LGOTO	_00146_DS_
                                    1- 1011     	.line	92, "main.c"; 	if(workStep == 1)
     0004 01rr                      1- 1012     	MOVR	_workStep,W
     0005 2401                      1- 1013     	XORIA	0x01
     0006 0903                      1- 1014     	BTRSS	STATUS,2
     0007 3rrr                      1- 1015     	LGOTO	_00143_DS_
                                    1- 1016     	.line	94, "main.c"; 	red = 350;
     0008 215E                      1- 1017     	MOVIA	0x5e
                                    1- 1018     	BANKSEL	_red
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1- 1019     	MOVAR	_red
     000B 2101                      1- 1020     	MOVIA	0x01
     000C 00rr                      1- 1021     	MOVAR	(_red + 1)
                                    1- 1022     	.line	95, "main.c"; 	green = 0;
                                    1- 1023     	BANKSEL	_green
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 02rr                      1- 1024     	CLRR	_green
     000F 02rr                      1- 1025     	CLRR	(_green + 1)
                                    1- 1026     	.line	96, "main.c"; 	blue = 0;
                                    1- 1027     	BANKSEL	_blue
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 02rr                      1- 1028     	CLRR	_blue
     0012 02rr                      1- 1029     	CLRR	(_blue + 1)
     0013 3rrr                      1- 1030     	LGOTO	_00146_DS_
     0014                           1- 1031     _00143_DS_:
                                    1- 1032     	.line	98, "main.c"; 	else if(workStep == 2)
                                    1- 1033     	BANKSEL	_workStep
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1- 1034     	MOVR	_workStep,W
     0016 2402                      1- 1035     	XORIA	0x02
     0017 0903                      1- 1036     	BTRSS	STATUS,2
     0018 3rrr                      1- 1037     	LGOTO	_00140_DS_
                                    1- 1038     	.line	100, "main.c"; 	red = 0;
                                    1- 1039     	BANKSEL	_red
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 02rr                      1- 1040     	CLRR	_red
     001B 02rr                      1- 1041     	CLRR	(_red + 1)
                                    1- 1042     	.line	101, "main.c"; 	green = 350;
     001C 215E                      1- 1043     	MOVIA	0x5e
                                    1- 1044     	BANKSEL	_green
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1045     	MOVAR	_green
     001F 2101                      1- 1046     	MOVIA	0x01
     0020 00rr                      1- 1047     	MOVAR	(_green + 1)
                                    1- 1048     	.line	102, "main.c"; 	blue = 0;
                                    1- 1049     	BANKSEL	_blue
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 02rr                      1- 1050     	CLRR	_blue
     0023 02rr                      1- 1051     	CLRR	(_blue + 1)
     0024 3rrr                      1- 1052     	LGOTO	_00146_DS_
     0025                           1- 1053     _00140_DS_:
                                    1- 1054     	.line	104, "main.c"; 	else if(workStep == 3)
                                    1- 1055     	BANKSEL	_workStep
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1- 1056     	MOVR	_workStep,W
     0027 2403                      1- 1057     	XORIA	0x03
     0028 0903                      1- 1058     	BTRSS	STATUS,2
     0029 3rrr                      1- 1059     	LGOTO	_00137_DS_
                                    1- 1060     	.line	106, "main.c"; 	red = 0;
                                    1- 1061     	BANKSEL	_red
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 02rr                      1- 1062     	CLRR	_red
     002C 02rr                      1- 1063     	CLRR	(_red + 1)
                                    1- 1064     	.line	107, "main.c"; 	green = 0;
                                    1- 1065     	BANKSEL	_green
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 02rr                      1- 1066     	CLRR	_green
     002F 02rr                      1- 1067     	CLRR	(_green + 1)
                                    1- 1068     	.line	108, "main.c"; 	blue = 431;
     0030 21AF                      1- 1069     	MOVIA	0xaf
                                    1- 1070     	BANKSEL	_blue
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 00rr                      1- 1071     	MOVAR	_blue
     0033 2101                      1- 1072     	MOVIA	0x01
     0034 00rr                      1- 1073     	MOVAR	(_blue + 1)
     0035 3rrr                      1- 1074     	LGOTO	_00146_DS_
     0036                           1- 1075     _00137_DS_:
                                    1- 1076     	.line	110, "main.c"; 	else if(workStep == 4)
                                    1- 1077     	BANKSEL	_workStep
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 01rr                      1- 1078     	MOVR	_workStep,W
     0038 2404                      1- 1079     	XORIA	0x04
     0039 0903                      1- 1080     	BTRSS	STATUS,2
     003A 3rrr                      1- 1081     	LGOTO	_00134_DS_
                                    1- 1082     	.line	112, "main.c"; 	red = 66;
     003B 2142                      1- 1083     	MOVIA	0x42
                                    1- 1084     	BANKSEL	_red
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 00rr                      1- 1085     	MOVAR	_red
     003E 02rr                      1- 1086     	CLRR	(_red + 1)
                                    1- 1087     	.line	113, "main.c"; 	green = 350;
     003F 215E                      1- 1088     	MOVIA	0x5e
                                    1- 1089     	BANKSEL	_green
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 00rr                      1- 1090     	MOVAR	_green
     0042 2101                      1- 1091     	MOVIA	0x01
     0043 00rr                      1- 1092     	MOVAR	(_green + 1)
                                    1- 1093     	.line	114, "main.c"; 	blue = 0;
                                    1- 1094     	BANKSEL	_blue
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 02rr                      1- 1095     	CLRR	_blue
     0046 02rr                      1- 1096     	CLRR	(_blue + 1)
     0047 3rrr                      1- 1097     	LGOTO	_00146_DS_
     0048                           1- 1098     _00134_DS_:
                                    1- 1099     	.line	116, "main.c"; 	else if(workStep == 5)
                                    1- 1100     	BANKSEL	_workStep
     0048 rrrr                      3-   71 m1      .banksel ram_address
     0049 01rr                      1- 1101     	MOVR	_workStep,W
     004A 2405                      1- 1102     	XORIA	0x05
     004B 0903                      1- 1103     	BTRSS	STATUS,2
     004C 3rrr                      1- 1104     	LGOTO	_00131_DS_
                                    1- 1105     	.line	118, "main.c"; 	red = 0;
                                    1- 1106     	BANKSEL	_red
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 02rr                      1- 1107     	CLRR	_red
     004F 02rr                      1- 1108     	CLRR	(_red + 1)
                                    1- 1109     	.line	119, "main.c"; 	green = 244;
     0050 21F4                      1- 1110     	MOVIA	0xf4
                                    1- 1111     	BANKSEL	_green
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 00rr                      1- 1112     	MOVAR	_green
     0053 02rr                      1- 1113     	CLRR	(_green + 1)
                                    1- 1114     	.line	120, "main.c"; 	blue = 431;
     0054 21AF                      1- 1115     	MOVIA	0xaf
                                    1- 1116     	BANKSEL	_blue
     0055 rrrr                      3-   71 m1      .banksel ram_address
     0056 00rr                      1- 1117     	MOVAR	_blue
     0057 2101                      1- 1118     	MOVIA	0x01
     0058 00rr                      1- 1119     	MOVAR	(_blue + 1)
     0059 3rrr                      1- 1120     	LGOTO	_00146_DS_
     005A                           1- 1121     _00131_DS_:
                                    1- 1122     	.line	122, "main.c"; 	else if(workStep == 6)
                                    1- 1123     	BANKSEL	_workStep
     005A rrrr                      3-   71 m1      .banksel ram_address
     005B 01rr                      1- 1124     	MOVR	_workStep,W
     005C 2406                      1- 1125     	XORIA	0x06
     005D 0903                      1- 1126     	BTRSS	STATUS,2
     005E 3rrr                      1- 1127     	LGOTO	_00128_DS_
                                    1- 1128     	.line	124, "main.c"; 	red = 86;
     005F 2156                      1- 1129     	MOVIA	0x56
                                    1- 1130     	BANKSEL	_red
     0060 rrrr                      3-   71 m1      .banksel ram_address
     0061 00rr                      1- 1131     	MOVAR	_red
     0062 02rr                      1- 1132     	CLRR	(_red + 1)
                                    1- 1133     	.line	125, "main.c"; 	green = 0;
                                    1- 1134     	BANKSEL	_green
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 02rr                      1- 1135     	CLRR	_green
     0065 02rr                      1- 1136     	CLRR	(_green + 1)
                                    1- 1137     	.line	126, "main.c"; 	blue = 431;
     0066 21AF                      1- 1138     	MOVIA	0xaf
                                    1- 1139     	BANKSEL	_blue
     0067 rrrr                      3-   71 m1      .banksel ram_address
     0068 00rr                      1- 1140     	MOVAR	_blue
     0069 2101                      1- 1141     	MOVIA	0x01
     006A 00rr                      1- 1142     	MOVAR	(_blue + 1)
     006B 3rrr                      1- 1143     	LGOTO	_00146_DS_
     006C                           1- 1144     _00128_DS_:
                                    1- 1145     	.line	128, "main.c"; 	else if(workStep == 7)
                                    1- 1146     	BANKSEL	_workStep
     006C rrrr                      3-   71 m1      .banksel ram_address
     006D 01rr                      1- 1147     	MOVR	_workStep,W
     006E 2407                      1- 1148     	XORIA	0x07
     006F 0903                      1- 1149     	BTRSS	STATUS,2
     0070 3rrr                      1- 1150     	LGOTO	_00146_DS_
                                    1- 1151     	.line	130, "main.c"; 	red = 46;
     0071 212E                      1- 1152     	MOVIA	0x2e
                                    1- 1153     	BANKSEL	_red
     0072 rrrr                      3-   71 m1      .banksel ram_address
     0073 00rr                      1- 1154     	MOVAR	_red
     0074 02rr                      1- 1155     	CLRR	(_red + 1)
                                    1- 1156     	.line	131, "main.c"; 	green = 290;
     0075 2122                      1- 1157     	MOVIA	0x22
                                    1- 1158     	BANKSEL	_green
     0076 rrrr                      3-   71 m1      .banksel ram_address
     0077 00rr                      1- 1159     	MOVAR	_green
     0078 2101                      1- 1160     	MOVIA	0x01
     0079 00rr                      1- 1161     	MOVAR	(_green + 1)
                                    1- 1162     	.line	132, "main.c"; 	blue = 431;
     007A 21AF                      1- 1163     	MOVIA	0xaf
                                    1- 1164     	BANKSEL	_blue
     007B rrrr                      3-   71 m1      .banksel ram_address
     007C 00rr                      1- 1165     	MOVAR	_blue
     007D 2101                      1- 1166     	MOVIA	0x01
     007E 00rr                      1- 1167     	MOVAR	(_blue + 1)
     007F                           1- 1168     _00146_DS_:
                                    1- 1169     	.line	136, "main.c"; 	if(workCount > 0 || timeCount > 0)
                                    1- 1170     	BANKSEL	_workCount
     007F rrrr                      3-   71 m1      .banksel ram_address
     0080 01rr                      1- 1171     	MOVR	_workCount,W
     0081 0903                      1- 1172     	BTRSS	STATUS,2
     0082 3rrr                      1- 1173     	LGOTO	_00158_DS_
                                    1- 1174     	BANKSEL	_timeCount
     0083 rrrr                      3-   71 m1      .banksel ram_address
     0084 01rr                      1- 1175     	MOVR	_timeCount,W
     0085 0D03                      1- 1176     	BTRSC	STATUS,2
     0086 3rrr                      1- 1177     	LGOTO	_00159_DS_
     0087                           1- 1178     _00158_DS_:
                                    1- 1179     	.line	138, "main.c"; 	--timeCount;
                                    1- 1180     	BANKSEL	_timeCount
     0087 rrrr                      3-   71 m1      .banksel ram_address
     0088 06rr                      1- 1181     	DECR	_timeCount,F
                                    1- 1182     	.line	139, "main.c"; 	SKFlag = 0;
                                    1- 1183     	BANKSEL	_SKFlag
     0089 rrrr                      3-   71 m1      .banksel ram_address
     008A 02rr                      1- 1184     	CLRR	_SKFlag
                                    1- 1185     	.line	140, "main.c"; 	if(timeCount - delayCount > 0)
                                    1- 1186     	BANKSEL	_timeCount
     008B rrrr                      3-   71 m1      .banksel ram_address
     008C 01rr                      1- 1187     	MOVR	_timeCount,W
                                    1- 1188     	BANKSEL	r0x1026
     008D rrrr                      3-   71 m1      .banksel ram_address
     008E 00rr                      1- 1189     	MOVAR	r0x1026
                                    1- 1190     	BANKSEL	r0x1027
     008F rrrr                      3-   71 m1      .banksel ram_address
     0090 02rr                      1- 1191     	CLRR	r0x1027
                                    1- 1192     	BANKSEL	_delayCount
     0091 rrrr                      3-   71 m1      .banksel ram_address
     0092 01rr                      1- 1193     	MOVR	_delayCount,W
                                    1- 1194     	BANKSEL	r0x1028
     0093 rrrr                      3-   71 m1      .banksel ram_address
     0094 00rr                      1- 1195     	MOVAR	r0x1028
                                    1- 1196     	BANKSEL	r0x1029
     0095 rrrr                      3-   71 m1      .banksel ram_address
     0096 02rr                      1- 1197     	CLRR	r0x1029
                                    1- 1198     	BANKSEL	r0x1028
     0097 rrrr                      3-   71 m1      .banksel ram_address
     0098 01rr                      1- 1199     	MOVR	r0x1028,W
                                    1- 1200     	BANKSEL	r0x1026
     0099 rrrr                      3-   71 m1      .banksel ram_address
     009A 04rr                      1- 1201     	SUBAR	r0x1026,F
     009B 2100                      1- 1202     	MOVIA	0x00
     009C 0C03                      1- 1203     	BTRSC	STATUS,0
     009D 3rrr                      1- 1204     	LGOTO	_00003_DS_
                                    1- 1205     	BANKSEL	r0x1029
     009E rrrr                      3-   71 m1      .banksel ram_address
     009F 05rr                      1- 1206     	INCR	r0x1029,W
     00A0 0D03                      1- 1207     	BTRSC	STATUS,2
     00A1 3rrr                      1- 1208     	LGOTO	_00004_DS_
     00A2                           1- 1209     _00003_DS_:
                                    1- 1210     	BANKSEL	r0x1027
     00A2 rrrr                      3-   71 m1      .banksel ram_address
     00A3 04rr                      1- 1211     	SUBAR	r0x1027,F
                                    1- 1212     ;;swapping arguments (AOP_TYPEs 1/2)
                                    1- 1213     ;;signed compare: left >= lit (0x1=1), size=2, mask=ffff
     00A4                           1- 1214     _00004_DS_:
                                    1- 1215     	BANKSEL	r0x1027
     00A4 rrrr                      3-   71 m1      .banksel ram_address
     00A5 01rr                      1- 1216     	MOVR	r0x1027,W
     00A6 2580                      1- 1217     	ADDIA	0x80
     00A7 2580                      1- 1218     	ADDIA	0x80
     00A8 0903                      1- 1219     	BTRSS	STATUS,2
     00A9 3rrr                      1- 1220     	LGOTO	_00230_DS_
     00AA 2101                      1- 1221     	MOVIA	0x01
                                    1- 1222     	BANKSEL	r0x1026
     00AB rrrr                      3-   71 m1      .banksel ram_address
     00AC 04rr                      1- 1223     	SUBAR	r0x1026,W
     00AD                           1- 1224     _00230_DS_:
     00AD 0803                      1- 1225     	BTRSS	STATUS,0
     00AE 3rrr                      1- 1226     	LGOTO	_00148_DS_
                                    1- 1227     	.line	142, "main.c"; 	ledFlag = 1;
     00AF 2101                      1- 1228     	MOVIA	0x01
                                    1- 1229     	BANKSEL	_ledFlag
     00B0 rrrr                      3-   71 m1      .banksel ram_address
     00B1 00rr                      1- 1230     	MOVAR	_ledFlag
     00B2 3rrr                      1- 1231     	LGOTO	_00149_DS_
     00B3                           1- 1232     _00148_DS_:
                                    1- 1233     	.line	146, "main.c"; 	ledFlag = 0;
                                    1- 1234     	BANKSEL	_ledFlag
     00B3 rrrr                      3-   71 m1      .banksel ram_address
     00B4 02rr                      1- 1235     	CLRR	_ledFlag
     00B5                           1- 1236     _00149_DS_:
                                    1- 1237     	.line	148, "main.c"; 	if(timeCount == 0)
                                    1- 1238     	BANKSEL	_timeCount
     00B5 rrrr                      3-   71 m1      .banksel ram_address
     00B6 01rr                      1- 1239     	MOVR	_timeCount,W
     00B7 0903                      1- 1240     	BTRSS	STATUS,2
     00B8 3rrr                      1- 1241     	LGOTO	_00159_DS_
                                    1- 1242     	.line	150, "main.c"; 	if(workCount > 0)
                                    1- 1243     	BANKSEL	_workCount
     00B9 rrrr                      3-   71 m1      .banksel ram_address
     00BA 01rr                      1- 1244     	MOVR	_workCount,W
     00BB 0D03                      1- 1245     	BTRSC	STATUS,2
     00BC 3rrr                      1- 1246     	LGOTO	_00159_DS_
                                    1- 1247     	.line	152, "main.c"; 	--workCount;
     00BD 06rr                      1- 1248     	DECR	_workCount,F
                                    1- 1249     	.line	153, "main.c"; 	timeCount = 8+delayCount;
     00BE 2108                      1- 1250     	MOVIA	0x08
                                    1- 1251     	BANKSEL	_delayCount
     00BF rrrr                      3-   71 m1      .banksel ram_address
     00C0 03rr                      1- 1252     	ADDAR	_delayCount,W
                                    1- 1253     	BANKSEL	_timeCount
     00C1 rrrr                      3-   71 m1      .banksel ram_address
     00C2 00rr                      1- 1254     	MOVAR	_timeCount
                                    1- 1255     	.line	154, "main.c"; 	if(workCount == 0)
                                    1- 1256     	BANKSEL	_workCount
     00C3 rrrr                      3-   71 m1      .banksel ram_address
     00C4 01rr                      1- 1257     	MOVR	_workCount,W
     00C5 0903                      1- 1258     	BTRSS	STATUS,2
     00C6 3rrr                      1- 1259     	LGOTO	_00159_DS_
                                    1- 1260     	.line	156, "main.c"; 	if(++workStep > 7)
                                    1- 1261     	BANKSEL	_workStep
     00C7 rrrr                      3-   71 m1      .banksel ram_address
     00C8 05rr                      1- 1262     	INCR	_workStep,F
                                    1- 1263     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1264     ;;unsigned compare: left >= lit (0x8=8), size=1
     00C9 2108                      1- 1265     	MOVIA	0x08
     00CA 04rr                      1- 1266     	SUBAR	_workStep,W
     00CB 0803                      1- 1267     	BTRSS	STATUS,0
     00CC 3rrr                      1- 1268     	LGOTO	_00159_DS_
                                    1- 1269     	.line	157, "main.c"; 	workStep = 1;
     00CD 2101                      1- 1270     	MOVIA	0x01
     00CE 00rr                      1- 1271     	MOVAR	_workStep
     00CF                           1- 1272     _00159_DS_:
                                    1- 1273     	.line	163, "main.c"; 	if(timeCount == 0 && workCount == 0)
                                    1- 1274     	BANKSEL	_timeCount
     00CF rrrr                      3-   71 m1      .banksel ram_address
     00D0 01rr                      1- 1275     	MOVR	_timeCount,W
     00D1 0903                      1- 1276     	BTRSS	STATUS,2
     00D2 3rrr                      1- 1277     	LGOTO	_00171_DS_
                                    1- 1278     	BANKSEL	_workCount
     00D3 rrrr                      3-   71 m1      .banksel ram_address
     00D4 01rr                      1- 1279     	MOVR	_workCount,W
     00D5 0903                      1- 1280     	BTRSS	STATUS,2
     00D6 3rrr                      1- 1281     	LGOTO	_00171_DS_
                                    1- 1282     	.line	165, "main.c"; 	if(0x20 & PORTA || SKFlag == 1)
     00D7 0Err                      1- 1283     	BTRSC	_PORTA,5
     00D8 3rrr                      1- 1284     	LGOTO	_00165_DS_
                                    1- 1285     	BANKSEL	_SKFlag
     00D9 rrrr                      3-   71 m1      .banksel ram_address
     00DA 01rr                      1- 1286     	MOVR	_SKFlag,W
     00DB 2401                      1- 1287     	XORIA	0x01
     00DC 0903                      1- 1288     	BTRSS	STATUS,2
     00DD 3rrr                      1- 1289     	LGOTO	_00171_DS_
     00DE                           1- 1290     _00165_DS_:
                                    1- 1291     	.line	167, "main.c"; 	timeCount = 8+delayCount;
     00DE 2108                      1- 1292     	MOVIA	0x08
                                    1- 1293     	BANKSEL	_delayCount
     00DF rrrr                      3-   71 m1      .banksel ram_address
     00E0 03rr                      1- 1294     	ADDAR	_delayCount,W
                                    1- 1295     	BANKSEL	_timeCount
     00E1 rrrr                      3-   71 m1      .banksel ram_address
     00E2 00rr                      1- 1296     	MOVAR	_timeCount
                                    1- 1297     	.line	168, "main.c"; 	workCount = 2;
     00E3 2102                      1- 1298     	MOVIA	0x02
                                    1- 1299     	BANKSEL	_workCount
     00E4 rrrr                      3-   71 m1      .banksel ram_address
     00E5 00rr                      1- 1300     	MOVAR	_workCount
                                    1- 1301     	.line	169, "main.c"; 	SKFlag = 0;
                                    1- 1302     	BANKSEL	_SKFlag
     00E6 rrrr                      3-   71 m1      .banksel ram_address
     00E7 02rr                      1- 1303     	CLRR	_SKFlag
                                    1- 1304     	.line	170, "main.c"; 	delayCount = R_AIN8_DATA /56;
     00E8 2138                      1- 1305     	MOVIA	0x38
     00E9 00rr                      1- 1306     	MOVAR	STK02
     00EA 2100                      1- 1307     	MOVIA	0x00
     00EB 00rr                      1- 1308     	MOVAR	STK01
                                    1- 1309     	BANKSEL	_R_AIN8_DATA
     00EC rrrr                      3-   71 m1      .banksel ram_address
     00ED 01rr                      1- 1310     	MOVR	_R_AIN8_DATA,W
     00EE 00rr                      1- 1311     	MOVAR	STK00
     00EF 01rr                      1- 1312     	MOVR	(_R_AIN8_DATA + 1),W
     00F0 2rrr                      1- 1313     	LCALL	__divuint
                                    1- 1314     	BANKSEL	r0x1027
     00F1 rrrr                      3-   71 m1      .banksel ram_address
     00F2 00rr                      1- 1315     	MOVAR	r0x1027
     00F3 01rr                      1- 1316     	MOVR	STK00,W
                                    1- 1317     	BANKSEL	r0x1026
     00F4 rrrr                      3-   71 m1      .banksel ram_address
     00F5 00rr                      1- 1318     	MOVAR	r0x1026
                                    1- 1319     	BANKSEL	_delayCount
     00F6 rrrr                      3-   71 m1      .banksel ram_address
     00F7 00rr                      1- 1320     	MOVAR	_delayCount
                                    1- 1321     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1322     ;;unsigned compare: left >= lit (0x47=71), size=1
                                    1- 1323     	.line	171, "main.c"; 	if(delayCount > 70)
     00F8 2147                      1- 1324     	MOVIA	0x47
     00F9 04rr                      1- 1325     	SUBAR	_delayCount,W
     00FA 0803                      1- 1326     	BTRSS	STATUS,0
     00FB 3rrr                      1- 1327     	LGOTO	_00162_DS_
                                    1- 1328     	.line	172, "main.c"; 	delayCount = 70;
     00FC 2146                      1- 1329     	MOVIA	0x46
     00FD 00rr                      1- 1330     	MOVAR	_delayCount
                                    1- 1331     ;;unsigned compare: left < lit (0x2=2), size=1
     00FE                           1- 1332     _00162_DS_:
                                    1- 1333     	.line	173, "main.c"; 	if(delayCount < 2)
     00FE 2102                      1- 1334     	MOVIA	0x02
                                    1- 1335     	BANKSEL	_delayCount
     00FF rrrr                      3-   71 m1      .banksel ram_address
     0100 04rr                      1- 1336     	SUBAR	_delayCount,W
     0101 0C03                      1- 1337     	BTRSC	STATUS,0
     0102 3rrr                      1- 1338     	LGOTO	_00171_DS_
                                    1- 1339     	.line	174, "main.c"; 	delayCount = 2;
     0103 2102                      1- 1340     	MOVIA	0x02
     0104 00rr                      1- 1341     	MOVAR	_delayCount
     0105                           1- 1342     _00171_DS_:
                                    1- 1343     	.line	177, "main.c"; 	}
                                    1- 1344     	RETURN	
     0105 0010                      3-   26 m1      ret
                                    1- 1345     ; exit point of _workCtr
                                    1- 1348     ;	code size estimation:
                                    1- 1349     ;	  482+  136 =   618 instructions ( 1508 byte)
                                    1- 1351     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__divuint               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000002C
_00002_DS_              Label    00000025
_00003_DS_              Label    000000A2
_00004_DS_              Label    000000A4
_00108_DS_              Label    0000001F
_00110_DS_              Label    00000023
_00116_DS_              Label    00000015
_00120_DS_              Label    00000002
_00128_DS_              Label    0000006C
_00131_DS_              Label    0000005A
_00134_DS_              Label    00000048
_00137_DS_              Label    00000036
_00140_DS_              Label    00000025
_00143_DS_              Label    00000014
_00146_DS_              Label    0000007F
_00148_DS_              Label    000000B3
_00149_DS_              Label    000000B5
_00158_DS_              Label    00000087
_00159_DS_              Label    000000CF
_00162_DS_              Label    000000FE
_00165_DS_              Label    000000DE
_00171_DS_              Label    00000105
_00230_DS_              Label    000000AD
_00236_DS_              Label    00000007
_00238_DS_              Label    00000015
_00239_DS_              Label    00000016
_00241_DS_              Label    00000024
_00242_DS_              Label    00000025
_00244_DS_              Label    00000033
_00245_DS_              Label    00000034
_00248_DS_              Label    00000043
_00265_DS_              Label    00000011
_00266_DS_              Label    00000020
_00267_DS_              Label    0000002F
_00268_DS_              Label    0000003E
_00283_DS_              Label    00000038
_00290_DS_              Label    0000000E
_00292_DS_              Label    0000002F
_00297_DS_              Label    00000000
_00304_DS_              Label    00000004
_00306_DS_              Label    0000000E
_00312_DS_              Label    0000000E
_00318_DS_              Label    00000014
_00320_DS_              Label    0000002B
_00334_DS_              Label    00000009
_00335_DS_              Label    0000001B
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_blue                   Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkAD                Label    00000000
_CMPCR                  Label    00000000
_debug                  Label    00000000
_delay                  Label    00000000
_delayCount             Label    00000000
_F_AIN8_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_FSR                    Label    00000000
_green                  Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_key2Count              Label    00000000
_keyCon                 Label    00000000
_ledCount               Label    00000000
_ledFlag                Label    00000000
_longFlag               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN8_DATA            Label    00000000
_R_AIN8_DATA_LB         Label    00000000
_red                    Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_showRGB                Label    00000000
_SKFlag                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_timeCount              Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCount              Label    00000000
_workCtr                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000034
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x101A                 Label    00000000
r0x101B                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x1021                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1027                 Label    00000000
r0x1028                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102B                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
