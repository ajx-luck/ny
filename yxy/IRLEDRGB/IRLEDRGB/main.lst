
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_irwork
                                    1-   15     	extern	_irpros
                                    1-   16     	extern	_setPWMduty
                                    1-   17     	extern	_keyCallBack
                                    1-   18     	extern	_PORTBbits
                                    1-   19     	extern	_PCONbits
                                    1-   20     	extern	_BWUCONbits
                                    1-   21     	extern	_BPLCONbits
                                    1-   22     	extern	_BPHCONbits
                                    1-   23     	extern	_INTEbits
                                    1-   24     	extern	_INTFbits
                                    1-   25     	extern	_INDF
                                    1-   26     	extern	_TMR0
                                    1-   27     	extern	_PCL
                                    1-   28     	extern	_STATUS
                                    1-   29     	extern	_FSR
                                    1-   30     	extern	_PORTB
                                    1-   31     	extern	_PCON
                                    1-   32     	extern	_BWUCON
                                    1-   33     	extern	_PCHBUF
                                    1-   34     	extern	_BPLCON
                                    1-   35     	extern	_BPHCON
                                    1-   36     	extern	_INTE
                                    1-   37     	extern	_INTF
                                    1-   38     	extern	_TMR1
                                    1-   39     	extern	_T1CR1
                                    1-   40     	extern	_T1CR2
                                    1-   41     	extern	_PWM1DUTY
                                    1-   42     	extern	_PS1CV
                                    1-   43     	extern	_BZ1CR
                                    1-   44     	extern	_IRCR
                                    1-   45     	extern	_TBHP
                                    1-   46     	extern	_TBHD
                                    1-   47     	extern	_OSCCR
                                    1-   48     	extern	_IOSTB
                                    1-   49     	extern	_PS0CV
                                    1-   50     	extern	_BODCON
                                    1-   51     	extern	_PCON1
                                    1-   52     	extern	_T0MD
                                    1-   53     	extern	___sdcc_saved_fsr
                                    1-   54     	extern	___sdcc_saved_stk00
                                    1-   55     	extern	___sdcc_saved_stk01
                                    1-   56     	extern	__nyc_ny8_startup
                                    1-   57     ;--------------------------------------------------------
                                    1-   58     ; global declarations
                                    1-   59     ;--------------------------------------------------------
                                    1-   60     	extern	_gotoSleep
                                    1-   61     	extern	_setHight
                                    1-   62     	extern	_setLow
                                    1-   63     	extern	_proData
                                    1-   64     	extern	_GetOneByte
                                    1-   65     	extern	_proLow
                                    1-   66     	extern	_proHight
                                    1-   67     	extern	_cleanData
                                    1-   68     	extern	_isr
                                    1-   69     	extern	_main
                                    1-   70     	extern	_IntFlag
                                    1-   71     	extern	_count
                                    1-   72     	extern	_bitIndex
                                    1-   73     	extern	_data1
                                    1-   74     	extern	_data2
                                    1-   75     	extern	_data3
                                    1-   76     	extern	_data4
                                    1-   77     	extern	_irCode
                                    1-   78     	extern	_irCode2
                                    1-   79     	extern	_value
                                    1-   80     	extern	_sleepFlag
                                    1-   81     	extern	_sleepCount
                                    1-   82     	extern	_ledFlag
                                    1-   83     	extern	_ledCount
                                    1-   84     	extern	_lowTime
                                    1-   85     	extern	_Status
                                    1-   86     	extern	_proTime
                                    1-   87     	extern	_T1Counter
                                    1-   88     	extern	_accTimeH
                                    1-   90     	extern PSAVE
                                    1-   91     	extern SSAVE
                                    1-   92     	extern WSAVE
                                    1-   93     	extern STK12
                                    1-   94     	extern STK11
                                    1-   95     	extern STK10
                                    1-   96     	extern STK09
                                    1-   97     	extern STK08
                                    1-   98     	extern STK07
                                    1-   99     	extern STK06
                                    1-  100     	extern STK05
                                    1-  101     	extern STK04
                                    1-  102     	extern STK03
                                    1-  103     	extern STK02
                                    1-  104     	extern STK01
                                    1-  105     	extern STK00
                                    1-  107     .segment "uninit", 0x20000010
 20000010                           1-  108     PSAVE:
                                    1-  109     	.res 1
 20000011                           1-  110     SSAVE:
                                    1-  111     	.res 1
 20000012                           1-  112     WSAVE:
                                    1-  113     	.res 1
 20000013                           1-  114     STK12:
                                    1-  115     	.res 1
 20000014                           1-  116     STK11:
                                    1-  117     	.res 1
 20000015                           1-  118     STK10:
                                    1-  119     	.res 1
 20000016                           1-  120     STK09:
                                    1-  121     	.res 1
 20000017                           1-  122     STK08:
                                    1-  123     	.res 1
 20000018                           1-  124     STK07:
                                    1-  125     	.res 1
 20000019                           1-  126     STK06:
                                    1-  127     	.res 1
 2000001A                           1-  128     STK05:
                                    1-  129     	.res 1
 2000001B                           1-  130     STK04:
                                    1-  131     	.res 1
 2000001C                           1-  132     STK03:
                                    1-  133     	.res 1
 2000001D                           1-  134     STK02:
                                    1-  135     	.res 1
 2000001E                           1-  136     STK01:
                                    1-  137     	.res 1
 2000001F                           1-  138     STK00:
                                    1-  139     	.res 1
                                    1-  141     ;--------------------------------------------------------
                                    1-  142     ; global definitions
                                    1-  143     ;--------------------------------------------------------
                                    1-  144     .segment "uninit"
     0000                           1-  145     _IntFlag:
                                    1-  146     	.res	1
                                    1-  149     .segment "uninit"
     0000                           1-  150     _count:
                                    1-  151     	.res	1
                                    1-  154     .segment "uninit"
     0000                           1-  155     _bitIndex:
                                    1-  156     	.res	1
                                    1-  159     .segment "uninit"
     0000                           1-  160     _data1:
                                    1-  161     	.res	1
                                    1-  164     .segment "uninit"
     0000                           1-  165     _data2:
                                    1-  166     	.res	1
                                    1-  169     .segment "uninit"
     0000                           1-  170     _data3:
                                    1-  171     	.res	1
                                    1-  174     .segment "uninit"
     0000                           1-  175     _data4:
                                    1-  176     	.res	1
                                    1-  179     .segment "uninit"
     0000                           1-  180     _irCode:
                                    1-  181     	.res	1
                                    1-  184     .segment "uninit"
     0000                           1-  185     _irCode2:
                                    1-  186     	.res	1
                                    1-  189     .segment "uninit"
     0000                           1-  190     _value:
                                    1-  191     	.res	1
                                    1-  194     .segment "uninit"
     0000                           1-  195     _T1Counter:
                                    1-  196     	.res	2
                                    1-  199     ;--------------------------------------------------------
                                    1-  200     ; absolute symbol definitions
                                    1-  201     ;--------------------------------------------------------
                                    1-  202     ;--------------------------------------------------------
                                    1-  203     ; compiler-defined variables
                                    1-  204     ;--------------------------------------------------------
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x1014:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x1015:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x1016:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x1013:
                                    1-  216     	.res	1
                                    1-  217     ;--------------------------------------------------------
                                    1-  218     ; initialized data
                                    1-  219     ;--------------------------------------------------------
                                    1-  221     .segment "idata"
     0000                           1-  222     _sleepFlag:
     0000 0000                      1-  223     	dw	0x00
                                    1-  227     .segment "idata"
     0000                           1-  228     _sleepCount:
     0000 0000 0000                 1-  229     	dw	0x00, 0x00
                                    1-  233     .segment "idata"
     0000                           1-  234     _ledFlag:
     0000 0000                      1-  235     	dw	0x00
                                    1-  239     .segment "idata"
     0000                           1-  240     _ledCount:
     0000 0000                      1-  241     	dw	0x00
                                    1-  245     .segment "idata"
     0000                           1-  246     _lowTime:
     0000 0000                      1-  247     	dw	0x00
                                    1-  251     .segment "idata"
     0000                           1-  252     _Status:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _proTime:
     0000 0000                      1-  259     	dw	0x00
                                    1-  263     .segment "idata"
     0000                           1-  264     _accTimeH:
     0000 0000                      1-  265     	dw	0x00
                                    1-  268     ;--------------------------------------------------------
                                    1-  269     ; overlayable items in internal ram 
                                    1-  270     ;--------------------------------------------------------
                                    1-  271     ;	udata_ovr
                                    1-  272     ;--------------------------------------------------------
                                    1-  273     ; reset vector 
                                    1-  274     ;--------------------------------------------------------
                                    1-  275     ORG	0x0000
     0000 3rrr                      1-  276     	LGOTO	__nyc_ny8_startup
                                    1-  277     ;--------------------------------------------------------
                                    1-  278     ; interrupt and initialization code
                                    1-  279     ;--------------------------------------------------------
                                    1-  280     ORG 0x0008
     0008 3rrr                      1-  281     	lgoto	__sdcc_interrupt
                                    1-  283     .segment "code"
     0000                           1-  284     __sdcc_interrupt:
                                    1-  285     ;***
                                    1-  286     ;  pBlock Stats: dbName = I
                                    1-  287     ;***
                                    1-  288     ;2 compiler assigned registers:
                                    1-  289     ;   STK00
                                    1-  290     ;   STK01
                                    1-  291     ;; Starting pCode block
     0000                           1-  292     _isr:
                                    1-  293     ; 0 exit points
                                    1-  294     	.line	66, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  295     	MOVAR	WSAVE
     0001 1503                      1-  296     	SWAPR	STATUS,W
     0002 0283                      1-  297     	CLRR	STATUS
     0003 00rr                      1-  298     	MOVAR	SSAVE
     0004 010A                      1-  299     	MOVR	PCHBUF,W
     0005 028A                      1-  300     	CLRR	PCHBUF
     0006 00rr                      1-  301     	MOVAR	PSAVE
     0007 0104                      1-  302     	MOVR	FSR,W
     0008 00rr                      1-  303     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  304     	MOVR	STK00,W
     000A 00rr                      1-  305     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  306     	MOVR	STK01,W
     000C 00rr                      1-  307     	MOVAR	___sdcc_saved_stk01
                                    1-  308     	.line	68, "main.c"; 	if(INTFbits.T1IF)
     000D 09rr                      1-  309     	BTRSS	_INTFbits,3
     000E 3rrr                      1-  310     	LGOTO	_00106_DS_
                                    1-  311     	.line	70, "main.c"; 	accTimeH++;		//0.256ms执行一次
     000F 05rr                      1-  312     	INCR	_accTimeH,F
                                    1-  313     	.line	72, "main.c"; 	INTF= (unsigned char)~(C_INT_TMR1);	// Clear T1IF flag bit	
     0010 21F7                      1-  314     	MOVIA	0xf7
     0011 00rr                      1-  315     	MOVAR	_INTF
     0012                           1-  316     _00106_DS_:
                                    1-  317     	.line	75, "main.c"; 	if(INTFbits.T0IF)
     0012 08rr                      1-  318     	BTRSS	_INTFbits,0
     0013 3rrr                      1-  319     	LGOTO	_00110_DS_
                                    1-  320     	.line	77, "main.c"; 	TMR0 += 56;
     0014 2138                      1-  321     	MOVIA	0x38
     0015 03rr                      1-  322     	ADDAR	_TMR0,F
                                    1-  323     	.line	78, "main.c"; 	if(++count == 100)
     0016 05rr                      1-  324     	INCR	_count,F
     0017 01rr                      1-  325     	MOVR	_count,W
     0018 2464                      1-  326     	XORIA	0x64
     0019 0903                      1-  327     	BTRSS	STATUS,2
     001A 3rrr                      1-  328     	LGOTO	_00110_DS_
                                    1-  329     	.line	80, "main.c"; 	count = 0;
     001B 02rr                      1-  330     	CLRR	_count
                                    1-  331     	.line	81, "main.c"; 	IntFlag = 1;
     001C 2101                      1-  332     	MOVIA	0x01
     001D 00rr                      1-  333     	MOVAR	_IntFlag
     001E                           1-  334     _00110_DS_:
                                    1-  335     	.line	85, "main.c"; 	if(INTFbits.PBIF)
     001E 08rr                      1-  336     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  337     	LGOTO	_00112_DS_
                                    1-  338     	.line	87, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);
     0020 21FD                      1-  339     	MOVIA	0xfd
     0021 00rr                      1-  340     	MOVAR	_INTF
     0022                           1-  341     _00112_DS_:
                                    1-  342     	.line	90, "main.c"; 	INTF = 0;
     0022 02rr                      1-  343     	CLRR	_INTF
                                    1-  344     	.line	93, "main.c"; 	}
     0023 01rr                      1-  345     	MOVR	___sdcc_saved_stk01,W
     0024 00rr                      1-  346     	MOVAR	STK01
     0025 01rr                      1-  347     	MOVR	___sdcc_saved_stk00,W
     0026 00rr                      1-  348     	MOVAR	STK00
     0027 01rr                      1-  349     	MOVR	___sdcc_saved_fsr,W
     0028 0084                      1-  350     	MOVAR	FSR
     0029 01rr                      1-  351     	MOVR	PSAVE,W
     002A 008A                      1-  352     	MOVAR	PCHBUF
     002B 0283                      1-  353     	CLRR	STATUS
     002C 15rr                      1-  354     	SWAPR	SSAVE,W
     002D 0083                      1-  355     	MOVAR	STATUS
     002E 15rr                      1-  356     	SWAPR	WSAVE,F
     002F 15rr                      1-  357     	SWAPR	WSAVE,W
     0030                           1-  358     END_OF_INTERRUPT:
     0030 0011                      1-  359     	RETIE	
                                    1-  361     ;--------------------------------------------------------
                                    1-  362     ; code
                                    1-  363     ;--------------------------------------------------------
                                    1-  364     ;***
                                    1-  365     ;  pBlock Stats: dbName = M
                                    1-  366     ;***
                                    1-  367     ;has an exit
                                    1-  368     ;functions called:
                                    1-  369     ;   _proData
                                    1-  370     ;   _proLow
                                    1-  371     ;   _proHight
                                    1-  372     ;   _gotoSleep
                                    1-  373     ;   _setHight
                                    1-  374     ;   _proData
                                    1-  375     ;   _proLow
                                    1-  376     ;   _proHight
                                    1-  377     ;   _gotoSleep
                                    1-  378     ;   _setHight
                                    1-  379     ;; Starting pCode block
                                    1-  380     .segment "code"; module=main, function=_main
     0000                           1-  382     _main:
                                    1-  383     ; 2 exit points
                                    1-  384     	.line	324, "main.c"; 	IOSTB =   C_PB0_Input | C_PB4_Input;     // Set PB0 & PB1 to input mode,others set to output mode
     0000 2111                      1-  385     	MOVIA	0x11
     0001 000r                      1-  386     	IOST	_IOSTB
                                    1-  387     	.line	325, "main.c"; 	BPHCON = 0xEF;
     0002 21EF                      1-  388     	MOVIA	0xef
     0003 00rr                      1-  389     	MOVAR	_BPHCON
                                    1-  390     	.line	326, "main.c"; 	PORTB = 0x11;                           // PB0、PB1 & PB2 are output High
     0004 2111                      1-  391     	MOVIA	0x11
     0005 00rr                      1-  392     	MOVAR	_PORTB
                                    1-  393     	.line	327, "main.c"; 	DISI();
     0006 0013                      1-  394     	DISI
                                    1-  395     	.line	329, "main.c"; 	PCON1 = C_TMR0_Dis;						// Disable Timer0
     0007 0200                      1-  396     	CLRA	
     0008 000r                      1-  397     	IOST	_PCON1
                                    1-  398     	.line	333, "main.c"; 	TMR1 = 0xFF;
     0009 21FF                      1-  399     	MOVIA	0xff
     000A 002r                      1-  400     	SFUN	_TMR1
                                    1-  401     	.line	334, "main.c"; 	T1CR2 = C_PS1_Div64 | C_PS1_EN | C_TMR1_ClkSrc_Inst;
     000B 2105                      1-  402     	MOVIA	0x05
     000C 002r                      1-  403     	SFUN	_T1CR2
                                    1-  404     	.line	335, "main.c"; 	T1CR1 = C_TMR1_En | C_TMR1_Reload;
     000D 2103                      1-  405     	MOVIA	0x03
     000E 002r                      1-  406     	SFUN	_T1CR1
                                    1-  407     	.line	338, "main.c"; 	INT1Level = 1;
     000F 1Arr                      1-  408     	BSR	_Status,5
                                    1-  409     	.line	341, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;	// Enable Timer0、Timer1、WDT overflow interrupt
     0010 210B                      1-  410     	MOVIA	0x0b
     0011 00rr                      1-  411     	MOVAR	_INTE
                                    1-  412     	.line	343, "main.c"; 	TMR0 = 55;
     0012 2137                      1-  413     	MOVIA	0x37
     0013 00rr                      1-  414     	MOVAR	_TMR0
                                    1-  415     	.line	344, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0014 0200                      1-  416     	CLRA	
     0015 0003                      1-  417     	T0MD	
                                    1-  418     	.line	347, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0016 2188                      1-  419     	MOVIA	0x88
     0017 00rr                      1-  420     	MOVAR	_PCON
                                    1-  421     	.line	350, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0018 2101                      1-  422     	MOVIA	0x01
     0019 000r                      1-  423     	IOST	_PCON1
                                    1-  424     	.line	351, "main.c"; 	ENI();									// Enable all unmasked interrupts			
     001A 0004                      1-  425     	ENI
     001B                           1-  426     _00279_DS_:
                                    1-  427     	.line	355, "main.c"; 	if(ReadOver)
     001B 0Arr                      1-  428     	BTRSS	_Status,4
     001C 3rrr                      1-  429     	LGOTO	_00262_DS_
                                    1-  430     	.line	357, "main.c"; 	proData();
     001D 2rrr                      1-  431     	LCALL	_proData
     001E                           1-  432     _00262_DS_:
                                    1-  433     	.line	359, "main.c"; 	if(INT1Level && (PORTB & 0x01))
     001E 0Arr                      1-  434     	BTRSS	_Status,5
     001F 3rrr                      1-  435     	LGOTO	_00267_DS_
     0020 08rr                      1-  436     	BTRSS	_PORTB,0
     0021 3rrr                      1-  437     	LGOTO	_00267_DS_
                                    1-  438     	.line	361, "main.c"; 	INT1Level = 0;
     0022 1Err                      1-  439     	BCR	_Status,5
                                    1-  440     	.line	362, "main.c"; 	proLow();
     0023 2rrr                      1-  441     	LCALL	_proLow
     0024 3rrr                      1-  442     	LGOTO	_00268_DS_
     0025                           1-  443     _00267_DS_:
                                    1-  444     	.line	364, "main.c"; 	else if(INT1Level == 0 && (PORTB & 0x01) == 0)
     0025 0Err                      1-  445     	BTRSC	_Status,5
     0026 3rrr                      1-  446     	LGOTO	_00268_DS_
     0027 0Crr                      1-  447     	BTRSC	_PORTB,0
     0028 3rrr                      1-  448     	LGOTO	_00268_DS_
                                    1-  449     	.line	367, "main.c"; 	INT1Level = 1;
     0029 1Arr                      1-  450     	BSR	_Status,5
                                    1-  451     	.line	368, "main.c"; 	proHight();
     002A 2rrr                      1-  452     	LCALL	_proHight
     002B                           1-  453     _00268_DS_:
                                    1-  454     	.line	371, "main.c"; 	CLRWDT();
     002B 0002                      1-  455     	clrwdt
                                    1-  456     	.line	372, "main.c"; 	if(!IntFlag)
     002C 01rr                      1-  457     	MOVR	_IntFlag,W
     002D 0D03                      1-  458     	BTRSC	STATUS,2
     002E 3rrr                      1-  459     	LGOTO	_00279_DS_
                                    1-  460     	.line	374, "main.c"; 	IntFlag = 0;		//10ms执行一次
     002F 02rr                      1-  461     	CLRR	_IntFlag
                                    1-  462     	.line	376, "main.c"; 	if(sleepFlag && ++sleepCount >= 30)
     0030 01rr                      1-  463     	MOVR	_sleepFlag,W
     0031 0D03                      1-  464     	BTRSC	STATUS,2
     0032 3rrr                      1-  465     	LGOTO	_00273_DS_
     0033 05rr                      1-  466     	INCR	_sleepCount,F
     0034 0D03                      1-  467     	BTRSC	STATUS,2
     0035 05rr                      1-  468     	INCR	(_sleepCount + 1),F
                                    1-  469     ;;unsigned compare: left < lit (0x1E=30), size=2
     0036 2100                      1-  470     	MOVIA	0x00
     0037 04rr                      1-  471     	SUBAR	(_sleepCount + 1),W
     0038 0903                      1-  472     	BTRSS	STATUS,2
     0039 3rrr                      1-  473     	LGOTO	_00313_DS_
     003A 211E                      1-  474     	MOVIA	0x1e
     003B 04rr                      1-  475     	SUBAR	_sleepCount,W
     003C                           1-  476     _00313_DS_:
     003C 0803                      1-  477     	BTRSS	STATUS,0
     003D 3rrr                      1-  478     	LGOTO	_00273_DS_
                                    1-  479     	.line	378, "main.c"; 	gotoSleep();
     003E 2rrr                      1-  480     	LCALL	_gotoSleep
     003F                           1-  481     _00273_DS_:
                                    1-  482     	.line	380, "main.c"; 	if(lowTime > 0)
     003F 01rr                      1-  483     	MOVR	_lowTime,W
     0040 0D03                      1-  484     	BTRSC	STATUS,2
     0041 3rrr                      1-  485     	LGOTO	_00276_DS_
                                    1-  486     	.line	382, "main.c"; 	--lowTime;
     0042 06rr                      1-  487     	DECR	_lowTime,F
     0043 3rrr                      1-  488     	LGOTO	_00279_DS_
     0044                           1-  489     _00276_DS_:
                                    1-  490     	.line	386, "main.c"; 	setHight();
     0044 2rrr                      1-  491     	LCALL	_setHight
     0045 3rrr                      1-  492     	LGOTO	_00279_DS_
                                    1-  493     	.line	390, "main.c"; 	}
                                    1-  494     	RETURN	
     0046 0010                      3-   26 m1      ret
                                    1-  495     ; exit point of _main
                                    1-  497     ;***
                                    1-  498     ;  pBlock Stats: dbName = C
                                    1-  499     ;***
                                    1-  500     ;has an exit
                                    1-  501     ;functions called:
                                    1-  502     ;   _setHight
                                    1-  503     ;   _setHight
                                    1-  504     ;; Starting pCode block
                                    1-  505     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  507     _gotoSleep:
                                    1-  508     ; 2 exit points
                                    1-  509     	.line	303, "main.c"; 	setHight();
     0000 2rrr                      1-  510     	LCALL	_setHight
                                    1-  511     	.line	304, "main.c"; 	sleepCount = 0;
     0001 02rr                      1-  512     	CLRR	_sleepCount
     0002 02rr                      1-  513     	CLRR	(_sleepCount + 1)
                                    1-  514     	.line	305, "main.c"; 	BWUCON = 0x01;
     0003 2101                      1-  515     	MOVIA	0x01
     0004 00rr                      1-  516     	MOVAR	_BWUCON
                                    1-  517     	.line	306, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;
     0005 210B                      1-  518     	MOVIA	0x0b
     0006 00rr                      1-  519     	MOVAR	_INTE
                                    1-  520     	.line	307, "main.c"; 	PCON =  C_LVR_En;	
     0007 2108                      1-  521     	MOVIA	0x08
     0008 00rr                      1-  522     	MOVAR	_PCON
                                    1-  523     	.line	308, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0009 02rr                      1-  524     	CLRR	_INTF
                                    1-  525     	.line	309, "main.c"; 	CLRWDT();
     000A 0002                      1-  526     	clrwdt
                                    1-  527     	.line	310, "main.c"; 	SLEEP();
     000B 0001                      1-  528     	sleep
                                    1-  529     	.line	311, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 210B                      1-  530     	MOVIA	0x0b
     000D 00rr                      1-  531     	MOVAR	_INTE
                                    1-  532     	.line	312, "main.c"; 	INTF = 0;
     000E 02rr                      1-  533     	CLRR	_INTF
                                    1-  534     	.line	314, "main.c"; 	PCON = C_WDT_En;				// Enable WDT ,  Enable LVR
     000F 2180                      1-  535     	MOVIA	0x80
     0010 00rr                      1-  536     	MOVAR	_PCON
                                    1-  537     	.line	315, "main.c"; 	sleepFlag = 0;
     0011 02rr                      1-  538     	CLRR	_sleepFlag
                                    1-  539     	.line	316, "main.c"; 	bitIndex = 0;
     0012 02rr                      1-  540     	CLRR	_bitIndex
                                    1-  541     	.line	317, "main.c"; 	value = 0;
     0013 02rr                      1-  542     	CLRR	_value
                                    1-  543     	.line	318, "main.c"; 	}
                                    1-  544     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  545     ; exit point of _gotoSleep
                                    1-  547     ;***
                                    1-  548     ;  pBlock Stats: dbName = C
                                    1-  549     ;***
                                    1-  550     ;has an exit
                                    1-  551     ;; Starting pCode block
                                    1-  552     .segment "code"; module=main, function=_setHight
     0000                           1-  554     _setHight:
                                    1-  555     ; 2 exit points
                                    1-  556     	.line	294, "main.c"; 	IOSTB =   C_PB0_Input | C_PB3_Input | C_PB4_Input;
     0000 2119                      1-  557     	MOVIA	0x19
     0001 000r                      1-  558     	IOST	_IOSTB
                                    1-  559     	.line	295, "main.c"; 	BPHCON = 0xEF;
     0002 21EF                      1-  560     	MOVIA	0xef
     0003 00rr                      1-  561     	MOVAR	_BPHCON
                                    1-  562     	.line	296, "main.c"; 	PORTB |= 0x10;
     0004 1Arr                      1-  563     	BSR	_PORTB,4
                                    1-  564     	.line	297, "main.c"; 	sleepFlag = 1;
     0005 2101                      1-  565     	MOVIA	0x01
     0006 00rr                      1-  566     	MOVAR	_sleepFlag
                                    1-  567     	.line	298, "main.c"; 	}
                                    1-  568     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  569     ; exit point of _setHight
                                    1-  571     ;***
                                    1-  572     ;  pBlock Stats: dbName = C
                                    1-  573     ;***
                                    1-  574     ;has an exit
                                    1-  575     ;; Starting pCode block
                                    1-  576     .segment "code"; module=main, function=_setLow
     0000                           1-  578     _setLow:
                                    1-  579     ; 2 exit points
                                    1-  580     	.line	284, "main.c"; 	lowTime = 10;
     0000 210A                      1-  581     	MOVIA	0x0a
     0001 00rr                      1-  582     	MOVAR	_lowTime
                                    1-  583     	.line	285, "main.c"; 	sleepFlag = 0;
     0002 02rr                      1-  584     	CLRR	_sleepFlag
                                    1-  585     	.line	286, "main.c"; 	IOSTB =   C_PB0_Input | C_PB3_Input;
     0003 2109                      1-  586     	MOVIA	0x09
     0004 000r                      1-  587     	IOST	_IOSTB
                                    1-  588     	.line	287, "main.c"; 	BPHCON = 0x00;
     0005 02rr                      1-  589     	CLRR	_BPHCON
                                    1-  590     	.line	288, "main.c"; 	PORTB &= 0xEF;
     0006 1Err                      1-  591     	BCR	_PORTB,4
                                    1-  592     	.line	290, "main.c"; 	}
                                    1-  593     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  594     ; exit point of _setLow
                                    1-  596     ;***
                                    1-  597     ;  pBlock Stats: dbName = C
                                    1-  598     ;***
                                    1-  599     ;has an exit
                                    1-  600     ;functions called:
                                    1-  601     ;   _setLow
                                    1-  602     ;   _setLow
                                    1-  603     ;; Starting pCode block
                                    1-  604     .segment "code"; module=main, function=_proData
     0000                           1-  606     _proData:
                                    1-  607     ; 2 exit points
                                    1-  608     	.line	265, "main.c"; 	irCode = (uint8)(~data4);
     0000 07rr                      1-  609     	COMR	_data4,W
     0001 00rr                      1-  610     	MOVAR	_irCode
                                    1-  611     	.line	266, "main.c"; 	if(irCode == data3)
     0002 12rr                      1-  612     	XORAR	_data3,W
     0003 0903                      1-  613     	BTRSS	STATUS,2
     0004 3rrr                      1-  614     	LGOTO	_00244_DS_
                                    1-  615     	.line	268, "main.c"; 	switch(irCode)
     0005 01rr                      1-  616     	MOVR	_irCode,W
     0006 2415                      1-  617     	XORIA	0x15
     0007 0D03                      1-  618     	BTRSC	STATUS,2
                                    1-  619     	.line	271, "main.c"; 	setLow();
     0008 2rrr                      1-  620     	LCALL	_setLow
     0009                           1-  621     _00244_DS_:
                                    1-  622     	.line	275, "main.c"; 	ReadOver = 0;
     0009 1Err                      1-  623     	BCR	_Status,4
                                    1-  624     	.line	276, "main.c"; 	}
                                    1-  625     	RETURN	
     000A 0010                      3-   26 m1      ret
                                    1-  626     ; exit point of _proData
                                    1-  628     ;***
                                    1-  629     ;  pBlock Stats: dbName = C
                                    1-  630     ;***
                                    1-  631     ;has an exit
                                    1-  632     ;1 compiler assigned register :
                                    1-  633     ;   r0x1013
                                    1-  634     ;; Starting pCode block
                                    1-  635     .segment "code"; module=main, function=_GetOneByte
                                    1-  637     ;local variable name mapping:
     0000                           1-  639     _GetOneByte:
                                    1-  640     ; 2 exit points
                                    1-  641     	.line	219, "main.c"; 	void GetOneByte(uint8 bitNub)
     0000 00rr                      1-  642     	MOVAR	r0x1013
                                    1-  643     	.line	221, "main.c"; 	if(RemoteStart)
     0001 09rr                      1-  644     	BTRSS	_Status,3
     0002 3rrr                      1-  645     	LGOTO	_00236_DS_
                                    1-  646     	.line	223, "main.c"; 	if(bitIndex == 0)
     0003 01rr                      1-  647     	MOVR	_bitIndex,W
     0004 0903                      1-  648     	BTRSS	STATUS,2
     0005 3rrr                      1-  649     	LGOTO	_00220_DS_
                                    1-  650     	.line	225, "main.c"; 	bitIndex = 0;
     0006 02rr                      1-  651     	CLRR	_bitIndex
                                    1-  652     	.line	226, "main.c"; 	value = 0;
     0007 02rr                      1-  653     	CLRR	_value
                                    1-  654     	.line	227, "main.c"; 	data1 = data2 = data3 = data4 = 0;
     0008 02rr                      1-  655     	CLRR	_data4
     0009 02rr                      1-  656     	CLRR	_data3
     000A 02rr                      1-  657     	CLRR	_data2
     000B 02rr                      1-  658     	CLRR	_data1
     000C                           1-  659     _00220_DS_:
                                    1-  660     	.line	229, "main.c"; 	++bitIndex;
     000C 05rr                      1-  661     	INCR	_bitIndex,F
                                    1-  662     	.line	230, "main.c"; 	if(bitNub)
     000D 01rr                      1-  663     	MOVR	r0x1013,W
     000E 0903                      1-  664     	BTRSS	STATUS,2
                                    1-  665     	.line	232, "main.c"; 	value |= 0x80;
     000F 1Brr                      1-  666     	BSR	_value,7
                                    1-  667     	.line	235, "main.c"; 	if(bitIndex == 8)
     0010 01rr                      1-  668     	MOVR	_bitIndex,W
     0011 2408                      1-  669     	XORIA	0x08
     0012 0903                      1-  670     	BTRSS	STATUS,2
     0013 3rrr                      1-  671     	LGOTO	_00232_DS_
                                    1-  672     	.line	237, "main.c"; 	data1 = value;
     0014 01rr                      1-  673     	MOVR	_value,W
     0015 00rr                      1-  674     	MOVAR	_data1
     0016 3rrr                      1-  675     	LGOTO	_00233_DS_
     0017                           1-  676     _00232_DS_:
                                    1-  677     	.line	239, "main.c"; 	else if(bitIndex == 16)
     0017 01rr                      1-  678     	MOVR	_bitIndex,W
     0018 2410                      1-  679     	XORIA	0x10
     0019 0903                      1-  680     	BTRSS	STATUS,2
     001A 3rrr                      1-  681     	LGOTO	_00229_DS_
                                    1-  682     	.line	241, "main.c"; 	data2 = value;
     001B 01rr                      1-  683     	MOVR	_value,W
     001C 00rr                      1-  684     	MOVAR	_data2
     001D 3rrr                      1-  685     	LGOTO	_00233_DS_
     001E                           1-  686     _00229_DS_:
                                    1-  687     	.line	244, "main.c"; 	else if(bitIndex == 24)
     001E 01rr                      1-  688     	MOVR	_bitIndex,W
     001F 2418                      1-  689     	XORIA	0x18
     0020 0903                      1-  690     	BTRSS	STATUS,2
     0021 3rrr                      1-  691     	LGOTO	_00226_DS_
                                    1-  692     	.line	246, "main.c"; 	data3 = value;
     0022 01rr                      1-  693     	MOVR	_value,W
     0023 00rr                      1-  694     	MOVAR	_data3
     0024 3rrr                      1-  695     	LGOTO	_00233_DS_
     0025                           1-  696     _00226_DS_:
                                    1-  697     	.line	249, "main.c"; 	else if(bitIndex == 32)
     0025 01rr                      1-  698     	MOVR	_bitIndex,W
     0026 2420                      1-  699     	XORIA	0x20
     0027 0903                      1-  700     	BTRSS	STATUS,2
     0028 3rrr                      1-  701     	LGOTO	_00233_DS_
                                    1-  702     	.line	251, "main.c"; 	data4 = value;
     0029 01rr                      1-  703     	MOVR	_value,W
     002A 00rr                      1-  704     	MOVAR	_data4
                                    1-  705     	.line	252, "main.c"; 	ReadOver = 1;
     002B 1Arr                      1-  706     	BSR	_Status,4
                                    1-  707     	.line	253, "main.c"; 	OneCode = 0;
     002C 1Crr                      1-  708     	BCR	_Status,1
                                    1-  709     	.line	254, "main.c"; 	ZeroCode = 0;
     002D 1Crr                      1-  710     	BCR	_Status,0
                                    1-  711     	.line	255, "main.c"; 	RemoteStart = 0;
     002E 1Drr                      1-  712     	BCR	_Status,3
                                    1-  713     	.line	256, "main.c"; 	bitIndex = 0;
     002F 02rr                      1-  714     	CLRR	_bitIndex
                                    1-  715     ;;shiftRight_Left2ResultLit:5586: shCount=1, size=1, sign=0, same=1, offr=0
     0030                           1-  716     _00233_DS_:
                                    1-  717     	.line	259, "main.c"; 	value = value >> 1;
     0030 1C03                      1-  718     	BCR	STATUS,0
     0031 13rr                      1-  719     	RRR	_value,F
     0032                           1-  720     _00236_DS_:
                                    1-  721     	.line	261, "main.c"; 	}
                                    1-  722     	RETURN	
     0032 0010                      3-   26 m1      ret
                                    1-  723     ; exit point of _GetOneByte
                                    1-  725     ;***
                                    1-  726     ;  pBlock Stats: dbName = C
                                    1-  727     ;***
                                    1-  728     ;has an exit
                                    1-  729     ;functions called:
                                    1-  730     ;   _cleanData
                                    1-  731     ;   _cleanData
                                    1-  732     ;4 compiler assigned registers:
                                    1-  733     ;   r0x1013
                                    1-  734     ;   r0x1014
                                    1-  735     ;   r0x1015
                                    1-  736     ;   r0x1016
                                    1-  737     ;; Starting pCode block
                                    1-  738     .segment "code"; module=main, function=_proLow
     0000                           1-  740     _proLow:
                                    1-  741     ; 2 exit points
                                    1-  742     	.line	175, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  743     	CLRA	
     0001 002r                      1-  744     	SFUN	_T1CR1
                                    1-  745     	.line	176, "main.c"; 	T1Counter = accTimeH;
     0002 01rr                      1-  746     	MOVR	_accTimeH,W
     0003 00rr                      1-  747     	MOVAR	_T1Counter
     0004 02rr                      1-  748     	CLRR	(_T1Counter + 1)
                                    1-  749     	.line	177, "main.c"; 	T1Counter <<= 8;
     0005 01rr                      1-  750     	MOVR	_T1Counter,W
     0006 00rr                      1-  751     	MOVAR	(_T1Counter + 1)
     0007 02rr                      1-  752     	CLRR	_T1Counter
                                    1-  753     	.line	178, "main.c"; 	T1Counter += (0xFF - TMR1);
     0008 003r                      1-  754     	SFUNR	_TMR1
                                    1-  755     ;;3	MOVAR	r0x1013
     0009 00rr                      1-  756     	MOVAR	r0x1014
     000A 02rr                      1-  757     	CLRR	r0x1015
     000B 01rr                      1-  758     	MOVR	r0x1014,W
     000C 27FF                      1-  759     	SUBIA	0xff
     000D 00rr                      1-  760     	MOVAR	r0x1013
     000E 2100                      1-  761     	MOVIA	0x00
     000F 0803                      1-  762     	BTRSS	STATUS,0
     0010 05rr                      1-  763     	INCR	r0x1015,W
     0011 2700                      1-  764     	SUBIA	0x00
     0012 00rr                      1-  765     	MOVAR	r0x1015
                                    1-  766     ;;1	MOVAR	r0x1016
     0013 01rr                      1-  767     	MOVR	r0x1013,W
     0014 00rr                      1-  768     	MOVAR	r0x1014
     0015 03rr                      1-  769     	ADDAR	_T1Counter,F
     0016 01rr                      1-  770     	MOVR	r0x1015,W
     0017 0C03                      1-  771     	BTRSC	STATUS,0
     0018 16rr                      1-  772     	INCRSZ	r0x1015,W
     0019 03rr                      1-  773     	ADDAR	(_T1Counter + 1),F
                                    1-  774     	.line	179, "main.c"; 	accTimeH = 0;
     001A 02rr                      1-  775     	CLRR	_accTimeH
                                    1-  776     	.line	180, "main.c"; 	TMR1 = 0xFF;
     001B 21FF                      1-  777     	MOVIA	0xff
     001C 002r                      1-  778     	SFUN	_TMR1
                                    1-  779     	.line	181, "main.c"; 	T1CR1 = C_TMR1_En | C_TMR1_Reload; 
     001D 2103                      1-  780     	MOVIA	0x03
     001E 002r                      1-  781     	SFUN	_T1CR1
                                    1-  782     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  783     ;;unsigned compare: left >= lit (0x1F7=503), size=2
                                    1-  784     	.line	182, "main.c"; 	if((T1Counter > (HeadCont_L - (FaultTolerant*FaultTolerantX)))&&(T1Counter < (HeadCont_L + (FaultTolerant*FaultTolerantX))))
     001F 2101                      1-  785     	MOVIA	0x01
     0020 04rr                      1-  786     	SUBAR	(_T1Counter + 1),W
     0021 0903                      1-  787     	BTRSS	STATUS,2
     0022 3rrr                      1-  788     	LGOTO	_00211_DS_
     0023 21F7                      1-  789     	MOVIA	0xf7
     0024 04rr                      1-  790     	SUBAR	_T1Counter,W
     0025                           1-  791     _00211_DS_:
     0025 0803                      1-  792     	BTRSS	STATUS,0
     0026 3rrr                      1-  793     	LGOTO	_00191_DS_
                                    1-  794     ;;unsigned compare: left < lit (0x26E=622), size=2
     0027 2102                      1-  795     	MOVIA	0x02
     0028 04rr                      1-  796     	SUBAR	(_T1Counter + 1),W
     0029 0903                      1-  797     	BTRSS	STATUS,2
     002A 3rrr                      1-  798     	LGOTO	_00212_DS_
     002B 216E                      1-  799     	MOVIA	0x6e
     002C 04rr                      1-  800     	SUBAR	_T1Counter,W
     002D                           1-  801     _00212_DS_:
     002D 0C03                      1-  802     	BTRSC	STATUS,0
     002E 3rrr                      1-  803     	LGOTO	_00191_DS_
                                    1-  804     	.line	184, "main.c"; 	RemoteStart = 0;       //遥控数据头
     002F 1Drr                      1-  805     	BCR	_Status,3
                                    1-  806     	.line	185, "main.c"; 	MaybeRemoteStart = 1;		//疑似遥控数据头
     0030 19rr                      1-  807     	BSR	_Status,2
                                    1-  808     	.line	186, "main.c"; 	sleepFlag = 0;
     0031 02rr                      1-  809     	CLRR	_sleepFlag
                                    1-  810     	.line	187, "main.c"; 	bitIndex = 0;
     0032 02rr                      1-  811     	CLRR	_bitIndex
                                    1-  812     	.line	188, "main.c"; 	OneCode = 0;
     0033 1Crr                      1-  813     	BCR	_Status,1
                                    1-  814     	.line	189, "main.c"; 	ZeroCode = 0;
     0034 1Crr                      1-  815     	BCR	_Status,0
                                    1-  816     	.line	190, "main.c"; 	ReadOver = 0;
     0035 1Err                      1-  817     	BCR	_Status,4
                                    1-  818     	.line	190, "main.c"; 	}
     0036 3rrr                      1-  819     	LGOTO	_00194_DS_
     0037                           1-  820     _00191_DS_:
                                    1-  821     	.line	192, "main.c"; 	else if(RemoteStart)
     0037 09rr                      1-  822     	BTRSS	_Status,3
     0038 3rrr                      1-  823     	LGOTO	_00194_DS_
                                    1-  824     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  825     ;;unsigned compare: left >= lit (0x1B=27), size=2
                                    1-  826     	.line	203, "main.c"; 	if((T1Counter >(OneCode_L - FaultTolerant))&&(T1Counter < (OneCode_L + FaultTolerant)))
     0039 2100                      1-  827     	MOVIA	0x00
     003A 04rr                      1-  828     	SUBAR	(_T1Counter + 1),W
     003B 0903                      1-  829     	BTRSS	STATUS,2
     003C 3rrr                      1-  830     	LGOTO	_00213_DS_
     003D 211B                      1-  831     	MOVIA	0x1b
     003E 04rr                      1-  832     	SUBAR	_T1Counter,W
     003F                           1-  833     _00213_DS_:
     003F 0803                      1-  834     	BTRSS	STATUS,0
     0040 3rrr                      1-  835     	LGOTO	_00185_DS_
                                    1-  836     ;;unsigned compare: left < lit (0x2E=46), size=2
     0041 2100                      1-  837     	MOVIA	0x00
     0042 04rr                      1-  838     	SUBAR	(_T1Counter + 1),W
     0043 0903                      1-  839     	BTRSS	STATUS,2
     0044 3rrr                      1-  840     	LGOTO	_00214_DS_
     0045 212E                      1-  841     	MOVIA	0x2e
     0046 04rr                      1-  842     	SUBAR	_T1Counter,W
     0047                           1-  843     _00214_DS_:
     0047 0C03                      1-  844     	BTRSC	STATUS,0
     0048 3rrr                      1-  845     	LGOTO	_00185_DS_
                                    1-  846     	.line	206, "main.c"; 	NOP();
     0049 0000                      1-  847     	nop
     004A 3rrr                      1-  848     	LGOTO	_00194_DS_
     004B                           1-  849     _00185_DS_:
                                    1-  850     	.line	211, "main.c"; 	cleanData();
     004B 2rrr                      1-  851     	LCALL	_cleanData
     004C                           1-  852     _00194_DS_:
                                    1-  853     	.line	216, "main.c"; 	}
                                    1-  854     	RETURN	
     004C 0010                      3-   26 m1      ret
                                    1-  855     ; exit point of _proLow
                                    1-  857     ;***
                                    1-  858     ;  pBlock Stats: dbName = C
                                    1-  859     ;***
                                    1-  860     ;has an exit
                                    1-  861     ;functions called:
                                    1-  862     ;   _GetOneByte
                                    1-  863     ;   _GetOneByte
                                    1-  864     ;   _GetOneByte
                                    1-  865     ;   _GetOneByte
                                    1-  866     ;4 compiler assigned registers:
                                    1-  867     ;   r0x1014
                                    1-  868     ;   r0x1015
                                    1-  869     ;   r0x1016
                                    1-  870     ;   r0x1017
                                    1-  871     ;; Starting pCode block
                                    1-  872     .segment "code"; module=main, function=_proHight
     0000                           1-  874     _proHight:
                                    1-  875     ; 2 exit points
                                    1-  876     	.line	109, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1-  877     	CLRA	
     0001 002r                      1-  878     	SFUN	_T1CR1
                                    1-  879     	.line	110, "main.c"; 	T1Counter = accTimeH;
     0002 01rr                      1-  880     	MOVR	_accTimeH,W
     0003 00rr                      1-  881     	MOVAR	_T1Counter
     0004 02rr                      1-  882     	CLRR	(_T1Counter + 1)
                                    1-  883     	.line	111, "main.c"; 	T1Counter <<= 8;
     0005 01rr                      1-  884     	MOVR	_T1Counter,W
     0006 00rr                      1-  885     	MOVAR	(_T1Counter + 1)
     0007 02rr                      1-  886     	CLRR	_T1Counter
                                    1-  887     	.line	112, "main.c"; 	T1Counter += (0xFF - TMR1);
     0008 003r                      1-  888     	SFUNR	_TMR1
                                    1-  889     ;;3	MOVAR	r0x1014
     0009 00rr                      1-  890     	MOVAR	r0x1015
     000A 02rr                      1-  891     	CLRR	r0x1016
     000B 01rr                      1-  892     	MOVR	r0x1015,W
     000C 27FF                      1-  893     	SUBIA	0xff
     000D 00rr                      1-  894     	MOVAR	r0x1014
     000E 2100                      1-  895     	MOVIA	0x00
     000F 0803                      1-  896     	BTRSS	STATUS,0
     0010 05rr                      1-  897     	INCR	r0x1016,W
     0011 2700                      1-  898     	SUBIA	0x00
     0012 00rr                      1-  899     	MOVAR	r0x1016
                                    1-  900     ;;1	MOVAR	r0x1017
     0013 01rr                      1-  901     	MOVR	r0x1014,W
     0014 00rr                      1-  902     	MOVAR	r0x1015
     0015 03rr                      1-  903     	ADDAR	_T1Counter,F
     0016 01rr                      1-  904     	MOVR	r0x1016,W
     0017 0C03                      1-  905     	BTRSC	STATUS,0
     0018 16rr                      1-  906     	INCRSZ	r0x1016,W
     0019 03rr                      1-  907     	ADDAR	(_T1Counter + 1),F
                                    1-  908     	.line	113, "main.c"; 	accTimeH = 0;
     001A 02rr                      1-  909     	CLRR	_accTimeH
                                    1-  910     	.line	114, "main.c"; 	TMR1 = 0xFF;
     001B 21FF                      1-  911     	MOVIA	0xff
     001C 002r                      1-  912     	SFUN	_TMR1
                                    1-  913     	.line	115, "main.c"; 	T1CR1 = C_TMR1_En | C_TMR1_Reload;
     001D 2103                      1-  914     	MOVIA	0x03
     001E 002r                      1-  915     	SFUN	_T1CR1
                                    1-  916     	.line	116, "main.c"; 	if(MaybeRemoteStart && T1Counter > (HeadCont_H - (FaultTolerant*FaultTolerantX)) && T1Counter < (HeadCont_H + (FaultTolerant*FaultTolerantX)))
     001F 09rr                      1-  917     	BTRSS	_Status,2
     0020 3rrr                      1-  918     	LGOTO	_00138_DS_
                                    1-  919     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  920     ;;unsigned compare: left >= lit (0xDE=222), size=2
     0021 2100                      1-  921     	MOVIA	0x00
     0022 04rr                      1-  922     	SUBAR	(_T1Counter + 1),W
     0023 0903                      1-  923     	BTRSS	STATUS,2
     0024 3rrr                      1-  924     	LGOTO	_00174_DS_
     0025 21DE                      1-  925     	MOVIA	0xde
     0026 04rr                      1-  926     	SUBAR	_T1Counter,W
     0027                           1-  927     _00174_DS_:
     0027 0803                      1-  928     	BTRSS	STATUS,0
     0028 3rrr                      1-  929     	LGOTO	_00138_DS_
                                    1-  930     ;;unsigned compare: left < lit (0x155=341), size=2
     0029 2101                      1-  931     	MOVIA	0x01
     002A 04rr                      1-  932     	SUBAR	(_T1Counter + 1),W
     002B 0903                      1-  933     	BTRSS	STATUS,2
     002C 3rrr                      1-  934     	LGOTO	_00175_DS_
     002D 2155                      1-  935     	MOVIA	0x55
     002E 04rr                      1-  936     	SUBAR	_T1Counter,W
     002F                           1-  937     _00175_DS_:
     002F 0C03                      1-  938     	BTRSC	STATUS,0
     0030 3rrr                      1-  939     	LGOTO	_00138_DS_
                                    1-  940     	.line	118, "main.c"; 	MaybeRemoteStart = 0;       //遥控数据头
     0031 1Drr                      1-  941     	BCR	_Status,2
                                    1-  942     	.line	119, "main.c"; 	RemoteStart = 1;
     0032 19rr                      1-  943     	BSR	_Status,3
                                    1-  944     	.line	120, "main.c"; 	sleepFlag = 0;
     0033 02rr                      1-  945     	CLRR	_sleepFlag
                                    1-  946     	.line	121, "main.c"; 	bitIndex = 0;
     0034 02rr                      1-  947     	CLRR	_bitIndex
                                    1-  948     	.line	122, "main.c"; 	OneCode = 0;
     0035 1Crr                      1-  949     	BCR	_Status,1
                                    1-  950     	.line	123, "main.c"; 	ZeroCode = 0;
     0036 1Crr                      1-  951     	BCR	_Status,0
                                    1-  952     	.line	124, "main.c"; 	ReadOver = 0;
     0037 1Err                      1-  953     	BCR	_Status,4
     0038 3rrr                      1-  954     	LGOTO	_00142_DS_
     0039                           1-  955     _00138_DS_:
                                    1-  956     	.line	126, "main.c"; 	else if(RemoteStart)
     0039 09rr                      1-  957     	BTRSS	_Status,3
     003A 3rrr                      1-  958     	LGOTO	_00135_DS_
                                    1-  959     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  960     ;;unsigned compare: left >= lit (0x5E=94), size=2
                                    1-  961     	.line	128, "main.c"; 	if((T1Counter> (OneCode_H - FaultTolerant))&&(T1Counter < (OneCode_H + FaultTolerant)))
     003B 2100                      1-  962     	MOVIA	0x00
     003C 04rr                      1-  963     	SUBAR	(_T1Counter + 1),W
     003D 0903                      1-  964     	BTRSS	STATUS,2
     003E 3rrr                      1-  965     	LGOTO	_00176_DS_
     003F 215E                      1-  966     	MOVIA	0x5e
     0040 04rr                      1-  967     	SUBAR	_T1Counter,W
     0041                           1-  968     _00176_DS_:
     0041 0803                      1-  969     	BTRSS	STATUS,0
     0042 3rrr                      1-  970     	LGOTO	_00126_DS_
                                    1-  971     ;;unsigned compare: left < lit (0x71=113), size=2
     0043 2100                      1-  972     	MOVIA	0x00
     0044 04rr                      1-  973     	SUBAR	(_T1Counter + 1),W
     0045 0903                      1-  974     	BTRSS	STATUS,2
     0046 3rrr                      1-  975     	LGOTO	_00177_DS_
     0047 2171                      1-  976     	MOVIA	0x71
     0048 04rr                      1-  977     	SUBAR	_T1Counter,W
     0049                           1-  978     _00177_DS_:
     0049 0C03                      1-  979     	BTRSC	STATUS,0
     004A 3rrr                      1-  980     	LGOTO	_00126_DS_
                                    1-  981     	.line	130, "main.c"; 	OneCode = 1;
     004B 18rr                      1-  982     	BSR	_Status,1
                                    1-  983     	.line	131, "main.c"; 	ZeroCode = 0;
     004C 1Crr                      1-  984     	BCR	_Status,0
     004D 3rrr                      1-  985     	LGOTO	_00127_DS_
                                    1-  986     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  987     ;;unsigned compare: left >= lit (0x13=19), size=2
     004E                           1-  988     _00126_DS_:
                                    1-  989     	.line	135, "main.c"; 	if((T1Counter > (Zero_H - FaultTolerant))&&(T1Counter < (Zero_H + FaultTolerant)))
     004E 2100                      1-  990     	MOVIA	0x00
     004F 04rr                      1-  991     	SUBAR	(_T1Counter + 1),W
     0050 0903                      1-  992     	BTRSS	STATUS,2
     0051 3rrr                      1-  993     	LGOTO	_00178_DS_
     0052 2113                      1-  994     	MOVIA	0x13
     0053 04rr                      1-  995     	SUBAR	_T1Counter,W
     0054                           1-  996     _00178_DS_:
     0054 0803                      1-  997     	BTRSS	STATUS,0
     0055 3rrr                      1-  998     	LGOTO	_00122_DS_
                                    1-  999     ;;unsigned compare: left < lit (0x26=38), size=2
     0056 2100                      1- 1000     	MOVIA	0x00
     0057 04rr                      1- 1001     	SUBAR	(_T1Counter + 1),W
     0058 0903                      1- 1002     	BTRSS	STATUS,2
     0059 3rrr                      1- 1003     	LGOTO	_00179_DS_
     005A 2126                      1- 1004     	MOVIA	0x26
     005B 04rr                      1- 1005     	SUBAR	_T1Counter,W
     005C                           1- 1006     _00179_DS_:
     005C 0C03                      1- 1007     	BTRSC	STATUS,0
     005D 3rrr                      1- 1008     	LGOTO	_00122_DS_
                                    1- 1009     	.line	137, "main.c"; 	ZeroCode = 1;
     005E 18rr                      1- 1010     	BSR	_Status,0
                                    1- 1011     	.line	138, "main.c"; 	OneCode = 0;
     005F 1Crr                      1- 1012     	BCR	_Status,1
     0060 3rrr                      1- 1013     	LGOTO	_00127_DS_
     0061                           1- 1014     _00122_DS_:
                                    1- 1015     	.line	142, "main.c"; 	ZeroCode = 0;
     0061 1Crr                      1- 1016     	BCR	_Status,0
                                    1- 1017     	.line	143, "main.c"; 	OneCode = 0;
     0062 1Crr                      1- 1018     	BCR	_Status,1
     0063                           1- 1019     _00127_DS_:
                                    1- 1020     	.line	147, "main.c"; 	if(OneCode)
     0063 08rr                      1- 1021     	BTRSS	_Status,1
     0064 3rrr                      1- 1022     	LGOTO	_00132_DS_
                                    1- 1023     	.line	150, "main.c"; 	GetOneByte(1);
     0065 2101                      1- 1024     	MOVIA	0x01
     0066 2rrr                      1- 1025     	LCALL	_GetOneByte
     0067 3rrr                      1- 1026     	LGOTO	_00142_DS_
     0068                           1- 1027     _00132_DS_:
                                    1- 1028     	.line	152, "main.c"; 	else if(ZeroCode)
     0068 08rr                      1- 1029     	BTRSS	_Status,0
     0069 3rrr                      1- 1030     	LGOTO	_00142_DS_
                                    1- 1031     	.line	155, "main.c"; 	GetOneByte(0);
     006A 2100                      1- 1032     	MOVIA	0x00
     006B 2rrr                      1- 1033     	LCALL	_GetOneByte
     006C 3rrr                      1- 1034     	LGOTO	_00142_DS_
     006D                           1- 1035     _00135_DS_:
                                    1- 1036     	.line	160, "main.c"; 	MaybeRemoteStart = 0;       //遥控数据头
     006D 1Drr                      1- 1037     	BCR	_Status,2
                                    1- 1038     	.line	161, "main.c"; 	RemoteStart = 0;
     006E 1Drr                      1- 1039     	BCR	_Status,3
                                    1- 1040     	.line	162, "main.c"; 	sleepFlag = 0;
     006F 02rr                      1- 1041     	CLRR	_sleepFlag
                                    1- 1042     	.line	163, "main.c"; 	bitIndex = 0;
     0070 02rr                      1- 1043     	CLRR	_bitIndex
                                    1- 1044     	.line	164, "main.c"; 	OneCode = 0;
     0071 1Crr                      1- 1045     	BCR	_Status,1
                                    1- 1046     	.line	165, "main.c"; 	ZeroCode = 0;
     0072 1Crr                      1- 1047     	BCR	_Status,0
                                    1- 1048     	.line	166, "main.c"; 	ReadOver = 0;
     0073 1Err                      1- 1049     	BCR	_Status,4
     0074                           1- 1050     _00142_DS_:
                                    1- 1051     	.line	171, "main.c"; 	}
                                    1- 1052     	RETURN	
     0074 0010                      3-   26 m1      ret
                                    1- 1053     ; exit point of _proHight
                                    1- 1055     ;***
                                    1- 1056     ;  pBlock Stats: dbName = C
                                    1- 1057     ;***
                                    1- 1058     ;has an exit
                                    1- 1059     ;; Starting pCode block
                                    1- 1060     .segment "code"; module=main, function=_cleanData
     0000                           1- 1062     _cleanData:
                                    1- 1063     ; 2 exit points
                                    1- 1064     	.line	97, "main.c"; 	MaybeRemoteStart = 0;       //遥控数据头
     0000 1Drr                      1- 1065     	BCR	_Status,2
                                    1- 1066     	.line	98, "main.c"; 	RemoteStart = 0;
     0001 1Drr                      1- 1067     	BCR	_Status,3
                                    1- 1068     	.line	99, "main.c"; 	sleepFlag = 0;
     0002 02rr                      1- 1069     	CLRR	_sleepFlag
                                    1- 1070     	.line	100, "main.c"; 	bitIndex = 0;
     0003 02rr                      1- 1071     	CLRR	_bitIndex
                                    1- 1072     	.line	101, "main.c"; 	OneCode = 0;
     0004 1Crr                      1- 1073     	BCR	_Status,1
                                    1- 1074     	.line	102, "main.c"; 	ZeroCode = 0;
     0005 1Crr                      1- 1075     	BCR	_Status,0
                                    1- 1076     	.line	103, "main.c"; 	ReadOver = 0;
     0006 1Err                      1- 1077     	BCR	_Status,4
                                    1- 1078     	.line	104, "main.c"; 	}
                                    1- 1079     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1- 1080     ; exit point of _cleanData
                                    1- 1083     ;	code size estimation:
                                    1- 1084     ;	  415+    0 =   415 instructions (  830 byte)
                                    1- 1086     	end
                                    1- 1086     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800515
__sdcc_interrupt        Label    00000000
_00106_DS_              Label    00000012
_00110_DS_              Label    0000001E
_00112_DS_              Label    00000022
_00122_DS_              Label    00000061
_00126_DS_              Label    0000004E
_00127_DS_              Label    00000063
_00132_DS_              Label    00000068
_00135_DS_              Label    0000006D
_00138_DS_              Label    00000039
_00142_DS_              Label    00000074
_00174_DS_              Label    00000027
_00175_DS_              Label    0000002F
_00176_DS_              Label    00000041
_00177_DS_              Label    00000049
_00178_DS_              Label    00000054
_00179_DS_              Label    0000005C
_00185_DS_              Label    0000004B
_00191_DS_              Label    00000037
_00194_DS_              Label    0000004C
_00211_DS_              Label    00000025
_00212_DS_              Label    0000002D
_00213_DS_              Label    0000003F
_00214_DS_              Label    00000047
_00220_DS_              Label    0000000C
_00226_DS_              Label    00000025
_00229_DS_              Label    0000001E
_00232_DS_              Label    00000017
_00233_DS_              Label    00000030
_00236_DS_              Label    00000032
_00244_DS_              Label    00000009
_00262_DS_              Label    0000001E
_00267_DS_              Label    00000025
_00268_DS_              Label    0000002B
_00273_DS_              Label    0000003F
_00276_DS_              Label    00000044
_00279_DS_              Label    0000001B
_00313_DS_              Label    0000003C
_accTimeH               Label    00000000
_bitIndex               Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_cleanData              Label    00000000
_count                  Label    00000000
_data1                  Label    00000000
_data2                  Label    00000000
_data3                  Label    00000000
_data4                  Label    00000000
_FSR                    Label    00000000
_GetOneByte             Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_irCode                 Label    00000000
_irCode2                Label    00000000
_IRCR                   Label    00000000
_irpros                 Label    00000000
_irwork                 Label    00000000
_isr                    Label    00000000
_keyCallBack            Label    00000000
_ledCount               Label    00000000
_ledFlag                Label    00000000
_lowTime                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_proData                Label    00000000
_proHight               Label    00000000
_proLow                 Label    00000000
_proTime                Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setHight               Label    00000000
_setLow                 Label    00000000
_setPWMduty             Label    00000000
_sleepCount             Label    00000000
_sleepFlag              Label    00000000
_Status                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1Counter              Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_value                  Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000030
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1013                 Label    00000000
r0x1014                 Label    00000000
r0x1015                 Label    00000000
r0x1016                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051f.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
