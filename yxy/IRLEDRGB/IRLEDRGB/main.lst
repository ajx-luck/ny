
                    Nyquest Technology Co., Ltd.

NYASM 2.25

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_setPWMduty
                                    1-   57     	extern	_gotoSleep
                                    1-   58     	extern	_setHight
                                    1-   59     	extern	_setLow
                                    1-   60     	extern	_irwork
                                    1-   61     	extern	_irpros
                                    1-   62     	extern	_isr
                                    1-   63     	extern	_main
                                    1-   64     	extern	_irtime
                                    1-   65     	extern	_IntFlag
                                    1-   66     	extern	_count
                                    1-   67     	extern	_startflag
                                    1-   68     	extern	_bitIndex
                                    1-   69     	extern	_irreceok
                                    1-   70     	extern	_irprosok
                                    1-   71     	extern	_data1
                                    1-   72     	extern	_data2
                                    1-   73     	extern	_data3
                                    1-   74     	extern	_data4
                                    1-   75     	extern	_irCode
                                    1-   76     	extern	_irCode2
                                    1-   77     	extern	_value
                                    1-   78     	extern	_sleepFlag
                                    1-   79     	extern	_sleepCount
                                    1-   80     	extern	_RDUTY
                                    1-   81     	extern	_GDUTY
                                    1-   82     	extern	_BDUTY
                                    1-   83     	extern	_ledFlag
                                    1-   84     	extern	_ledCount
                                    1-   85     	extern	_lowTime
                                    1-   87     	extern PSAVE
                                    1-   88     	extern SSAVE
                                    1-   89     	extern WSAVE
                                    1-   90     	extern STK12
                                    1-   91     	extern STK11
                                    1-   92     	extern STK10
                                    1-   93     	extern STK09
                                    1-   94     	extern STK08
                                    1-   95     	extern STK07
                                    1-   96     	extern STK06
                                    1-   97     	extern STK05
                                    1-   98     	extern STK04
                                    1-   99     	extern STK03
                                    1-  100     	extern STK02
                                    1-  101     	extern STK01
                                    1-  102     	extern STK00
                                    1-  104     .segment "uninit", 0x20000010
 20000010                           1-  105     PSAVE:
                                    1-  106     	.res 1
 20000011                           1-  107     SSAVE:
                                    1-  108     	.res 1
 20000012                           1-  109     WSAVE:
                                    1-  110     	.res 1
 20000013                           1-  111     STK12:
                                    1-  112     	.res 1
 20000014                           1-  113     STK11:
                                    1-  114     	.res 1
 20000015                           1-  115     STK10:
                                    1-  116     	.res 1
 20000016                           1-  117     STK09:
                                    1-  118     	.res 1
 20000017                           1-  119     STK08:
                                    1-  120     	.res 1
 20000018                           1-  121     STK07:
                                    1-  122     	.res 1
 20000019                           1-  123     STK06:
                                    1-  124     	.res 1
 2000001A                           1-  125     STK05:
                                    1-  126     	.res 1
 2000001B                           1-  127     STK04:
                                    1-  128     	.res 1
 2000001C                           1-  129     STK03:
                                    1-  130     	.res 1
 2000001D                           1-  131     STK02:
                                    1-  132     	.res 1
 2000001E                           1-  133     STK01:
                                    1-  134     	.res 1
 2000001F                           1-  135     STK00:
                                    1-  136     	.res 1
                                    1-  138     ;--------------------------------------------------------
                                    1-  139     ; global definitions
                                    1-  140     ;--------------------------------------------------------
                                    1-  141     .segment "uninit"
     0000                           1-  142     _irtime:
                                    1-  143     	.res	1
                                    1-  146     .segment "uninit"
     0000                           1-  147     _IntFlag:
                                    1-  148     	.res	1
                                    1-  151     .segment "uninit"
     0000                           1-  152     _count:
                                    1-  153     	.res	1
                                    1-  156     .segment "uninit"
     0000                           1-  157     _startflag:
                                    1-  158     	.res	1
                                    1-  161     .segment "uninit"
     0000                           1-  162     _bitIndex:
                                    1-  163     	.res	1
                                    1-  166     .segment "uninit"
     0000                           1-  167     _irreceok:
                                    1-  168     	.res	1
                                    1-  171     .segment "uninit"
     0000                           1-  172     _irprosok:
                                    1-  173     	.res	1
                                    1-  176     .segment "uninit"
     0000                           1-  177     _data1:
                                    1-  178     	.res	1
                                    1-  181     .segment "uninit"
     0000                           1-  182     _data2:
                                    1-  183     	.res	1
                                    1-  186     .segment "uninit"
     0000                           1-  187     _data3:
                                    1-  188     	.res	1
                                    1-  191     .segment "uninit"
     0000                           1-  192     _data4:
                                    1-  193     	.res	1
                                    1-  196     .segment "uninit"
     0000                           1-  197     _irCode:
                                    1-  198     	.res	1
                                    1-  201     .segment "uninit"
     0000                           1-  202     _irCode2:
                                    1-  203     	.res	1
                                    1-  206     .segment "uninit"
     0000                           1-  207     _value:
                                    1-  208     	.res	1
                                    1-  211     ;--------------------------------------------------------
                                    1-  212     ; absolute symbol definitions
                                    1-  213     ;--------------------------------------------------------
                                    1-  214     ;--------------------------------------------------------
                                    1-  215     ; compiler-defined variables
                                    1-  216     ;--------------------------------------------------------
                                    1-  217     .segment "uninit"
     0000                           1-  218     r0x1016:
                                    1-  219     	.res	1
                                    1-  220     .segment "uninit"
     0000                           1-  221     r0x1017:
                                    1-  222     	.res	1
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     ; initialized data
                                    1-  225     ;--------------------------------------------------------
                                    1-  227     .segment "idata"
     0000                           1-  228     _sleepFlag:
     0000 0000                      1-  229     	dw	0x00
                                    1-  233     .segment "idata"
     0000                           1-  234     _sleepCount:
     0000 0000 0000                 1-  235     	dw	0x00, 0x00
                                    1-  239     .segment "idata"
     0000                           1-  240     _RDUTY:
     0000 0000                      1-  241     	dw	0x00
                                    1-  245     .segment "idata"
     0000                           1-  246     _GDUTY:
     0000 0000                      1-  247     	dw	0x00
                                    1-  251     .segment "idata"
     0000                           1-  252     _BDUTY:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _ledFlag:
     0000 0000                      1-  259     	dw	0x00
                                    1-  263     .segment "idata"
     0000                           1-  264     _ledCount:
     0000 0000                      1-  265     	dw	0x00
                                    1-  269     .segment "idata"
     0000                           1-  270     _lowTime:
     0000 0000                      1-  271     	dw	0x00
                                    1-  274     ;--------------------------------------------------------
                                    1-  275     ; overlayable items in internal ram 
                                    1-  276     ;--------------------------------------------------------
                                    1-  277     ;	udata_ovr
                                    1-  278     ;--------------------------------------------------------
                                    1-  279     ; reset vector 
                                    1-  280     ;--------------------------------------------------------
                                    1-  281     ORG	0x0000
     0000 3rrr                      1-  282     	LGOTO	__nyc_ny8_startup
                                    1-  283     ;--------------------------------------------------------
                                    1-  284     ; interrupt and initialization code
                                    1-  285     ;--------------------------------------------------------
                                    1-  286     ORG 0x0008
     0008 3rrr                      1-  287     	lgoto	__sdcc_interrupt
                                    1-  289     .segment "code"
     0000                           1-  290     __sdcc_interrupt:
                                    1-  291     ;***
                                    1-  292     ;  pBlock Stats: dbName = I
                                    1-  293     ;***
                                    1-  294     ;functions called:
                                    1-  295     ;   _gotoSleep
                                    1-  296     ;   _gotoSleep
                                    1-  297     ;2 compiler assigned registers:
                                    1-  298     ;   STK00
                                    1-  299     ;   STK01
                                    1-  300     ;; Starting pCode block
     0000                           1-  301     _isr:
                                    1-  302     ; 0 exit points
                                    1-  303     	.line	35, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  304     	MOVAR	WSAVE
     0001 1503                      1-  305     	SWAPR	STATUS,W
     0002 0283                      1-  306     	CLRR	STATUS
     0003 00rr                      1-  307     	MOVAR	SSAVE
     0004 010A                      1-  308     	MOVR	PCHBUF,W
     0005 028A                      1-  309     	CLRR	PCHBUF
     0006 00rr                      1-  310     	MOVAR	PSAVE
     0007 0104                      1-  311     	MOVR	FSR,W
     0008 00rr                      1-  312     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  313     	MOVR	STK00,W
     000A 00rr                      1-  314     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  315     	MOVR	STK01,W
     000C 00rr                      1-  316     	MOVAR	___sdcc_saved_stk01
                                    1-  317     	.line	37, "main.c"; 	if(INTFbits.T1IF)
     000D 09rr                      1-  318     	BTRSS	_INTFbits,3
     000E 3rrr                      1-  319     	LGOTO	_00108_DS_
                                    1-  320     	.line	39, "main.c"; 	irtime++;		//0.256ms执行一次
     000F 05rr                      1-  321     	INCR	_irtime,F
                                    1-  322     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  323     ;;unsigned compare: left >= lit (0xC9=201), size=1
                                    1-  324     	.line	40, "main.c"; 	if(irtime > 200)
     0010 21C9                      1-  325     	MOVIA	0xc9
     0011 04rr                      1-  326     	SUBAR	_irtime,W
     0012 0C03                      1-  327     	BTRSC	STATUS,0
                                    1-  328     	.line	42, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  329     	LCALL	_gotoSleep
                                    1-  330     	.line	52, "main.c"; 	INTF= (unsigned char)~(C_INT_TMR1);	// Clear T1IF flag bit	
     0014 21F7                      1-  331     	MOVIA	0xf7
     0015 00rr                      1-  332     	MOVAR	_INTF
     0016                           1-  333     _00108_DS_:
                                    1-  334     	.line	55, "main.c"; 	if(INTFbits.T0IF)
     0016 08rr                      1-  335     	BTRSS	_INTFbits,0
     0017 3rrr                      1-  336     	LGOTO	_00112_DS_
                                    1-  337     	.line	57, "main.c"; 	TMR0 += 55;
     0018 2137                      1-  338     	MOVIA	0x37
     0019 03rr                      1-  339     	ADDAR	_TMR0,F
                                    1-  340     	.line	58, "main.c"; 	if(++count == 100)
     001A 05rr                      1-  341     	INCR	_count,F
     001B 01rr                      1-  342     	MOVR	_count,W
     001C 2464                      1-  343     	XORIA	0x64
     001D 0903                      1-  344     	BTRSS	STATUS,2
     001E 3rrr                      1-  345     	LGOTO	_00112_DS_
                                    1-  346     	.line	60, "main.c"; 	count = 0;
     001F 02rr                      1-  347     	CLRR	_count
                                    1-  348     	.line	61, "main.c"; 	IntFlag = 1;
     0020 2101                      1-  349     	MOVIA	0x01
     0021 00rr                      1-  350     	MOVAR	_IntFlag
     0022                           1-  351     _00112_DS_:
                                    1-  352     	.line	65, "main.c"; 	if(INTFbits.PBIF)
     0022 08rr                      1-  353     	BTRSS	_INTFbits,1
     0023 3rrr                      1-  354     	LGOTO	_00134_DS_
                                    1-  355     	.line	68, "main.c"; 	if(startflag)
     0024 01rr                      1-  356     	MOVR	_startflag,W
     0025 0D03                      1-  357     	BTRSC	STATUS,2
     0026 3rrr                      1-  358     	LGOTO	_00131_DS_
                                    1-  359     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  360     ;;unsigned compare: left >= lit (0x21=33), size=1
                                    1-  361     	.line	70, "main.c"; 	if(irtime>32 )
     0027 2121                      1-  362     	MOVIA	0x21
     0028 04rr                      1-  363     	SUBAR	_irtime,W
     0029 0803                      1-  364     	BTRSS	STATUS,0
     002A 3rrr                      1-  365     	LGOTO	_00114_DS_
                                    1-  366     	.line	72, "main.c"; 	bitIndex=0;
     002B 02rr                      1-  367     	CLRR	_bitIndex
                                    1-  368     	.line	73, "main.c"; 	value = 0;
     002C 02rr                      1-  369     	CLRR	_value
                                    1-  370     	.line	74, "main.c"; 	PCON1 = C_TMR0_Dis;
     002D 0200                      1-  371     	CLRA	
     002E 000r                      1-  372     	IOST	_PCON1
                                    1-  373     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  374     ;;unsigned compare: left >= lit (0x7=7), size=1
     002F                           1-  375     _00114_DS_:
                                    1-  376     	.line	76, "main.c"; 	if(irtime>6)
     002F 2107                      1-  377     	MOVIA	0x07
     0030 04rr                      1-  378     	SUBAR	_irtime,W
     0031 0C03                      1-  379     	BTRSC	STATUS,0
                                    1-  380     	.line	78, "main.c"; 	value |= 0x80;
     0032 1Brr                      1-  381     	BSR	_value,7
                                    1-  382     	.line	81, "main.c"; 	value = value >> 1;
     0033 1C03                      1-  383     	BCR	STATUS,0
     0034 13rr                      1-  384     	RRR	_value,F
                                    1-  385     	.line	82, "main.c"; 	irtime=0;
     0035 02rr                      1-  386     	CLRR	_irtime
                                    1-  387     	.line	83, "main.c"; 	bitIndex++;
     0036 05rr                      1-  388     	INCR	_bitIndex,F
                                    1-  389     	.line	84, "main.c"; 	if(bitIndex == 8)
     0037 01rr                      1-  390     	MOVR	_bitIndex,W
     0038 2408                      1-  391     	XORIA	0x08
     0039 0903                      1-  392     	BTRSS	STATUS,2
     003A 3rrr                      1-  393     	LGOTO	_00126_DS_
                                    1-  394     	.line	86, "main.c"; 	data1 = value;
     003B 01rr                      1-  395     	MOVR	_value,W
     003C 00rr                      1-  396     	MOVAR	_data1
     003D 3rrr                      1-  397     	LGOTO	_00127_DS_
     003E                           1-  398     _00126_DS_:
                                    1-  399     	.line	88, "main.c"; 	else if(bitIndex == 16)
     003E 01rr                      1-  400     	MOVR	_bitIndex,W
     003F 2410                      1-  401     	XORIA	0x10
     0040 0903                      1-  402     	BTRSS	STATUS,2
     0041 3rrr                      1-  403     	LGOTO	_00123_DS_
                                    1-  404     	.line	90, "main.c"; 	data2 = value;
     0042 01rr                      1-  405     	MOVR	_value,W
     0043 00rr                      1-  406     	MOVAR	_data2
     0044 3rrr                      1-  407     	LGOTO	_00127_DS_
     0045                           1-  408     _00123_DS_:
                                    1-  409     	.line	93, "main.c"; 	else if(bitIndex == 24)
     0045 01rr                      1-  410     	MOVR	_bitIndex,W
     0046 2418                      1-  411     	XORIA	0x18
     0047 0903                      1-  412     	BTRSS	STATUS,2
     0048 3rrr                      1-  413     	LGOTO	_00120_DS_
                                    1-  414     	.line	95, "main.c"; 	data3 = value;
     0049 01rr                      1-  415     	MOVR	_value,W
     004A 00rr                      1-  416     	MOVAR	_data3
     004B 3rrr                      1-  417     	LGOTO	_00127_DS_
     004C                           1-  418     _00120_DS_:
                                    1-  419     	.line	98, "main.c"; 	else if(bitIndex == 32)
     004C 01rr                      1-  420     	MOVR	_bitIndex,W
     004D 2420                      1-  421     	XORIA	0x20
     004E 0903                      1-  422     	BTRSS	STATUS,2
     004F 3rrr                      1-  423     	LGOTO	_00127_DS_
                                    1-  424     	.line	100, "main.c"; 	data4 = value;
     0050 01rr                      1-  425     	MOVR	_value,W
     0051 00rr                      1-  426     	MOVAR	_data4
     0052                           1-  427     _00127_DS_:
                                    1-  428     	.line	104, "main.c"; 	if(bitIndex == 33)
     0052 01rr                      1-  429     	MOVR	_bitIndex,W
     0053 2421                      1-  430     	XORIA	0x21
     0054 0903                      1-  431     	BTRSS	STATUS,2
     0055 3rrr                      1-  432     	LGOTO	_00132_DS_
                                    1-  433     	.line	106, "main.c"; 	bitIndex=0;
     0056 02rr                      1-  434     	CLRR	_bitIndex
                                    1-  435     	.line	107, "main.c"; 	irreceok=1;
     0057 2101                      1-  436     	MOVIA	0x01
     0058 00rr                      1-  437     	MOVAR	_irreceok
                                    1-  438     	.line	108, "main.c"; 	PCON1 = C_TMR0_En;
     0059 000r                      1-  439     	IOST	_PCON1
     005A 3rrr                      1-  440     	LGOTO	_00132_DS_
     005B                           1-  441     _00131_DS_:
                                    1-  442     	.line	114, "main.c"; 	startflag = 1;
     005B 2101                      1-  443     	MOVIA	0x01
     005C 00rr                      1-  444     	MOVAR	_startflag
                                    1-  445     	.line	115, "main.c"; 	irtime=0;
     005D 02rr                      1-  446     	CLRR	_irtime
                                    1-  447     	.line	116, "main.c"; 	bitIndex=0;
     005E 02rr                      1-  448     	CLRR	_bitIndex
                                    1-  449     	.line	117, "main.c"; 	value = 0;
     005F 02rr                      1-  450     	CLRR	_value
                                    1-  451     	.line	118, "main.c"; 	PCON1 = C_TMR0_En;
     0060 2101                      1-  452     	MOVIA	0x01
     0061 000r                      1-  453     	IOST	_PCON1
     0062                           1-  454     _00132_DS_:
                                    1-  455     	.line	120, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);
     0062 21FD                      1-  456     	MOVIA	0xfd
     0063 00rr                      1-  457     	MOVAR	_INTF
     0064                           1-  458     _00134_DS_:
                                    1-  459     	.line	123, "main.c"; 	INTF = 0;
     0064 02rr                      1-  460     	CLRR	_INTF
                                    1-  461     	.line	126, "main.c"; 	}
     0065 01rr                      1-  462     	MOVR	___sdcc_saved_stk01,W
     0066 00rr                      1-  463     	MOVAR	STK01
     0067 01rr                      1-  464     	MOVR	___sdcc_saved_stk00,W
     0068 00rr                      1-  465     	MOVAR	STK00
     0069 01rr                      1-  466     	MOVR	___sdcc_saved_fsr,W
     006A 0084                      1-  467     	MOVAR	FSR
     006B 01rr                      1-  468     	MOVR	PSAVE,W
     006C 008A                      1-  469     	MOVAR	PCHBUF
     006D 0283                      1-  470     	CLRR	STATUS
     006E 15rr                      1-  471     	SWAPR	SSAVE,W
     006F 0083                      1-  472     	MOVAR	STATUS
     0070 15rr                      1-  473     	SWAPR	WSAVE,F
     0071 15rr                      1-  474     	SWAPR	WSAVE,W
     0072                           1-  475     END_OF_INTERRUPT:
     0072 0011                      1-  476     	RETIE	
                                    1-  478     ;--------------------------------------------------------
                                    1-  479     ; code
                                    1-  480     ;--------------------------------------------------------
                                    1-  481     ;***
                                    1-  482     ;  pBlock Stats: dbName = M
                                    1-  483     ;***
                                    1-  484     ;has an exit
                                    1-  485     ;functions called:
                                    1-  486     ;   _irpros
                                    1-  487     ;   _irwork
                                    1-  488     ;   _gotoSleep
                                    1-  489     ;   _setHight
                                    1-  490     ;   _irpros
                                    1-  491     ;   _irwork
                                    1-  492     ;   _gotoSleep
                                    1-  493     ;   _setHight
                                    1-  494     ;; Starting pCode block
                                    1-  495     .segment "code"; module=main, function=_main
     0000                           1-  497     _main:
                                    1-  498     ; 2 exit points
                                    1-  499     	.line	200, "main.c"; 	IOSTB =   C_PB0_Input;     // Set PB0 & PB1 to input mode,others set to output mode
     0000 2101                      1-  500     	MOVIA	0x01
     0001 000r                      1-  501     	IOST	_IOSTB
                                    1-  502     	.line	201, "main.c"; 	PORTB = 0x01;                           // PB0、PB1 & PB2 are output High
     0002 00rr                      1-  503     	MOVAR	_PORTB
                                    1-  504     	.line	202, "main.c"; 	DISI();
     0003 0013                      1-  505     	DISI
                                    1-  506     	.line	204, "main.c"; 	PCON1 = C_TMR0_Dis;						// Disable Timer0
     0004 0200                      1-  507     	CLRA	
     0005 000r                      1-  508     	IOST	_PCON1
                                    1-  509     	.line	206, "main.c"; 	TMR1 = 128;							// Load 0xFF to TMR1 (Initial Timer1 register)
     0006 2180                      1-  510     	MOVIA	0x80
     0007 002r                      1-  511     	SFUN	_TMR1
                                    1-  512     	.line	207, "main.c"; 	T1CR1 = C_TMR1_Reload | C_TMR1_En;      // Enable Timer1, Initial value reloaded from TMR1, Non-stop mode 
     0008 2103                      1-  513     	MOVIA	0x03
     0009 002r                      1-  514     	SFUN	_T1CR1
                                    1-  515     	.line	208, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div8;	// Enable Prescaler1, Prescaler1 dividing rate = 1:4, Timer1 clock source is instruction clock
     000A 2102                      1-  516     	MOVIA	0x02
     000B 002r                      1-  517     	SFUN	_T1CR2
                                    1-  518     	.line	211, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 210B                      1-  519     	MOVIA	0x0b
     000D 00rr                      1-  520     	MOVAR	_INTE
                                    1-  521     	.line	213, "main.c"; 	TMR0 = 55;
     000E 2137                      1-  522     	MOVIA	0x37
     000F 00rr                      1-  523     	MOVAR	_TMR0
                                    1-  524     	.line	214, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0010 0200                      1-  525     	CLRA	
     0011 0003                      1-  526     	T0MD	
                                    1-  527     	.line	217, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0012 2188                      1-  528     	MOVIA	0x88
     0013 00rr                      1-  529     	MOVAR	_PCON
                                    1-  530     	.line	220, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0014 2101                      1-  531     	MOVIA	0x01
     0015 000r                      1-  532     	IOST	_PCON1
                                    1-  533     	.line	221, "main.c"; 	ENI();									// Enable all unmasked interrupts			
     0016 0004                      1-  534     	ENI
     0017                           1-  535     _00193_DS_:
                                    1-  536     	.line	225, "main.c"; 	CLRWDT(); 
     0017 0002                      1-  537     	clrwdt
                                    1-  538     	.line	226, "main.c"; 	if(irreceok)
     0018 01rr                      1-  539     	MOVR	_irreceok,W
     0019 0903                      1-  540     	BTRSS	STATUS,2
                                    1-  541     	.line	228, "main.c"; 	irpros();	
     001A 2rrr                      1-  542     	LCALL	_irpros
                                    1-  543     	.line	230, "main.c"; 	if(!IntFlag)
     001B 01rr                      1-  544     	MOVR	_IntFlag,W
     001C 0D03                      1-  545     	BTRSC	STATUS,2
     001D 3rrr                      1-  546     	LGOTO	_00193_DS_
                                    1-  547     	.line	232, "main.c"; 	IntFlag = 0;		//10ms执行一次
     001E 02rr                      1-  548     	CLRR	_IntFlag
                                    1-  549     	.line	233, "main.c"; 	if(irprosok)
     001F 01rr                      1-  550     	MOVR	_irprosok,W
     0020 0903                      1-  551     	BTRSS	STATUS,2
                                    1-  552     	.line	235, "main.c"; 	irwork();
     0021 2rrr                      1-  553     	LCALL	_irwork
                                    1-  554     	.line	237, "main.c"; 	if(irtime>32 && (PORTB & 0x01))
     0022 2121                      1-  555     	MOVIA	0x21
     0023 04rr                      1-  556     	SUBAR	_irtime,W
     0024 0803                      1-  557     	BTRSS	STATUS,0
     0025 3rrr                      1-  558     	LGOTO	_00184_DS_
     0026 08rr                      1-  559     	BTRSS	_PORTB,0
     0027 3rrr                      1-  560     	LGOTO	_00184_DS_
                                    1-  561     	.line	239, "main.c"; 	bitIndex = 0;
     0028 02rr                      1-  562     	CLRR	_bitIndex
                                    1-  563     	.line	240, "main.c"; 	value = 0;
     0029 02rr                      1-  564     	CLRR	_value
     002A                           1-  565     _00184_DS_:
                                    1-  566     	.line	242, "main.c"; 	if(sleepFlag && ++sleepCount >= 30)
     002A 01rr                      1-  567     	MOVR	_sleepFlag,W
     002B 0D03                      1-  568     	BTRSC	STATUS,2
     002C 3rrr                      1-  569     	LGOTO	_00187_DS_
     002D 05rr                      1-  570     	INCR	_sleepCount,F
     002E 0D03                      1-  571     	BTRSC	STATUS,2
     002F 05rr                      1-  572     	INCR	(_sleepCount + 1),F
                                    1-  573     ;;unsigned compare: left < lit (0x1E=30), size=2
     0030 2100                      1-  574     	MOVIA	0x00
     0031 04rr                      1-  575     	SUBAR	(_sleepCount + 1),W
     0032 0903                      1-  576     	BTRSS	STATUS,2
     0033 3rrr                      1-  577     	LGOTO	_00225_DS_
     0034 211E                      1-  578     	MOVIA	0x1e
     0035 04rr                      1-  579     	SUBAR	_sleepCount,W
     0036                           1-  580     _00225_DS_:
     0036 0803                      1-  581     	BTRSS	STATUS,0
     0037 3rrr                      1-  582     	LGOTO	_00187_DS_
                                    1-  583     	.line	244, "main.c"; 	gotoSleep();
     0038 2rrr                      1-  584     	LCALL	_gotoSleep
     0039                           1-  585     _00187_DS_:
                                    1-  586     	.line	246, "main.c"; 	if(lowTime > 0)
     0039 01rr                      1-  587     	MOVR	_lowTime,W
     003A 0D03                      1-  588     	BTRSC	STATUS,2
     003B 3rrr                      1-  589     	LGOTO	_00190_DS_
                                    1-  590     	.line	248, "main.c"; 	--lowTime;
     003C 06rr                      1-  591     	DECR	_lowTime,F
     003D 3rrr                      1-  592     	LGOTO	_00193_DS_
     003E                           1-  593     _00190_DS_:
                                    1-  594     	.line	252, "main.c"; 	setHight();
     003E 2rrr                      1-  595     	LCALL	_setHight
     003F 3rrr                      1-  596     	LGOTO	_00193_DS_
                                    1-  597     	.line	255, "main.c"; 	}
                                    1-  598     	RETURN	
     0040 0010                      3-   26 m1      ret
                                    1-  599     ; exit point of _main
                                    1-  601     ;***
                                    1-  602     ;  pBlock Stats: dbName = C
                                    1-  603     ;***
                                    1-  604     ;3 compiler assigned registers:
                                    1-  605     ;   r0x1016
                                    1-  606     ;   STK00
                                    1-  607     ;   r0x1017
                                    1-  608     ;; Starting pCode block
                                    1-  609     .segment "code"; module=main, function=_setPWMduty
                                    1-  611     ;local variable name mapping:
     0000                           1-  614     _setPWMduty:
                                    1-  615     ; 0 exit points
                                    1-  616     	.line	259, "main.c"; 	void setPWMduty(char portPin,char duty)
     0000 00rr                      1-  617     	MOVAR	r0x1016
     0001 01rr                      1-  618     	MOVR	STK00,W
     0002 00rr                      1-  619     	MOVAR	r0x1017
                                    1-  620     	.line	261, "main.c"; 	if(ledCount <= duty)
     0003 01rr                      1-  621     	MOVR	_ledCount,W
     0004 04rr                      1-  622     	SUBAR	r0x1017,W
     0005 0803                      1-  623     	BTRSS	STATUS,0
     0006 3rrr                      1-  624     	LGOTO	_00231_DS_
                                    1-  625     	.line	262, "main.c"; 	PORTB &= (~portPin);
     0007 07rr                      1-  626     	COMR	r0x1016,W
     0008 00rr                      1-  627     	MOVAR	r0x1017
     0009 10rr                      1-  628     	ANDAR	_PORTB,F
     000A 3rrr                      1-  629     	LGOTO	_00232_DS_
     000B                           1-  630     _00231_DS_:
                                    1-  631     	.line	264, "main.c"; 	PORTB |= portPin;
     000B 01rr                      1-  632     	MOVR	r0x1016,W
     000C 11rr                      1-  633     	IORAR	_PORTB,F
     000D                           1-  634     _00232_DS_:
                                    1-  635     	.line	265, "main.c"; 	if(ledCount == 100)
     000D 01rr                      1-  636     	MOVR	_ledCount,W
     000E 2464                      1-  637     	XORIA	0x64
     000F 0D03                      1-  638     	BTRSC	STATUS,2
                                    1-  639     	.line	266, "main.c"; 	ledCount = 0;
     0010 02rr                      1-  640     	CLRR	_ledCount
                                    1-  641     	.line	267, "main.c"; 	}
                                    1-  642     	RETURN	
     0011 0010                      3-   26 m1      ret
                                    1-  644     ;***
                                    1-  645     ;  pBlock Stats: dbName = C
                                    1-  646     ;***
                                    1-  647     ;has an exit
                                    1-  648     ;functions called:
                                    1-  649     ;   _setHight
                                    1-  650     ;   _setHight
                                    1-  651     ;; Starting pCode block
                                    1-  652     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  654     _gotoSleep:
                                    1-  655     ; 2 exit points
                                    1-  656     	.line	178, "main.c"; 	setHight();
     0000 2rrr                      1-  657     	LCALL	_setHight
                                    1-  658     	.line	179, "main.c"; 	sleepCount = 0;
     0001 02rr                      1-  659     	CLRR	_sleepCount
     0002 02rr                      1-  660     	CLRR	(_sleepCount + 1)
                                    1-  661     	.line	180, "main.c"; 	BWUCON = 0x01;
     0003 2101                      1-  662     	MOVIA	0x01
     0004 00rr                      1-  663     	MOVAR	_BWUCON
                                    1-  664     	.line	181, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;
     0005 210B                      1-  665     	MOVIA	0x0b
     0006 00rr                      1-  666     	MOVAR	_INTE
                                    1-  667     	.line	182, "main.c"; 	PCON =  C_LVR_En;	
     0007 2108                      1-  668     	MOVIA	0x08
     0008 00rr                      1-  669     	MOVAR	_PCON
                                    1-  670     	.line	183, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0009 02rr                      1-  671     	CLRR	_INTF
                                    1-  672     	.line	184, "main.c"; 	CLRWDT();
     000A 0002                      1-  673     	clrwdt
                                    1-  674     	.line	185, "main.c"; 	SLEEP();
     000B 0001                      1-  675     	sleep
                                    1-  676     	.line	186, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PBKey;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 210B                      1-  677     	MOVIA	0x0b
     000D 00rr                      1-  678     	MOVAR	_INTE
                                    1-  679     	.line	187, "main.c"; 	INTF = 0;
     000E 02rr                      1-  680     	CLRR	_INTF
                                    1-  681     	.line	189, "main.c"; 	PCON = C_WDT_En;				// Enable WDT ,  Enable LVR
     000F 2180                      1-  682     	MOVIA	0x80
     0010 00rr                      1-  683     	MOVAR	_PCON
                                    1-  684     	.line	190, "main.c"; 	sleepFlag = 0;
     0011 02rr                      1-  685     	CLRR	_sleepFlag
                                    1-  686     	.line	191, "main.c"; 	bitIndex = 0;
     0012 02rr                      1-  687     	CLRR	_bitIndex
                                    1-  688     	.line	192, "main.c"; 	value = 0;
     0013 02rr                      1-  689     	CLRR	_value
                                    1-  690     	.line	193, "main.c"; 	irtime = 0;
     0014 02rr                      1-  691     	CLRR	_irtime
                                    1-  692     	.line	194, "main.c"; 	}
                                    1-  693     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  694     ; exit point of _gotoSleep
                                    1-  696     ;***
                                    1-  697     ;  pBlock Stats: dbName = C
                                    1-  698     ;***
                                    1-  699     ;has an exit
                                    1-  700     ;; Starting pCode block
                                    1-  701     .segment "code"; module=main, function=_setHight
     0000                           1-  703     _setHight:
                                    1-  704     ; 2 exit points
                                    1-  705     	.line	169, "main.c"; 	IOSTB =   C_PB0_Input | C_PB3_Input | C_PB4_Input;
     0000 2119                      1-  706     	MOVIA	0x19
     0001 000r                      1-  707     	IOST	_IOSTB
                                    1-  708     	.line	170, "main.c"; 	BPHCON = C_PB4_PHB;
     0002 2110                      1-  709     	MOVIA	0x10
     0003 00rr                      1-  710     	MOVAR	_BPHCON
                                    1-  711     	.line	171, "main.c"; 	PORTB |= 0x10;
     0004 1Arr                      1-  712     	BSR	_PORTB,4
                                    1-  713     	.line	172, "main.c"; 	sleepFlag = 1;
     0005 2101                      1-  714     	MOVIA	0x01
     0006 00rr                      1-  715     	MOVAR	_sleepFlag
                                    1-  716     	.line	173, "main.c"; 	}
                                    1-  717     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  718     ; exit point of _setHight
                                    1-  720     ;***
                                    1-  721     ;  pBlock Stats: dbName = C
                                    1-  722     ;***
                                    1-  723     ;has an exit
                                    1-  724     ;; Starting pCode block
                                    1-  725     .segment "code"; module=main, function=_setLow
     0000                           1-  727     _setLow:
                                    1-  728     ; 2 exit points
                                    1-  729     	.line	160, "main.c"; 	lowTime = 10;
     0000 210A                      1-  730     	MOVIA	0x0a
     0001 00rr                      1-  731     	MOVAR	_lowTime
                                    1-  732     	.line	161, "main.c"; 	IOSTB =   C_PB0_Input | C_PB3_Input;
     0002 2109                      1-  733     	MOVIA	0x09
     0003 000r                      1-  734     	IOST	_IOSTB
                                    1-  735     	.line	162, "main.c"; 	BPHCON = 0x00;
     0004 02rr                      1-  736     	CLRR	_BPHCON
                                    1-  737     	.line	163, "main.c"; 	PORTB &= 0xEF;
     0005 1Err                      1-  738     	BCR	_PORTB,4
                                    1-  739     	.line	165, "main.c"; 	}
                                    1-  740     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  741     ; exit point of _setLow
                                    1-  743     ;***
                                    1-  744     ;  pBlock Stats: dbName = C
                                    1-  745     ;***
                                    1-  746     ;has an exit
                                    1-  747     ;functions called:
                                    1-  748     ;   _setLow
                                    1-  749     ;   _setLow
                                    1-  750     ;; Starting pCode block
                                    1-  751     .segment "code"; module=main, function=_irwork
     0000                           1-  753     _irwork:
                                    1-  754     ; 2 exit points
                                    1-  755     	.line	141, "main.c"; 	switch(irCode)
     0000 01rr                      1-  756     	MOVR	_irCode,W
     0001 2415                      1-  757     	XORIA	0x15
     0002 0D03                      1-  758     	BTRSC	STATUS,2
     0003 3rrr                      1-  759     	LGOTO	_00143_DS_
     0004 01rr                      1-  760     	MOVR	_irCode,W
     0005 2445                      1-  761     	XORIA	0x45
     0006 0D03                      1-  762     	BTRSC	STATUS,2
     0007 3rrr                      1-  763     	LGOTO	_00145_DS_
     0008 01rr                      1-  764     	MOVR	_irCode,W
     0009 2446                      1-  765     	XORIA	0x46
     000A 0D03                      1-  766     	BTRSC	STATUS,2
     000B 3rrr                      1-  767     	LGOTO	_00144_DS_
     000C 3rrr                      1-  768     	LGOTO	_00146_DS_
     000D                           1-  769     _00143_DS_:
                                    1-  770     	.line	144, "main.c"; 	PORTB |= 0x02;
     000D 18rr                      1-  771     	BSR	_PORTB,1
                                    1-  772     	.line	145, "main.c"; 	break;
     000E 3rrr                      1-  773     	LGOTO	_00146_DS_
     000F                           1-  774     _00144_DS_:
                                    1-  775     	.line	147, "main.c"; 	PORTB &= 0xFD;
     000F 1Crr                      1-  776     	BCR	_PORTB,1
                                    1-  777     	.line	148, "main.c"; 	sleepFlag = 1;
     0010 2101                      1-  778     	MOVIA	0x01
     0011 00rr                      1-  779     	MOVAR	_sleepFlag
                                    1-  780     	.line	149, "main.c"; 	break;
     0012 3rrr                      1-  781     	LGOTO	_00146_DS_
     0013                           1-  782     _00145_DS_:
                                    1-  783     	.line	151, "main.c"; 	setLow();
     0013 2rrr                      1-  784     	LCALL	_setLow
     0014                           1-  785     _00146_DS_:
                                    1-  786     	.line	154, "main.c"; 	irprosok = 0;
     0014 02rr                      1-  787     	CLRR	_irprosok
                                    1-  788     	.line	156, "main.c"; 	}
                                    1-  789     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  790     ; exit point of _irwork
                                    1-  792     ;***
                                    1-  793     ;  pBlock Stats: dbName = C
                                    1-  794     ;***
                                    1-  795     ;has an exit
                                    1-  796     ;; Starting pCode block
                                    1-  797     .segment "code"; module=main, function=_irpros
     0000                           1-  799     _irpros:
                                    1-  800     ; 2 exit points
                                    1-  801     	.line	132, "main.c"; 	irCode = data3;
     0000 01rr                      1-  802     	MOVR	_data3,W
     0001 00rr                      1-  803     	MOVAR	_irCode
                                    1-  804     	.line	133, "main.c"; 	irCode2 = data4;
     0002 01rr                      1-  805     	MOVR	_data4,W
     0003 00rr                      1-  806     	MOVAR	_irCode2
                                    1-  807     	.line	134, "main.c"; 	irreceok=0;
     0004 02rr                      1-  808     	CLRR	_irreceok
                                    1-  809     	.line	135, "main.c"; 	irprosok = 1;
     0005 2101                      1-  810     	MOVIA	0x01
     0006 00rr                      1-  811     	MOVAR	_irprosok
                                    1-  812     	.line	136, "main.c"; 	}
                                    1-  813     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1-  814     ; exit point of _irpros
                                    1-  817     ;	code size estimation:
                                    1-  818     ;	  260+    0 =   260 instructions (  520 byte)
                                    1-  820     	end
                                    1-  820     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000016
_00112_DS_              Label    00000022
_00114_DS_              Label    0000002F
_00120_DS_              Label    0000004C
_00123_DS_              Label    00000045
_00126_DS_              Label    0000003E
_00127_DS_              Label    00000052
_00131_DS_              Label    0000005B
_00132_DS_              Label    00000062
_00134_DS_              Label    00000064
_00143_DS_              Label    0000000D
_00144_DS_              Label    0000000F
_00145_DS_              Label    00000013
_00146_DS_              Label    00000014
_00184_DS_              Label    0000002A
_00187_DS_              Label    00000039
_00190_DS_              Label    0000003E
_00193_DS_              Label    00000017
_00225_DS_              Label    00000036
_00231_DS_              Label    0000000B
_00232_DS_              Label    0000000D
_BDUTY                  Label    00000000
_bitIndex               Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_count                  Label    00000000
_data1                  Label    00000000
_data2                  Label    00000000
_data3                  Label    00000000
_data4                  Label    00000000
_FSR                    Label    00000000
_GDUTY                  Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_irCode                 Label    00000000
_irCode2                Label    00000000
_IRCR                   Label    00000000
_irpros                 Label    00000000
_irprosok               Label    00000000
_irreceok               Label    00000000
_irtime                 Label    00000000
_irwork                 Label    00000000
_isr                    Label    00000000
_ledCount               Label    00000000
_ledFlag                Label    00000000
_lowTime                Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_RDUTY                  Label    00000000
_setHight               Label    00000000
_setLow                 Label    00000000
_setPWMduty             Label    00000000
_sleepCount             Label    00000000
_sleepFlag              Label    00000000
_startflag              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_value                  Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000072
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1016                 Label    00000000
r0x1017                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    0000000F
STK01                   Label    0000000E
STK02                   Label    0000000D
STK03                   Label    0000000C
STK04                   Label    0000000B
STK05                   Label    0000000A
STK06                   Label    00000009
STK07                   Label    00000008
STK08                   Label    00000007
STK09                   Label    00000006
STK10                   Label    00000005
STK11                   Label    00000004
STK12                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
