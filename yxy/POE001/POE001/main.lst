
                    Nyquest Technology Co., Ltd.

NYASM 2.26

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_ADMDbits
                                    1-   23     	extern	_ADRbits
                                    1-   24     	extern	_ADVREFHbits
                                    1-   25     	extern	_ADCRbits
                                    1-   26     	extern	_AWUCONbits
                                    1-   27     	extern	_PACONbits
                                    1-   28     	extern	_INTEDGbits
                                    1-   29     	extern	_ANAENbits
                                    1-   30     	extern	_RFCbits
                                    1-   31     	extern	_INTE2bits
                                    1-   32     	extern	_INDF
                                    1-   33     	extern	_TMR0
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_STATUS
                                    1-   36     	extern	_FSR
                                    1-   37     	extern	_PORTA
                                    1-   38     	extern	_PORTB
                                    1-   39     	extern	_PCON
                                    1-   40     	extern	_BWUCON
                                    1-   41     	extern	_PCHBUF
                                    1-   42     	extern	_ABPLCON
                                    1-   43     	extern	_BPHCON
                                    1-   44     	extern	_INTE
                                    1-   45     	extern	_INTF
                                    1-   46     	extern	_ADMD
                                    1-   47     	extern	_ADR
                                    1-   48     	extern	_ADD
                                    1-   49     	extern	_ADVREFH
                                    1-   50     	extern	_ADCR
                                    1-   51     	extern	_AWUCON
                                    1-   52     	extern	_PACON
                                    1-   53     	extern	_INTEDG
                                    1-   54     	extern	_TMRH
                                    1-   55     	extern	_ANAEN
                                    1-   56     	extern	_RFC
                                    1-   57     	extern	_TM3RH
                                    1-   58     	extern	_INTE2
                                    1-   59     	extern	_TMR1
                                    1-   60     	extern	_T1CR1
                                    1-   61     	extern	_T1CR2
                                    1-   62     	extern	_PWM1DUTY
                                    1-   63     	extern	_PS1CV
                                    1-   64     	extern	_BZ1CR
                                    1-   65     	extern	_IRCR
                                    1-   66     	extern	_TBHP
                                    1-   67     	extern	_TBHD
                                    1-   68     	extern	_TMR2
                                    1-   69     	extern	_T2CR1
                                    1-   70     	extern	_T2CR2
                                    1-   71     	extern	_PWM2DUTY
                                    1-   72     	extern	_PS2CV
                                    1-   73     	extern	_BZ2CR
                                    1-   74     	extern	_OSCCR
                                    1-   75     	extern	_TMR3
                                    1-   76     	extern	_T3CR1
                                    1-   77     	extern	_T3CR2
                                    1-   78     	extern	_PWM3DUTY
                                    1-   79     	extern	_PS3CV
                                    1-   80     	extern	_BZ3CR
                                    1-   81     	extern	_IOSTA
                                    1-   82     	extern	_IOSTB
                                    1-   83     	extern	_APHCON
                                    1-   84     	extern	_PS0CV
                                    1-   85     	extern	_BODCON
                                    1-   86     	extern	_CMPCR
                                    1-   87     	extern	_PCON1
                                    1-   88     	extern	_T0MD
                                    1-   89     	extern	___sdcc_saved_fsr
                                    1-   90     	extern	___sdcc_saved_stk00
                                    1-   91     	extern	___sdcc_saved_stk01
                                    1-   92     	extern	__nyc_ny8_startup
                                    1-   93     ;--------------------------------------------------------
                                    1-   94     ; global declarations
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     	extern	_closeStatus
                                    1-   97     	extern	_keyRead
                                    1-   98     	extern	_delay
                                    1-   99     	extern	_F_wait_eoc
                                    1-  100     	extern	_gotoSleep
                                    1-  101     	extern	_F_AIN4_Convert
                                    1-  102     	extern	_F_AIN2_Convert
                                    1-  103     	extern	_F_AIN1_Convert
                                    1-  104     	extern	_checkBat
                                    1-  105     	extern	_checkInV
                                    1-  106     	extern	_initAD
                                    1-  107     	extern	_keyCtr
                                    1-  108     	extern	_workCtr
                                    1-  109     	extern	_chrgWork
                                    1-  110     	extern	_isr
                                    1-  111     	extern	_main
                                    1-  112     	extern	_debug
                                    1-  113     	extern	_intCount
                                    1-  114     	extern	_IntFlag
                                    1-  115     	extern	_sleepDelay
                                    1-  116     	extern	_workStep
                                    1-  117     	extern	_longPressFlag
                                    1-  118     	extern	_keyCount
                                    1-  119     	extern	_keyClick
                                    1-  120     	extern	_chrgStatus
                                    1-  121     	extern	_batStatus
                                    1-  122     	extern	_workStatus
                                    1-  123     	extern	_inLowTime
                                    1-  124     	extern	_R_AIN1_DATA
                                    1-  125     	extern	_R_AIN1_DATA_LB
                                    1-  126     	extern	_R_AIN2_DATA
                                    1-  127     	extern	_R_AIN2_DATA_LB
                                    1-  128     	extern	_R_AIN4_DATA
                                    1-  129     	extern	_R_AIN4_DATA_LB
                                    1-  130     	extern	_overTime
                                    1-  131     	extern	_shandeng
                                    1-  132     	extern	_count500ms
                                    1-  133     	extern	_firstLow
                                    1-  134     	extern	_firstLowTime
                                    1-  136     	extern PSAVE
                                    1-  137     	extern SSAVE
                                    1-  138     	extern WSAVE
                                    1-  139     	extern STK02
                                    1-  140     	extern STK01
                                    1-  141     	extern STK00
                                    1-  143     .segment "uninit", 0x20000040
 20000040                           1-  144     PSAVE:
                                    1-  145     	.res 1
 20000041                           1-  146     SSAVE:
                                    1-  147     	.res 1
 20000042                           1-  148     WSAVE:
                                    1-  149     	.res 1
 20000043                           1-  150     STK02:
                                    1-  151     	.res 1
 20000044                           1-  152     STK01:
                                    1-  153     	.res 1
 20000045                           1-  154     STK00:
                                    1-  155     	.res 1
                                    1-  157     ;--------------------------------------------------------
                                    1-  158     ; global definitions
                                    1-  159     ;--------------------------------------------------------
                                    1-  160     ;--------------------------------------------------------
                                    1-  161     ; absolute symbol definitions
                                    1-  162     ;--------------------------------------------------------
                                    1-  163     ;--------------------------------------------------------
                                    1-  164     ; compiler-defined variables
                                    1-  165     ;--------------------------------------------------------
                                    1-  166     .segment "uninit"
     0000                           1-  167     r0x103B:
                                    1-  168     	.res	1
                                    1-  169     .segment "uninit"
     0000                           1-  170     r0x103A:
                                    1-  171     	.res	1
                                    1-  172     .segment "uninit"
     0000                           1-  173     r0x1038:
                                    1-  174     	.res	1
                                    1-  175     .segment "uninit"
     0000                           1-  176     r0x1039:
                                    1-  177     	.res	1
                                    1-  178     .segment "uninit"
     0000                           1-  179     r0x1034:
                                    1-  180     	.res	1
                                    1-  181     .segment "uninit"
     0000                           1-  182     r0x1035:
                                    1-  183     	.res	1
                                    1-  184     .segment "uninit"
     0000                           1-  185     r0x102C:
                                    1-  186     	.res	1
                                    1-  187     .segment "uninit"
     0000                           1-  188     r0x102D:
                                    1-  189     	.res	1
                                    1-  190     .segment "uninit"
     0000                           1-  191     r0x102E:
                                    1-  192     	.res	1
                                    1-  193     .segment "uninit"
     0000                           1-  194     r0x1031:
                                    1-  195     	.res	1
                                    1-  196     .segment "uninit"
     0000                           1-  197     r0x1026:
                                    1-  198     	.res	1
                                    1-  199     .segment "uninit"
     0000                           1-  200     r0x1027:
                                    1-  201     	.res	1
                                    1-  202     .segment "uninit"
     0000                           1-  203     r0x1028:
                                    1-  204     	.res	1
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x102B:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x1020:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x1021:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x1022:
                                    1-  216     	.res	1
                                    1-  217     .segment "uninit"
     0000                           1-  218     r0x1025:
                                    1-  219     	.res	1
                                    1-  220     .segment "uninit"
     0000                           1-  221     r0x101D:
                                    1-  222     	.res	1
                                    1-  223     .segment "uninit"
     0000                           1-  224     r0x101C:
                                    1-  225     	.res	1
                                    1-  226     .segment "uninit"
     0000                           1-  227     r0x101E:
                                    1-  228     	.res	1
                                    1-  229     .segment "uninit"
     0000                           1-  230     r0x101F:
                                    1-  231     	.res	1
                                    1-  232     .segment "uninit"
     0000                           1-  233     r0x101B:
                                    1-  234     	.res	1
                                    1-  235     ;--------------------------------------------------------
                                    1-  236     ; initialized data
                                    1-  237     ;--------------------------------------------------------
                                    1-  239     .segment "idata"
     0000                           1-  240     _debug:
     0000 0000                      1-  241     	dw	0x00
                                    1-  245     .segment "idata"
     0000                           1-  246     _intCount:
     0000 0000                      1-  247     	dw	0x00
                                    1-  251     .segment "idata"
     0000                           1-  252     _IntFlag:
     0000 0000                      1-  253     	dw	0x00
                                    1-  257     .segment "idata"
     0000                           1-  258     _sleepDelay:
     0000 0000                      1-  259     	dw	0x00
                                    1-  263     .segment "idata"
     0000                           1-  264     _workStep:
     0000 0000                      1-  265     	dw	0x00
                                    1-  269     .segment "idata"
     0000                           1-  270     _longPressFlag:
     0000 0000                      1-  271     	dw	0x00
                                    1-  275     .segment "idata"
     0000                           1-  276     _keyCount:
     0000 0000                      1-  277     	dw	0x00
                                    1-  281     .segment "idata"
     0000                           1-  282     _keyClick:
     0000 0000                      1-  283     	dw	0x00
                                    1-  287     .segment "idata"
     0000                           1-  288     _chrgStatus:
     0000 0000                      1-  289     	dw	0x00
                                    1-  293     .segment "idata"
     0000                           1-  294     _batStatus:
     0000 0000                      1-  295     	dw	0x00
                                    1-  299     .segment "idata"
     0000                           1-  300     _workStatus:
     0000 0000                      1-  301     	dw	0x00
                                    1-  305     .segment "idata"
     0000                           1-  306     _inLowTime:
     0000 0000                      1-  307     	dw	0x00
                                    1-  311     .segment "idata"
     0000                           1-  312     _R_AIN1_DATA:
     0000 0000 0000                 1-  313     	dw	0x00, 0x00
                                    1-  317     .segment "idata"
     0000                           1-  318     _R_AIN1_DATA_LB:
     0000 0000                      1-  319     	dw	0x00
                                    1-  323     .segment "idata"
     0000                           1-  324     _R_AIN2_DATA:
     0000 0000 0000                 1-  325     	dw	0x00, 0x00
                                    1-  329     .segment "idata"
     0000                           1-  330     _R_AIN2_DATA_LB:
     0000 0000                      1-  331     	dw	0x00
                                    1-  335     .segment "idata"
     0000                           1-  336     _R_AIN4_DATA:
     0000 0000 0000                 1-  337     	dw	0x00, 0x00
                                    1-  341     .segment "idata"
     0000                           1-  342     _R_AIN4_DATA_LB:
     0000 0000                      1-  343     	dw	0x00
                                    1-  347     .segment "idata"
     0000                           1-  348     _overTime:
     0000 0000                      1-  349     	dw	0x00
                                    1-  353     .segment "idata"
     0000                           1-  354     _shandeng:
     0000 0000                      1-  355     	dw	0x00
                                    1-  359     .segment "idata"
     0000                           1-  360     _count500ms:
     0000 0000                      1-  361     	dw	0x00
                                    1-  365     .segment "idata"
     0000                           1-  366     _firstLow:
     0000 0000                      1-  367     	dw	0x00
                                    1-  371     .segment "idata"
     0000                           1-  372     _firstLowTime:
     0000 0000                      1-  373     	dw	0x00
                                    1-  376     ;--------------------------------------------------------
                                    1-  377     ; overlayable items in internal ram 
                                    1-  378     ;--------------------------------------------------------
                                    1-  379     ;	udata_ovr
                                    1-  380     ;--------------------------------------------------------
                                    1-  381     ; reset vector 
                                    1-  382     ;--------------------------------------------------------
                                    1-  383     ORG	0x0000
     0000 3rrr                      1-  384     	LGOTO	__nyc_ny8_startup
                                    1-  385     ;--------------------------------------------------------
                                    1-  386     ; interrupt and initialization code
                                    1-  387     ;--------------------------------------------------------
                                    1-  388     ORG 0x0008
     0008 3rrr                      1-  389     	lgoto	__sdcc_interrupt
                                    1-  391     .segment "code"
     0000                           1-  392     __sdcc_interrupt:
                                    1-  393     ;***
                                    1-  394     ;  pBlock Stats: dbName = I
                                    1-  395     ;***
                                    1-  396     ;2 compiler assigned registers:
                                    1-  397     ;   STK00
                                    1-  398     ;   STK01
                                    1-  399     ;; Starting pCode block
     0000                           1-  400     _isr:
                                    1-  401     ; 0 exit points
                                    1-  402     	.line	69, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  403     	MOVAR	WSAVE
     0001 1503                      1-  404     	SWAPR	STATUS,W
     0002 0283                      1-  405     	CLRR	STATUS
     0003 00rr                      1-  406     	MOVAR	SSAVE
     0004 010A                      1-  407     	MOVR	PCHBUF,W
     0005 028A                      1-  408     	CLRR	PCHBUF
     0006 00rr                      1-  409     	MOVAR	PSAVE
     0007 0104                      1-  410     	MOVR	FSR,W
                                    1-  411     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  412     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  413     	MOVR	STK00,W
                                    1-  414     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  415     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  416     	MOVR	STK01,W
                                    1-  417     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  418     	MOVAR	___sdcc_saved_stk01
                                    1-  419     	.line	71, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  420     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  421     	LGOTO	_00118_DS_
                                    1-  422     	.line	73, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  423     	MOVIA	0x37
     0013 03rr                      1-  424     	ADDAR	_TMR0,F
                                    1-  425     	.line	74, "main.c"; 	intCount++;
                                    1-  426     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  427     	INCR	_intCount,F
                                    1-  428     	.line	76, "main.c"; 	if(++intCount >= 100)
     0016 05rr                      1-  429     	INCR	_intCount,F
                                    1-  430     ;;unsigned compare: left < lit (0x64=100), size=1
     0017 2164                      1-  431     	MOVIA	0x64
     0018 04rr                      1-  432     	SUBAR	_intCount,W
     0019 0803                      1-  433     	BTRSS	STATUS,0
     001A 3rrr                      1-  434     	LGOTO	_00118_DS_
                                    1-  435     	.line	78, "main.c"; 	intCount = 0;
     001B 02rr                      1-  436     	CLRR	_intCount
                                    1-  437     	.line	79, "main.c"; 	IntFlag = 1;
     001C 2101                      1-  438     	MOVIA	0x01
                                    1-  439     	BANKSEL	_IntFlag
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1-  440     	MOVAR	_IntFlag
                                    1-  441     	.line	80, "main.c"; 	if(++count500ms >= 50)
                                    1-  442     	BANKSEL	_count500ms
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 05rr                      1-  443     	INCR	_count500ms,F
                                    1-  444     ;;unsigned compare: left < lit (0x32=50), size=1
     0021 2132                      1-  445     	MOVIA	0x32
     0022 04rr                      1-  446     	SUBAR	_count500ms,W
     0023 0803                      1-  447     	BTRSS	STATUS,0
     0024 3rrr                      1-  448     	LGOTO	_00118_DS_
                                    1-  449     	.line	82, "main.c"; 	count500ms = 0;
     0025 02rr                      1-  450     	CLRR	_count500ms
                                    1-  451     	.line	83, "main.c"; 	if(shandeng > 0)
                                    1-  452     	BANKSEL	_shandeng
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  453     	MOVR	_shandeng,W
     0028 0D03                      1-  454     	BTRSC	STATUS,2
     0029 3rrr                      1-  455     	LGOTO	_00111_DS_
                                    1-  456     	.line	85, "main.c"; 	if(shandeng % 2 == 0)
     002A 0Crr                      1-  457     	BTRSC	_shandeng,0
     002B 3rrr                      1-  458     	LGOTO	_00106_DS_
                                    1-  459     	.line	86, "main.c"; 	LED4ON();
     002C 1Crr                      1-  460     	BCR	_PORTB,1
     002D 3rrr                      1-  461     	LGOTO	_00107_DS_
     002E                           1-  462     _00106_DS_:
                                    1-  463     	.line	88, "main.c"; 	LED4OFF();
     002E 18rr                      1-  464     	BSR	_PORTB,1
     002F                           1-  465     _00107_DS_:
                                    1-  466     	.line	89, "main.c"; 	shandeng--;
                                    1-  467     	BANKSEL	_shandeng
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 06rr                      1-  468     	DECR	_shandeng,F
     0031 3rrr                      1-  469     	LGOTO	_00118_DS_
     0032                           1-  470     _00111_DS_:
                                    1-  471     	.line	91, "main.c"; 	else if(batStatus != 1)
                                    1-  472     	BANKSEL	_batStatus
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1-  473     	MOVR	_batStatus,W
     0034 2401                      1-  474     	XORIA	0x01
     0035 0903                      1-  475     	BTRSS	STATUS,2
                                    1-  476     	.line	93, "main.c"; 	LED4OFF();
     0036 18rr                      1-  477     	BSR	_PORTB,1
     0037                           1-  478     _00118_DS_:
                                    1-  479     	.line	100, "main.c"; 	if(INTFbits.PABIF)
     0037 08rr                      1-  480     	BTRSS	_INTFbits,1
     0038 3rrr                      1-  481     	LGOTO	_00120_DS_
                                    1-  482     	.line	102, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0039 21FD                      1-  483     	MOVIA	0xfd
     003A 00rr                      1-  484     	MOVAR	_INTF
     003B                           1-  485     _00120_DS_:
                                    1-  486     	.line	105, "main.c"; 	INTF = 0;
     003B 02rr                      1-  487     	CLRR	_INTF
                                    1-  488     	.line	107, "main.c"; 	}
                                    1-  489     	BANKSEL	___sdcc_saved_stk01
     003C rrrr                      3-   71 m1      .banksel ram_address
     003D 01rr                      1-  490     	MOVR	___sdcc_saved_stk01,W
     003E 00rr                      1-  491     	MOVAR	STK01
                                    1-  492     	BANKSEL	___sdcc_saved_stk00
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 01rr                      1-  493     	MOVR	___sdcc_saved_stk00,W
     0041 00rr                      1-  494     	MOVAR	STK00
                                    1-  495     	BANKSEL	___sdcc_saved_fsr
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 01rr                      1-  496     	MOVR	___sdcc_saved_fsr,W
     0044 0084                      1-  497     	MOVAR	FSR
     0045 01rr                      1-  498     	MOVR	PSAVE,W
     0046 008A                      1-  499     	MOVAR	PCHBUF
     0047 0283                      1-  500     	CLRR	STATUS
     0048 15rr                      1-  501     	SWAPR	SSAVE,W
     0049 0083                      1-  502     	MOVAR	STATUS
     004A 15rr                      1-  503     	SWAPR	WSAVE,F
     004B 15rr                      1-  504     	SWAPR	WSAVE,W
     004C                           1-  505     END_OF_INTERRUPT:
     004C 0011                      1-  506     	RETIE	
                                    1-  508     ;--------------------------------------------------------
                                    1-  509     ; code
                                    1-  510     ;--------------------------------------------------------
                                    1-  511     ;***
                                    1-  512     ;  pBlock Stats: dbName = M
                                    1-  513     ;***
                                    1-  514     ;has an exit
                                    1-  515     ;functions called:
                                    1-  516     ;   _closeStatus
                                    1-  517     ;   _initAD
                                    1-  518     ;   _keyCtr
                                    1-  519     ;   _chrgWork
                                    1-  520     ;   _workCtr
                                    1-  521     ;   _closeStatus
                                    1-  522     ;   _gotoSleep
                                    1-  523     ;   _closeStatus
                                    1-  524     ;   _initAD
                                    1-  525     ;   _keyCtr
                                    1-  526     ;   _chrgWork
                                    1-  527     ;   _workCtr
                                    1-  528     ;   _closeStatus
                                    1-  529     ;   _gotoSleep
                                    1-  530     ;1 compiler assigned register :
                                    1-  531     ;   r0x103B
                                    1-  532     ;; Starting pCode block
                                    1-  533     .segment "code"; module=main, function=_main
     0000                           1-  535     _main:
                                    1-  536     ; 2 exit points
                                    1-  537     	.line	111, "main.c"; 	DISI();
     0000 0013                      1-  538     	DISI
                                    1-  539     	.line	112, "main.c"; 	IOSTA = C_PA1_Input | C_PA2_Input | C_PA3_Input | C_PA4_Input | C_PA5_Input;
     0001 213E                      1-  540     	MOVIA	0x3e
     0002 000r                      1-  541     	IOST	_IOSTA
                                    1-  542     	.line	113, "main.c"; 	IOSTB = C_PB0_Input;
     0003 2101                      1-  543     	MOVIA	0x01
     0004 000r                      1-  544     	IOST	_IOSTB
                                    1-  545     	.line	114, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  546     	CLRR	_PORTB
                                    1-  547     	.line	115, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  548     	CLRR	_PORTA
                                    1-  549     	.line	116, "main.c"; 	APHCON = 0xDF;
     0007 21DF                      1-  550     	MOVIA	0xdf
     0008 000r                      1-  551     	IOST	_APHCON
                                    1-  552     	.line	117, "main.c"; 	BPHCON = 0xFE;
     0009 21FE                      1-  553     	MOVIA	0xfe
     000A 00rr                      1-  554     	MOVAR	_BPHCON
                                    1-  555     	.line	118, "main.c"; 	ABPLCON = 0xFF;
     000B 21FF                      1-  556     	MOVIA	0xff
     000C 00rr                      1-  557     	MOVAR	_ABPLCON
                                    1-  558     	.line	120, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1-  559     	MOVIA	0x01
     000E 00rr                      1-  560     	MOVAR	_INTE
                                    1-  561     	.line	122, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1-  562     	CLRA	
     0010 000r                      1-  563     	IOST	_PCON1
                                    1-  564     	.line	124, "main.c"; 	TMR0 = 55;
     0011 2137                      1-  565     	MOVIA	0x37
     0012 00rr                      1-  566     	MOVAR	_TMR0
                                    1-  567     	.line	125, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1-  568     	CLRA	
     0014 0003                      1-  569     	T0MD	
                                    1-  570     	.line	127, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1-  571     	MOVIA	0x01
     0016 000r                      1-  572     	IOST	_PCON1
                                    1-  573     	.line	129, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR,PA5关闭上拉
     0017 2198                      1-  574     	MOVIA	0x98
     0018 00rr                      1-  575     	MOVAR	_PCON
                                    1-  576     	.line	131, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0019 2101                      1-  577     	MOVIA	0x01
     001A 000r                      1-  578     	IOST	_PCON1
                                    1-  579     	.line	132, "main.c"; 	ENI();
     001B 0004                      1-  580     	ENI
                                    1-  581     	.line	133, "main.c"; 	closeStatus();
     001C 2rrr                      1-  582     	LCALL	_closeStatus
                                    1-  583     	.line	134, "main.c"; 	initAD();
     001D 2rrr                      1-  584     	LCALL	_initAD
     001E                           1-  585     _00188_DS_:
                                    1-  586     	.line	139, "main.c"; 	CLRWDT();
     001E 0002                      1-  587     	clrwdt
                                    1-  588     	.line	140, "main.c"; 	if(PORTA & 0x20)
     001F 0Arr                      1-  589     	BTRSS	_PORTA,5
     0020 3rrr                      1-  590     	LGOTO	_00174_DS_
                                    1-  591     ;;unsigned compare: left < lit (0x2=2), size=1
                                    1-  592     	.line	143, "main.c"; 	if(chrgStatus < 2)
     0021 2102                      1-  593     	MOVIA	0x02
                                    1-  594     	BANKSEL	_chrgStatus
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 04rr                      1-  595     	SUBAR	_chrgStatus,W
                                    1-  596     	BANKSEL	r0x103B
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 02rr                      1-  597     	CLRR	r0x103B
     0026 0803                      1-  598     	BTRSS	STATUS,0
     0027 18rr                      1-  599     	BSR	r0x103B,0
     0028 01rr                      1-  600     	MOVR	r0x103B,W
     0029 0D03                      1-  601     	BTRSC	STATUS,2
     002A 3rrr                      1-  602     	LGOTO	_00161_DS_
                                    1-  603     	.line	145, "main.c"; 	LED2OFF();
     002B 1Frr                      1-  604     	BCR	_PORTA,7
                                    1-  605     	.line	146, "main.c"; 	if(chrgStatus == 1)
                                    1-  606     	BANKSEL	_chrgStatus
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 01rr                      1-  607     	MOVR	_chrgStatus,W
     002E 2401                      1-  608     	XORIA	0x01
     002F 0D03                      1-  609     	BTRSC	STATUS,2
                                    1-  610     	.line	147, "main.c"; 	LED4OFF();
     0030 18rr                      1-  611     	BSR	_PORTB,1
                                    1-  612     	.line	148, "main.c"; 	if(batStatus == 0 || batStatus == 2 || (batStatus == 3 && shandeng == 0))
                                    1-  613     	BANKSEL	_batStatus
     0031 rrrr                      3-   71 m1      .banksel ram_address
     0032 01rr                      1-  614     	MOVR	_batStatus,W
     0033 0D03                      1-  615     	BTRSC	STATUS,2
     0034 3rrr                      1-  616     	LGOTO	_00153_DS_
     0035 01rr                      1-  617     	MOVR	_batStatus,W
     0036 2402                      1-  618     	XORIA	0x02
     0037 0D03                      1-  619     	BTRSC	STATUS,2
     0038 3rrr                      1-  620     	LGOTO	_00153_DS_
     0039 01rr                      1-  621     	MOVR	_batStatus,W
     003A 2403                      1-  622     	XORIA	0x03
     003B 0903                      1-  623     	BTRSS	STATUS,2
     003C 3rrr                      1-  624     	LGOTO	_00162_DS_
                                    1-  625     	BANKSEL	_shandeng
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1-  626     	MOVR	_shandeng,W
     003F 0903                      1-  627     	BTRSS	STATUS,2
     0040 3rrr                      1-  628     	LGOTO	_00162_DS_
     0041                           1-  629     _00153_DS_:
                                    1-  630     	.line	149, "main.c"; 	LED4OFF();
     0041 18rr                      1-  631     	BSR	_PORTB,1
     0042 3rrr                      1-  632     	LGOTO	_00162_DS_
     0043                           1-  633     _00161_DS_:
                                    1-  634     	.line	153, "main.c"; 	LED3OFF();
     0043 1Frr                      1-  635     	BCR	_PORTA,6
                                    1-  636     	.line	154, "main.c"; 	if(batStatus == 3)
                                    1-  637     	BANKSEL	_batStatus
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 01rr                      1-  638     	MOVR	_batStatus,W
     0046 2403                      1-  639     	XORIA	0x03
     0047 0D03                      1-  640     	BTRSC	STATUS,2
                                    1-  641     	.line	155, "main.c"; 	LED2OFF();
     0048 1Frr                      1-  642     	BCR	_PORTA,7
     0049                           1-  643     _00162_DS_:
                                    1-  644     	.line	157, "main.c"; 	if(chrgStatus == 0)
                                    1-  645     	BANKSEL	_chrgStatus
     0049 rrrr                      3-   71 m1      .banksel ram_address
     004A 01rr                      1-  646     	MOVR	_chrgStatus,W
     004B 0D03                      1-  647     	BTRSC	STATUS,2
                                    1-  648     	.line	159, "main.c"; 	CHRGON();
     004C 19rr                      1-  649     	BSR	_PORTB,2
                                    1-  650     	.line	161, "main.c"; 	if(workStatus == 1  && chrgStatus < 2)
                                    1-  651     	BANKSEL	_workStatus
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 01rr                      1-  652     	MOVR	_workStatus,W
     004F 2401                      1-  653     	XORIA	0x01
     0050 0903                      1-  654     	BTRSS	STATUS,2
     0051 3rrr                      1-  655     	LGOTO	_00175_DS_
                                    1-  656     	BANKSEL	r0x103B
     0052 rrrr                      3-   71 m1      .banksel ram_address
     0053 01rr                      1-  657     	MOVR	r0x103B,W
     0054 0D03                      1-  658     	BTRSC	STATUS,2
     0055 3rrr                      1-  659     	LGOTO	_00175_DS_
                                    1-  660     	.line	163, "main.c"; 	POWERON();
     0056 18rr                      1-  661     	BSR	_PORTA,0
                                    1-  662     	.line	164, "main.c"; 	LED3ON();
     0057 1Brr                      1-  663     	BSR	_PORTA,6
     0058 3rrr                      1-  664     	LGOTO	_00175_DS_
     0059                           1-  665     _00174_DS_:
                                    1-  666     	.line	171, "main.c"; 	if(workStatus == 1)
                                    1-  667     	BANKSEL	r0x103B
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 02rr                      1-  668     	CLRR	r0x103B
                                    1-  669     	BANKSEL	_workStatus
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 01rr                      1-  670     	MOVR	_workStatus,W
     005D 2401                      1-  671     	XORIA	0x01
     005E 0903                      1-  672     	BTRSS	STATUS,2
     005F 3rrr                      1-  673     	LGOTO	_00007_DS_
                                    1-  674     	BANKSEL	r0x103B
     0060 rrrr                      3-   71 m1      .banksel ram_address
     0061 05rr                      1-  675     	INCR	r0x103B,F
     0062                           1-  676     _00007_DS_:
                                    1-  677     	BANKSEL	r0x103B
     0062 rrrr                      3-   71 m1      .banksel ram_address
     0063 01rr                      1-  678     	MOVR	r0x103B,W
     0064 0903                      1-  679     	BTRSS	STATUS,2
                                    1-  680     	.line	172, "main.c"; 	CHRGOFF();
     0065 1Drr                      1-  681     	BCR	_PORTB,2
                                    1-  682     	.line	173, "main.c"; 	LED3OFF();
     0066 1Frr                      1-  683     	BCR	_PORTA,6
                                    1-  684     	.line	174, "main.c"; 	chrgStatus = 0;
                                    1-  685     	BANKSEL	_chrgStatus
     0067 rrrr                      3-   71 m1      .banksel ram_address
     0068 02rr                      1-  686     	CLRR	_chrgStatus
                                    1-  687     ;;unsigned compare: left < lit (0x3=3), size=1
                                    1-  688     	.line	175, "main.c"; 	if( batStatus < 3 && workStatus == 1)
     0069 2103                      1-  689     	MOVIA	0x03
                                    1-  690     	BANKSEL	_batStatus
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 04rr                      1-  691     	SUBAR	_batStatus,W
     006C 0C03                      1-  692     	BTRSC	STATUS,0
     006D 3rrr                      1-  693     	LGOTO	_00175_DS_
                                    1-  694     	BANKSEL	r0x103B
     006E rrrr                      3-   71 m1      .banksel ram_address
     006F 01rr                      1-  695     	MOVR	r0x103B,W
     0070 0903                      1-  696     	BTRSS	STATUS,2
                                    1-  697     	.line	177, "main.c"; 	POWERON();
     0071 18rr                      1-  698     	BSR	_PORTA,0
     0072                           1-  699     _00175_DS_:
                                    1-  700     	.line	180, "main.c"; 	if(!IntFlag)
                                    1-  701     	BANKSEL	_IntFlag
     0072 rrrr                      3-   71 m1      .banksel ram_address
     0073 01rr                      1-  702     	MOVR	_IntFlag,W
     0074 0D03                      1-  703     	BTRSC	STATUS,2
     0075 3rrr                      1-  704     	LGOTO	_00188_DS_
                                    1-  705     	.line	182, "main.c"; 	IntFlag = 0;
     0076 02rr                      1-  706     	CLRR	_IntFlag
                                    1-  707     	.line	183, "main.c"; 	keyCtr();
     0077 2rrr                      1-  708     	LCALL	_keyCtr
                                    1-  709     	.line	184, "main.c"; 	chrgWork();
     0078 2rrr                      1-  710     	LCALL	_chrgWork
                                    1-  711     	.line	185, "main.c"; 	if(workStatus == 1)
                                    1-  712     	BANKSEL	_workStatus
     0079 rrrr                      3-   71 m1      .banksel ram_address
     007A 01rr                      1-  713     	MOVR	_workStatus,W
     007B 2401                      1-  714     	XORIA	0x01
     007C 0D03                      1-  715     	BTRSC	STATUS,2
                                    1-  716     	.line	186, "main.c"; 	workCtr();
     007D 2rrr                      1-  717     	LCALL	_workCtr
                                    1-  718     	.line	187, "main.c"; 	if(((PORTA & 0x20) == 0 || chrgStatus == 2) && workStatus == 0 && keyCount == 0)
     007E 0Arr                      1-  719     	BTRSS	_PORTA,5
     007F 3rrr                      1-  720     	LGOTO	_00185_DS_
                                    1-  721     	BANKSEL	_chrgStatus
     0080 rrrr                      3-   71 m1      .banksel ram_address
     0081 01rr                      1-  722     	MOVR	_chrgStatus,W
     0082 2402                      1-  723     	XORIA	0x02
     0083 0903                      1-  724     	BTRSS	STATUS,2
     0084 3rrr                      1-  725     	LGOTO	_00188_DS_
     0085                           1-  726     _00185_DS_:
                                    1-  727     	BANKSEL	_workStatus
     0085 rrrr                      3-   71 m1      .banksel ram_address
     0086 01rr                      1-  728     	MOVR	_workStatus,W
     0087 0903                      1-  729     	BTRSS	STATUS,2
     0088 3rrr                      1-  730     	LGOTO	_00188_DS_
                                    1-  731     	BANKSEL	_keyCount
     0089 rrrr                      3-   71 m1      .banksel ram_address
     008A 01rr                      1-  732     	MOVR	_keyCount,W
     008B 0903                      1-  733     	BTRSS	STATUS,2
     008C 3rrr                      1-  734     	LGOTO	_00188_DS_
                                    1-  735     	.line	189, "main.c"; 	closeStatus();
     008D 2rrr                      1-  736     	LCALL	_closeStatus
                                    1-  737     	.line	190, "main.c"; 	if(++sleepDelay > 50)
                                    1-  738     	BANKSEL	_sleepDelay
     008E rrrr                      3-   71 m1      .banksel ram_address
     008F 05rr                      1-  739     	INCR	_sleepDelay,F
                                    1-  740     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  741     ;;unsigned compare: left >= lit (0x33=51), size=1
     0090 2133                      1-  742     	MOVIA	0x33
     0091 04rr                      1-  743     	SUBAR	_sleepDelay,W
     0092 0803                      1-  744     	BTRSS	STATUS,0
     0093 3rrr                      1-  745     	LGOTO	_00188_DS_
                                    1-  746     	.line	191, "main.c"; 	gotoSleep();
     0094 2rrr                      1-  747     	LCALL	_gotoSleep
     0095 3rrr                      1-  748     	LGOTO	_00188_DS_
                                    1-  749     	.line	194, "main.c"; 	}
                                    1-  750     	RETURN	
     0096 0010                      3-   26 m1      ret
                                    1-  751     ; exit point of _main
                                    1-  753     ;***
                                    1-  754     ;  pBlock Stats: dbName = C
                                    1-  755     ;***
                                    1-  756     ;has an exit
                                    1-  757     ;; Starting pCode block
                                    1-  758     .segment "code"; module=main, function=_closeStatus
     0000                           1-  760     _closeStatus:
                                    1-  761     ; 2 exit points
                                    1-  762     	.line	541, "main.c"; 	LED1OFF();
     0000 1Drr                      1-  763     	BCR	_PORTB,3
                                    1-  764     	.line	542, "main.c"; 	LED2OFF();
     0001 1Frr                      1-  765     	BCR	_PORTA,7
                                    1-  766     	.line	543, "main.c"; 	LED3OFF();
     0002 1Frr                      1-  767     	BCR	_PORTA,6
                                    1-  768     	.line	544, "main.c"; 	LED4OFF();
     0003 18rr                      1-  769     	BSR	_PORTB,1
                                    1-  770     	.line	545, "main.c"; 	CHRGON();
     0004 19rr                      1-  771     	BSR	_PORTB,2
                                    1-  772     	.line	546, "main.c"; 	POWEROFF();
     0005 1Crr                      1-  773     	BCR	_PORTA,0
                                    1-  774     	.line	547, "main.c"; 	}
                                    1-  775     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1-  776     ; exit point of _closeStatus
                                    1-  778     ;***
                                    1-  779     ;  pBlock Stats: dbName = C
                                    1-  780     ;***
                                    1-  781     ;has an exit
                                    1-  782     ;1 compiler assigned register :
                                    1-  783     ;   r0x101B
                                    1-  784     ;; Starting pCode block
                                    1-  785     .segment "code"; module=main, function=_keyRead
                                    1-  787     ;local variable name mapping:
     0000                           1-  789     _keyRead:
                                    1-  790     ; 2 exit points
                                    1-  791     	.line	506, "main.c"; 	char keyRead(char KeyStatus)	
                                    1-  792     	BANKSEL	r0x101B
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  793     	MOVAR	r0x101B
                                    1-  794     	.line	508, "main.c"; 	if (KeyStatus)
     0002 01rr                      1-  795     	MOVR	r0x101B,W
     0003 0D03                      1-  796     	BTRSC	STATUS,2
     0004 3rrr                      1-  797     	LGOTO	_00498_DS_
                                    1-  798     	.line	510, "main.c"; 	keyCount++;
                                    1-  799     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  800     	INCR	_keyCount,F
                                    1-  801     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  802     	.line	511, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1-  803     	MOVIA	0xc8
     0008 04rr                      1-  804     	SUBAR	_keyCount,W
     0009 0803                      1-  805     	BTRSS	STATUS,0
     000A 3rrr                      1-  806     	LGOTO	_00499_DS_
                                    1-  807     	.line	513, "main.c"; 	keyCount = 200;
     000B 21C8                      1-  808     	MOVIA	0xc8
     000C 00rr                      1-  809     	MOVAR	_keyCount
                                    1-  810     	.line	514, "main.c"; 	if(!longPressFlag)
                                    1-  811     	BANKSEL	_longPressFlag
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 01rr                      1-  812     	MOVR	_longPressFlag,W
     000F 0903                      1-  813     	BTRSS	STATUS,2
     0010 3rrr                      1-  814     	LGOTO	_00499_DS_
                                    1-  815     	.line	516, "main.c"; 	longPressFlag = 1;
     0011 2101                      1-  816     	MOVIA	0x01
     0012 00rr                      1-  817     	MOVAR	_longPressFlag
                                    1-  818     	.line	517, "main.c"; 	return 2;
     0013 2102                      1-  819     	MOVIA	0x02
     0014 3rrr                      1-  820     	LGOTO	_00500_DS_
                                    1-  821     ;;unsigned compare: left < lit (0xC8=200), size=1
     0015                           1-  822     _00498_DS_:
                                    1-  823     	.line	523, "main.c"; 	if(keyCount >= 200)
     0015 21C8                      1-  824     	MOVIA	0xc8
                                    1-  825     	BANKSEL	_keyCount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 04rr                      1-  826     	SUBAR	_keyCount,W
     0018 0803                      1-  827     	BTRSS	STATUS,0
     0019 3rrr                      1-  828     	LGOTO	_00495_DS_
                                    1-  829     	.line	525, "main.c"; 	keyCount = 0;
     001A 02rr                      1-  830     	CLRR	_keyCount
                                    1-  831     	.line	526, "main.c"; 	longPressFlag = 0;
                                    1-  832     	BANKSEL	_longPressFlag
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 02rr                      1-  833     	CLRR	_longPressFlag
                                    1-  834     	.line	527, "main.c"; 	return	0;
     001D 2100                      1-  835     	MOVIA	0x00
     001E 3rrr                      1-  836     	LGOTO	_00500_DS_
                                    1-  837     ;;unsigned compare: left < lit (0x8=8), size=1
     001F                           1-  838     _00495_DS_:
                                    1-  839     	.line	529, "main.c"; 	else if(keyCount >= 8)
     001F 2108                      1-  840     	MOVIA	0x08
                                    1-  841     	BANKSEL	_keyCount
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 04rr                      1-  842     	SUBAR	_keyCount,W
     0022 0803                      1-  843     	BTRSS	STATUS,0
     0023 3rrr                      1-  844     	LGOTO	_00496_DS_
                                    1-  845     	.line	531, "main.c"; 	keyCount = 0;
     0024 02rr                      1-  846     	CLRR	_keyCount
                                    1-  847     	.line	532, "main.c"; 	return	1;
     0025 2101                      1-  848     	MOVIA	0x01
     0026 3rrr                      1-  849     	LGOTO	_00500_DS_
     0027                           1-  850     _00496_DS_:
                                    1-  851     	.line	534, "main.c"; 	keyCount = 0;
                                    1-  852     	BANKSEL	_keyCount
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 02rr                      1-  853     	CLRR	_keyCount
     0029                           1-  854     _00499_DS_:
                                    1-  855     	.line	536, "main.c"; 	return 0;
     0029 2100                      1-  856     	MOVIA	0x00
     002A                           1-  857     _00500_DS_:
                                    1-  858     	.line	537, "main.c"; 	}
                                    1-  859     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1-  860     ; exit point of _keyRead
                                    1-  862     ;***
                                    1-  863     ;  pBlock Stats: dbName = C
                                    1-  864     ;***
                                    1-  865     ;has an exit
                                    1-  866     ;5 compiler assigned registers:
                                    1-  867     ;   r0x101C
                                    1-  868     ;   STK00
                                    1-  869     ;   r0x101D
                                    1-  870     ;   r0x101E
                                    1-  871     ;   r0x101F
                                    1-  872     ;; Starting pCode block
                                    1-  873     .segment "code"; module=main, function=_delay
                                    1-  875     ;local variable name mapping:
     0000                           1-  880     _delay:
                                    1-  881     ; 2 exit points
                                    1-  882     	.line	500, "main.c"; 	void delay(u16t time)
                                    1-  883     	BANKSEL	r0x101C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  884     	MOVAR	r0x101C
     0002 01rr                      1-  885     	MOVR	STK00,W
                                    1-  886     	BANKSEL	r0x101D
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1-  887     	MOVAR	r0x101D
                                    1-  888     	.line	502, "main.c"; 	for(u16t i=0;i<time;i++);
                                    1-  889     	BANKSEL	r0x101E
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1-  890     	CLRR	r0x101E
                                    1-  891     	BANKSEL	r0x101F
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  892     	CLRR	r0x101F
     0009                           1-  893     _00472_DS_:
                                    1-  894     	BANKSEL	r0x101C
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1-  895     	MOVR	r0x101C,W
                                    1-  896     	BANKSEL	r0x101F
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  897     	SUBAR	r0x101F,W
     000D 0903                      1-  898     	BTRSS	STATUS,2
     000E 3rrr                      1-  899     	LGOTO	_00483_DS_
                                    1-  900     	BANKSEL	r0x101D
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  901     	MOVR	r0x101D,W
                                    1-  902     	BANKSEL	r0x101E
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1-  903     	SUBAR	r0x101E,W
     0013                           1-  904     _00483_DS_:
     0013 0C03                      1-  905     	BTRSC	STATUS,0
     0014 3rrr                      1-  906     	LGOTO	_00474_DS_
                                    1-  907     	BANKSEL	r0x101E
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  908     	INCR	r0x101E,F
     0017 0903                      1-  909     	BTRSS	STATUS,2
     0018 3rrr                      1-  910     	LGOTO	_00001_DS_
                                    1-  911     	BANKSEL	r0x101F
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1-  912     	INCR	r0x101F,F
     001B                           1-  913     _00001_DS_:
     001B 3rrr                      1-  914     	LGOTO	_00472_DS_
     001C                           1-  915     _00474_DS_:
                                    1-  916     	.line	503, "main.c"; 	}
                                    1-  917     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  918     ; exit point of _delay
                                    1-  920     ;***
                                    1-  921     ;  pBlock Stats: dbName = C
                                    1-  922     ;***
                                    1-  923     ;has an exit
                                    1-  924     ;; Starting pCode block
                                    1-  925     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  927     _F_wait_eoc:
                                    1-  928     ; 2 exit points
     0000                           1-  929     _00465_DS_:
                                    1-  930     	.line	494, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  931     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  932     	LGOTO	_00465_DS_
                                    1-  933     	.line	496, "main.c"; 	}
                                    1-  934     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  935     ; exit point of _F_wait_eoc
                                    1-  937     ;***
                                    1-  938     ;  pBlock Stats: dbName = C
                                    1-  939     ;***
                                    1-  940     ;has an exit
                                    1-  941     ;; Starting pCode block
                                    1-  942     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  944     _gotoSleep:
                                    1-  945     ; 2 exit points
                                    1-  946     	.line	469, "main.c"; 	workStatus = 0;
                                    1-  947     	BANKSEL	_workStatus
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  948     	CLRR	_workStatus
                                    1-  949     	.line	470, "main.c"; 	batStatus = 0;
                                    1-  950     	BANKSEL	_batStatus
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1-  951     	CLRR	_batStatus
                                    1-  952     	.line	471, "main.c"; 	chrgStatus = 0;
                                    1-  953     	BANKSEL	_chrgStatus
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1-  954     	CLRR	_chrgStatus
                                    1-  955     	.line	472, "main.c"; 	firstLow = 0;
                                    1-  956     	BANKSEL	_firstLow
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 02rr                      1-  957     	CLRR	_firstLow
                                    1-  958     	.line	473, "main.c"; 	sleepDelay = 0;
                                    1-  959     	BANKSEL	_sleepDelay
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 02rr                      1-  960     	CLRR	_sleepDelay
                                    1-  961     	.line	474, "main.c"; 	workStep = 0;
                                    1-  962     	BANKSEL	_workStep
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 02rr                      1-  963     	CLRR	_workStep
                                    1-  964     	.line	475, "main.c"; 	AWUCON = 0x28;
     000C 2128                      1-  965     	MOVIA	0x28
     000D 00rr                      1-  966     	MOVAR	_AWUCON
                                    1-  967     	.line	476, "main.c"; 	BWUCON = 0x01;
     000E 2101                      1-  968     	MOVIA	0x01
     000F 00rr                      1-  969     	MOVAR	_BWUCON
                                    1-  970     	.line	477, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PABKey;
     0010 210B                      1-  971     	MOVIA	0x0b
     0011 00rr                      1-  972     	MOVAR	_INTE
                                    1-  973     	.line	478, "main.c"; 	PCON =  C_LVR_En;	
     0012 2108                      1-  974     	MOVIA	0x08
     0013 00rr                      1-  975     	MOVAR	_PCON
                                    1-  976     	.line	479, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0014 02rr                      1-  977     	CLRR	_INTF
                                    1-  978     	.line	480, "main.c"; 	CLRWDT();
     0015 0002                      1-  979     	clrwdt
                                    1-  980     	.line	481, "main.c"; 	ENI();
     0016 0004                      1-  981     	ENI
                                    1-  982     	.line	482, "main.c"; 	SLEEP();
     0017 0001                      1-  983     	sleep
                                    1-  984     	.line	483, "main.c"; 	AWUCON = 0x00;
     0018 02rr                      1-  985     	CLRR	_AWUCON
                                    1-  986     	.line	484, "main.c"; 	BWUCON = 0x00;
     0019 02rr                      1-  987     	CLRR	_BWUCON
                                    1-  988     	.line	485, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     001A 2101                      1-  989     	MOVIA	0x01
     001B 00rr                      1-  990     	MOVAR	_INTE
                                    1-  991     	.line	486, "main.c"; 	INTF = 0;
     001C 02rr                      1-  992     	CLRR	_INTF
                                    1-  993     	.line	488, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     001D 21A8                      1-  994     	MOVIA	0xa8
     001E 00rr                      1-  995     	MOVAR	_PCON
                                    1-  996     	.line	490, "main.c"; 	}
                                    1-  997     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  998     ; exit point of _gotoSleep
                                    1- 1000     ;***
                                    1- 1001     ;  pBlock Stats: dbName = C
                                    1- 1002     ;***
                                    1- 1003     ;has an exit
                                    1- 1004     ;functions called:
                                    1- 1005     ;   _delay
                                    1- 1006     ;   _F_wait_eoc
                                    1- 1007     ;   _delay
                                    1- 1008     ;   _F_wait_eoc
                                    1- 1009     ;7 compiler assigned registers:
                                    1- 1010     ;   r0x1020
                                    1- 1011     ;   STK00
                                    1- 1012     ;   r0x1021
                                    1- 1013     ;   r0x1022
                                    1- 1014     ;   r0x1023
                                    1- 1015     ;   r0x1024
                                    1- 1016     ;   r0x1025
                                    1- 1017     ;; Starting pCode block
                                    1- 1018     .segment "code"; module=main, function=_F_AIN4_Convert
                                    1- 1020     ;local variable name mapping:
     0000                           1- 1023     _F_AIN4_Convert:
                                    1- 1024     ; 2 exit points
                                    1- 1025     	.line	451, "main.c"; 	void F_AIN4_Convert(char count)
                                    1- 1026     	BANKSEL	r0x1020
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1027     	MOVAR	r0x1020
                                    1- 1028     	.line	453, "main.c"; 	R_AIN4_DATA=R_AIN4_DATA_LB=0x00;   
                                    1- 1029     	BANKSEL	_R_AIN4_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1030     	CLRR	_R_AIN4_DATA_LB
                                    1- 1031     	BANKSEL	_R_AIN4_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1032     	CLRR	_R_AIN4_DATA
     0006 02rr                      1- 1033     	CLRR	(_R_AIN4_DATA + 1)
                                    1- 1034     	.line	455, "main.c"; 	ADMD  = 0x90 | C_ADC_PA4;				// Select AIN6(PB1) pad as ADC input
     0007 2194                      1- 1035     	MOVIA	0x94
     0008 00rr                      1- 1036     	MOVAR	_ADMD
                                    1- 1037     	.line	456, "main.c"; 	delay(200);	
     0009 21C8                      1- 1038     	MOVIA	0xc8
     000A 00rr                      1- 1039     	MOVAR	STK00
     000B 2100                      1- 1040     	MOVIA	0x00
     000C 2rrr                      1- 1041     	LCALL	_delay
                                    1- 1042     	.line	457, "main.c"; 	for(i=1;i<=count;i++)
     000D 2101                      1- 1043     	MOVIA	0x01
                                    1- 1044     	BANKSEL	r0x1021
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1- 1045     	MOVAR	r0x1021
     0010                           1- 1046     _00454_DS_:
                                    1- 1047     	BANKSEL	r0x1021
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 01rr                      1- 1048     	MOVR	r0x1021,W
                                    1- 1049     	BANKSEL	r0x1020
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1- 1050     	SUBAR	r0x1020,W
     0014 0803                      1- 1051     	BTRSS	STATUS,0
     0015 3rrr                      1- 1052     	LGOTO	_00456_DS_
                                    1- 1053     	.line	459, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0016 1Brr                      1- 1054     	BSR	_ADMDbits,6
                                    1- 1055     	.line	460, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0017 2rrr                      1- 1056     	LCALL	_F_wait_eoc
                                    1- 1057     	.line	461, "main.c"; 	R_AIN4_DATA_LB += ( 0x0F & ADR); 
     0018 210F                      1- 1058     	MOVIA	0x0f
     0019 10rr                      1- 1059     	ANDAR	_ADR,W
                                    1- 1060     ;;3	MOVAR	r0x1022
                                    1- 1061     	BANKSEL	_R_AIN4_DATA_LB
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 03rr                      1- 1062     	ADDAR	_R_AIN4_DATA_LB,F
                                    1- 1063     	.line	462, "main.c"; 	R_AIN4_DATA    += ADD; 
     001C 01rr                      1- 1064     	MOVR	_ADD,W
                                    1- 1065     	BANKSEL	r0x1022
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1066     	MOVAR	r0x1022
                                    1- 1067     ;;1	CLRR	r0x1023
                                    1- 1068     ;;109	MOVR	r0x1022,W
                                    1- 1069     ;;107	MOVAR	r0x1024
     001F 2100                      1- 1070     	MOVIA	0x00
                                    1- 1071     	BANKSEL	r0x1025
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1072     	MOVAR	r0x1025
                                    1- 1073     ;;108	MOVR	r0x1024,W
                                    1- 1074     	BANKSEL	r0x1022
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1- 1075     	MOVR	r0x1022,W
                                    1- 1076     	BANKSEL	_R_AIN4_DATA
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 03rr                      1- 1077     	ADDAR	_R_AIN4_DATA,F
                                    1- 1078     	BANKSEL	r0x1025
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1079     	MOVR	r0x1025,W
     0028 0C03                      1- 1080     	BTRSC	STATUS,0
     0029 05rr                      1- 1081     	INCR	r0x1025,W
     002A 0D03                      1- 1082     	BTRSC	STATUS,2
     002B 3rrr                      1- 1083     	LGOTO	_00002_DS_
                                    1- 1084     	BANKSEL	_R_AIN4_DATA
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 03rr                      1- 1085     	ADDAR	(_R_AIN4_DATA + 1),F
     002E                           1- 1086     _00002_DS_:
                                    1- 1087     	.line	457, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1088     	BANKSEL	r0x1021
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 05rr                      1- 1089     	INCR	r0x1021,F
     0030 3rrr                      1- 1090     	LGOTO	_00454_DS_
     0031                           1- 1091     _00456_DS_:
                                    1- 1092     	.line	464, "main.c"; 	}
                                    1- 1093     	RETURN	
     0031 0010                      3-   26 m1      ret
                                    1- 1094     ; exit point of _F_AIN4_Convert
                                    1- 1096     ;***
                                    1- 1097     ;  pBlock Stats: dbName = C
                                    1- 1098     ;***
                                    1- 1099     ;has an exit
                                    1- 1100     ;functions called:
                                    1- 1101     ;   _delay
                                    1- 1102     ;   _F_wait_eoc
                                    1- 1103     ;   _delay
                                    1- 1104     ;   _F_wait_eoc
                                    1- 1105     ;7 compiler assigned registers:
                                    1- 1106     ;   r0x1026
                                    1- 1107     ;   STK00
                                    1- 1108     ;   r0x1027
                                    1- 1109     ;   r0x1028
                                    1- 1110     ;   r0x1029
                                    1- 1111     ;   r0x102A
                                    1- 1112     ;   r0x102B
                                    1- 1113     ;; Starting pCode block
                                    1- 1114     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1- 1116     ;local variable name mapping:
     0000                           1- 1119     _F_AIN2_Convert:
                                    1- 1120     ; 2 exit points
                                    1- 1121     	.line	435, "main.c"; 	void F_AIN2_Convert(char count)
                                    1- 1122     	BANKSEL	r0x1026
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1123     	MOVAR	r0x1026
                                    1- 1124     	.line	437, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;   
                                    1- 1125     	BANKSEL	_R_AIN2_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1126     	CLRR	_R_AIN2_DATA_LB
                                    1- 1127     	BANKSEL	_R_AIN2_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1128     	CLRR	_R_AIN2_DATA
     0006 02rr                      1- 1129     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1130     	.line	439, "main.c"; 	ADMD  = 0x90 | C_ADC_PA2;				// Select AIN6(PB1) pad as ADC input
     0007 2192                      1- 1131     	MOVIA	0x92
     0008 00rr                      1- 1132     	MOVAR	_ADMD
                                    1- 1133     	.line	440, "main.c"; 	delay(200);	
     0009 21C8                      1- 1134     	MOVIA	0xc8
     000A 00rr                      1- 1135     	MOVAR	STK00
     000B 2100                      1- 1136     	MOVIA	0x00
     000C 2rrr                      1- 1137     	LCALL	_delay
                                    1- 1138     	.line	441, "main.c"; 	for(i=1;i<=count;i++)
     000D 2101                      1- 1139     	MOVIA	0x01
                                    1- 1140     	BANKSEL	r0x1027
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1- 1141     	MOVAR	r0x1027
     0010                           1- 1142     _00445_DS_:
                                    1- 1143     	BANKSEL	r0x1027
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 01rr                      1- 1144     	MOVR	r0x1027,W
                                    1- 1145     	BANKSEL	r0x1026
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1- 1146     	SUBAR	r0x1026,W
     0014 0803                      1- 1147     	BTRSS	STATUS,0
     0015 3rrr                      1- 1148     	LGOTO	_00447_DS_
                                    1- 1149     	.line	443, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0016 1Brr                      1- 1150     	BSR	_ADMDbits,6
                                    1- 1151     	.line	444, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0017 2rrr                      1- 1152     	LCALL	_F_wait_eoc
                                    1- 1153     	.line	445, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     0018 210F                      1- 1154     	MOVIA	0x0f
     0019 10rr                      1- 1155     	ANDAR	_ADR,W
                                    1- 1156     ;;3	MOVAR	r0x1028
                                    1- 1157     	BANKSEL	_R_AIN2_DATA_LB
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 03rr                      1- 1158     	ADDAR	_R_AIN2_DATA_LB,F
                                    1- 1159     	.line	446, "main.c"; 	R_AIN2_DATA    += ADD; 
     001C 01rr                      1- 1160     	MOVR	_ADD,W
                                    1- 1161     	BANKSEL	r0x1028
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1162     	MOVAR	r0x1028
                                    1- 1163     ;;1	CLRR	r0x1029
                                    1- 1164     ;;106	MOVR	r0x1028,W
                                    1- 1165     ;;104	MOVAR	r0x102A
     001F 2100                      1- 1166     	MOVIA	0x00
                                    1- 1167     	BANKSEL	r0x102B
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1168     	MOVAR	r0x102B
                                    1- 1169     ;;105	MOVR	r0x102A,W
                                    1- 1170     	BANKSEL	r0x1028
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1- 1171     	MOVR	r0x1028,W
                                    1- 1172     	BANKSEL	_R_AIN2_DATA
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 03rr                      1- 1173     	ADDAR	_R_AIN2_DATA,F
                                    1- 1174     	BANKSEL	r0x102B
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1175     	MOVR	r0x102B,W
     0028 0C03                      1- 1176     	BTRSC	STATUS,0
     0029 05rr                      1- 1177     	INCR	r0x102B,W
     002A 0D03                      1- 1178     	BTRSC	STATUS,2
     002B 3rrr                      1- 1179     	LGOTO	_00003_DS_
                                    1- 1180     	BANKSEL	_R_AIN2_DATA
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 03rr                      1- 1181     	ADDAR	(_R_AIN2_DATA + 1),F
     002E                           1- 1182     _00003_DS_:
                                    1- 1183     	.line	441, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1184     	BANKSEL	r0x1027
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 05rr                      1- 1185     	INCR	r0x1027,F
     0030 3rrr                      1- 1186     	LGOTO	_00445_DS_
     0031                           1- 1187     _00447_DS_:
                                    1- 1188     	.line	448, "main.c"; 	}
                                    1- 1189     	RETURN	
     0031 0010                      3-   26 m1      ret
                                    1- 1190     ; exit point of _F_AIN2_Convert
                                    1- 1192     ;***
                                    1- 1193     ;  pBlock Stats: dbName = C
                                    1- 1194     ;***
                                    1- 1195     ;has an exit
                                    1- 1196     ;functions called:
                                    1- 1197     ;   _delay
                                    1- 1198     ;   _F_wait_eoc
                                    1- 1199     ;   _delay
                                    1- 1200     ;   _F_wait_eoc
                                    1- 1201     ;7 compiler assigned registers:
                                    1- 1202     ;   r0x102C
                                    1- 1203     ;   STK00
                                    1- 1204     ;   r0x102D
                                    1- 1205     ;   r0x102E
                                    1- 1206     ;   r0x102F
                                    1- 1207     ;   r0x1030
                                    1- 1208     ;   r0x1031
                                    1- 1209     ;; Starting pCode block
                                    1- 1210     .segment "code"; module=main, function=_F_AIN1_Convert
                                    1- 1212     ;local variable name mapping:
     0000                           1- 1215     _F_AIN1_Convert:
                                    1- 1216     ; 2 exit points
                                    1- 1217     	.line	420, "main.c"; 	void F_AIN1_Convert(char count)
                                    1- 1218     	BANKSEL	r0x102C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1219     	MOVAR	r0x102C
                                    1- 1220     	.line	422, "main.c"; 	R_AIN1_DATA=R_AIN1_DATA_LB=0x00;   
                                    1- 1221     	BANKSEL	_R_AIN1_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1222     	CLRR	_R_AIN1_DATA_LB
                                    1- 1223     	BANKSEL	_R_AIN1_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1224     	CLRR	_R_AIN1_DATA
     0006 02rr                      1- 1225     	CLRR	(_R_AIN1_DATA + 1)
                                    1- 1226     	.line	424, "main.c"; 	ADMD  = 0x90 | C_ADC_PA1;				// Select AIN6(PB1) pad as ADC input
     0007 2191                      1- 1227     	MOVIA	0x91
     0008 00rr                      1- 1228     	MOVAR	_ADMD
                                    1- 1229     	.line	425, "main.c"; 	delay(200);	
     0009 21C8                      1- 1230     	MOVIA	0xc8
     000A 00rr                      1- 1231     	MOVAR	STK00
     000B 2100                      1- 1232     	MOVIA	0x00
     000C 2rrr                      1- 1233     	LCALL	_delay
                                    1- 1234     	.line	426, "main.c"; 	for(i=1;i<=count;i++)
     000D 2101                      1- 1235     	MOVIA	0x01
                                    1- 1236     	BANKSEL	r0x102D
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1- 1237     	MOVAR	r0x102D
     0010                           1- 1238     _00436_DS_:
                                    1- 1239     	BANKSEL	r0x102D
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 01rr                      1- 1240     	MOVR	r0x102D,W
                                    1- 1241     	BANKSEL	r0x102C
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1- 1242     	SUBAR	r0x102C,W
     0014 0803                      1- 1243     	BTRSS	STATUS,0
     0015 3rrr                      1- 1244     	LGOTO	_00438_DS_
                                    1- 1245     	.line	428, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0016 1Brr                      1- 1246     	BSR	_ADMDbits,6
                                    1- 1247     	.line	429, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0017 2rrr                      1- 1248     	LCALL	_F_wait_eoc
                                    1- 1249     	.line	430, "main.c"; 	R_AIN1_DATA_LB += ( 0x0F & ADR); 
     0018 210F                      1- 1250     	MOVIA	0x0f
     0019 10rr                      1- 1251     	ANDAR	_ADR,W
                                    1- 1252     ;;3	MOVAR	r0x102E
                                    1- 1253     	BANKSEL	_R_AIN1_DATA_LB
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 03rr                      1- 1254     	ADDAR	_R_AIN1_DATA_LB,F
                                    1- 1255     	.line	431, "main.c"; 	R_AIN1_DATA    += ADD; 
     001C 01rr                      1- 1256     	MOVR	_ADD,W
                                    1- 1257     	BANKSEL	r0x102E
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1258     	MOVAR	r0x102E
                                    1- 1259     ;;1	CLRR	r0x102F
                                    1- 1260     ;;103	MOVR	r0x102E,W
                                    1- 1261     ;;101	MOVAR	r0x1030
     001F 2100                      1- 1262     	MOVIA	0x00
                                    1- 1263     	BANKSEL	r0x1031
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1264     	MOVAR	r0x1031
                                    1- 1265     ;;102	MOVR	r0x1030,W
                                    1- 1266     	BANKSEL	r0x102E
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1- 1267     	MOVR	r0x102E,W
                                    1- 1268     	BANKSEL	_R_AIN1_DATA
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 03rr                      1- 1269     	ADDAR	_R_AIN1_DATA,F
                                    1- 1270     	BANKSEL	r0x1031
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1271     	MOVR	r0x1031,W
     0028 0C03                      1- 1272     	BTRSC	STATUS,0
     0029 05rr                      1- 1273     	INCR	r0x1031,W
     002A 0D03                      1- 1274     	BTRSC	STATUS,2
     002B 3rrr                      1- 1275     	LGOTO	_00004_DS_
                                    1- 1276     	BANKSEL	_R_AIN1_DATA
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 03rr                      1- 1277     	ADDAR	(_R_AIN1_DATA + 1),F
     002E                           1- 1278     _00004_DS_:
                                    1- 1279     	.line	426, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1280     	BANKSEL	r0x102D
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 05rr                      1- 1281     	INCR	r0x102D,F
     0030 3rrr                      1- 1282     	LGOTO	_00436_DS_
     0031                           1- 1283     _00438_DS_:
                                    1- 1284     	.line	433, "main.c"; 	}
                                    1- 1285     	RETURN	
     0031 0010                      3-   26 m1      ret
                                    1- 1286     ; exit point of _F_AIN1_Convert
                                    1- 1288     ;***
                                    1- 1289     ;  pBlock Stats: dbName = C
                                    1- 1290     ;***
                                    1- 1291     ;has an exit
                                    1- 1292     ;functions called:
                                    1- 1293     ;   _F_AIN2_Convert
                                    1- 1294     ;   _F_AIN2_Convert
                                    1- 1295     ;4 compiler assigned registers:
                                    1- 1296     ;   r0x1032
                                    1- 1297     ;   r0x1033
                                    1- 1298     ;   r0x1034
                                    1- 1299     ;   r0x1035
                                    1- 1300     ;; Starting pCode block
                                    1- 1301     .segment "code"; module=main, function=_checkBat
     0000                           1- 1303     _checkBat:
                                    1- 1304     ; 2 exit points
                                    1- 1305     	.line	383, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = 0x00;
                                    1- 1306     	BANKSEL	_R_AIN2_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1307     	CLRR	_R_AIN2_DATA_LB
                                    1- 1308     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1309     	CLRR	_R_AIN2_DATA
     0004 02rr                      1- 1310     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1311     	.line	384, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1- 1312     	MOVIA	0x08
     0006 2rrr                      1- 1313     	LCALL	_F_AIN2_Convert
                                    1- 1314     	.line	385, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1315     	BANKSEL	_R_AIN2_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1- 1316     	SWAPR	(_R_AIN2_DATA + 1),W
     0009 22F0                      1- 1317     	ANDIA	0xf0
     000A 00rr                      1- 1318     	MOVAR	(_R_AIN2_DATA + 1)
     000B 15rr                      1- 1319     	SWAPR	_R_AIN2_DATA,W
     000C 00rr                      1- 1320     	MOVAR	_R_AIN2_DATA
     000D 220F                      1- 1321     	ANDIA	0x0f
     000E 11rr                      1- 1322     	IORAR	(_R_AIN2_DATA + 1),F
     000F 12rr                      1- 1323     	XORAR	_R_AIN2_DATA,F
                                    1- 1324     	.line	386, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1- 1325     	MOVIA	0xf0
                                    1- 1326     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1- 1327     	ANDAR	_R_AIN2_DATA_LB,F
                                    1- 1328     	.line	387, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1- 1329     	MOVR	_R_AIN2_DATA_LB,W
                                    1- 1330     	BANKSEL	r0x1034
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1331     	MOVAR	r0x1034
                                    1- 1332     ;;1	MOVAR	r0x1032
                                    1- 1333     ;;1	CLRR	r0x1033
                                    1- 1334     ;;100	MOVR	r0x1032,W
     0016 2100                      1- 1335     	MOVIA	0x00
                                    1- 1336     	BANKSEL	r0x1035
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1337     	MOVAR	r0x1035
                                    1- 1338     	BANKSEL	r0x1034
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1- 1339     	MOVR	r0x1034,W
                                    1- 1340     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1- 1341     	ADDAR	_R_AIN2_DATA,F
                                    1- 1342     	BANKSEL	r0x1035
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1343     	MOVR	r0x1035,W
     001F 0C03                      1- 1344     	BTRSC	STATUS,0
     0020 05rr                      1- 1345     	INCR	r0x1035,W
     0021 0D03                      1- 1346     	BTRSC	STATUS,2
     0022 3rrr                      1- 1347     	LGOTO	_00005_DS_
                                    1- 1348     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1- 1349     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1- 1350     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1- 1351     _00005_DS_:
                                    1- 1352     	.line	388, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 8	
     0025 1C03                      1- 1353     	BCR	STATUS,0
                                    1- 1354     	BANKSEL	_R_AIN2_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1- 1355     	RRR	(_R_AIN2_DATA + 1),F
     0028 13rr                      1- 1356     	RRR	_R_AIN2_DATA,F
                                    1- 1357     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1- 1358     	BCR	STATUS,0
     002A 13rr                      1- 1359     	RRR	(_R_AIN2_DATA + 1),F
     002B 13rr                      1- 1360     	RRR	_R_AIN2_DATA,F
                                    1- 1361     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1- 1362     	BCR	STATUS,0
     002D 13rr                      1- 1363     	RRR	(_R_AIN2_DATA + 1),F
     002E 13rr                      1- 1364     	RRR	_R_AIN2_DATA,F
                                    1- 1365     	.line	389, "main.c"; 	if(debug)
                                    1- 1366     	BANKSEL	_debug
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 01rr                      1- 1367     	MOVR	_debug,W
     0031 0D03                      1- 1368     	BTRSC	STATUS,2
     0032 3rrr                      1- 1369     	LGOTO	_00392_DS_
                                    1- 1370     	.line	391, "main.c"; 	R_AIN2_DATA = BAT;
     0033 2128                      1- 1371     	MOVIA	0x28
                                    1- 1372     	BANKSEL	_R_AIN2_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 00rr                      1- 1373     	MOVAR	_R_AIN2_DATA
     0036 210A                      1- 1374     	MOVIA	0x0a
     0037 00rr                      1- 1375     	MOVAR	(_R_AIN2_DATA + 1)
                                    1- 1376     ;;unsigned compare: left < lit (0x92C=2348), size=2
     0038                           1- 1377     _00392_DS_:
                                    1- 1378     	.line	394, "main.c"; 	if(R_AIN2_DATA < 2348)
     0038 2109                      1- 1379     	MOVIA	0x09
                                    1- 1380     	BANKSEL	_R_AIN2_DATA
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 04rr                      1- 1381     	SUBAR	(_R_AIN2_DATA + 1),W
     003B 0903                      1- 1382     	BTRSS	STATUS,2
     003C 3rrr                      1- 1383     	LGOTO	_00426_DS_
     003D 212C                      1- 1384     	MOVIA	0x2c
     003E 04rr                      1- 1385     	SUBAR	_R_AIN2_DATA,W
     003F                           1- 1386     _00426_DS_:
     003F 0C03                      1- 1387     	BTRSC	STATUS,0
     0040 3rrr                      1- 1388     	LGOTO	_00404_DS_
                                    1- 1389     	.line	396, "main.c"; 	batStatus = 3;//缺电状态
     0041 2103                      1- 1390     	MOVIA	0x03
                                    1- 1391     	BANKSEL	_batStatus
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 00rr                      1- 1392     	MOVAR	_batStatus
     0044 3rrr                      1- 1393     	LGOTO	_00406_DS_
                                    1- 1394     ;;unsigned compare: left < lit (0xA2F=2607), size=2
     0045                           1- 1395     _00404_DS_:
                                    1- 1396     	.line	398, "main.c"; 	else if(R_AIN2_DATA < 2607)
     0045 210A                      1- 1397     	MOVIA	0x0a
                                    1- 1398     	BANKSEL	_R_AIN2_DATA
     0046 rrrr                      3-   71 m1      .banksel ram_address
     0047 04rr                      1- 1399     	SUBAR	(_R_AIN2_DATA + 1),W
     0048 0903                      1- 1400     	BTRSS	STATUS,2
     0049 3rrr                      1- 1401     	LGOTO	_00427_DS_
     004A 212F                      1- 1402     	MOVIA	0x2f
     004B 04rr                      1- 1403     	SUBAR	_R_AIN2_DATA,W
     004C                           1- 1404     _00427_DS_:
     004C 0C03                      1- 1405     	BTRSC	STATUS,0
     004D 3rrr                      1- 1406     	LGOTO	_00401_DS_
                                    1- 1407     	.line	400, "main.c"; 	if(shandeng == 0)
                                    1- 1408     	BANKSEL	_shandeng
     004E rrrr                      3-   71 m1      .banksel ram_address
     004F 01rr                      1- 1409     	MOVR	_shandeng,W
     0050 0903                      1- 1410     	BTRSS	STATUS,2
     0051 3rrr                      1- 1411     	LGOTO	_00394_DS_
                                    1- 1412     	.line	401, "main.c"; 	batStatus = 1;//低电状态
     0052 2101                      1- 1413     	MOVIA	0x01
                                    1- 1414     	BANKSEL	_batStatus
     0053 rrrr                      3-   71 m1      .banksel ram_address
     0054 00rr                      1- 1415     	MOVAR	_batStatus
                                    1- 1416     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1417     ;;unsigned compare: left >= lit (0x961=2401), size=2
     0055                           1- 1418     _00394_DS_:
                                    1- 1419     	.line	402, "main.c"; 	if(R_AIN2_DATA > 2400)
     0055 2109                      1- 1420     	MOVIA	0x09
                                    1- 1421     	BANKSEL	_R_AIN2_DATA
     0056 rrrr                      3-   71 m1      .banksel ram_address
     0057 04rr                      1- 1422     	SUBAR	(_R_AIN2_DATA + 1),W
     0058 0903                      1- 1423     	BTRSS	STATUS,2
     0059 3rrr                      1- 1424     	LGOTO	_00428_DS_
     005A 2161                      1- 1425     	MOVIA	0x61
     005B 04rr                      1- 1426     	SUBAR	_R_AIN2_DATA,W
     005C                           1- 1427     _00428_DS_:
     005C 0803                      1- 1428     	BTRSS	STATUS,0
     005D 3rrr                      1- 1429     	LGOTO	_00406_DS_
                                    1- 1430     	.line	403, "main.c"; 	firstLow = 0;	//重置低电压
                                    1- 1431     	BANKSEL	_firstLow
     005E rrrr                      3-   71 m1      .banksel ram_address
     005F 02rr                      1- 1432     	CLRR	_firstLow
     0060 3rrr                      1- 1433     	LGOTO	_00406_DS_
                                    1- 1434     ;;unsigned compare: left < lit (0xC13=3091), size=2
     0061                           1- 1435     _00401_DS_:
                                    1- 1436     	.line	405, "main.c"; 	else if(R_AIN2_DATA < 3091)
     0061 210C                      1- 1437     	MOVIA	0x0c
                                    1- 1438     	BANKSEL	_R_AIN2_DATA
     0062 rrrr                      3-   71 m1      .banksel ram_address
     0063 04rr                      1- 1439     	SUBAR	(_R_AIN2_DATA + 1),W
     0064 0903                      1- 1440     	BTRSS	STATUS,2
     0065 3rrr                      1- 1441     	LGOTO	_00429_DS_
     0066 2113                      1- 1442     	MOVIA	0x13
     0067 04rr                      1- 1443     	SUBAR	_R_AIN2_DATA,W
     0068                           1- 1444     _00429_DS_:
     0068 0C03                      1- 1445     	BTRSC	STATUS,0
     0069 3rrr                      1- 1446     	LGOTO	_00398_DS_
                                    1- 1447     	.line	407, "main.c"; 	batStatus = 0;//正常状态
                                    1- 1448     	BANKSEL	_batStatus
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 02rr                      1- 1449     	CLRR	_batStatus
                                    1- 1450     	.line	408, "main.c"; 	firstLow = 0;	//重置低电压
                                    1- 1451     	BANKSEL	_firstLow
     006C rrrr                      3-   71 m1      .banksel ram_address
     006D 02rr                      1- 1452     	CLRR	_firstLow
     006E 3rrr                      1- 1453     	LGOTO	_00406_DS_
     006F                           1- 1454     _00398_DS_:
                                    1- 1455     	.line	412, "main.c"; 	batStatus = 2;//满电状态
     006F 2102                      1- 1456     	MOVIA	0x02
                                    1- 1457     	BANKSEL	_batStatus
     0070 rrrr                      3-   71 m1      .banksel ram_address
     0071 00rr                      1- 1458     	MOVAR	_batStatus
                                    1- 1459     	.line	413, "main.c"; 	firstLow = 0;	//重置低电压
                                    1- 1460     	BANKSEL	_firstLow
     0072 rrrr                      3-   71 m1      .banksel ram_address
     0073 02rr                      1- 1461     	CLRR	_firstLow
     0074                           1- 1462     _00406_DS_:
                                    1- 1463     	.line	416, "main.c"; 	}
                                    1- 1464     	RETURN	
     0074 0010                      3-   26 m1      ret
                                    1- 1465     ; exit point of _checkBat
                                    1- 1467     ;***
                                    1- 1468     ;  pBlock Stats: dbName = C
                                    1- 1469     ;***
                                    1- 1470     ;has an exit
                                    1- 1471     ;functions called:
                                    1- 1472     ;   _F_AIN1_Convert
                                    1- 1473     ;   _F_AIN1_Convert
                                    1- 1474     ;4 compiler assigned registers:
                                    1- 1475     ;   r0x1036
                                    1- 1476     ;   r0x1037
                                    1- 1477     ;   r0x1038
                                    1- 1478     ;   r0x1039
                                    1- 1479     ;; Starting pCode block
                                    1- 1480     .segment "code"; module=main, function=_checkInV
     0000                           1- 1482     _checkInV:
                                    1- 1483     ; 2 exit points
                                    1- 1484     	.line	353, "main.c"; 	R_AIN1_DATA = R_AIN1_DATA_LB = 0x00;
                                    1- 1485     	BANKSEL	_R_AIN1_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1486     	CLRR	_R_AIN1_DATA_LB
                                    1- 1487     	BANKSEL	_R_AIN1_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1488     	CLRR	_R_AIN1_DATA
     0004 02rr                      1- 1489     	CLRR	(_R_AIN1_DATA + 1)
                                    1- 1490     	.line	354, "main.c"; 	F_AIN1_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1- 1491     	MOVIA	0x08
     0006 2rrr                      1- 1492     	LCALL	_F_AIN1_Convert
                                    1- 1493     	.line	355, "main.c"; 	R_AIN1_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1494     	BANKSEL	_R_AIN1_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1- 1495     	SWAPR	(_R_AIN1_DATA + 1),W
     0009 22F0                      1- 1496     	ANDIA	0xf0
     000A 00rr                      1- 1497     	MOVAR	(_R_AIN1_DATA + 1)
     000B 15rr                      1- 1498     	SWAPR	_R_AIN1_DATA,W
     000C 00rr                      1- 1499     	MOVAR	_R_AIN1_DATA
     000D 220F                      1- 1500     	ANDIA	0x0f
     000E 11rr                      1- 1501     	IORAR	(_R_AIN1_DATA + 1),F
     000F 12rr                      1- 1502     	XORAR	_R_AIN1_DATA,F
                                    1- 1503     	.line	356, "main.c"; 	R_AIN1_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1- 1504     	MOVIA	0xf0
                                    1- 1505     	BANKSEL	_R_AIN1_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1- 1506     	ANDAR	_R_AIN1_DATA_LB,F
                                    1- 1507     	.line	357, "main.c"; 	R_AIN1_DATA += R_AIN1_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1- 1508     	MOVR	_R_AIN1_DATA_LB,W
                                    1- 1509     	BANKSEL	r0x1038
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1510     	MOVAR	r0x1038
                                    1- 1511     ;;1	MOVAR	r0x1036
                                    1- 1512     ;;1	CLRR	r0x1037
                                    1- 1513     ;;99	MOVR	r0x1036,W
     0016 2100                      1- 1514     	MOVIA	0x00
                                    1- 1515     	BANKSEL	r0x1039
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1516     	MOVAR	r0x1039
                                    1- 1517     	BANKSEL	r0x1038
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1- 1518     	MOVR	r0x1038,W
                                    1- 1519     	BANKSEL	_R_AIN1_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1- 1520     	ADDAR	_R_AIN1_DATA,F
                                    1- 1521     	BANKSEL	r0x1039
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1522     	MOVR	r0x1039,W
     001F 0C03                      1- 1523     	BTRSC	STATUS,0
     0020 05rr                      1- 1524     	INCR	r0x1039,W
     0021 0D03                      1- 1525     	BTRSC	STATUS,2
     0022 3rrr                      1- 1526     	LGOTO	_00006_DS_
                                    1- 1527     	BANKSEL	_R_AIN1_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1- 1528     	ADDAR	(_R_AIN1_DATA + 1),F
                                    1- 1529     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1- 1530     _00006_DS_:
                                    1- 1531     	.line	358, "main.c"; 	R_AIN1_DATA >>=3;					// R_AIN0_DATA divided 8	
     0025 1C03                      1- 1532     	BCR	STATUS,0
                                    1- 1533     	BANKSEL	_R_AIN1_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1- 1534     	RRR	(_R_AIN1_DATA + 1),F
     0028 13rr                      1- 1535     	RRR	_R_AIN1_DATA,F
                                    1- 1536     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1- 1537     	BCR	STATUS,0
     002A 13rr                      1- 1538     	RRR	(_R_AIN1_DATA + 1),F
     002B 13rr                      1- 1539     	RRR	_R_AIN1_DATA,F
                                    1- 1540     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1- 1541     	BCR	STATUS,0
     002D 13rr                      1- 1542     	RRR	(_R_AIN1_DATA + 1),F
     002E 13rr                      1- 1543     	RRR	_R_AIN1_DATA,F
                                    1- 1544     	.line	359, "main.c"; 	if(debug)
                                    1- 1545     	BANKSEL	_debug
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 01rr                      1- 1546     	MOVR	_debug,W
     0031 0D03                      1- 1547     	BTRSC	STATUS,2
     0032 3rrr                      1- 1548     	LGOTO	_00369_DS_
                                    1- 1549     	.line	361, "main.c"; 	R_AIN1_DATA = INV;
     0033 215C                      1- 1550     	MOVIA	0x5c
                                    1- 1551     	BANKSEL	_R_AIN1_DATA
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 00rr                      1- 1552     	MOVAR	_R_AIN1_DATA
     0036 210C                      1- 1553     	MOVIA	0x0c
     0037 00rr                      1- 1554     	MOVAR	(_R_AIN1_DATA + 1)
                                    1- 1555     ;;unsigned compare: left < lit (0xC5D=3165), size=2
     0038                           1- 1556     _00369_DS_:
                                    1- 1557     	.line	363, "main.c"; 	if(R_AIN1_DATA < 3165)
     0038 210C                      1- 1558     	MOVIA	0x0c
                                    1- 1559     	BANKSEL	_R_AIN1_DATA
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 04rr                      1- 1560     	SUBAR	(_R_AIN1_DATA + 1),W
     003B 0903                      1- 1561     	BTRSS	STATUS,2
     003C 3rrr                      1- 1562     	LGOTO	_00386_DS_
     003D 215D                      1- 1563     	MOVIA	0x5d
     003E 04rr                      1- 1564     	SUBAR	_R_AIN1_DATA,W
     003F                           1- 1565     _00386_DS_:
     003F 0C03                      1- 1566     	BTRSC	STATUS,0
     0040 3rrr                      1- 1567     	LGOTO	_00371_DS_
                                    1- 1568     	.line	365, "main.c"; 	inLowTime++;
                                    1- 1569     	BANKSEL	_inLowTime
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 05rr                      1- 1570     	INCR	_inLowTime,F
     0043 3rrr                      1- 1571     	LGOTO	_00372_DS_
     0044                           1- 1572     _00371_DS_:
                                    1- 1573     	.line	369, "main.c"; 	inLowTime = 0;
                                    1- 1574     	BANKSEL	_inLowTime
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 02rr                      1- 1575     	CLRR	_inLowTime
                                    1- 1576     	.line	370, "main.c"; 	chrgStatus = 1;
     0046 2101                      1- 1577     	MOVIA	0x01
                                    1- 1578     	BANKSEL	_chrgStatus
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 00rr                      1- 1579     	MOVAR	_chrgStatus
                                    1- 1580     ;;unsigned compare: left < lit (0xA=10), size=1
     0049                           1- 1581     _00372_DS_:
                                    1- 1582     	.line	373, "main.c"; 	if(inLowTime >= 10)
     0049 210A                      1- 1583     	MOVIA	0x0a
                                    1- 1584     	BANKSEL	_inLowTime
     004A rrrr                      3-   71 m1      .banksel ram_address
     004B 04rr                      1- 1585     	SUBAR	_inLowTime,W
     004C 0803                      1- 1586     	BTRSS	STATUS,0
     004D 3rrr                      1- 1587     	LGOTO	_00375_DS_
                                    1- 1588     	.line	375, "main.c"; 	inLowTime = 10;
     004E 210A                      1- 1589     	MOVIA	0x0a
     004F 00rr                      1- 1590     	MOVAR	_inLowTime
                                    1- 1591     	.line	376, "main.c"; 	chrgStatus = 2;
     0050 2102                      1- 1592     	MOVIA	0x02
                                    1- 1593     	BANKSEL	_chrgStatus
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 00rr                      1- 1594     	MOVAR	_chrgStatus
     0053                           1- 1595     _00375_DS_:
                                    1- 1596     	.line	379, "main.c"; 	}
                                    1- 1597     	RETURN	
     0053 0010                      3-   26 m1      ret
                                    1- 1598     ; exit point of _checkInV
                                    1- 1600     ;***
                                    1- 1601     ;  pBlock Stats: dbName = C
                                    1- 1602     ;***
                                    1- 1603     ;has an exit
                                    1- 1604     ;functions called:
                                    1- 1605     ;   _delay
                                    1- 1606     ;   _delay
                                    1- 1607     ;1 compiler assigned register :
                                    1- 1608     ;   STK00
                                    1- 1609     ;; Starting pCode block
                                    1- 1610     .segment "code"; module=main, function=_initAD
     0000                           1- 1612     _initAD:
                                    1- 1613     ; 2 exit points
                                    1- 1614     	.line	328, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_Quarter_VDD ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 218B                      1- 1615     	MOVIA	0x8b
     0001 00rr                      1- 1616     	MOVAR	_ADMD
                                    1- 1617     	.line	333, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1618     	CLRR	_ADVREFH
                                    1- 1619     	.line	338, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1620     	MOVIA	0x10
     0004 00rr                      1- 1621     	MOVAR	_ADR
                                    1- 1622     	.line	340, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1623     	MOVIA	0x03
     0006 00rr                      1- 1624     	MOVAR	_ADCR
                                    1- 1625     	.line	343, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1626     	BSR	_ADMDbits,4
                                    1- 1627     	.line	344, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1628     	MOVIA	0x64
     0009 00rr                      1- 1629     	MOVAR	STK00
     000A 2100                      1- 1630     	MOVIA	0x00
     000B 2rrr                      1- 1631     	LCALL	_delay
                                    1- 1632     	.line	347, "main.c"; 	}
                                    1- 1633     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1634     ; exit point of _initAD
                                    1- 1636     ;***
                                    1- 1637     ;  pBlock Stats: dbName = C
                                    1- 1638     ;***
                                    1- 1639     ;has an exit
                                    1- 1640     ;functions called:
                                    1- 1641     ;   _keyRead
                                    1- 1642     ;   _closeStatus
                                    1- 1643     ;   _gotoSleep
                                    1- 1644     ;   _keyRead
                                    1- 1645     ;   _closeStatus
                                    1- 1646     ;   _gotoSleep
                                    1- 1647     ;1 compiler assigned register :
                                    1- 1648     ;   r0x103A
                                    1- 1649     ;; Starting pCode block
                                    1- 1650     .segment "code"; module=main, function=_keyCtr
                                    1- 1652     ;local variable name mapping:
     0000                           1- 1654     _keyCtr:
                                    1- 1655     ; 2 exit points
                                    1- 1656     	.line	297, "main.c"; 	if(chrgStatus == 1)
                                    1- 1657     	BANKSEL	_chrgStatus
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1658     	MOVR	_chrgStatus,W
     0002 2401                      1- 1659     	XORIA	0x01
     0003 0903                      1- 1660     	BTRSS	STATUS,2
     0004 3rrr                      1- 1661     	LGOTO	_00350_DS_
                                    1- 1662     	.line	300, "main.c"; 	workStatus = 1;
     0005 2101                      1- 1663     	MOVIA	0x01
                                    1- 1664     	BANKSEL	_workStatus
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 00rr                      1- 1665     	MOVAR	_workStatus
                                    1- 1666     	.line	301, "main.c"; 	POWERON();
     0008 18rr                      1- 1667     	BSR	_PORTA,0
                                    1- 1668     	.line	302, "main.c"; 	LED3ON();
     0009 1Brr                      1- 1669     	BSR	_PORTA,6
     000A                           1- 1670     _00350_DS_:
                                    1- 1671     	.line	304, "main.c"; 	if(chrgStatus == 0 || chrgStatus == 2)
                                    1- 1672     	BANKSEL	_chrgStatus
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 01rr                      1- 1673     	MOVR	_chrgStatus,W
     000C 0D03                      1- 1674     	BTRSC	STATUS,2
     000D 3rrr                      1- 1675     	LGOTO	_00356_DS_
     000E 01rr                      1- 1676     	MOVR	_chrgStatus,W
     000F 2402                      1- 1677     	XORIA	0x02
     0010 0903                      1- 1678     	BTRSS	STATUS,2
     0011 3rrr                      1- 1679     	LGOTO	_00359_DS_
     0012                           1- 1680     _00356_DS_:
                                    1- 1681     	.line	306, "main.c"; 	char kClick = keyRead(0x01 & ~PORTB);
     0012 07rr                      1- 1682     	COMR	_PORTB,W
                                    1- 1683     	BANKSEL	r0x103A
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1- 1684     	MOVAR	r0x103A
     0015 2101                      1- 1685     	MOVIA	0x01
     0016 10rr                      1- 1686     	ANDAR	r0x103A,F
     0017 01rr                      1- 1687     	MOVR	r0x103A,W
     0018 2rrr                      1- 1688     	LCALL	_keyRead
                                    1- 1689     	BANKSEL	r0x103A
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1- 1690     	MOVAR	r0x103A
                                    1- 1691     	.line	307, "main.c"; 	if(kClick == 2)
     001B 2402                      1- 1692     	XORIA	0x02
     001C 0903                      1- 1693     	BTRSS	STATUS,2
     001D 3rrr                      1- 1694     	LGOTO	_00359_DS_
                                    1- 1695     	.line	309, "main.c"; 	if(workStatus == 0 )
                                    1- 1696     	BANKSEL	_workStatus
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1- 1697     	MOVR	_workStatus,W
     0020 0903                      1- 1698     	BTRSS	STATUS,2
     0021 3rrr                      1- 1699     	LGOTO	_00352_DS_
                                    1- 1700     	.line	311, "main.c"; 	workStatus = 1;
     0022 2101                      1- 1701     	MOVIA	0x01
     0023 00rr                      1- 1702     	MOVAR	_workStatus
                                    1- 1703     	.line	312, "main.c"; 	POWERON();
     0024 18rr                      1- 1704     	BSR	_PORTA,0
     0025 3rrr                      1- 1705     	LGOTO	_00359_DS_
     0026                           1- 1706     _00352_DS_:
                                    1- 1707     	.line	316, "main.c"; 	workStatus = 0;
                                    1- 1708     	BANKSEL	_workStatus
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 02rr                      1- 1709     	CLRR	_workStatus
                                    1- 1710     	.line	317, "main.c"; 	closeStatus();
     0028 2rrr                      1- 1711     	LCALL	_closeStatus
                                    1- 1712     	.line	318, "main.c"; 	gotoSleep();
     0029 2rrr                      1- 1713     	LCALL	_gotoSleep
     002A                           1- 1714     _00359_DS_:
                                    1- 1715     	.line	322, "main.c"; 	}
                                    1- 1716     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1- 1717     ; exit point of _keyCtr
                                    1- 1719     ;***
                                    1- 1720     ;  pBlock Stats: dbName = C
                                    1- 1721     ;***
                                    1- 1722     ;has an exit
                                    1- 1723     ;functions called:
                                    1- 1724     ;   _checkBat
                                    1- 1725     ;   _checkBat
                                    1- 1726     ;; Starting pCode block
                                    1- 1727     .segment "code"; module=main, function=_workCtr
     0000                           1- 1729     _workCtr:
                                    1- 1730     ; 2 exit points
                                    1- 1731     	.line	232, "main.c"; 	checkBat();
     0000 2rrr                      1- 1732     	LCALL	_checkBat
                                    1- 1733     	.line	233, "main.c"; 	if(PORTA & 0x20)
     0001 0Arr                      1- 1734     	BTRSS	_PORTA,5
     0002 3rrr                      1- 1735     	LGOTO	_00292_DS_
                                    1- 1736     	.line	236, "main.c"; 	if(batStatus == 2 || chrgStatus == 2)
                                    1- 1737     	BANKSEL	_batStatus
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1- 1738     	MOVR	_batStatus,W
     0005 2402                      1- 1739     	XORIA	0x02
     0006 0D03                      1- 1740     	BTRSC	STATUS,2
     0007 3rrr                      1- 1741     	LGOTO	_00273_DS_
                                    1- 1742     	BANKSEL	_chrgStatus
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 01rr                      1- 1743     	MOVR	_chrgStatus,W
     000A 2402                      1- 1744     	XORIA	0x02
     000B 0903                      1- 1745     	BTRSS	STATUS,2
     000C 3rrr                      1- 1746     	LGOTO	_00274_DS_
     000D                           1- 1747     _00273_DS_:
                                    1- 1748     	.line	238, "main.c"; 	LED1OFF();		//充满了，灭灯
     000D 1Drr                      1- 1749     	BCR	_PORTB,3
                                    1- 1750     	.line	239, "main.c"; 	CHRGOFF();
     000E 1Drr                      1- 1751     	BCR	_PORTB,2
     000F 3rrr                      1- 1752     	LGOTO	_00275_DS_
     0010                           1- 1753     _00274_DS_:
                                    1- 1754     	.line	243, "main.c"; 	LED1ON();
     0010 19rr                      1- 1755     	BSR	_PORTB,3
     0011                           1- 1756     _00275_DS_:
                                    1- 1757     	.line	247, "main.c"; 	if(batStatus == 1 && chrgStatus == 2)
                                    1- 1758     	BANKSEL	_batStatus
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1759     	MOVR	_batStatus,W
     0013 2401                      1- 1760     	XORIA	0x01
     0014 0903                      1- 1761     	BTRSS	STATUS,2
     0015 3rrr                      1- 1762     	LGOTO	_00278_DS_
                                    1- 1763     	BANKSEL	_chrgStatus
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 01rr                      1- 1764     	MOVR	_chrgStatus,W
     0018 2402                      1- 1765     	XORIA	0x02
     0019 0D03                      1- 1766     	BTRSC	STATUS,2
                                    1- 1767     	.line	249, "main.c"; 	LED4ON();
     001A 1Crr                      1- 1768     	BCR	_PORTB,1
     001B                           1- 1769     _00278_DS_:
                                    1- 1770     	.line	252, "main.c"; 	if(chrgStatus == 1)
                                    1- 1771     	BANKSEL	_chrgStatus
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1- 1772     	MOVR	_chrgStatus,W
     001D 2401                      1- 1773     	XORIA	0x01
     001E 0903                      1- 1774     	BTRSS	STATUS,2
     001F 3rrr                      1- 1775     	LGOTO	_00293_DS_
                                    1- 1776     	.line	254, "main.c"; 	firstLow = 0;
                                    1- 1777     	BANKSEL	_firstLow
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 02rr                      1- 1778     	CLRR	_firstLow
     0022 3rrr                      1- 1779     	LGOTO	_00293_DS_
     0023                           1- 1780     _00292_DS_:
                                    1- 1781     	.line	260, "main.c"; 	LED1OFF();		//未充电,电池供电
     0023 1Drr                      1- 1782     	BCR	_PORTB,3
                                    1- 1783     	.line	261, "main.c"; 	if(workStatus == 1 && batStatus < 3)
                                    1- 1784     	BANKSEL	_workStatus
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1- 1785     	MOVR	_workStatus,W
     0026 2401                      1- 1786     	XORIA	0x01
     0027 0903                      1- 1787     	BTRSS	STATUS,2
     0028 3rrr                      1- 1788     	LGOTO	_00283_DS_
                                    1- 1789     ;;unsigned compare: left < lit (0x3=3), size=1
     0029 2103                      1- 1790     	MOVIA	0x03
                                    1- 1791     	BANKSEL	_batStatus
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 04rr                      1- 1792     	SUBAR	_batStatus,W
     002C 0803                      1- 1793     	BTRSS	STATUS,0
                                    1- 1794     	.line	263, "main.c"; 	LED2ON();
     002D 1Brr                      1- 1795     	BSR	_PORTA,7
     002E                           1- 1796     _00283_DS_:
                                    1- 1797     	.line	265, "main.c"; 	if(batStatus == 1)
                                    1- 1798     	BANKSEL	_batStatus
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 01rr                      1- 1799     	MOVR	_batStatus,W
     0030 2401                      1- 1800     	XORIA	0x01
     0031 0903                      1- 1801     	BTRSS	STATUS,2
     0032 3rrr                      1- 1802     	LGOTO	_00289_DS_
                                    1- 1803     	.line	267, "main.c"; 	LED4ON();
     0033 1Crr                      1- 1804     	BCR	_PORTB,1
     0034 3rrr                      1- 1805     	LGOTO	_00293_DS_
     0035                           1- 1806     _00289_DS_:
                                    1- 1807     	.line	269, "main.c"; 	else if(batStatus == 0 || batStatus == 2)
                                    1- 1808     	BANKSEL	_batStatus
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 01rr                      1- 1809     	MOVR	_batStatus,W
     0037 0D03                      1- 1810     	BTRSC	STATUS,2
     0038 3rrr                      1- 1811     	LGOTO	_00285_DS_
     0039 01rr                      1- 1812     	MOVR	_batStatus,W
     003A 2402                      1- 1813     	XORIA	0x02
     003B 0D03                      1- 1814     	BTRSC	STATUS,2
     003C                           1- 1815     _00285_DS_:
                                    1- 1816     	.line	271, "main.c"; 	LED4OFF();
     003C 18rr                      1- 1817     	BSR	_PORTB,1
     003D                           1- 1818     _00293_DS_:
                                    1- 1819     	.line	276, "main.c"; 	if(batStatus == 3 && chrgStatus != 1)
                                    1- 1820     	BANKSEL	_batStatus
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1- 1821     	MOVR	_batStatus,W
     003F 2403                      1- 1822     	XORIA	0x03
     0040 0903                      1- 1823     	BTRSS	STATUS,2
     0041 3rrr                      1- 1824     	LGOTO	_00301_DS_
                                    1- 1825     	BANKSEL	_chrgStatus
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 01rr                      1- 1826     	MOVR	_chrgStatus,W
     0044 2401                      1- 1827     	XORIA	0x01
     0045 0D03                      1- 1828     	BTRSC	STATUS,2
     0046 3rrr                      1- 1829     	LGOTO	_00301_DS_
                                    1- 1830     	.line	278, "main.c"; 	if(++firstLowTime >= 10)
                                    1- 1831     	BANKSEL	_firstLowTime
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 05rr                      1- 1832     	INCR	_firstLowTime,F
     0049 210A                      1- 1833     	MOVIA	0x0a
     004A 04rr                      1- 1834     	SUBAR	_firstLowTime,W
     004B 0803                      1- 1835     	BTRSS	STATUS,0
     004C 3rrr                      1- 1836     	LGOTO	_00301_DS_
                                    1- 1837     	.line	280, "main.c"; 	firstLowTime = 0;
     004D 02rr                      1- 1838     	CLRR	_firstLowTime
                                    1- 1839     	.line	281, "main.c"; 	POWEROFF();			//缺电状态关闭负载
     004E 1Crr                      1- 1840     	BCR	_PORTA,0
                                    1- 1841     	.line	282, "main.c"; 	LED2OFF();
     004F 1Frr                      1- 1842     	BCR	_PORTA,7
                                    1- 1843     	.line	283, "main.c"; 	if(firstLow == 0)
                                    1- 1844     	BANKSEL	_firstLow
     0050 rrrr                      3-   71 m1      .banksel ram_address
     0051 01rr                      1- 1845     	MOVR	_firstLow,W
     0052 0903                      1- 1846     	BTRSS	STATUS,2
     0053 3rrr                      1- 1847     	LGOTO	_00295_DS_
                                    1- 1848     	.line	284, "main.c"; 	shandeng = 6;
     0054 2106                      1- 1849     	MOVIA	0x06
                                    1- 1850     	BANKSEL	_shandeng
     0055 rrrr                      3-   71 m1      .banksel ram_address
     0056 00rr                      1- 1851     	MOVAR	_shandeng
     0057                           1- 1852     _00295_DS_:
                                    1- 1853     	.line	285, "main.c"; 	firstLow = 1;
     0057 2101                      1- 1854     	MOVIA	0x01
                                    1- 1855     	BANKSEL	_firstLow
     0058 rrrr                      3-   71 m1      .banksel ram_address
     0059 00rr                      1- 1856     	MOVAR	_firstLow
     005A                           1- 1857     _00301_DS_:
                                    1- 1858     	.line	292, "main.c"; 	}
                                    1- 1859     	RETURN	
     005A 0010                      3-   26 m1      ret
                                    1- 1860     ; exit point of _workCtr
                                    1- 1862     ;***
                                    1- 1863     ;  pBlock Stats: dbName = C
                                    1- 1864     ;***
                                    1- 1865     ;has an exit
                                    1- 1866     ;functions called:
                                    1- 1867     ;   _checkInV
                                    1- 1868     ;   _checkInV
                                    1- 1869     ;; Starting pCode block
                                    1- 1870     .segment "code"; module=main, function=_chrgWork
     0000                           1- 1872     _chrgWork:
                                    1- 1873     ; 2 exit points
                                    1- 1874     	.line	201, "main.c"; 	if(PORTA & 0x20)
     0000 0Arr                      1- 1875     	BTRSS	_PORTA,5
     0001 3rrr                      1- 1876     	LGOTO	_00268_DS_
                                    1- 1877     	.line	203, "main.c"; 	checkInV();
     0002 2rrr                      1- 1878     	LCALL	_checkInV
                                    1- 1879     	.line	204, "main.c"; 	if(chrgStatus == 2)
                                    1- 1880     	BANKSEL	_chrgStatus
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 01rr                      1- 1881     	MOVR	_chrgStatus,W
     0005 2402                      1- 1882     	XORIA	0x02
     0006 0903                      1- 1883     	BTRSS	STATUS,2
     0007 3rrr                      1- 1884     	LGOTO	_00264_DS_
                                    1- 1885     	.line	207, "main.c"; 	if(workStatus == 1 && batStatus < 3)
                                    1- 1886     	BANKSEL	_workStatus
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 01rr                      1- 1887     	MOVR	_workStatus,W
     000A 2401                      1- 1888     	XORIA	0x01
     000B 0903                      1- 1889     	BTRSS	STATUS,2
     000C 3rrr                      1- 1890     	LGOTO	_00260_DS_
                                    1- 1891     ;;unsigned compare: left < lit (0x3=3), size=1
     000D 2103                      1- 1892     	MOVIA	0x03
                                    1- 1893     	BANKSEL	_batStatus
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 04rr                      1- 1894     	SUBAR	_batStatus,W
     0010 0C03                      1- 1895     	BTRSC	STATUS,0
     0011 3rrr                      1- 1896     	LGOTO	_00260_DS_
                                    1- 1897     	.line	209, "main.c"; 	LED2ON();
     0012 1Brr                      1- 1898     	BSR	_PORTA,7
                                    1- 1899     	.line	210, "main.c"; 	POWERON();
     0013 18rr                      1- 1900     	BSR	_PORTA,0
     0014 3rrr                      1- 1901     	LGOTO	_00268_DS_
     0015                           1- 1902     _00260_DS_:
                                    1- 1903     	.line	214, "main.c"; 	LED3OFF();
     0015 1Frr                      1- 1904     	BCR	_PORTA,6
                                    1- 1905     	.line	215, "main.c"; 	POWEROFF();
     0016 1Crr                      1- 1906     	BCR	_PORTA,0
     0017 3rrr                      1- 1907     	LGOTO	_00268_DS_
     0018                           1- 1908     _00264_DS_:
                                    1- 1909     	.line	220, "main.c"; 	LED3ON();
     0018 1Brr                      1- 1910     	BSR	_PORTA,6
     0019                           1- 1911     _00268_DS_:
                                    1- 1912     	.line	224, "main.c"; 	}
                                    1- 1913     	RETURN	
     0019 0010                      3-   26 m1      ret
                                    1- 1914     ; exit point of _chrgWork
                                    1- 1917     ;	code size estimation:
                                    1- 1918     ;	  691+  169 =   860 instructions ( 2058 byte)
                                    1- 1920     	end
                                    1- 1920     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000001B
_00002_DS_              Label    0000002E
_00003_DS_              Label    0000002E
_00004_DS_              Label    0000002E
_00005_DS_              Label    00000025
_00006_DS_              Label    00000025
_00007_DS_              Label    00000062
_00106_DS_              Label    0000002E
_00107_DS_              Label    0000002F
_00111_DS_              Label    00000032
_00118_DS_              Label    00000037
_00120_DS_              Label    0000003B
_00153_DS_              Label    00000041
_00161_DS_              Label    00000043
_00162_DS_              Label    00000049
_00174_DS_              Label    00000059
_00175_DS_              Label    00000072
_00185_DS_              Label    00000085
_00188_DS_              Label    0000001E
_00260_DS_              Label    00000015
_00264_DS_              Label    00000018
_00268_DS_              Label    00000019
_00273_DS_              Label    0000000D
_00274_DS_              Label    00000010
_00275_DS_              Label    00000011
_00278_DS_              Label    0000001B
_00283_DS_              Label    0000002E
_00285_DS_              Label    0000003C
_00289_DS_              Label    00000035
_00292_DS_              Label    00000023
_00293_DS_              Label    0000003D
_00295_DS_              Label    00000057
_00301_DS_              Label    0000005A
_00350_DS_              Label    0000000A
_00352_DS_              Label    00000026
_00356_DS_              Label    00000012
_00359_DS_              Label    0000002A
_00369_DS_              Label    00000038
_00371_DS_              Label    00000044
_00372_DS_              Label    00000049
_00375_DS_              Label    00000053
_00386_DS_              Label    0000003F
_00392_DS_              Label    00000038
_00394_DS_              Label    00000055
_00398_DS_              Label    0000006F
_00401_DS_              Label    00000061
_00404_DS_              Label    00000045
_00406_DS_              Label    00000074
_00426_DS_              Label    0000003F
_00427_DS_              Label    0000004C
_00428_DS_              Label    0000005C
_00429_DS_              Label    00000068
_00436_DS_              Label    00000010
_00438_DS_              Label    00000031
_00445_DS_              Label    00000010
_00447_DS_              Label    00000031
_00454_DS_              Label    00000010
_00456_DS_              Label    00000031
_00465_DS_              Label    00000000
_00472_DS_              Label    00000009
_00474_DS_              Label    0000001C
_00483_DS_              Label    00000013
_00495_DS_              Label    0000001F
_00496_DS_              Label    00000027
_00498_DS_              Label    00000015
_00499_DS_              Label    00000029
_00500_DS_              Label    0000002A
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_batStatus              Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkBat               Label    00000000
_checkInV               Label    00000000
_chrgStatus             Label    00000000
_chrgWork               Label    00000000
_closeStatus            Label    00000000
_CMPCR                  Label    00000000
_count500ms             Label    00000000
_debug                  Label    00000000
_delay                  Label    00000000
_F_AIN1_Convert         Label    00000000
_F_AIN2_Convert         Label    00000000
_F_AIN4_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_firstLow               Label    00000000
_firstLowTime           Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_inLowTime              Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_longPressFlag          Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_overTime               Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN1_DATA            Label    00000000
_R_AIN1_DATA_LB         Label    00000000
_R_AIN2_DATA            Label    00000000
_R_AIN2_DATA_LB         Label    00000000
_R_AIN4_DATA            Label    00000000
_R_AIN4_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_shandeng               Label    00000000
_sleepDelay             Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStatus             Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    0000004C
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x101B                 Label    00000000
r0x101C                 Label    00000000
r0x101D                 Label    00000000
r0x101E                 Label    00000000
r0x101F                 Label    00000000
r0x1020                 Label    00000000
r0x1021                 Label    00000000
r0x1022                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1027                 Label    00000000
r0x1028                 Label    00000000
r0x102B                 Label    00000000
r0x102C                 Label    00000000
r0x102D                 Label    00000000
r0x102E                 Label    00000000
r0x1031                 Label    00000000
r0x1034                 Label    00000000
r0x1035                 Label    00000000
r0x1038                 Label    00000000
r0x1039                 Label    00000000
r0x103A                 Label    00000000
r0x103B                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
