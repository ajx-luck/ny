
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B061D,c=on
                                    1-    9     	#include "ny8b061d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_IO_Init
                                    1-   15     	extern	_ledCtr
                                    1-   16     	extern	_workCtr
                                    1-   17     	extern	_fgCtr
                                    1-   18     	extern	_LedCtr2
                                    1-   19     	extern	_PORTAbits
                                    1-   20     	extern	_PORTBbits
                                    1-   21     	extern	_PCONbits
                                    1-   22     	extern	_BWUCONbits
                                    1-   23     	extern	_ABPLCONbits
                                    1-   24     	extern	_BPHCONbits
                                    1-   25     	extern	_INTEbits
                                    1-   26     	extern	_INTFbits
                                    1-   27     	extern	_ADMDbits
                                    1-   28     	extern	_ADRbits
                                    1-   29     	extern	_ADVREFHbits
                                    1-   30     	extern	_ADCRbits
                                    1-   31     	extern	_AWUCONbits
                                    1-   32     	extern	_PACONbits
                                    1-   33     	extern	_INTEDGbits
                                    1-   34     	extern	_RFCbits
                                    1-   35     	extern	_INTE2bits
                                    1-   36     	extern	_INDF
                                    1-   37     	extern	_TMR0
                                    1-   38     	extern	_PCL
                                    1-   39     	extern	_STATUS
                                    1-   40     	extern	_FSR
                                    1-   41     	extern	_PORTA
                                    1-   42     	extern	_PORTB
                                    1-   43     	extern	_PCON
                                    1-   44     	extern	_BWUCON
                                    1-   45     	extern	_PCHBUF
                                    1-   46     	extern	_ABPLCON
                                    1-   47     	extern	_BPHCON
                                    1-   48     	extern	_INTE
                                    1-   49     	extern	_INTF
                                    1-   50     	extern	_ADMD
                                    1-   51     	extern	_ADR
                                    1-   52     	extern	_ADD
                                    1-   53     	extern	_ADVREFH
                                    1-   54     	extern	_ADCR
                                    1-   55     	extern	_AWUCON
                                    1-   56     	extern	_PACON
                                    1-   57     	extern	_INTEDG
                                    1-   58     	extern	_TMRH
                                    1-   59     	extern	_RFC
                                    1-   60     	extern	_TM3RH
                                    1-   61     	extern	_INTE2
                                    1-   62     	extern	_TMR1
                                    1-   63     	extern	_T1CR1
                                    1-   64     	extern	_T1CR2
                                    1-   65     	extern	_PWM1DUTY
                                    1-   66     	extern	_PS1CV
                                    1-   67     	extern	_BZ1CR
                                    1-   68     	extern	_IRCR
                                    1-   69     	extern	_TBHP
                                    1-   70     	extern	_TBHD
                                    1-   71     	extern	_TMR2
                                    1-   72     	extern	_T2CR1
                                    1-   73     	extern	_T2CR2
                                    1-   74     	extern	_PWM2DUTY
                                    1-   75     	extern	_PS2CV
                                    1-   76     	extern	_BZ2CR
                                    1-   77     	extern	_OSCCR
                                    1-   78     	extern	_TMR3
                                    1-   79     	extern	_T3CR1
                                    1-   80     	extern	_T3CR2
                                    1-   81     	extern	_PWM3DUTY
                                    1-   82     	extern	_PS3CV
                                    1-   83     	extern	_BZ3CR
                                    1-   84     	extern	_IOSTA
                                    1-   85     	extern	_IOSTB
                                    1-   86     	extern	_APHCON
                                    1-   87     	extern	_PS0CV
                                    1-   88     	extern	_BODCON
                                    1-   89     	extern	_PCON1
                                    1-   90     	extern	_T0MD
                                    1-   91     	extern	___sdcc_saved_fsr
                                    1-   92     	extern	___sdcc_saved_stk00
                                    1-   93     	extern	___sdcc_saved_stk01
                                    1-   94     	extern	__nyc_ny8_startup
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     ; global declarations
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     	extern	_F_wait_eoc
                                    1-   99     	extern	_F_AIN3_Convert
                                    1-  100     	extern	_F_AIN4_Convert
                                    1-  101     	extern	_checkOutA
                                    1-  102     	extern	_checkBatAD
                                    1-  103     	extern	_initAD
                                    1-  104     	extern	_delay
                                    1-  105     	extern	_chrgCtr
                                    1-  106     	extern	_keyRead
                                    1-  107     	extern	_gotoSleep
                                    1-  108     	extern	_pwmStop
                                    1-  109     	extern	_pwmInit
                                    1-  110     	extern	_LED4ON
                                    1-  111     	extern	_LED3ON
                                    1-  112     	extern	_LED2ON
                                    1-  113     	extern	_LED1ON
                                    1-  114     	extern	_LedInput
                                    1-  115     	extern	_ledShow
                                    1-  116     	extern	_initSys
                                    1-  117     	extern	_powerOff
                                    1-  118     	extern	_keyCtr
                                    1-  119     	extern	_isr
                                    1-  120     	extern	_main
                                    1-  121     	extern	_Status
                                    1-  122     	extern	_duty
                                    1-  123     	extern	_intCount
                                    1-  124     	extern	_count500ms
                                    1-  125     	extern	_keyCount
                                    1-  126     	extern	_workStep
                                    1-  127     	extern	_ledStep
                                    1-  128     	extern	_fgCount
                                    1-  129     	extern	_fgPRD
                                    1-  130     	extern	_preFG
                                    1-  131     	extern	_maxDuty
                                    1-  132     	extern	_pwStep
                                    1-  133     	extern	_R_AIN4_DATA
                                    1-  134     	extern	_R_AIN4_DATA_LB
                                    1-  135     	extern	_R_AIN3_DATA
                                    1-  136     	extern	_R_AIN3_DATA_LB
                                    1-  137     	extern	_chrgTime
                                    1-  138     	extern	_startStep
                                    1-  139     	extern	_sleepTime
                                    1-  140     	extern	_count200ms
                                    1-  141     	extern	_count1s
                                    1-  142     	extern	_count900s
                                    1-  143     	extern	_lowBatTime
                                    1-  144     	extern	_ledTime
                                    1-  145     	extern	_overCount
                                    1-  146     	extern	_debug
                                    1-  147     	extern	_lowBat
                                    1-  148     	extern	_currentDuty
                                    1-  149     	extern	_workStartFlag
                                    1-  151     	extern PSAVE
                                    1-  152     	extern SSAVE
                                    1-  153     	extern WSAVE
                                    1-  154     	extern STK02
                                    1-  155     	extern STK01
                                    1-  156     	extern STK00
                                    1-  158     .segment "uninit", 0x20000020
 20000020                           1-  159     PSAVE:
                                    1-  160     	.res 1
 20000021                           1-  161     SSAVE:
                                    1-  162     	.res 1
 20000022                           1-  163     WSAVE:
                                    1-  164     	.res 1
 20000023                           1-  165     STK02:
                                    1-  166     	.res 1
 20000024                           1-  167     STK01:
                                    1-  168     	.res 1
 20000025                           1-  169     STK00:
                                    1-  170     	.res 1
                                    1-  172     ;--------------------------------------------------------
                                    1-  173     ; global definitions
                                    1-  174     ;--------------------------------------------------------
                                    1-  175     .segment "uninit"
     0000                           1-  176     _R_AIN4_DATA:
                                    1-  177     	.res	2
                                    1-  180     .segment "uninit"
     0000                           1-  181     _R_AIN4_DATA_LB:
                                    1-  182     	.res	1
                                    1-  185     .segment "uninit"
     0000                           1-  186     _R_AIN3_DATA:
                                    1-  187     	.res	2
                                    1-  190     .segment "uninit"
     0000                           1-  191     _R_AIN3_DATA_LB:
                                    1-  192     	.res	1
                                    1-  195     ;--------------------------------------------------------
                                    1-  196     ; absolute symbol definitions
                                    1-  197     ;--------------------------------------------------------
                                    1-  198     ;--------------------------------------------------------
                                    1-  199     ; compiler-defined variables
                                    1-  200     ;--------------------------------------------------------
                                    1-  201     .segment "uninit"
     0000                           1-  202     r0x103F:
                                    1-  203     	.res	1
                                    1-  204     .segment "uninit"
     0000                           1-  205     r0x1039:
                                    1-  206     	.res	1
                                    1-  207     .segment "uninit"
     0000                           1-  208     r0x103E:
                                    1-  209     	.res	1
                                    1-  210     .segment "uninit"
     0000                           1-  211     r0x103D:
                                    1-  212     	.res	1
                                    1-  213     .segment "uninit"
     0000                           1-  214     r0x103C:
                                    1-  215     	.res	1
                                    1-  216     .segment "uninit"
     0000                           1-  217     r0x103B:
                                    1-  218     	.res	1
                                    1-  219     .segment "uninit"
     0000                           1-  220     r0x103A:
                                    1-  221     	.res	1
                                    1-  222     .segment "uninit"
     0000                           1-  223     r0x1038:
                                    1-  224     	.res	1
                                    1-  225     .segment "uninit"
     0000                           1-  226     r0x1022:
                                    1-  227     	.res	1
                                    1-  228     .segment "uninit"
     0000                           1-  229     r0x1023:
                                    1-  230     	.res	1
                                    1-  231     .segment "uninit"
     0000                           1-  232     r0x1036:
                                    1-  233     	.res	1
                                    1-  234     .segment "uninit"
     0000                           1-  235     r0x1037:
                                    1-  236     	.res	1
                                    1-  237     .segment "uninit"
     0000                           1-  238     r0x1030:
                                    1-  239     	.res	1
                                    1-  240     .segment "uninit"
     0000                           1-  241     r0x1033:
                                    1-  242     	.res	1
                                    1-  243     .segment "uninit"
     0000                           1-  244     r0x102A:
                                    1-  245     	.res	1
                                    1-  246     .segment "uninit"
     0000                           1-  247     r0x102B:
                                    1-  248     	.res	1
                                    1-  249     .segment "uninit"
     0000                           1-  250     r0x102C:
                                    1-  251     	.res	1
                                    1-  252     .segment "uninit"
     0000                           1-  253     r0x102F:
                                    1-  254     	.res	1
                                    1-  255     .segment "uninit"
     0000                           1-  256     r0x1024:
                                    1-  257     	.res	1
                                    1-  258     .segment "uninit"
     0000                           1-  259     r0x1025:
                                    1-  260     	.res	1
                                    1-  261     .segment "uninit"
     0000                           1-  262     r0x1026:
                                    1-  263     	.res	1
                                    1-  264     .segment "uninit"
     0000                           1-  265     r0x1029:
                                    1-  266     	.res	1
                                    1-  267     ;--------------------------------------------------------
                                    1-  268     ; initialized data
                                    1-  269     ;--------------------------------------------------------
                                    1-  271     .segment "idata"
     0000                           1-  272     _Status:
     0000 0000                      1-  273     	dw	0x00
                                    1-  277     .segment "idata"
     0000                           1-  278     _duty:
     0000 0000 0000                 1-  279     	dw	0x00, 0x00
                                    1-  283     .segment "idata"
     0000                           1-  284     _intCount:
     0000 0000                      1-  285     	dw	0x00
                                    1-  289     .segment "idata"
     0000                           1-  290     _count500ms:
     0000 0000                      1-  291     	dw	0x00
                                    1-  295     .segment "idata"
     0000                           1-  296     _keyCount:
     0000 0000                      1-  297     	dw	0x00
                                    1-  301     .segment "idata"
     0000                           1-  302     _workStep:
     0000 0000                      1-  303     	dw	0x00
                                    1-  307     .segment "idata"
     0000                           1-  308     _ledStep:
     0000 0000                      1-  309     	dw	0x00
                                    1-  313     .segment "idata"
     0000                           1-  314     _fgCount:
     0000 0000 0000                 1-  315     	dw	0x00, 0x00
                                    1-  319     .segment "idata"
     0000                           1-  320     _fgPRD:
     0000 0000 0000                 1-  321     	dw	0x00, 0x00
                                    1-  325     .segment "idata"
     0000                           1-  326     _preFG:
     0000 0000                      1-  327     	dw	0x00
                                    1-  331     .segment "idata"
     0000                           1-  332     _maxDuty:
     0000 0000                      1-  333     	dw	0x00
                                    1-  337     .segment "idata"
     0000                           1-  338     _pwStep:
     0000 0000                      1-  339     	dw	0x00
                                    1-  343     .segment "idata"
     0000                           1-  344     _chrgTime:
     0000 0000 0000                 1-  345     	dw	0x00, 0x00
                                    1-  349     .segment "idata"
     0000                           1-  350     _startStep:
     0000 0000                      1-  351     	dw	0x00
                                    1-  355     .segment "idata"
     0000                           1-  356     _sleepTime:
     0000 0000 0000                 1-  357     	dw	0x00, 0x00
                                    1-  361     .segment "idata"
     0000                           1-  362     _count200ms:
     0000 0000                      1-  363     	dw	0x00
                                    1-  367     .segment "idata"
     0000                           1-  368     _count1s:
     0000 0000                      1-  369     	dw	0x00
                                    1-  373     .segment "idata"
     0000                           1-  374     _count900s:
     0000 0000 0000                 1-  375     	dw	0x00, 0x00
                                    1-  379     .segment "idata"
     0000                           1-  380     _lowBatTime:
     0000 0000                      1-  381     	dw	0x00
                                    1-  385     .segment "idata"
     0000                           1-  386     _ledTime:
     0000 0000                      1-  387     	dw	0x00
                                    1-  391     .segment "idata"
     0000                           1-  392     _overCount:
     0000 0000                      1-  393     	dw	0x00
                                    1-  397     .segment "idata"
     0000                           1-  398     _debug:
     0000 0000                      1-  399     	dw	0x00
                                    1-  403     .segment "idata"
     0000                           1-  404     _lowBat:
     0000 0000                      1-  405     	dw	0x00
                                    1-  409     .segment "idata"
     0000                           1-  410     _currentDuty:
     0000 0000                      1-  411     	dw	0x00
                                    1-  415     .segment "idata"
     0000                           1-  416     _workStartFlag:
     0000 0000                      1-  417     	dw	0x00
                                    1-  420     ;--------------------------------------------------------
                                    1-  421     ; overlayable items in internal ram 
                                    1-  422     ;--------------------------------------------------------
                                    1-  423     ;	udata_ovr
                                    1-  424     ;--------------------------------------------------------
                                    1-  425     ; reset vector 
                                    1-  426     ;--------------------------------------------------------
                                    1-  427     ORG	0x0000
     0000 3rrr                      1-  428     	LGOTO	__nyc_ny8_startup
                                    1-  429     ;--------------------------------------------------------
                                    1-  430     ; interrupt and initialization code
                                    1-  431     ;--------------------------------------------------------
                                    1-  432     ORG 0x0008
     0008 3rrr                      1-  433     	lgoto	__sdcc_interrupt
                                    1-  435     .segment "code"
     0000                           1-  436     __sdcc_interrupt:
                                    1-  437     ;***
                                    1-  438     ;  pBlock Stats: dbName = I
                                    1-  439     ;***
                                    1-  440     ;2 compiler assigned registers:
                                    1-  441     ;   STK00
                                    1-  442     ;   STK01
                                    1-  443     ;; Starting pCode block
     0000                           1-  444     _isr:
                                    1-  445     ; 0 exit points
                                    1-  446     	.line	77, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  447     	MOVAR	WSAVE
     0001 1503                      1-  448     	SWAPR	STATUS,W
     0002 0283                      1-  449     	CLRR	STATUS
     0003 00rr                      1-  450     	MOVAR	SSAVE
     0004 010A                      1-  451     	MOVR	PCHBUF,W
     0005 028A                      1-  452     	CLRR	PCHBUF
     0006 00rr                      1-  453     	MOVAR	PSAVE
     0007 0104                      1-  454     	MOVR	FSR,W
     0008 00rr                      1-  455     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  456     	MOVR	STK00,W
     000A 00rr                      1-  457     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  458     	MOVR	STK01,W
     000C 00rr                      1-  459     	MOVAR	___sdcc_saved_stk01
                                    1-  460     	.line	79, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  461     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  462     	LGOTO	_00119_DS_
                                    1-  463     	.line	81, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  464     	MOVIA	0x37
     0010 03rr                      1-  465     	ADDAR	_TMR0,F
                                    1-  466     	.line	83, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  467     	INCR	_intCount,F
                                    1-  468     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  469     	MOVIA	0x64
     0013 04rr                      1-  470     	SUBAR	_intCount,W
     0014 0803                      1-  471     	BTRSS	STATUS,0
     0015 3rrr                      1-  472     	LGOTO	_00119_DS_
                                    1-  473     	.line	85, "main.c"; 	IntFlag = 1;
     0016 18rr                      1-  474     	BSR	_Status,0
                                    1-  475     	.line	86, "main.c"; 	intCount = 0;
     0017 02rr                      1-  476     	CLRR	_intCount
                                    1-  477     	.line	87, "main.c"; 	if(workStep)
     0018 01rr                      1-  478     	MOVR	_workStep,W
     0019 0D03                      1-  479     	BTRSC	STATUS,2
     001A 3rrr                      1-  480     	LGOTO	_00106_DS_
                                    1-  481     	.line	88, "main.c"; 	++fgCount;
     001B 05rr                      1-  482     	INCR	_fgCount,F
     001C 0D03                      1-  483     	BTRSC	STATUS,2
     001D 05rr                      1-  484     	INCR	(_fgCount + 1),F
     001E                           1-  485     _00106_DS_:
                                    1-  486     	.line	89, "main.c"; 	if(++count500ms >= 40)
     001E 05rr                      1-  487     	INCR	_count500ms,F
                                    1-  488     ;;unsigned compare: left < lit (0x28=40), size=1
     001F 2128                      1-  489     	MOVIA	0x28
     0020 04rr                      1-  490     	SUBAR	_count500ms,W
     0021 0C03                      1-  491     	BTRSC	STATUS,0
                                    1-  492     	.line	90, "main.c"; 	count500ms = 0;
     0022 02rr                      1-  493     	CLRR	_count500ms
                                    1-  494     	.line	91, "main.c"; 	if(++count200ms >= 20)
     0023 05rr                      1-  495     	INCR	_count200ms,F
     0024 2114                      1-  496     	MOVIA	0x14
     0025 04rr                      1-  497     	SUBAR	_count200ms,W
     0026 0C03                      1-  498     	BTRSC	STATUS,0
                                    1-  499     	.line	92, "main.c"; 	count200ms = 0;
     0027 02rr                      1-  500     	CLRR	_count200ms
                                    1-  501     	.line	93, "main.c"; 	if(++count1s >= 100)
     0028 05rr                      1-  502     	INCR	_count1s,F
     0029 2164                      1-  503     	MOVIA	0x64
     002A 04rr                      1-  504     	SUBAR	_count1s,W
     002B 0803                      1-  505     	BTRSS	STATUS,0
     002C 3rrr                      1-  506     	LGOTO	_00119_DS_
                                    1-  507     	.line	95, "main.c"; 	count1s = 0;
     002D 02rr                      1-  508     	CLRR	_count1s
                                    1-  509     	.line	96, "main.c"; 	if(workStep)
     002E 01rr                      1-  510     	MOVR	_workStep,W
     002F 0D03                      1-  511     	BTRSC	STATUS,2
     0030 3rrr                      1-  512     	LGOTO	_00112_DS_
                                    1-  513     	.line	98, "main.c"; 	++count900s;
     0031 05rr                      1-  514     	INCR	_count900s,F
     0032 0D03                      1-  515     	BTRSC	STATUS,2
     0033 05rr                      1-  516     	INCR	(_count900s + 1),F
     0034 3rrr                      1-  517     	LGOTO	_00119_DS_
     0035                           1-  518     _00112_DS_:
                                    1-  519     	.line	102, "main.c"; 	count900s = 0;
     0035 02rr                      1-  520     	CLRR	_count900s
     0036 02rr                      1-  521     	CLRR	(_count900s + 1)
     0037                           1-  522     _00119_DS_:
                                    1-  523     	.line	111, "main.c"; 	if(INTFbits.PABIF)
     0037 08rr                      1-  524     	BTRSS	_INTFbits,1
     0038 3rrr                      1-  525     	LGOTO	_00121_DS_
                                    1-  526     	.line	113, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0039 21FD                      1-  527     	MOVIA	0xfd
     003A 00rr                      1-  528     	MOVAR	_INTF
     003B                           1-  529     _00121_DS_:
                                    1-  530     	.line	116, "main.c"; 	INTF = 0;
     003B 02rr                      1-  531     	CLRR	_INTF
                                    1-  532     	.line	118, "main.c"; 	}
     003C 01rr                      1-  533     	MOVR	___sdcc_saved_stk01,W
     003D 00rr                      1-  534     	MOVAR	STK01
     003E 01rr                      1-  535     	MOVR	___sdcc_saved_stk00,W
     003F 00rr                      1-  536     	MOVAR	STK00
     0040 01rr                      1-  537     	MOVR	___sdcc_saved_fsr,W
     0041 0084                      1-  538     	MOVAR	FSR
     0042 01rr                      1-  539     	MOVR	PSAVE,W
     0043 008A                      1-  540     	MOVAR	PCHBUF
     0044 0283                      1-  541     	CLRR	STATUS
     0045 15rr                      1-  542     	SWAPR	SSAVE,W
     0046 0083                      1-  543     	MOVAR	STATUS
     0047 15rr                      1-  544     	SWAPR	WSAVE,F
     0048 15rr                      1-  545     	SWAPR	WSAVE,W
     0049                           1-  546     END_OF_INTERRUPT:
     0049 0011                      1-  547     	RETIE	
                                    1-  549     ;--------------------------------------------------------
                                    1-  550     ; code
                                    1-  551     ;--------------------------------------------------------
                                    1-  552     ;***
                                    1-  553     ;  pBlock Stats: dbName = M
                                    1-  554     ;***
                                    1-  555     ;has an exit
                                    1-  556     ;functions called:
                                    1-  557     ;   _initSys
                                    1-  558     ;   _initAD
                                    1-  559     ;   _ledShow
                                    1-  560     ;   _ledShow
                                    1-  561     ;   _keyCtr
                                    1-  562     ;   _checkBatAD
                                    1-  563     ;   _checkOutA
                                    1-  564     ;   _chrgCtr
                                    1-  565     ;   _gotoSleep
                                    1-  566     ;   _powerOff
                                    1-  567     ;   _initSys
                                    1-  568     ;   _initAD
                                    1-  569     ;   _ledShow
                                    1-  570     ;   _ledShow
                                    1-  571     ;   _keyCtr
                                    1-  572     ;   _checkBatAD
                                    1-  573     ;   _checkOutA
                                    1-  574     ;   _chrgCtr
                                    1-  575     ;   _gotoSleep
                                    1-  576     ;   _powerOff
                                    1-  577     ;; Starting pCode block
                                    1-  578     .segment "code"; module=main, function=_main
     0000                           1-  580     _main:
                                    1-  581     ; 2 exit points
                                    1-  582     	.line	122, "main.c"; 	initSys();
     0000 2rrr                      1-  583     	LCALL	_initSys
                                    1-  584     	.line	123, "main.c"; 	initAD();
     0001 2rrr                      1-  585     	LCALL	_initAD
     0002                           1-  586     _00148_DS_:
                                    1-  587     	.line	126, "main.c"; 	ledShow();
     0002 2rrr                      1-  588     	LCALL	_ledShow
                                    1-  589     	.line	127, "main.c"; 	CLRWDT();
     0003 0002                      1-  590     	clrwdt
                                    1-  591     	.line	128, "main.c"; 	if(!IntFlag)
     0004 08rr                      1-  592     	BTRSS	_Status,0
     0005 3rrr                      1-  593     	LGOTO	_00148_DS_
                                    1-  594     	.line	130, "main.c"; 	IntFlag = 0;
     0006 1Crr                      1-  595     	BCR	_Status,0
                                    1-  596     	.line	131, "main.c"; 	ledShow();
     0007 2rrr                      1-  597     	LCALL	_ledShow
                                    1-  598     	.line	132, "main.c"; 	if(chrgFlag == 0)
     0008 09rr                      1-  599     	BTRSS	_Status,3
                                    1-  600     	.line	133, "main.c"; 	keyCtr();
     0009 2rrr                      1-  601     	LCALL	_keyCtr
                                    1-  602     	.line	134, "main.c"; 	if(count200ms < 5)
     000A 2105                      1-  603     	MOVIA	0x05
     000B 04rr                      1-  604     	SUBAR	_count200ms,W
     000C 0C03                      1-  605     	BTRSC	STATUS,0
     000D 3rrr                      1-  606     	LGOTO	_00134_DS_
                                    1-  607     	.line	136, "main.c"; 	checkBatAD();
     000E 2rrr                      1-  608     	LCALL	_checkBatAD
     000F 3rrr                      1-  609     	LGOTO	_00135_DS_
                                    1-  610     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  611     ;;unsigned compare: left >= lit (0xB=11), size=1
     0010                           1-  612     _00134_DS_:
                                    1-  613     	.line	138, "main.c"; 	else if(count200ms > 10 && count200ms < 15)
     0010 210B                      1-  614     	MOVIA	0x0b
     0011 04rr                      1-  615     	SUBAR	_count200ms,W
     0012 0803                      1-  616     	BTRSS	STATUS,0
     0013 3rrr                      1-  617     	LGOTO	_00135_DS_
                                    1-  618     ;;unsigned compare: left < lit (0xF=15), size=1
     0014 210F                      1-  619     	MOVIA	0x0f
     0015 04rr                      1-  620     	SUBAR	_count200ms,W
     0016 0803                      1-  621     	BTRSS	STATUS,0
                                    1-  622     	.line	140, "main.c"; 	checkOutA();
     0017 2rrr                      1-  623     	LCALL	_checkOutA
     0018                           1-  624     _00135_DS_:
                                    1-  625     	.line	142, "main.c"; 	if(workStep > 0 && currentDuty > maxDuty)
     0018 01rr                      1-  626     	MOVR	_workStep,W
     0019 0D03                      1-  627     	BTRSC	STATUS,2
     001A 3rrr                      1-  628     	LGOTO	_00137_DS_
     001B 01rr                      1-  629     	MOVR	_currentDuty,W
     001C 04rr                      1-  630     	SUBAR	_maxDuty,W
     001D 0C03                      1-  631     	BTRSC	STATUS,0
     001E 3rrr                      1-  632     	LGOTO	_00137_DS_
                                    1-  633     	.line	144, "main.c"; 	currentDuty = currentDuty - 10;
     001F 21F6                      1-  634     	MOVIA	0xf6
     0020 03rr                      1-  635     	ADDAR	_currentDuty,F
                                    1-  636     	.line	145, "main.c"; 	PWM2DUTY = currentDuty;
     0021 01rr                      1-  637     	MOVR	_currentDuty,W
     0022 00rr                      1-  638     	SFUN	_PWM2DUTY
     0023                           1-  639     _00137_DS_:
                                    1-  640     	.line	147, "main.c"; 	chrgCtr();
     0023 2rrr                      1-  641     	LCALL	_chrgCtr
                                    1-  642     	.line	148, "main.c"; 	if(workStep == 0 && keyCount == 0 && ((PORTB & 0x02) == 0))
     0024 01rr                      1-  643     	MOVR	_workStep,W
     0025 0903                      1-  644     	BTRSS	STATUS,2
     0026 3rrr                      1-  645     	LGOTO	_00142_DS_
     0027 01rr                      1-  646     	MOVR	_keyCount,W
     0028 0903                      1-  647     	BTRSS	STATUS,2
     0029 3rrr                      1-  648     	LGOTO	_00142_DS_
     002A 0Crr                      1-  649     	BTRSC	_PORTB,1
     002B 3rrr                      1-  650     	LGOTO	_00142_DS_
                                    1-  651     	.line	150, "main.c"; 	if(++sleepTime > 400)
     002C 05rr                      1-  652     	INCR	_sleepTime,F
     002D 0D03                      1-  653     	BTRSC	STATUS,2
     002E 05rr                      1-  654     	INCR	(_sleepTime + 1),F
                                    1-  655     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  656     ;;unsigned compare: left >= lit (0x191=401), size=2
     002F 2101                      1-  657     	MOVIA	0x01
     0030 04rr                      1-  658     	SUBAR	(_sleepTime + 1),W
     0031 0903                      1-  659     	BTRSS	STATUS,2
     0032 3rrr                      1-  660     	LGOTO	_00195_DS_
     0033 2191                      1-  661     	MOVIA	0x91
     0034 04rr                      1-  662     	SUBAR	_sleepTime,W
     0035                           1-  663     _00195_DS_:
     0035 0803                      1-  664     	BTRSS	STATUS,0
     0036 3rrr                      1-  665     	LGOTO	_00142_DS_
                                    1-  666     	.line	152, "main.c"; 	gotoSleep();
     0037 2rrr                      1-  667     	LCALL	_gotoSleep
                                    1-  668     ;;unsigned compare: left < lit (0x384=900), size=2
     0038                           1-  669     _00142_DS_:
                                    1-  670     	.line	156, "main.c"; 	if(count900s >= 900)
     0038 2103                      1-  671     	MOVIA	0x03
     0039 04rr                      1-  672     	SUBAR	(_count900s + 1),W
     003A 0903                      1-  673     	BTRSS	STATUS,2
     003B 3rrr                      1-  674     	LGOTO	_00196_DS_
     003C 2184                      1-  675     	MOVIA	0x84
     003D 04rr                      1-  676     	SUBAR	_count900s,W
     003E                           1-  677     _00196_DS_:
     003E 0803                      1-  678     	BTRSS	STATUS,0
     003F 3rrr                      1-  679     	LGOTO	_00148_DS_
                                    1-  680     	.line	158, "main.c"; 	powerOff();
     0040 2rrr                      1-  681     	LCALL	_powerOff
     0041 3rrr                      1-  682     	LGOTO	_00148_DS_
                                    1-  683     	.line	162, "main.c"; 	}
                                    1-  684     	RETURN	
     0042 0010                      3-   26 m1      ret
                                    1-  685     ; exit point of _main
                                    1-  687     ;***
                                    1-  688     ;  pBlock Stats: dbName = C
                                    1-  689     ;***
                                    1-  690     ;has an exit
                                    1-  691     ;; Starting pCode block
                                    1-  692     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  694     _F_wait_eoc:
                                    1-  695     ; 2 exit points
     0000                           1-  696     _00544_DS_:
                                    1-  697     	.line	654, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  698     	BTRSS	_ADMDbits,5
     0001 3rrr                      1-  699     	LGOTO	_00544_DS_
                                    1-  700     	.line	656, "main.c"; 	}
                                    1-  701     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1-  702     ; exit point of _F_wait_eoc
                                    1-  704     ;***
                                    1-  705     ;  pBlock Stats: dbName = C
                                    1-  706     ;***
                                    1-  707     ;has an exit
                                    1-  708     ;functions called:
                                    1-  709     ;   _delay
                                    1-  710     ;   _F_wait_eoc
                                    1-  711     ;   _delay
                                    1-  712     ;   _F_wait_eoc
                                    1-  713     ;6 compiler assigned registers:
                                    1-  714     ;   r0x1024
                                    1-  715     ;   r0x1025
                                    1-  716     ;   r0x1026
                                    1-  717     ;   r0x1027
                                    1-  718     ;   r0x1028
                                    1-  719     ;   r0x1029
                                    1-  720     ;; Starting pCode block
                                    1-  721     .segment "code"; module=main, function=_F_AIN3_Convert
                                    1-  723     ;local variable name mapping:
     0000                           1-  726     _F_AIN3_Convert:
                                    1-  727     ; 2 exit points
                                    1-  728     	.line	637, "main.c"; 	void F_AIN3_Convert(char count)
     0000 00rr                      1-  729     	MOVAR	r0x1024
                                    1-  730     	.line	639, "main.c"; 	R_AIN3_DATA=R_AIN3_DATA_LB=0x00;   
     0001 02rr                      1-  731     	CLRR	_R_AIN3_DATA_LB
     0002 02rr                      1-  732     	CLRR	_R_AIN3_DATA
     0003 02rr                      1-  733     	CLRR	(_R_AIN3_DATA + 1)
                                    1-  734     	.line	641, "main.c"; 	ADMD  = 0x90 | C_ADC_PA3;				// Select AIN6(PB1) pad as ADC input
     0004 2193                      1-  735     	MOVIA	0x93
     0005 00rr                      1-  736     	MOVAR	_ADMD
                                    1-  737     	.line	642, "main.c"; 	delay(200);	
     0006 21C8                      1-  738     	MOVIA	0xc8
     0007 2rrr                      1-  739     	LCALL	_delay
                                    1-  740     	.line	643, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1-  741     	MOVIA	0x01
     0009 00rr                      1-  742     	MOVAR	r0x1025
     000A                           1-  743     _00537_DS_:
     000A 01rr                      1-  744     	MOVR	r0x1025,W
     000B 04rr                      1-  745     	SUBAR	r0x1024,W
     000C 0803                      1-  746     	BTRSS	STATUS,0
     000D 3rrr                      1-  747     	LGOTO	_00539_DS_
                                    1-  748     	.line	645, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1-  749     	BSR	_ADMDbits,6
                                    1-  750     	.line	646, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000F 2rrr                      1-  751     	LCALL	_F_wait_eoc
                                    1-  752     	.line	647, "main.c"; 	R_AIN3_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1-  753     	MOVIA	0x0f
     0011 10rr                      1-  754     	ANDAR	_ADR,W
                                    1-  755     ;;3	MOVAR	r0x1026
     0012 03rr                      1-  756     	ADDAR	_R_AIN3_DATA_LB,F
                                    1-  757     	.line	648, "main.c"; 	R_AIN3_DATA    += ADD; 
     0013 01rr                      1-  758     	MOVR	_ADD,W
     0014 00rr                      1-  759     	MOVAR	r0x1026
                                    1-  760     ;;1	CLRR	r0x1027
                                    1-  761     ;;108	MOVR	r0x1026,W
                                    1-  762     ;;106	MOVAR	r0x1028
     0015 2100                      1-  763     	MOVIA	0x00
     0016 00rr                      1-  764     	MOVAR	r0x1029
                                    1-  765     ;;107	MOVR	r0x1028,W
     0017 01rr                      1-  766     	MOVR	r0x1026,W
     0018 03rr                      1-  767     	ADDAR	_R_AIN3_DATA,F
     0019 01rr                      1-  768     	MOVR	r0x1029,W
     001A 0C03                      1-  769     	BTRSC	STATUS,0
     001B 16rr                      1-  770     	INCRSZ	r0x1029,W
     001C 03rr                      1-  771     	ADDAR	(_R_AIN3_DATA + 1),F
                                    1-  772     	.line	643, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1-  773     	INCR	r0x1025,F
     001E 3rrr                      1-  774     	LGOTO	_00537_DS_
     001F                           1-  775     _00539_DS_:
                                    1-  776     	.line	650, "main.c"; 	}
                                    1-  777     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  778     ; exit point of _F_AIN3_Convert
                                    1-  780     ;***
                                    1-  781     ;  pBlock Stats: dbName = C
                                    1-  782     ;***
                                    1-  783     ;has an exit
                                    1-  784     ;functions called:
                                    1-  785     ;   _delay
                                    1-  786     ;   _F_wait_eoc
                                    1-  787     ;   _delay
                                    1-  788     ;   _F_wait_eoc
                                    1-  789     ;6 compiler assigned registers:
                                    1-  790     ;   r0x102A
                                    1-  791     ;   r0x102B
                                    1-  792     ;   r0x102C
                                    1-  793     ;   r0x102D
                                    1-  794     ;   r0x102E
                                    1-  795     ;   r0x102F
                                    1-  796     ;; Starting pCode block
                                    1-  797     .segment "code"; module=main, function=_F_AIN4_Convert
                                    1-  799     ;local variable name mapping:
     0000                           1-  802     _F_AIN4_Convert:
                                    1-  803     ; 2 exit points
                                    1-  804     	.line	622, "main.c"; 	void F_AIN4_Convert(char count)
     0000 00rr                      1-  805     	MOVAR	r0x102A
                                    1-  806     	.line	624, "main.c"; 	R_AIN4_DATA=R_AIN4_DATA_LB=0x00;   
     0001 02rr                      1-  807     	CLRR	_R_AIN4_DATA_LB
     0002 02rr                      1-  808     	CLRR	_R_AIN4_DATA
     0003 02rr                      1-  809     	CLRR	(_R_AIN4_DATA + 1)
                                    1-  810     	.line	626, "main.c"; 	ADMD  = 0x90 | C_ADC_PA4;				// Select AIN6(PB1) pad as ADC input
     0004 2194                      1-  811     	MOVIA	0x94
     0005 00rr                      1-  812     	MOVAR	_ADMD
                                    1-  813     	.line	627, "main.c"; 	delay(200);	
     0006 21C8                      1-  814     	MOVIA	0xc8
     0007 2rrr                      1-  815     	LCALL	_delay
                                    1-  816     	.line	628, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1-  817     	MOVIA	0x01
     0009 00rr                      1-  818     	MOVAR	r0x102B
     000A                           1-  819     _00528_DS_:
     000A 01rr                      1-  820     	MOVR	r0x102B,W
     000B 04rr                      1-  821     	SUBAR	r0x102A,W
     000C 0803                      1-  822     	BTRSS	STATUS,0
     000D 3rrr                      1-  823     	LGOTO	_00530_DS_
                                    1-  824     	.line	630, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1-  825     	BSR	_ADMDbits,6
                                    1-  826     	.line	631, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     000F 2rrr                      1-  827     	LCALL	_F_wait_eoc
                                    1-  828     	.line	632, "main.c"; 	R_AIN4_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1-  829     	MOVIA	0x0f
     0011 10rr                      1-  830     	ANDAR	_ADR,W
                                    1-  831     ;;3	MOVAR	r0x102C
     0012 03rr                      1-  832     	ADDAR	_R_AIN4_DATA_LB,F
                                    1-  833     	.line	633, "main.c"; 	R_AIN4_DATA    += ADD; 
     0013 01rr                      1-  834     	MOVR	_ADD,W
     0014 00rr                      1-  835     	MOVAR	r0x102C
                                    1-  836     ;;1	CLRR	r0x102D
                                    1-  837     ;;105	MOVR	r0x102C,W
                                    1-  838     ;;103	MOVAR	r0x102E
     0015 2100                      1-  839     	MOVIA	0x00
     0016 00rr                      1-  840     	MOVAR	r0x102F
                                    1-  841     ;;104	MOVR	r0x102E,W
     0017 01rr                      1-  842     	MOVR	r0x102C,W
     0018 03rr                      1-  843     	ADDAR	_R_AIN4_DATA,F
     0019 01rr                      1-  844     	MOVR	r0x102F,W
     001A 0C03                      1-  845     	BTRSC	STATUS,0
     001B 16rr                      1-  846     	INCRSZ	r0x102F,W
     001C 03rr                      1-  847     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1-  848     	.line	628, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1-  849     	INCR	r0x102B,F
     001E 3rrr                      1-  850     	LGOTO	_00528_DS_
     001F                           1-  851     _00530_DS_:
                                    1-  852     	.line	635, "main.c"; 	}
                                    1-  853     	RETURN	
     001F 0010                      3-   26 m1      ret
                                    1-  854     ; exit point of _F_AIN4_Convert
                                    1-  856     ;***
                                    1-  857     ;  pBlock Stats: dbName = C
                                    1-  858     ;***
                                    1-  859     ;has an exit
                                    1-  860     ;functions called:
                                    1-  861     ;   _F_AIN3_Convert
                                    1-  862     ;   _F_AIN3_Convert
                                    1-  863     ;4 compiler assigned registers:
                                    1-  864     ;   r0x1030
                                    1-  865     ;   r0x1031
                                    1-  866     ;   r0x1032
                                    1-  867     ;   r0x1033
                                    1-  868     ;; Starting pCode block
                                    1-  869     .segment "code"; module=main, function=_checkOutA
     0000                           1-  871     _checkOutA:
                                    1-  872     ; 2 exit points
                                    1-  873     	.line	565, "main.c"; 	R_AIN3_DATA = R_AIN3_DATA_LB = 0x00;
     0000 02rr                      1-  874     	CLRR	_R_AIN3_DATA_LB
     0001 02rr                      1-  875     	CLRR	_R_AIN3_DATA
     0002 02rr                      1-  876     	CLRR	(_R_AIN3_DATA + 1)
                                    1-  877     	.line	566, "main.c"; 	F_AIN3_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1-  878     	MOVIA	0x08
     0004 2rrr                      1-  879     	LCALL	_F_AIN3_Convert
                                    1-  880     	.line	567, "main.c"; 	R_AIN3_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1-  881     	SWAPR	(_R_AIN3_DATA + 1),W
     0006 22F0                      1-  882     	ANDIA	0xf0
     0007 00rr                      1-  883     	MOVAR	(_R_AIN3_DATA + 1)
     0008 15rr                      1-  884     	SWAPR	_R_AIN3_DATA,W
     0009 00rr                      1-  885     	MOVAR	_R_AIN3_DATA
     000A 220F                      1-  886     	ANDIA	0x0f
     000B 11rr                      1-  887     	IORAR	(_R_AIN3_DATA + 1),F
     000C 12rr                      1-  888     	XORAR	_R_AIN3_DATA,F
                                    1-  889     	.line	568, "main.c"; 	R_AIN3_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1-  890     	MOVIA	0xf0
     000E 10rr                      1-  891     	ANDAR	_R_AIN3_DATA_LB,F
                                    1-  892     	.line	569, "main.c"; 	R_AIN3_DATA += R_AIN4_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1-  893     	MOVR	_R_AIN4_DATA_LB,W
     0010 00rr                      1-  894     	MOVAR	r0x1030
                                    1-  895     ;;1	CLRR	r0x1031
                                    1-  896     ;;102	MOVR	r0x1030,W
                                    1-  897     ;;100	MOVAR	r0x1032
     0011 2100                      1-  898     	MOVIA	0x00
     0012 00rr                      1-  899     	MOVAR	r0x1033
                                    1-  900     ;;101	MOVR	r0x1032,W
     0013 01rr                      1-  901     	MOVR	r0x1030,W
     0014 03rr                      1-  902     	ADDAR	_R_AIN3_DATA,F
     0015 01rr                      1-  903     	MOVR	r0x1033,W
     0016 0C03                      1-  904     	BTRSC	STATUS,0
     0017 16rr                      1-  905     	INCRSZ	r0x1033,W
     0018 03rr                      1-  906     	ADDAR	(_R_AIN3_DATA + 1),F
                                    1-  907     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1-  908     	.line	570, "main.c"; 	R_AIN3_DATA >>=3;					// R_AIN0_DATA divided 8
     0019 1C03                      1-  909     	BCR	STATUS,0
     001A 13rr                      1-  910     	RRR	(_R_AIN3_DATA + 1),F
     001B 13rr                      1-  911     	RRR	_R_AIN3_DATA,F
                                    1-  912     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1-  913     	BCR	STATUS,0
     001D 13rr                      1-  914     	RRR	(_R_AIN3_DATA + 1),F
     001E 13rr                      1-  915     	RRR	_R_AIN3_DATA,F
                                    1-  916     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1-  917     	BCR	STATUS,0
     0020 13rr                      1-  918     	RRR	(_R_AIN3_DATA + 1),F
     0021 13rr                      1-  919     	RRR	_R_AIN3_DATA,F
                                    1-  920     	.line	571, "main.c"; 	if(debug)
     0022 01rr                      1-  921     	MOVR	_debug,W
     0023 0D03                      1-  922     	BTRSC	STATUS,2
     0024 3rrr                      1-  923     	LGOTO	_00457_DS_
                                    1-  924     	.line	572, "main.c"; 	R_AIN3_DATA = OUTA;
     0025 212D                      1-  925     	MOVIA	0x2d
     0026 00rr                      1-  926     	MOVAR	_R_AIN3_DATA
     0027 2101                      1-  927     	MOVIA	0x01
     0028 00rr                      1-  928     	MOVAR	(_R_AIN3_DATA + 1)
                                    1-  929     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  930     ;;unsigned compare: left >= lit (0x281=641), size=2
     0029                           1-  931     _00457_DS_:
                                    1-  932     	.line	573, "main.c"; 	if(R_AIN3_DATA > 640)
     0029 2102                      1-  933     	MOVIA	0x02
     002A 04rr                      1-  934     	SUBAR	(_R_AIN3_DATA + 1),W
     002B 0903                      1-  935     	BTRSS	STATUS,2
     002C 3rrr                      1-  936     	LGOTO	_00519_DS_
     002D 2181                      1-  937     	MOVIA	0x81
     002E 04rr                      1-  938     	SUBAR	_R_AIN3_DATA,W
     002F                           1-  939     _00519_DS_:
     002F 0803                      1-  940     	BTRSS	STATUS,0
     0030 3rrr                      1-  941     	LGOTO	_00482_DS_
                                    1-  942     	.line	575, "main.c"; 	if(++overCount > 10)
     0031 05rr                      1-  943     	INCR	_overCount,F
                                    1-  944     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  945     ;;unsigned compare: left >= lit (0xB=11), size=1
     0032 210B                      1-  946     	MOVIA	0x0b
     0033 04rr                      1-  947     	SUBAR	_overCount,W
     0034 0803                      1-  948     	BTRSS	STATUS,0
     0035 3rrr                      1-  949     	LGOTO	_00484_DS_
                                    1-  950     	.line	577, "main.c"; 	overCount = 10;
     0036 210A                      1-  951     	MOVIA	0x0a
     0037 00rr                      1-  952     	MOVAR	_overCount
                                    1-  953     	.line	578, "main.c"; 	PWM2DUTY = 128;
     0038 2180                      1-  954     	MOVIA	0x80
     0039 00rr                      1-  955     	SFUN	_PWM2DUTY
     003A 3rrr                      1-  956     	LGOTO	_00484_DS_
                                    1-  957     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  958     ;;unsigned compare: left >= lit (0x47=71), size=2
     003B                           1-  959     _00482_DS_:
                                    1-  960     	.line	581, "main.c"; 	else if(R_AIN3_DATA > 70)
     003B 2100                      1-  961     	MOVIA	0x00
     003C 04rr                      1-  962     	SUBAR	(_R_AIN3_DATA + 1),W
     003D 0903                      1-  963     	BTRSS	STATUS,2
     003E 3rrr                      1-  964     	LGOTO	_00521_DS_
     003F 2147                      1-  965     	MOVIA	0x47
     0040 04rr                      1-  966     	SUBAR	_R_AIN3_DATA,W
     0041                           1-  967     _00521_DS_:
     0041 0803                      1-  968     	BTRSS	STATUS,0
     0042 3rrr                      1-  969     	LGOTO	_00479_DS_
                                    1-  970     	.line	583, "main.c"; 	if(overCount > 0)
     0043 01rr                      1-  971     	MOVR	_overCount,W
     0044 0D03                      1-  972     	BTRSC	STATUS,2
     0045 3rrr                      1-  973     	LGOTO	_00472_DS_
                                    1-  974     	.line	585, "main.c"; 	overCount--;
     0046 06rr                      1-  975     	DECR	_overCount,F
     0047 3rrr                      1-  976     	LGOTO	_00484_DS_
     0048                           1-  977     _00472_DS_:
                                    1-  978     	.line	587, "main.c"; 	else if(workStep == 1)
     0048 01rr                      1-  979     	MOVR	_workStep,W
     0049 2401                      1-  980     	XORIA	0x01
     004A 0903                      1-  981     	BTRSS	STATUS,2
     004B 3rrr                      1-  982     	LGOTO	_00469_DS_
                                    1-  983     	.line	589, "main.c"; 	PWM2DUTY = maxDuty + 35;
     004C 2123                      1-  984     	MOVIA	0x23
     004D 03rr                      1-  985     	ADDAR	_maxDuty,W
     004E 00rr                      1-  986     	MOVAR	r0x1030
     004F 00rr                      1-  987     	SFUN	_PWM2DUTY
     0050 3rrr                      1-  988     	LGOTO	_00484_DS_
     0051                           1-  989     _00469_DS_:
                                    1-  990     	.line	591, "main.c"; 	else if(workStep == 2)
     0051 01rr                      1-  991     	MOVR	_workStep,W
     0052 2402                      1-  992     	XORIA	0x02
     0053 0903                      1-  993     	BTRSS	STATUS,2
     0054 3rrr                      1-  994     	LGOTO	_00466_DS_
                                    1-  995     	.line	593, "main.c"; 	PWM2DUTY = maxDuty + 38;
     0055 2126                      1-  996     	MOVIA	0x26
     0056 03rr                      1-  997     	ADDAR	_maxDuty,W
     0057 00rr                      1-  998     	MOVAR	r0x1030
     0058 00rr                      1-  999     	SFUN	_PWM2DUTY
     0059 3rrr                      1- 1000     	LGOTO	_00484_DS_
     005A                           1- 1001     _00466_DS_:
                                    1- 1002     	.line	595, "main.c"; 	else if(workStep == 3)
     005A 01rr                      1- 1003     	MOVR	_workStep,W
     005B 2403                      1- 1004     	XORIA	0x03
     005C 0903                      1- 1005     	BTRSS	STATUS,2
     005D 3rrr                      1- 1006     	LGOTO	_00463_DS_
                                    1- 1007     	.line	597, "main.c"; 	PWM2DUTY = maxDuty + 40;
     005E 2128                      1- 1008     	MOVIA	0x28
     005F 03rr                      1- 1009     	ADDAR	_maxDuty,W
     0060 00rr                      1- 1010     	MOVAR	r0x1030
     0061 00rr                      1- 1011     	SFUN	_PWM2DUTY
     0062 3rrr                      1- 1012     	LGOTO	_00484_DS_
     0063                           1- 1013     _00463_DS_:
                                    1- 1014     	.line	599, "main.c"; 	else if(workStep == 4)
     0063 01rr                      1- 1015     	MOVR	_workStep,W
     0064 2404                      1- 1016     	XORIA	0x04
     0065 0903                      1- 1017     	BTRSS	STATUS,2
     0066 3rrr                      1- 1018     	LGOTO	_00484_DS_
                                    1- 1019     	.line	601, "main.c"; 	PWM2DUTY = maxDuty + 48;
     0067 2130                      1- 1020     	MOVIA	0x30
     0068 03rr                      1- 1021     	ADDAR	_maxDuty,W
     0069 00rr                      1- 1022     	MOVAR	r0x1030
     006A 00rr                      1- 1023     	SFUN	_PWM2DUTY
     006B 3rrr                      1- 1024     	LGOTO	_00484_DS_
     006C                           1- 1025     _00479_DS_:
                                    1- 1026     	.line	606, "main.c"; 	if(overCount > 0)
     006C 01rr                      1- 1027     	MOVR	_overCount,W
     006D 0D03                      1- 1028     	BTRSC	STATUS,2
     006E 3rrr                      1- 1029     	LGOTO	_00475_DS_
                                    1- 1030     	.line	608, "main.c"; 	overCount--;
     006F 06rr                      1- 1031     	DECR	_overCount,F
                                    1- 1032     	.line	609, "main.c"; 	PWM2DUTY = maxDuty;
     0070 01rr                      1- 1033     	MOVR	_maxDuty,W
     0071 00rr                      1- 1034     	SFUN	_PWM2DUTY
     0072                           1- 1035     _00475_DS_:
                                    1- 1036     	.line	611, "main.c"; 	if(workStep > 0)
     0072 01rr                      1- 1037     	MOVR	_workStep,W
     0073 0D03                      1- 1038     	BTRSC	STATUS,2
     0074 3rrr                      1- 1039     	LGOTO	_00484_DS_
                                    1- 1040     	.line	612, "main.c"; 	ledStep = workStep;
     0075 01rr                      1- 1041     	MOVR	_workStep,W
     0076 00rr                      1- 1042     	MOVAR	_ledStep
     0077                           1- 1043     _00484_DS_:
                                    1- 1044     	.line	616, "main.c"; 	}
                                    1- 1045     	RETURN	
     0077 0010                      3-   26 m1      ret
                                    1- 1046     ; exit point of _checkOutA
                                    1- 1048     ;***
                                    1- 1049     ;  pBlock Stats: dbName = C
                                    1- 1050     ;***
                                    1- 1051     ;functions called:
                                    1- 1052     ;   _F_AIN4_Convert
                                    1- 1053     ;   _F_AIN4_Convert
                                    1- 1054     ;4 compiler assigned registers:
                                    1- 1055     ;   r0x1034
                                    1- 1056     ;   r0x1035
                                    1- 1057     ;   r0x1036
                                    1- 1058     ;   r0x1037
                                    1- 1059     ;; Starting pCode block
                                    1- 1060     .segment "code"; module=main, function=_checkBatAD
     0000                           1- 1062     _checkBatAD:
                                    1- 1063     ; 0 exit points
                                    1- 1064     	.line	491, "main.c"; 	R_AIN4_DATA = R_AIN4_DATA_LB = 0x00;
     0000 02rr                      1- 1065     	CLRR	_R_AIN4_DATA_LB
     0001 02rr                      1- 1066     	CLRR	_R_AIN4_DATA
     0002 02rr                      1- 1067     	CLRR	(_R_AIN4_DATA + 1)
                                    1- 1068     	.line	492, "main.c"; 	F_AIN4_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1- 1069     	MOVIA	0x08
     0004 2rrr                      1- 1070     	LCALL	_F_AIN4_Convert
                                    1- 1071     	.line	493, "main.c"; 	R_AIN4_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1- 1072     	SWAPR	(_R_AIN4_DATA + 1),W
     0006 22F0                      1- 1073     	ANDIA	0xf0
     0007 00rr                      1- 1074     	MOVAR	(_R_AIN4_DATA + 1)
     0008 15rr                      1- 1075     	SWAPR	_R_AIN4_DATA,W
     0009 00rr                      1- 1076     	MOVAR	_R_AIN4_DATA
     000A 220F                      1- 1077     	ANDIA	0x0f
     000B 11rr                      1- 1078     	IORAR	(_R_AIN4_DATA + 1),F
     000C 12rr                      1- 1079     	XORAR	_R_AIN4_DATA,F
                                    1- 1080     	.line	494, "main.c"; 	R_AIN4_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1- 1081     	MOVIA	0xf0
     000E 10rr                      1- 1082     	ANDAR	_R_AIN4_DATA_LB,F
                                    1- 1083     	.line	495, "main.c"; 	R_AIN4_DATA += R_AIN4_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1- 1084     	MOVR	_R_AIN4_DATA_LB,W
     0010 00rr                      1- 1085     	MOVAR	r0x1036
                                    1- 1086     ;;1	MOVAR	r0x1034
                                    1- 1087     ;;1	CLRR	r0x1035
                                    1- 1088     ;;99	MOVR	r0x1034,W
     0011 2100                      1- 1089     	MOVIA	0x00
     0012 00rr                      1- 1090     	MOVAR	r0x1037
     0013 01rr                      1- 1091     	MOVR	r0x1036,W
     0014 03rr                      1- 1092     	ADDAR	_R_AIN4_DATA,F
     0015 01rr                      1- 1093     	MOVR	r0x1037,W
     0016 0C03                      1- 1094     	BTRSC	STATUS,0
     0017 16rr                      1- 1095     	INCRSZ	r0x1037,W
     0018 03rr                      1- 1096     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1- 1097     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1- 1098     	.line	496, "main.c"; 	R_AIN4_DATA >>=3;					// R_AIN0_DATA divided 8
     0019 1C03                      1- 1099     	BCR	STATUS,0
     001A 13rr                      1- 1100     	RRR	(_R_AIN4_DATA + 1),F
     001B 13rr                      1- 1101     	RRR	_R_AIN4_DATA,F
                                    1- 1102     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1- 1103     	BCR	STATUS,0
     001D 13rr                      1- 1104     	RRR	(_R_AIN4_DATA + 1),F
     001E 13rr                      1- 1105     	RRR	_R_AIN4_DATA,F
                                    1- 1106     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1- 1107     	BCR	STATUS,0
     0020 13rr                      1- 1108     	RRR	(_R_AIN4_DATA + 1),F
     0021 13rr                      1- 1109     	RRR	_R_AIN4_DATA,F
                                    1- 1110     	.line	497, "main.c"; 	lowBat = 0;
     0022 02rr                      1- 1111     	CLRR	_lowBat
                                    1- 1112     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1113     ;;unsigned compare: left >= lit (0xF29=3881), size=2
                                    1- 1114     	.line	498, "main.c"; 	if(R_AIN4_DATA > 3880)
     0023 210F                      1- 1115     	MOVIA	0x0f
     0024 04rr                      1- 1116     	SUBAR	(_R_AIN4_DATA + 1),W
     0025 0903                      1- 1117     	BTRSS	STATUS,2
     0026 3rrr                      1- 1118     	LGOTO	_00441_DS_
     0027 2129                      1- 1119     	MOVIA	0x29
     0028 04rr                      1- 1120     	SUBAR	_R_AIN4_DATA,W
     0029                           1- 1121     _00441_DS_:
     0029 0803                      1- 1122     	BTRSS	STATUS,0
     002A 3rrr                      1- 1123     	LGOTO	_00372_DS_
                                    1- 1124     	.line	500, "main.c"; 	R_AIN4_DATA = 3880;
     002B 2128                      1- 1125     	MOVIA	0x28
     002C 00rr                      1- 1126     	MOVAR	_R_AIN4_DATA
     002D 210F                      1- 1127     	MOVIA	0x0f
     002E 00rr                      1- 1128     	MOVAR	(_R_AIN4_DATA + 1)
     002F 3rrr                      1- 1129     	LGOTO	_00373_DS_
                                    1- 1130     ;;unsigned compare: left < lit (0xCE4=3300), size=2
     0030                           1- 1131     _00372_DS_:
                                    1- 1132     	.line	502, "main.c"; 	else if(R_AIN4_DATA < 3300)
     0030 210C                      1- 1133     	MOVIA	0x0c
     0031 04rr                      1- 1134     	SUBAR	(_R_AIN4_DATA + 1),W
     0032 0903                      1- 1135     	BTRSS	STATUS,2
     0033 3rrr                      1- 1136     	LGOTO	_00442_DS_
     0034 21E4                      1- 1137     	MOVIA	0xe4
     0035 04rr                      1- 1138     	SUBAR	_R_AIN4_DATA,W
     0036                           1- 1139     _00442_DS_:
     0036 0C03                      1- 1140     	BTRSC	STATUS,0
     0037 3rrr                      1- 1141     	LGOTO	_00373_DS_
                                    1- 1142     ;;unsigned compare: left < lit (0xBB8=3000), size=2
                                    1- 1143     	.line	504, "main.c"; 	if(R_AIN4_DATA < 3000 && overCount < 10 && workStep > 0)
     0038 210B                      1- 1144     	MOVIA	0x0b
     0039 04rr                      1- 1145     	SUBAR	(_R_AIN4_DATA + 1),W
     003A 0903                      1- 1146     	BTRSS	STATUS,2
     003B 3rrr                      1- 1147     	LGOTO	_00443_DS_
     003C 21B8                      1- 1148     	MOVIA	0xb8
     003D 04rr                      1- 1149     	SUBAR	_R_AIN4_DATA,W
     003E                           1- 1150     _00443_DS_:
     003E 0C03                      1- 1151     	BTRSC	STATUS,0
     003F 3rrr                      1- 1152     	LGOTO	_00366_DS_
                                    1- 1153     ;;unsigned compare: left < lit (0xA=10), size=1
     0040 210A                      1- 1154     	MOVIA	0x0a
     0041 04rr                      1- 1155     	SUBAR	_overCount,W
     0042 0C03                      1- 1156     	BTRSC	STATUS,0
     0043 3rrr                      1- 1157     	LGOTO	_00366_DS_
     0044 01rr                      1- 1158     	MOVR	_workStep,W
     0045 0D03                      1- 1159     	BTRSC	STATUS,2
     0046 3rrr                      1- 1160     	LGOTO	_00366_DS_
                                    1- 1161     	.line	505, "main.c"; 	lowBat = 1;
     0047 2101                      1- 1162     	MOVIA	0x01
     0048 00rr                      1- 1163     	MOVAR	_lowBat
     0049                           1- 1164     _00366_DS_:
                                    1- 1165     	.line	506, "main.c"; 	R_AIN4_DATA = 3300;
     0049 21E4                      1- 1166     	MOVIA	0xe4
     004A 00rr                      1- 1167     	MOVAR	_R_AIN4_DATA
     004B 210C                      1- 1168     	MOVIA	0x0c
     004C 00rr                      1- 1169     	MOVAR	(_R_AIN4_DATA + 1)
     004D                           1- 1170     _00373_DS_:
                                    1- 1171     	.line	508, "main.c"; 	R_AIN4_DATA = R_AIN4_DATA - 3300;
     004D 211C                      1- 1172     	MOVIA	0x1c
     004E 03rr                      1- 1173     	ADDAR	_R_AIN4_DATA,F
     004F 21F3                      1- 1174     	MOVIA	0xf3
     0050 0C03                      1- 1175     	BTRSC	STATUS,0
     0051 21F4                      1- 1176     	MOVIA	0xf4
     0052 03rr                      1- 1177     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1- 1178     ;;unsigned compare: left < lit (0x23A=570), size=2
                                    1- 1179     	.line	510, "main.c"; 	if(R_AIN4_DATA >= 570)
     0053 2102                      1- 1180     	MOVIA	0x02
     0054 04rr                      1- 1181     	SUBAR	(_R_AIN4_DATA + 1),W
     0055 0903                      1- 1182     	BTRSS	STATUS,2
     0056 3rrr                      1- 1183     	LGOTO	_00445_DS_
     0057 213A                      1- 1184     	MOVIA	0x3a
     0058 04rr                      1- 1185     	SUBAR	_R_AIN4_DATA,W
     0059                           1- 1186     _00445_DS_:
     0059 0803                      1- 1187     	BTRSS	STATUS,0
     005A 3rrr                      1- 1188     	LGOTO	_00395_DS_
                                    1- 1189     	.line	512, "main.c"; 	pwStep = 5;
     005B 2105                      1- 1190     	MOVIA	0x05
     005C 00rr                      1- 1191     	MOVAR	_pwStep
     005D 3rrr                      1- 1192     	LGOTO	_00397_DS_
                                    1- 1193     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1194     ;;unsigned compare: left >= lit (0x1C3=451), size=2
     005E                           1- 1195     _00395_DS_:
                                    1- 1196     	.line	514, "main.c"; 	else if(R_AIN4_DATA > 450)
     005E 2101                      1- 1197     	MOVIA	0x01
     005F 04rr                      1- 1198     	SUBAR	(_R_AIN4_DATA + 1),W
     0060 0903                      1- 1199     	BTRSS	STATUS,2
     0061 3rrr                      1- 1200     	LGOTO	_00446_DS_
     0062 21C3                      1- 1201     	MOVIA	0xc3
     0063 04rr                      1- 1202     	SUBAR	_R_AIN4_DATA,W
     0064                           1- 1203     _00446_DS_:
     0064 0803                      1- 1204     	BTRSS	STATUS,0
     0065 3rrr                      1- 1205     	LGOTO	_00392_DS_
                                    1- 1206     	.line	517, "main.c"; 	if(pwStep == 5)
     0066 01rr                      1- 1207     	MOVR	_pwStep,W
     0067 2405                      1- 1208     	XORIA	0x05
     0068 0903                      1- 1209     	BTRSS	STATUS,2
     0069 3rrr                      1- 1210     	LGOTO	_00377_DS_
                                    1- 1211     ;;unsigned compare: left < lit (0x1F4=500), size=2
                                    1- 1212     	.line	519, "main.c"; 	if(R_AIN4_DATA < 500)
     006A 2101                      1- 1213     	MOVIA	0x01
     006B 04rr                      1- 1214     	SUBAR	(_R_AIN4_DATA + 1),W
     006C 0903                      1- 1215     	BTRSS	STATUS,2
     006D 3rrr                      1- 1216     	LGOTO	_00447_DS_
     006E 21F4                      1- 1217     	MOVIA	0xf4
     006F 04rr                      1- 1218     	SUBAR	_R_AIN4_DATA,W
     0070                           1- 1219     _00447_DS_:
     0070 0C03                      1- 1220     	BTRSC	STATUS,0
     0071 3rrr                      1- 1221     	LGOTO	_00378_DS_
                                    1- 1222     	.line	520, "main.c"; 	pwStep = 4;
     0072 2104                      1- 1223     	MOVIA	0x04
     0073 00rr                      1- 1224     	MOVAR	_pwStep
     0074 3rrr                      1- 1225     	LGOTO	_00378_DS_
     0075                           1- 1226     _00377_DS_:
                                    1- 1227     	.line	524, "main.c"; 	pwStep = 4;
     0075 2104                      1- 1228     	MOVIA	0x04
     0076 00rr                      1- 1229     	MOVAR	_pwStep
                                    1- 1230     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1231     ;;unsigned compare: left >= lit (0x227=551), size=2
     0077                           1- 1232     _00378_DS_:
                                    1- 1233     	.line	527, "main.c"; 	if(R_AIN4_DATA > 550)
     0077 2102                      1- 1234     	MOVIA	0x02
     0078 04rr                      1- 1235     	SUBAR	(_R_AIN4_DATA + 1),W
     0079 0903                      1- 1236     	BTRSS	STATUS,2
     007A 3rrr                      1- 1237     	LGOTO	_00448_DS_
     007B 2127                      1- 1238     	MOVIA	0x27
     007C 04rr                      1- 1239     	SUBAR	_R_AIN4_DATA,W
     007D                           1- 1240     _00448_DS_:
     007D 0803                      1- 1241     	BTRSS	STATUS,0
     007E 3rrr                      1- 1242     	LGOTO	_00397_DS_
                                    1- 1243     	.line	529, "main.c"; 	if(++chrgTime > 1800)
     007F 05rr                      1- 1244     	INCR	_chrgTime,F
     0080 0D03                      1- 1245     	BTRSC	STATUS,2
     0081 05rr                      1- 1246     	INCR	(_chrgTime + 1),F
                                    1- 1247     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1248     ;;unsigned compare: left >= lit (0x709=1801), size=2
     0082 2107                      1- 1249     	MOVIA	0x07
     0083 04rr                      1- 1250     	SUBAR	(_chrgTime + 1),W
     0084 0903                      1- 1251     	BTRSS	STATUS,2
     0085 3rrr                      1- 1252     	LGOTO	_00449_DS_
     0086 2109                      1- 1253     	MOVIA	0x09
     0087 04rr                      1- 1254     	SUBAR	_chrgTime,W
     0088                           1- 1255     _00449_DS_:
     0088 0803                      1- 1256     	BTRSS	STATUS,0
     0089 3rrr                      1- 1257     	LGOTO	_00397_DS_
                                    1- 1258     	.line	531, "main.c"; 	chrgTime = 1800;
     008A 2108                      1- 1259     	MOVIA	0x08
     008B 00rr                      1- 1260     	MOVAR	_chrgTime
     008C 2107                      1- 1261     	MOVIA	0x07
     008D 00rr                      1- 1262     	MOVAR	(_chrgTime + 1)
                                    1- 1263     	.line	532, "main.c"; 	pwStep = 5;
     008E 2105                      1- 1264     	MOVIA	0x05
     008F 00rr                      1- 1265     	MOVAR	_pwStep
     0090 3rrr                      1- 1266     	LGOTO	_00397_DS_
                                    1- 1267     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1268     ;;unsigned compare: left >= lit (0x12D=301), size=2
     0091                           1- 1269     _00392_DS_:
                                    1- 1270     	.line	536, "main.c"; 	else if(R_AIN4_DATA > 300)
     0091 2101                      1- 1271     	MOVIA	0x01
     0092 04rr                      1- 1272     	SUBAR	(_R_AIN4_DATA + 1),W
     0093 0903                      1- 1273     	BTRSS	STATUS,2
     0094 3rrr                      1- 1274     	LGOTO	_00450_DS_
     0095 212D                      1- 1275     	MOVIA	0x2d
     0096 04rr                      1- 1276     	SUBAR	_R_AIN4_DATA,W
     0097                           1- 1277     _00450_DS_:
     0097 0803                      1- 1278     	BTRSS	STATUS,0
     0098 3rrr                      1- 1279     	LGOTO	_00389_DS_
                                    1- 1280     	.line	539, "main.c"; 	pwStep = 3;
     0099 2103                      1- 1281     	MOVIA	0x03
     009A 00rr                      1- 1282     	MOVAR	_pwStep
                                    1- 1283     	.line	540, "main.c"; 	chrgTime = 0;
     009B 02rr                      1- 1284     	CLRR	_chrgTime
     009C 02rr                      1- 1285     	CLRR	(_chrgTime + 1)
     009D 3rrr                      1- 1286     	LGOTO	_00397_DS_
                                    1- 1287     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1288     ;;unsigned compare: left >= lit (0x97=151), size=2
     009E                           1- 1289     _00389_DS_:
                                    1- 1290     	.line	542, "main.c"; 	else if(R_AIN4_DATA > 150)
     009E 2100                      1- 1291     	MOVIA	0x00
     009F 04rr                      1- 1292     	SUBAR	(_R_AIN4_DATA + 1),W
     00A0 0903                      1- 1293     	BTRSS	STATUS,2
     00A1 3rrr                      1- 1294     	LGOTO	_00451_DS_
     00A2 2197                      1- 1295     	MOVIA	0x97
     00A3 04rr                      1- 1296     	SUBAR	_R_AIN4_DATA,W
     00A4                           1- 1297     _00451_DS_:
     00A4 0803                      1- 1298     	BTRSS	STATUS,0
     00A5 3rrr                      1- 1299     	LGOTO	_00386_DS_
                                    1- 1300     	.line	545, "main.c"; 	pwStep = 2;
     00A6 2102                      1- 1301     	MOVIA	0x02
     00A7 00rr                      1- 1302     	MOVAR	_pwStep
                                    1- 1303     	.line	546, "main.c"; 	chrgTime = 0;
     00A8 02rr                      1- 1304     	CLRR	_chrgTime
     00A9 02rr                      1- 1305     	CLRR	(_chrgTime + 1)
     00AA 3rrr                      1- 1306     	LGOTO	_00397_DS_
     00AB                           1- 1307     _00386_DS_:
                                    1- 1308     	.line	551, "main.c"; 	pwStep = 1;
     00AB 2101                      1- 1309     	MOVIA	0x01
     00AC 00rr                      1- 1310     	MOVAR	_pwStep
                                    1- 1311     	.line	552, "main.c"; 	chrgTime = 0;
     00AD 02rr                      1- 1312     	CLRR	_chrgTime
     00AE 02rr                      1- 1313     	CLRR	(_chrgTime + 1)
                                    1- 1314     	.line	553, "main.c"; 	if(workStartFlag == 4)
     00AF 01rr                      1- 1315     	MOVR	_workStartFlag,W
     00B0 2404                      1- 1316     	XORIA	0x04
     00B1 0D03                      1- 1317     	BTRSC	STATUS,2
                                    1- 1318     	.line	555, "main.c"; 	workStartFlag = 0;
     00B2 02rr                      1- 1319     	CLRR	_workStartFlag
     00B3                           1- 1320     _00397_DS_:
                                    1- 1321     	.line	560, "main.c"; 	}
                                    1- 1322     	RETURN	
     00B3 0010                      3-   26 m1      ret
                                    1- 1324     ;***
                                    1- 1325     ;  pBlock Stats: dbName = C
                                    1- 1326     ;***
                                    1- 1327     ;has an exit
                                    1- 1328     ;functions called:
                                    1- 1329     ;   _delay
                                    1- 1330     ;   _delay
                                    1- 1331     ;; Starting pCode block
                                    1- 1332     .segment "code"; module=main, function=_initAD
     0000                           1- 1334     _initAD:
                                    1- 1335     ; 2 exit points
                                    1- 1336     	.line	467, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1- 1337     	MOVIA	0x84
     0001 00rr                      1- 1338     	MOVAR	_ADMD
                                    1- 1339     	.line	472, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1340     	CLRR	_ADVREFH
                                    1- 1341     	.line	477, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1342     	MOVIA	0x10
     0004 00rr                      1- 1343     	MOVAR	_ADR
                                    1- 1344     	.line	479, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1345     	MOVIA	0x03
     0006 00rr                      1- 1346     	MOVAR	_ADCR
                                    1- 1347     	.line	482, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1348     	BSR	_ADMDbits,4
                                    1- 1349     	.line	483, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1350     	MOVIA	0x64
     0009 2rrr                      1- 1351     	LCALL	_delay
                                    1- 1352     	.line	486, "main.c"; 	}
                                    1- 1353     	RETURN	
     000A 0010                      3-   26 m1      ret
                                    1- 1354     ; exit point of _initAD
                                    1- 1356     ;***
                                    1- 1357     ;  pBlock Stats: dbName = C
                                    1- 1358     ;***
                                    1- 1359     ;has an exit
                                    1- 1360     ;2 compiler assigned registers:
                                    1- 1361     ;   r0x1022
                                    1- 1362     ;   r0x1023
                                    1- 1363     ;; Starting pCode block
                                    1- 1364     .segment "code"; module=main, function=_delay
                                    1- 1366     ;local variable name mapping:
     0000                           1- 1369     _delay:
                                    1- 1370     ; 2 exit points
                                    1- 1371     	.line	457, "main.c"; 	void delay(u8t time)
     0000 00rr                      1- 1372     	MOVAR	r0x1022
                                    1- 1373     	.line	459, "main.c"; 	for(u8t i=0;i<time;i++)
     0001 02rr                      1- 1374     	CLRR	r0x1023
     0002                           1- 1375     _00354_DS_:
     0002 01rr                      1- 1376     	MOVR	r0x1022,W
     0003 04rr                      1- 1377     	SUBAR	r0x1023,W
     0004 0C03                      1- 1378     	BTRSC	STATUS,0
     0005 3rrr                      1- 1379     	LGOTO	_00356_DS_
                                    1- 1380     	.line	460, "main.c"; 	NOP();
     0006 0000                      1- 1381     	nop
                                    1- 1382     	.line	459, "main.c"; 	for(u8t i=0;i<time;i++)
     0007 05rr                      1- 1383     	INCR	r0x1023,F
     0008 3rrr                      1- 1384     	LGOTO	_00354_DS_
     0009                           1- 1385     _00356_DS_:
                                    1- 1386     	.line	461, "main.c"; 	}
                                    1- 1387     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1388     ; exit point of _delay
                                    1- 1390     ;***
                                    1- 1391     ;  pBlock Stats: dbName = C
                                    1- 1392     ;***
                                    1- 1393     ;has an exit
                                    1- 1394     ;functions called:
                                    1- 1395     ;   _pwmStop
                                    1- 1396     ;   _pwmStop
                                    1- 1397     ;; Starting pCode block
                                    1- 1398     .segment "code"; module=main, function=_chrgCtr
     0000                           1- 1400     _chrgCtr:
                                    1- 1401     ; 2 exit points
                                    1- 1402     	.line	423, "main.c"; 	if(PORTB & 0x02)
     0000 08rr                      1- 1403     	BTRSS	_PORTB,1
     0001 3rrr                      1- 1404     	LGOTO	_00345_DS_
                                    1- 1405     	.line	426, "main.c"; 	chrgFlag = 1;
     0002 19rr                      1- 1406     	BSR	_Status,3
                                    1- 1407     	.line	427, "main.c"; 	workStep = 0;
     0003 02rr                      1- 1408     	CLRR	_workStep
                                    1- 1409     	.line	428, "main.c"; 	pwmStop();
     0004 2rrr                      1- 1410     	LCALL	_pwmStop
                                    1- 1411     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1412     ;;unsigned compare: left >= lit (0x4=4), size=1
                                    1- 1413     	.line	429, "main.c"; 	if(pwStep > 3)
     0005 2104                      1- 1414     	MOVIA	0x04
     0006 04rr                      1- 1415     	SUBAR	_pwStep,W
     0007 0803                      1- 1416     	BTRSS	STATUS,0
     0008 3rrr                      1- 1417     	LGOTO	_00340_DS_
                                    1- 1418     	.line	432, "main.c"; 	ledStep = 4;
     0009 2104                      1- 1419     	MOVIA	0x04
     000A 00rr                      1- 1420     	MOVAR	_ledStep
     000B 3rrr                      1- 1421     	LGOTO	_00347_DS_
     000C                           1- 1422     _00340_DS_:
                                    1- 1423     	.line	436, "main.c"; 	if(count500ms == 0)
     000C 01rr                      1- 1424     	MOVR	_count500ms,W
     000D 0903                      1- 1425     	BTRSS	STATUS,2
     000E 3rrr                      1- 1426     	LGOTO	_00347_DS_
                                    1- 1427     	.line	438, "main.c"; 	if(++ledStep > 4)
     000F 05rr                      1- 1428     	INCR	_ledStep,F
                                    1- 1429     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1430     ;;unsigned compare: left >= lit (0x5=5), size=1
     0010 2105                      1- 1431     	MOVIA	0x05
     0011 04rr                      1- 1432     	SUBAR	_ledStep,W
     0012 0803                      1- 1433     	BTRSS	STATUS,0
     0013 3rrr                      1- 1434     	LGOTO	_00347_DS_
                                    1- 1435     	.line	439, "main.c"; 	ledStep = pwStep - 1;
     0014 06rr                      1- 1436     	DECR	_pwStep,W
     0015 00rr                      1- 1437     	MOVAR	_ledStep
     0016 3rrr                      1- 1438     	LGOTO	_00347_DS_
     0017                           1- 1439     _00345_DS_:
                                    1- 1440     	.line	448, "main.c"; 	if(workStep == 0)
     0017 01rr                      1- 1441     	MOVR	_workStep,W
     0018 0D03                      1- 1442     	BTRSC	STATUS,2
                                    1- 1443     	.line	449, "main.c"; 	ledStep = 0;
     0019 02rr                      1- 1444     	CLRR	_ledStep
                                    1- 1445     	.line	450, "main.c"; 	chrgFlag = 0;
     001A 1Drr                      1- 1446     	BCR	_Status,3
                                    1- 1447     	.line	451, "main.c"; 	chrgTime = 0;	//重置充电计数
     001B 02rr                      1- 1448     	CLRR	_chrgTime
     001C 02rr                      1- 1449     	CLRR	(_chrgTime + 1)
     001D                           1- 1450     _00347_DS_:
                                    1- 1451     	.line	454, "main.c"; 	}
                                    1- 1452     	RETURN	
     001D 0010                      3-   26 m1      ret
                                    1- 1453     ; exit point of _chrgCtr
                                    1- 1455     ;***
                                    1- 1456     ;  pBlock Stats: dbName = C
                                    1- 1457     ;***
                                    1- 1458     ;has an exit
                                    1- 1459     ;1 compiler assigned register :
                                    1- 1460     ;   r0x1038
                                    1- 1461     ;; Starting pCode block
                                    1- 1462     .segment "code"; module=main, function=_keyRead
                                    1- 1464     ;local variable name mapping:
     0000                           1- 1466     _keyRead:
                                    1- 1467     ; 2 exit points
                                    1- 1468     	.line	386, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1- 1469     	MOVAR	r0x1038
                                    1- 1470     	.line	388, "main.c"; 	if(keyStatus)
     0001 01rr                      1- 1471     	MOVR	r0x1038,W
     0002 0D03                      1- 1472     	BTRSC	STATUS,2
     0003 3rrr                      1- 1473     	LGOTO	_00328_DS_
                                    1- 1474     	.line	390, "main.c"; 	keyCount++;
     0004 05rr                      1- 1475     	INCR	_keyCount,F
                                    1- 1476     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1- 1477     	.line	391, "main.c"; 	if(keyCount >= 100)
     0005 2164                      1- 1478     	MOVIA	0x64
     0006 04rr                      1- 1479     	SUBAR	_keyCount,W
     0007 0803                      1- 1480     	BTRSS	STATUS,0
     0008 3rrr                      1- 1481     	LGOTO	_00329_DS_
                                    1- 1482     	.line	393, "main.c"; 	keyCount = 100;
     0009 2164                      1- 1483     	MOVIA	0x64
     000A 00rr                      1- 1484     	MOVAR	_keyCount
                                    1- 1485     	.line	394, "main.c"; 	if(!longPressFlag)
     000B 0Crr                      1- 1486     	BTRSC	_Status,1
     000C 3rrr                      1- 1487     	LGOTO	_00329_DS_
                                    1- 1488     	.line	396, "main.c"; 	longPressFlag = 1;
     000D 18rr                      1- 1489     	BSR	_Status,1
                                    1- 1490     	.line	397, "main.c"; 	return 2;
     000E 2102                      1- 1491     	MOVIA	0x02
     000F 3rrr                      1- 1492     	LGOTO	_00330_DS_
                                    1- 1493     ;;unsigned compare: left < lit (0x64=100), size=1
     0010                           1- 1494     _00328_DS_:
                                    1- 1495     	.line	403, "main.c"; 	if(keyCount >= 100)
     0010 2164                      1- 1496     	MOVIA	0x64
     0011 04rr                      1- 1497     	SUBAR	_keyCount,W
     0012 0803                      1- 1498     	BTRSS	STATUS,0
     0013 3rrr                      1- 1499     	LGOTO	_00325_DS_
                                    1- 1500     	.line	405, "main.c"; 	keyCount = 0;
     0014 02rr                      1- 1501     	CLRR	_keyCount
                                    1- 1502     	.line	406, "main.c"; 	longPressFlag = 0;
     0015 1Crr                      1- 1503     	BCR	_Status,1
                                    1- 1504     	.line	407, "main.c"; 	return	0;
     0016 2100                      1- 1505     	MOVIA	0x00
     0017 3rrr                      1- 1506     	LGOTO	_00330_DS_
                                    1- 1507     ;;unsigned compare: left < lit (0x8=8), size=1
     0018                           1- 1508     _00325_DS_:
                                    1- 1509     	.line	409, "main.c"; 	else if(keyCount >= 8)
     0018 2108                      1- 1510     	MOVIA	0x08
     0019 04rr                      1- 1511     	SUBAR	_keyCount,W
     001A 0803                      1- 1512     	BTRSS	STATUS,0
     001B 3rrr                      1- 1513     	LGOTO	_00326_DS_
                                    1- 1514     	.line	411, "main.c"; 	keyCount = 0;
     001C 02rr                      1- 1515     	CLRR	_keyCount
                                    1- 1516     	.line	412, "main.c"; 	return	1;
     001D 2101                      1- 1517     	MOVIA	0x01
     001E 3rrr                      1- 1518     	LGOTO	_00330_DS_
     001F                           1- 1519     _00326_DS_:
                                    1- 1520     	.line	414, "main.c"; 	keyCount = 0;
     001F 02rr                      1- 1521     	CLRR	_keyCount
     0020                           1- 1522     _00329_DS_:
                                    1- 1523     	.line	416, "main.c"; 	return 0;
     0020 2100                      1- 1524     	MOVIA	0x00
     0021                           1- 1525     _00330_DS_:
                                    1- 1526     	.line	417, "main.c"; 	}
                                    1- 1527     	RETURN	
     0021 0010                      3-   26 m1      ret
                                    1- 1528     ; exit point of _keyRead
                                    1- 1530     ;***
                                    1- 1531     ;  pBlock Stats: dbName = C
                                    1- 1532     ;***
                                    1- 1533     ;has an exit
                                    1- 1534     ;functions called:
                                    1- 1535     ;   _LedInput
                                    1- 1536     ;   _pwmStop
                                    1- 1537     ;   _LedInput
                                    1- 1538     ;   _pwmStop
                                    1- 1539     ;; Starting pCode block
                                    1- 1540     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 1542     _gotoSleep:
                                    1- 1543     ; 2 exit points
                                    1- 1544     	.line	362, "main.c"; 	LedInput();
     0000 2rrr                      1- 1545     	LCALL	_LedInput
                                    1- 1546     	.line	363, "main.c"; 	sleepTime = 0;
     0001 02rr                      1- 1547     	CLRR	_sleepTime
     0002 02rr                      1- 1548     	CLRR	(_sleepTime + 1)
                                    1- 1549     	.line	365, "main.c"; 	pwmStop();
     0003 2rrr                      1- 1550     	LCALL	_pwmStop
                                    1- 1551     	.line	366, "main.c"; 	workStep = 0;
     0004 02rr                      1- 1552     	CLRR	_workStep
                                    1- 1553     	.line	367, "main.c"; 	AWUCON = 0x60;
     0005 2160                      1- 1554     	MOVIA	0x60
     0006 00rr                      1- 1555     	MOVAR	_AWUCON
                                    1- 1556     	.line	368, "main.c"; 	fgPRD = 0;
     0007 02rr                      1- 1557     	CLRR	_fgPRD
     0008 02rr                      1- 1558     	CLRR	(_fgPRD + 1)
                                    1- 1559     	.line	369, "main.c"; 	fgCount = 0;
     0009 02rr                      1- 1560     	CLRR	_fgCount
     000A 02rr                      1- 1561     	CLRR	(_fgCount + 1)
                                    1- 1562     	.line	370, "main.c"; 	redLedFlag = 0;
     000B 1Drr                      1- 1563     	BCR	_Status,2
                                    1- 1564     	.line	371, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PABKey;
     000C 210B                      1- 1565     	MOVIA	0x0b
     000D 00rr                      1- 1566     	MOVAR	_INTE
                                    1- 1567     	.line	372, "main.c"; 	PCON =  C_LVR_En | 0x10;	
     000E 2118                      1- 1568     	MOVIA	0x18
     000F 00rr                      1- 1569     	MOVAR	_PCON
                                    1- 1570     	.line	373, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0010 02rr                      1- 1571     	CLRR	_INTF
                                    1- 1572     	.line	374, "main.c"; 	CLRWDT();
     0011 0002                      1- 1573     	clrwdt
                                    1- 1574     	.line	375, "main.c"; 	ENI();
     0012 0004                      1- 1575     	ENI
                                    1- 1576     	.line	376, "main.c"; 	SLEEP();
     0013 0001                      1- 1577     	sleep
                                    1- 1578     	.line	377, "main.c"; 	AWUCON = 0x00;
     0014 02rr                      1- 1579     	CLRR	_AWUCON
                                    1- 1580     	.line	378, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     0015 2101                      1- 1581     	MOVIA	0x01
     0016 00rr                      1- 1582     	MOVAR	_INTE
                                    1- 1583     	.line	379, "main.c"; 	INTF = 0;
     0017 02rr                      1- 1584     	CLRR	_INTF
                                    1- 1585     	.line	381, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En | 0x10;				// Enable WDT ,  Enable LVR
     0018 21B8                      1- 1586     	MOVIA	0xb8
     0019 00rr                      1- 1587     	MOVAR	_PCON
                                    1- 1588     	.line	383, "main.c"; 	}
                                    1- 1589     	RETURN	
     001A 0010                      3-   26 m1      ret
                                    1- 1590     ; exit point of _gotoSleep
                                    1- 1592     ;***
                                    1- 1593     ;  pBlock Stats: dbName = C
                                    1- 1594     ;***
                                    1- 1595     ;has an exit
                                    1- 1596     ;; Starting pCode block
                                    1- 1597     .segment "code"; module=main, function=_pwmStop
     0000                           1- 1599     _pwmStop:
                                    1- 1600     ; 2 exit points
                                    1- 1601     	.line	356, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1- 1602     	CLRA	
     0001 00rr                      1- 1603     	SFUN	_T2CR1
                                    1- 1604     	.line	357, "main.c"; 	}
                                    1- 1605     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1606     ; exit point of _pwmStop
                                    1- 1608     ;***
                                    1- 1609     ;  pBlock Stats: dbName = C
                                    1- 1610     ;***
                                    1- 1611     ;has an exit
                                    1- 1612     ;1 compiler assigned register :
                                    1- 1613     ;   r0x103A
                                    1- 1614     ;; Starting pCode block
                                    1- 1615     .segment "code"; module=main, function=_pwmInit
     0000                           1- 1617     _pwmInit:
                                    1- 1618     ; 2 exit points
                                    1- 1619     	.line	344, "main.c"; 	if(0x80&T2CR1)
     0000 00rr                      1- 1620     	SFUNR	_T2CR1
     0001 00rr                      1- 1621     	MOVAR	r0x103A
     0002 0Frr                      1- 1622     	BTRSC	r0x103A,7
                                    1- 1623     	.line	345, "main.c"; 	return;
     0003 3rrr                      1- 1624     	LGOTO	_00305_DS_
                                    1- 1625     	.line	346, "main.c"; 	TMRH = 0x00;
     0004 02rr                      1- 1626     	CLRR	_TMRH
                                    1- 1627     	.line	347, "main.c"; 	TMR2 = 128;							//频率为110K
     0005 2180                      1- 1628     	MOVIA	0x80
     0006 00rr                      1- 1629     	SFUN	_TMR2
                                    1- 1630     	.line	350, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0007 0200                      1- 1631     	CLRA	
     0008 00rr                      1- 1632     	SFUN	_T2CR2
                                    1- 1633     	.line	351, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     0009 2183                      1- 1634     	MOVIA	0x83
     000A 00rr                      1- 1635     	SFUN	_T2CR1
     000B                           1- 1636     _00305_DS_:
                                    1- 1637     	.line	352, "main.c"; 	}
                                    1- 1638     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1- 1639     ; exit point of _pwmInit
                                    1- 1641     ;***
                                    1- 1642     ;  pBlock Stats: dbName = C
                                    1- 1643     ;***
                                    1- 1644     ;has an exit
                                    1- 1645     ;functions called:
                                    1- 1646     ;   _delay
                                    1- 1647     ;   _LedInput
                                    1- 1648     ;   _delay
                                    1- 1649     ;   _LedInput
                                    1- 1650     ;1 compiler assigned register :
                                    1- 1651     ;   r0x103B
                                    1- 1652     ;; Starting pCode block
                                    1- 1653     .segment "code"; module=main, function=_LED4ON
     0000                           1- 1655     _LED4ON:
                                    1- 1656     ; 2 exit points
                                    1- 1657     	.line	335, "main.c"; 	IOSTB &= 0xF7;
     0000 001r                      1- 1658     	IOSTR	_IOSTB
     0001 00rr                      1- 1659     	MOVAR	r0x103B
     0002 1Drr                      1- 1660     	BCR	r0x103B,3
     0003 01rr                      1- 1661     	MOVR	r0x103B,W
     0004 000r                      1- 1662     	IOST	_IOSTB
                                    1- 1663     	.line	336, "main.c"; 	PORTB |= 0x08;
     0005 19rr                      1- 1664     	BSR	_PORTB,3
                                    1- 1665     	.line	337, "main.c"; 	delay(100);
     0006 2164                      1- 1666     	MOVIA	0x64
     0007 2rrr                      1- 1667     	LCALL	_delay
                                    1- 1668     	.line	338, "main.c"; 	LedInput();
     0008 2rrr                      1- 1669     	LCALL	_LedInput
                                    1- 1670     	.line	339, "main.c"; 	}
                                    1- 1671     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1672     ; exit point of _LED4ON
                                    1- 1674     ;***
                                    1- 1675     ;  pBlock Stats: dbName = C
                                    1- 1676     ;***
                                    1- 1677     ;has an exit
                                    1- 1678     ;functions called:
                                    1- 1679     ;   _delay
                                    1- 1680     ;   _LedInput
                                    1- 1681     ;   _delay
                                    1- 1682     ;   _LedInput
                                    1- 1683     ;1 compiler assigned register :
                                    1- 1684     ;   r0x103C
                                    1- 1685     ;; Starting pCode block
                                    1- 1686     .segment "code"; module=main, function=_LED3ON
     0000                           1- 1688     _LED3ON:
                                    1- 1689     ; 2 exit points
                                    1- 1690     	.line	327, "main.c"; 	IOSTA &= 0X7F;
     0000 001r                      1- 1691     	IOSTR	_IOSTA
     0001 00rr                      1- 1692     	MOVAR	r0x103C
     0002 1Frr                      1- 1693     	BCR	r0x103C,7
     0003 01rr                      1- 1694     	MOVR	r0x103C,W
     0004 000r                      1- 1695     	IOST	_IOSTA
                                    1- 1696     	.line	328, "main.c"; 	PORTA |= 0X80;
     0005 1Brr                      1- 1697     	BSR	_PORTA,7
                                    1- 1698     	.line	329, "main.c"; 	delay(100);
     0006 2164                      1- 1699     	MOVIA	0x64
     0007 2rrr                      1- 1700     	LCALL	_delay
                                    1- 1701     	.line	330, "main.c"; 	LedInput();
     0008 2rrr                      1- 1702     	LCALL	_LedInput
                                    1- 1703     	.line	331, "main.c"; 	}
                                    1- 1704     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1705     ; exit point of _LED3ON
                                    1- 1707     ;***
                                    1- 1708     ;  pBlock Stats: dbName = C
                                    1- 1709     ;***
                                    1- 1710     ;has an exit
                                    1- 1711     ;functions called:
                                    1- 1712     ;   _delay
                                    1- 1713     ;   _LedInput
                                    1- 1714     ;   _delay
                                    1- 1715     ;   _LedInput
                                    1- 1716     ;1 compiler assigned register :
                                    1- 1717     ;   r0x103D
                                    1- 1718     ;; Starting pCode block
                                    1- 1719     .segment "code"; module=main, function=_LED2ON
     0000                           1- 1721     _LED2ON:
                                    1- 1722     ; 2 exit points
                                    1- 1723     	.line	319, "main.c"; 	IOSTA &= 0XFD;
     0000 001r                      1- 1724     	IOSTR	_IOSTA
     0001 00rr                      1- 1725     	MOVAR	r0x103D
     0002 1Crr                      1- 1726     	BCR	r0x103D,1
     0003 01rr                      1- 1727     	MOVR	r0x103D,W
     0004 000r                      1- 1728     	IOST	_IOSTA
                                    1- 1729     	.line	320, "main.c"; 	PORTA |= 0X02;
     0005 18rr                      1- 1730     	BSR	_PORTA,1
                                    1- 1731     	.line	321, "main.c"; 	delay(100);
     0006 2164                      1- 1732     	MOVIA	0x64
     0007 2rrr                      1- 1733     	LCALL	_delay
                                    1- 1734     	.line	322, "main.c"; 	LedInput();
     0008 2rrr                      1- 1735     	LCALL	_LedInput
                                    1- 1736     	.line	323, "main.c"; 	}
                                    1- 1737     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1738     ; exit point of _LED2ON
                                    1- 1740     ;***
                                    1- 1741     ;  pBlock Stats: dbName = C
                                    1- 1742     ;***
                                    1- 1743     ;has an exit
                                    1- 1744     ;functions called:
                                    1- 1745     ;   _delay
                                    1- 1746     ;   _LedInput
                                    1- 1747     ;   _delay
                                    1- 1748     ;   _LedInput
                                    1- 1749     ;1 compiler assigned register :
                                    1- 1750     ;   r0x103E
                                    1- 1751     ;; Starting pCode block
                                    1- 1752     .segment "code"; module=main, function=_LED1ON
     0000                           1- 1754     _LED1ON:
                                    1- 1755     ; 2 exit points
                                    1- 1756     	.line	311, "main.c"; 	IOSTA &= 0XFE;
     0000 001r                      1- 1757     	IOSTR	_IOSTA
     0001 00rr                      1- 1758     	MOVAR	r0x103E
     0002 1Crr                      1- 1759     	BCR	r0x103E,0
     0003 01rr                      1- 1760     	MOVR	r0x103E,W
     0004 000r                      1- 1761     	IOST	_IOSTA
                                    1- 1762     	.line	312, "main.c"; 	PORTA |= 0X01;
     0005 18rr                      1- 1763     	BSR	_PORTA,0
                                    1- 1764     	.line	313, "main.c"; 	delay(100);
     0006 2164                      1- 1765     	MOVIA	0x64
     0007 2rrr                      1- 1766     	LCALL	_delay
                                    1- 1767     	.line	314, "main.c"; 	LedInput();
     0008 2rrr                      1- 1768     	LCALL	_LedInput
                                    1- 1769     	.line	315, "main.c"; 	}
                                    1- 1770     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1771     ; exit point of _LED1ON
                                    1- 1773     ;***
                                    1- 1774     ;  pBlock Stats: dbName = C
                                    1- 1775     ;***
                                    1- 1776     ;has an exit
                                    1- 1777     ;1 compiler assigned register :
                                    1- 1778     ;   r0x1039
                                    1- 1779     ;; Starting pCode block
                                    1- 1780     .segment "code"; module=main, function=_LedInput
     0000                           1- 1782     _LedInput:
                                    1- 1783     ; 2 exit points
                                    1- 1784     	.line	303, "main.c"; 	IOSTA |= 0x83;
     0000 001r                      1- 1785     	IOSTR	_IOSTA
     0001 00rr                      1- 1786     	MOVAR	r0x1039
     0002 2183                      1- 1787     	MOVIA	0x83
     0003 11rr                      1- 1788     	IORAR	r0x1039,F
     0004 01rr                      1- 1789     	MOVR	r0x1039,W
     0005 000r                      1- 1790     	IOST	_IOSTA
                                    1- 1791     	.line	304, "main.c"; 	IOSTB |= 0x08;
     0006 001r                      1- 1792     	IOSTR	_IOSTB
     0007 00rr                      1- 1793     	MOVAR	r0x1039
     0008 19rr                      1- 1794     	BSR	r0x1039,3
     0009 01rr                      1- 1795     	MOVR	r0x1039,W
     000A 000r                      1- 1796     	IOST	_IOSTB
                                    1- 1797     	.line	305, "main.c"; 	PORTA &= 0x7C;
     000B 217C                      1- 1798     	MOVIA	0x7c
     000C 10rr                      1- 1799     	ANDAR	_PORTA,F
                                    1- 1800     	.line	306, "main.c"; 	PORTB &= 0xF7;
     000D 1Drr                      1- 1801     	BCR	_PORTB,3
                                    1- 1802     	.line	307, "main.c"; 	}
                                    1- 1803     	RETURN	
     000E 0010                      3-   26 m1      ret
                                    1- 1804     ; exit point of _LedInput
                                    1- 1806     ;***
                                    1- 1807     ;  pBlock Stats: dbName = C
                                    1- 1808     ;***
                                    1- 1809     ;has an exit
                                    1- 1810     ;functions called:
                                    1- 1811     ;   _LedInput
                                    1- 1812     ;   _LedInput
                                    1- 1813     ;   _LED4ON
                                    1- 1814     ;   _LED3ON
                                    1- 1815     ;   _LED2ON
                                    1- 1816     ;   _LED1ON
                                    1- 1817     ;   _LedInput
                                    1- 1818     ;   _LedInput
                                    1- 1819     ;   _LED4ON
                                    1- 1820     ;   _LED3ON
                                    1- 1821     ;   _LED2ON
                                    1- 1822     ;   _LED1ON
                                    1- 1823     ;; Starting pCode block
                                    1- 1824     .segment "code"; module=main, function=_ledShow
     0000                           1- 1826     _ledShow:
                                    1- 1827     ; 2 exit points
                                    1- 1828     ;;unsigned compare: left < lit (0xA=10), size=1
                                    1- 1829     	.line	274, "main.c"; 	if((overCount >= 10 || lowBat == 1 )&& workStep > 0)
     0000 210A                      1- 1830     	MOVIA	0x0a
     0001 04rr                      1- 1831     	SUBAR	_overCount,W
     0002 0C03                      1- 1832     	BTRSC	STATUS,0
     0003 3rrr                      1- 1833     	LGOTO	_00254_DS_
     0004 01rr                      1- 1834     	MOVR	_lowBat,W
     0005 2401                      1- 1835     	XORIA	0x01
     0006 0903                      1- 1836     	BTRSS	STATUS,2
     0007 3rrr                      1- 1837     	LGOTO	_00252_DS_
     0008                           1- 1838     _00254_DS_:
     0008 01rr                      1- 1839     	MOVR	_workStep,W
     0009 0D03                      1- 1840     	BTRSC	STATUS,2
     000A 3rrr                      1- 1841     	LGOTO	_00252_DS_
                                    1- 1842     ;;unsigned compare: left < lit (0x32=50), size=1
                                    1- 1843     	.line	276, "main.c"; 	if(count1s < 50)
     000B 2132                      1- 1844     	MOVIA	0x32
     000C 04rr                      1- 1845     	SUBAR	_count1s,W
     000D 0C03                      1- 1846     	BTRSC	STATUS,0
     000E 3rrr                      1- 1847     	LGOTO	_00249_DS_
                                    1- 1848     	.line	277, "main.c"; 	ledStep = workStep;
     000F 01rr                      1- 1849     	MOVR	_workStep,W
     0010 00rr                      1- 1850     	MOVAR	_ledStep
     0011 3rrr                      1- 1851     	LGOTO	_00252_DS_
     0012                           1- 1852     _00249_DS_:
                                    1- 1853     	.line	279, "main.c"; 	ledStep = 0;
     0012 02rr                      1- 1854     	CLRR	_ledStep
     0013                           1- 1855     _00252_DS_:
                                    1- 1856     	.line	281, "main.c"; 	LedInput();
     0013 2rrr                      1- 1857     	LCALL	_LedInput
                                    1- 1858     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1859     ;;unsigned compare: left >= lit (0x5=5), size=1
                                    1- 1860     	.line	282, "main.c"; 	switch(ledStep)
     0014 2105                      1- 1861     	MOVIA	0x05
     0015 04rr                      1- 1862     	SUBAR	_ledStep,W
     0016 0C03                      1- 1863     	BTRSC	STATUS,0
     0017 3rrr                      1- 1864     	LGOTO	_00261_DS_
     0018 21rr                      1- 1865     	MOVIA	((_00278_DS_ >> 8) & 0xff)
     0019 008A                      1- 1866     	MOVAR	PCHBUF
     001A 01rr                      1- 1867     	MOVR	_ledStep,W
     001B 25rr                      1- 1868     	ADDIA	_00278_DS_
     001C 0C03                      1- 1869     	BTRSC	STATUS,0
     001D 058A                      1- 1870     	INCR	PCHBUF,F
     001E 0082                      1- 1871     	MOVAR	PCL
     001F                           1- 1872     _00278_DS_:
     001F 3rrr                      1- 1873     	LGOTO	_00255_DS_
     0020 3rrr                      1- 1874     	LGOTO	_00259_DS_
     0021 3rrr                      1- 1875     	LGOTO	_00258_DS_
     0022 3rrr                      1- 1876     	LGOTO	_00257_DS_
     0023 3rrr                      1- 1877     	LGOTO	_00256_DS_
     0024                           1- 1878     _00255_DS_:
                                    1- 1879     	.line	285, "main.c"; 	LedInput();
     0024 2rrr                      1- 1880     	LCALL	_LedInput
                                    1- 1881     	.line	286, "main.c"; 	break;
     0025 3rrr                      1- 1882     	LGOTO	_00261_DS_
     0026                           1- 1883     _00256_DS_:
                                    1- 1884     	.line	288, "main.c"; 	LED4ON();
     0026 2rrr                      1- 1885     	LCALL	_LED4ON
     0027                           1- 1886     _00257_DS_:
                                    1- 1887     	.line	290, "main.c"; 	LED3ON();
     0027 2rrr                      1- 1888     	LCALL	_LED3ON
     0028                           1- 1889     _00258_DS_:
                                    1- 1890     	.line	292, "main.c"; 	LED2ON();
     0028 2rrr                      1- 1891     	LCALL	_LED2ON
     0029                           1- 1892     _00259_DS_:
                                    1- 1893     	.line	294, "main.c"; 	LED1ON();
     0029 2rrr                      1- 1894     	LCALL	_LED1ON
     002A                           1- 1895     _00261_DS_:
                                    1- 1896     	.line	297, "main.c"; 	}
                                    1- 1897     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1- 1898     ; exit point of _ledShow
                                    1- 1900     ;***
                                    1- 1901     ;  pBlock Stats: dbName = C
                                    1- 1902     ;***
                                    1- 1903     ;has an exit
                                    1- 1904     ;; Starting pCode block
                                    1- 1905     .segment "code"; module=main, function=_initSys
     0000                           1- 1907     _initSys:
                                    1- 1908     ; 2 exit points
                                    1- 1909     	.line	243, "main.c"; 	DISI();
     0000 0013                      1- 1910     	DISI
                                    1- 1911     	.line	244, "main.c"; 	IOSTA = C_PA6_Input | C_PA5_Input | C_PA4_Input | C_PA3_Input;
     0001 2178                      1- 1912     	MOVIA	0x78
     0002 000r                      1- 1913     	IOST	_IOSTA
                                    1- 1914     	.line	245, "main.c"; 	IOSTB = C_PB0_Input | C_PB1_Input;
     0003 2103                      1- 1915     	MOVIA	0x03
     0004 000r                      1- 1916     	IOST	_IOSTB
                                    1- 1917     	.line	246, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1- 1918     	CLRR	_PORTB
                                    1- 1919     	.line	247, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1- 1920     	CLRR	_PORTA
                                    1- 1921     	.line	248, "main.c"; 	APHCON = 0x9F;
     0007 219F                      1- 1922     	MOVIA	0x9f
     0008 000r                      1- 1923     	IOST	_APHCON
                                    1- 1924     	.line	249, "main.c"; 	BPHCON = 0xFF;
     0009 21FF                      1- 1925     	MOVIA	0xff
     000A 00rr                      1- 1926     	MOVAR	_BPHCON
                                    1- 1927     	.line	250, "main.c"; 	ABPLCON = 0xDF;
     000B 21DF                      1- 1928     	MOVIA	0xdf
     000C 00rr                      1- 1929     	MOVAR	_ABPLCON
                                    1- 1930     	.line	252, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1- 1931     	MOVIA	0x01
     000E 00rr                      1- 1932     	MOVAR	_INTE
                                    1- 1933     	.line	254, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1- 1934     	CLRA	
     0010 000r                      1- 1935     	IOST	_PCON1
                                    1- 1936     	.line	256, "main.c"; 	TMR0 = 55;
     0011 2137                      1- 1937     	MOVIA	0x37
     0012 00rr                      1- 1938     	MOVAR	_TMR0
                                    1- 1939     	.line	257, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1- 1940     	CLRA	
     0014 0003                      1- 1941     	T0MD	
                                    1- 1942     	.line	259, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1- 1943     	MOVIA	0x01
     0016 000r                      1- 1944     	IOST	_PCON1
                                    1- 1945     	.line	262, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0017 2198                      1- 1946     	MOVIA	0x98
     0018 00rr                      1- 1947     	MOVAR	_PCON
                                    1- 1948     	.line	265, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0019 2101                      1- 1949     	MOVIA	0x01
     001A 000r                      1- 1950     	IOST	_PCON1
                                    1- 1951     	.line	266, "main.c"; 	ENI();
     001B 0004                      1- 1952     	ENI
                                    1- 1953     	.line	267, "main.c"; 	}
                                    1- 1954     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1- 1955     ; exit point of _initSys
                                    1- 1957     ;***
                                    1- 1958     ;  pBlock Stats: dbName = C
                                    1- 1959     ;***
                                    1- 1960     ;has an exit
                                    1- 1961     ;functions called:
                                    1- 1962     ;   _pwmStop
                                    1- 1963     ;   _pwmStop
                                    1- 1964     ;; Starting pCode block
                                    1- 1965     .segment "code"; module=main, function=_powerOff
     0000                           1- 1967     _powerOff:
                                    1- 1968     ; 2 exit points
                                    1- 1969     	.line	233, "main.c"; 	workStep = 0;
     0000 02rr                      1- 1970     	CLRR	_workStep
                                    1- 1971     	.line	234, "main.c"; 	pwmStop();
     0001 2rrr                      1- 1972     	LCALL	_pwmStop
                                    1- 1973     	.line	235, "main.c"; 	ledStep = 5;
     0002 2105                      1- 1974     	MOVIA	0x05
     0003 00rr                      1- 1975     	MOVAR	_ledStep
                                    1- 1976     	.line	236, "main.c"; 	workStartFlag = 2;
     0004 2102                      1- 1977     	MOVIA	0x02
     0005 00rr                      1- 1978     	MOVAR	_workStartFlag
                                    1- 1979     	.line	237, "main.c"; 	}
                                    1- 1980     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1- 1981     ; exit point of _powerOff
                                    1- 1983     ;***
                                    1- 1984     ;  pBlock Stats: dbName = C
                                    1- 1985     ;***
                                    1- 1986     ;has an exit
                                    1- 1987     ;functions called:
                                    1- 1988     ;   _keyRead
                                    1- 1989     ;   _powerOff
                                    1- 1990     ;   _pwmInit
                                    1- 1991     ;   _powerOff
                                    1- 1992     ;   _pwmInit
                                    1- 1993     ;   _keyRead
                                    1- 1994     ;   _powerOff
                                    1- 1995     ;   _pwmInit
                                    1- 1996     ;   _powerOff
                                    1- 1997     ;   _pwmInit
                                    1- 1998     ;1 compiler assigned register :
                                    1- 1999     ;   r0x103F
                                    1- 2000     ;; Starting pCode block
                                    1- 2001     .segment "code"; module=main, function=_keyCtr
                                    1- 2003     ;local variable name mapping:
     0000                           1- 2005     _keyCtr:
                                    1- 2006     ; 2 exit points
                                    1- 2007     	.line	169, "main.c"; 	char kclick = keyRead(0x40 & (~PORTA));
     0000 07rr                      1- 2008     	COMR	_PORTA,W
     0001 00rr                      1- 2009     	MOVAR	r0x103F
     0002 2140                      1- 2010     	MOVIA	0x40
     0003 10rr                      1- 2011     	ANDAR	r0x103F,F
     0004 01rr                      1- 2012     	MOVR	r0x103F,W
     0005 2rrr                      1- 2013     	LCALL	_keyRead
     0006 00rr                      1- 2014     	MOVAR	r0x103F
                                    1- 2015     	.line	170, "main.c"; 	if(kclick == 1)
     0007 2401                      1- 2016     	XORIA	0x01
     0008 0903                      1- 2017     	BTRSS	STATUS,2
     0009 3rrr                      1- 2018     	LGOTO	_00233_DS_
                                    1- 2019     	.line	172, "main.c"; 	count500ms = 0;
     000A 02rr                      1- 2020     	CLRR	_count500ms
                                    1- 2021     	.line	174, "main.c"; 	ledTime = 0;
     000B 02rr                      1- 2022     	CLRR	_ledTime
                                    1- 2023     	.line	175, "main.c"; 	if(++workStep > 4)
     000C 05rr                      1- 2024     	INCR	_workStep,F
                                    1- 2025     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2026     ;;unsigned compare: left >= lit (0x5=5), size=1
     000D 2105                      1- 2027     	MOVIA	0x05
     000E 04rr                      1- 2028     	SUBAR	_workStep,W
     000F 0C03                      1- 2029     	BTRSC	STATUS,0
                                    1- 2030     	.line	176, "main.c"; 	workStep = 0;
     0010 02rr                      1- 2031     	CLRR	_workStep
                                    1- 2032     	.line	178, "main.c"; 	if(workStep == 0)
     0011 01rr                      1- 2033     	MOVR	_workStep,W
     0012 0903                      1- 2034     	BTRSS	STATUS,2
     0013 3rrr                      1- 2035     	LGOTO	_00215_DS_
                                    1- 2036     	.line	180, "main.c"; 	powerOff();
     0014 2rrr                      1- 2037     	LCALL	_powerOff
     0015 3rrr                      1- 2038     	LGOTO	_00216_DS_
     0016                           1- 2039     _00215_DS_:
                                    1- 2040     	.line	182, "main.c"; 	else if(workStep == 1)
     0016 01rr                      1- 2041     	MOVR	_workStep,W
     0017 2401                      1- 2042     	XORIA	0x01
     0018 0903                      1- 2043     	BTRSS	STATUS,2
     0019 3rrr                      1- 2044     	LGOTO	_00212_DS_
                                    1- 2045     	.line	184, "main.c"; 	maxDuty = 70;
     001A 2146                      1- 2046     	MOVIA	0x46
     001B 00rr                      1- 2047     	MOVAR	_maxDuty
                                    1- 2048     	.line	185, "main.c"; 	currentDuty = 125;
     001C 217D                      1- 2049     	MOVIA	0x7d
     001D 00rr                      1- 2050     	MOVAR	_currentDuty
     001E 3rrr                      1- 2051     	LGOTO	_00216_DS_
     001F                           1- 2052     _00212_DS_:
                                    1- 2053     	.line	187, "main.c"; 	else if(workStep == 2)
     001F 01rr                      1- 2054     	MOVR	_workStep,W
     0020 2402                      1- 2055     	XORIA	0x02
     0021 0903                      1- 2056     	BTRSS	STATUS,2
     0022 3rrr                      1- 2057     	LGOTO	_00209_DS_
                                    1- 2058     	.line	188, "main.c"; 	maxDuty = 75;
     0023 214B                      1- 2059     	MOVIA	0x4b
     0024 00rr                      1- 2060     	MOVAR	_maxDuty
     0025 3rrr                      1- 2061     	LGOTO	_00216_DS_
     0026                           1- 2062     _00209_DS_:
                                    1- 2063     	.line	189, "main.c"; 	else if(workStep == 3)
     0026 01rr                      1- 2064     	MOVR	_workStep,W
     0027 2403                      1- 2065     	XORIA	0x03
     0028 0903                      1- 2066     	BTRSS	STATUS,2
     0029 3rrr                      1- 2067     	LGOTO	_00206_DS_
                                    1- 2068     	.line	190, "main.c"; 	maxDuty = 80;
     002A 2150                      1- 2069     	MOVIA	0x50
     002B 00rr                      1- 2070     	MOVAR	_maxDuty
     002C 3rrr                      1- 2071     	LGOTO	_00216_DS_
     002D                           1- 2072     _00206_DS_:
                                    1- 2073     	.line	191, "main.c"; 	else if(workStep == 4)
     002D 01rr                      1- 2074     	MOVR	_workStep,W
     002E 2404                      1- 2075     	XORIA	0x04
     002F 0903                      1- 2076     	BTRSS	STATUS,2
     0030 3rrr                      1- 2077     	LGOTO	_00216_DS_
                                    1- 2078     	.line	192, "main.c"; 	maxDuty = 85;
     0031 2155                      1- 2079     	MOVIA	0x55
     0032 00rr                      1- 2080     	MOVAR	_maxDuty
     0033                           1- 2081     _00216_DS_:
                                    1- 2082     	.line	193, "main.c"; 	if(workStep > 0)
     0033 01rr                      1- 2083     	MOVR	_workStep,W
     0034 0D03                      1- 2084     	BTRSC	STATUS,2
     0035 3rrr                      1- 2085     	LGOTO	_00226_DS_
                                    1- 2086     	.line	195, "main.c"; 	if(pwStep > 0 && pwStep < 3)
     0036 01rr                      1- 2087     	MOVR	_pwStep,W
     0037 0D03                      1- 2088     	BTRSC	STATUS,2
     0038 3rrr                      1- 2089     	LGOTO	_00220_DS_
                                    1- 2090     ;;unsigned compare: left < lit (0x3=3), size=1
     0039 2103                      1- 2091     	MOVIA	0x03
     003A 04rr                      1- 2092     	SUBAR	_pwStep,W
     003B 0C03                      1- 2093     	BTRSC	STATUS,0
     003C 3rrr                      1- 2094     	LGOTO	_00220_DS_
                                    1- 2095     ;;unsigned compare: left < lit (0x7C=124), size=1
                                    1- 2096     	.line	197, "main.c"; 	if(maxDuty < 124)
     003D 217C                      1- 2097     	MOVIA	0x7c
     003E 04rr                      1- 2098     	SUBAR	_maxDuty,W
     003F 0C03                      1- 2099     	BTRSC	STATUS,0
     0040 3rrr                      1- 2100     	LGOTO	_00220_DS_
                                    1- 2101     	.line	198, "main.c"; 	maxDuty = maxDuty + 4;
     0041 2104                      1- 2102     	MOVIA	0x04
     0042 03rr                      1- 2103     	ADDAR	_maxDuty,F
     0043                           1- 2104     _00220_DS_:
                                    1- 2105     	.line	200, "main.c"; 	if(workStep == 1)
     0043 01rr                      1- 2106     	MOVR	_workStep,W
     0044 2401                      1- 2107     	XORIA	0x01
     0045 0903                      1- 2108     	BTRSS	STATUS,2
     0046 3rrr                      1- 2109     	LGOTO	_00223_DS_
                                    1- 2110     	.line	202, "main.c"; 	PWM2DUTY = 125;
     0047 217D                      1- 2111     	MOVIA	0x7d
     0048 00rr                      1- 2112     	SFUN	_PWM2DUTY
     0049 3rrr                      1- 2113     	LGOTO	_00224_DS_
     004A                           1- 2114     _00223_DS_:
                                    1- 2115     	.line	206, "main.c"; 	PWM2DUTY = maxDuty;
     004A 01rr                      1- 2116     	MOVR	_maxDuty,W
     004B 00rr                      1- 2117     	SFUN	_PWM2DUTY
     004C                           1- 2118     _00224_DS_:
                                    1- 2119     	.line	208, "main.c"; 	pwmInit();
     004C 2rrr                      1- 2120     	LCALL	_pwmInit
     004D                           1- 2121     _00226_DS_:
                                    1- 2122     	.line	210, "main.c"; 	ledStep = workStep;
     004D 01rr                      1- 2123     	MOVR	_workStep,W
     004E 00rr                      1- 2124     	MOVAR	_ledStep
     004F 3rrr                      1- 2125     	LGOTO	_00235_DS_
     0050                           1- 2126     _00233_DS_:
                                    1- 2127     	.line	212, "main.c"; 	else if(kclick == 2)
     0050 01rr                      1- 2128     	MOVR	r0x103F,W
     0051 2402                      1- 2129     	XORIA	0x02
     0052 0903                      1- 2130     	BTRSS	STATUS,2
     0053 3rrr                      1- 2131     	LGOTO	_00235_DS_
                                    1- 2132     	.line	214, "main.c"; 	if(workStep > 0)
     0054 01rr                      1- 2133     	MOVR	_workStep,W
     0055 0D03                      1- 2134     	BTRSC	STATUS,2
     0056 3rrr                      1- 2135     	LGOTO	_00228_DS_
                                    1- 2136     	.line	216, "main.c"; 	powerOff();
     0057 2rrr                      1- 2137     	LCALL	_powerOff
     0058 3rrr                      1- 2138     	LGOTO	_00229_DS_
     0059                           1- 2139     _00228_DS_:
                                    1- 2140     	.line	220, "main.c"; 	workStep = 1;
     0059 2101                      1- 2141     	MOVIA	0x01
     005A 00rr                      1- 2142     	MOVAR	_workStep
                                    1- 2143     	.line	221, "main.c"; 	PWM2DUTY = 125;
     005B 217D                      1- 2144     	MOVIA	0x7d
     005C 00rr                      1- 2145     	SFUN	_PWM2DUTY
                                    1- 2146     	.line	222, "main.c"; 	maxDuty = 105;
     005D 2169                      1- 2147     	MOVIA	0x69
     005E 00rr                      1- 2148     	MOVAR	_maxDuty
                                    1- 2149     	.line	223, "main.c"; 	currentDuty = 125;
     005F 217D                      1- 2150     	MOVIA	0x7d
     0060 00rr                      1- 2151     	MOVAR	_currentDuty
                                    1- 2152     	.line	224, "main.c"; 	pwmInit();
     0061 2rrr                      1- 2153     	LCALL	_pwmInit
     0062                           1- 2154     _00229_DS_:
                                    1- 2155     	.line	226, "main.c"; 	ledStep = workStep;
     0062 01rr                      1- 2156     	MOVR	_workStep,W
     0063 00rr                      1- 2157     	MOVAR	_ledStep
     0064                           1- 2158     _00235_DS_:
                                    1- 2159     	.line	228, "main.c"; 	}
                                    1- 2160     	RETURN	
     0064 0010                      3-   26 m1      ret
                                    1- 2161     ; exit point of _keyCtr
                                    1- 2164     ;	code size estimation:
                                    1- 2165     ;	  863+    0 =   863 instructions ( 1726 byte)
                                    1- 2167     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810613
__sdcc_interrupt        Label    00000000
_00106_DS_              Label    0000001E
_00112_DS_              Label    00000035
_00119_DS_              Label    00000037
_00121_DS_              Label    0000003B
_00134_DS_              Label    00000010
_00135_DS_              Label    00000018
_00137_DS_              Label    00000023
_00142_DS_              Label    00000038
_00148_DS_              Label    00000002
_00195_DS_              Label    00000035
_00196_DS_              Label    0000003E
_00206_DS_              Label    0000002D
_00209_DS_              Label    00000026
_00212_DS_              Label    0000001F
_00215_DS_              Label    00000016
_00216_DS_              Label    00000033
_00220_DS_              Label    00000043
_00223_DS_              Label    0000004A
_00224_DS_              Label    0000004C
_00226_DS_              Label    0000004D
_00228_DS_              Label    00000059
_00229_DS_              Label    00000062
_00233_DS_              Label    00000050
_00235_DS_              Label    00000064
_00249_DS_              Label    00000012
_00252_DS_              Label    00000013
_00254_DS_              Label    00000008
_00255_DS_              Label    00000024
_00256_DS_              Label    00000026
_00257_DS_              Label    00000027
_00258_DS_              Label    00000028
_00259_DS_              Label    00000029
_00261_DS_              Label    0000002A
_00278_DS_              Label    0000001F
_00305_DS_              Label    0000000B
_00325_DS_              Label    00000018
_00326_DS_              Label    0000001F
_00328_DS_              Label    00000010
_00329_DS_              Label    00000020
_00330_DS_              Label    00000021
_00340_DS_              Label    0000000C
_00345_DS_              Label    00000017
_00347_DS_              Label    0000001D
_00354_DS_              Label    00000002
_00356_DS_              Label    00000009
_00366_DS_              Label    00000049
_00372_DS_              Label    00000030
_00373_DS_              Label    0000004D
_00377_DS_              Label    00000075
_00378_DS_              Label    00000077
_00386_DS_              Label    000000AB
_00389_DS_              Label    0000009E
_00392_DS_              Label    00000091
_00395_DS_              Label    0000005E
_00397_DS_              Label    000000B3
_00441_DS_              Label    00000029
_00442_DS_              Label    00000036
_00443_DS_              Label    0000003E
_00445_DS_              Label    00000059
_00446_DS_              Label    00000064
_00447_DS_              Label    00000070
_00448_DS_              Label    0000007D
_00449_DS_              Label    00000088
_00450_DS_              Label    00000097
_00451_DS_              Label    000000A4
_00457_DS_              Label    00000029
_00463_DS_              Label    00000063
_00466_DS_              Label    0000005A
_00469_DS_              Label    00000051
_00472_DS_              Label    00000048
_00475_DS_              Label    00000072
_00479_DS_              Label    0000006C
_00482_DS_              Label    0000003B
_00484_DS_              Label    00000077
_00519_DS_              Label    0000002F
_00521_DS_              Label    00000041
_00528_DS_              Label    0000000A
_00530_DS_              Label    0000001F
_00537_DS_              Label    0000000A
_00539_DS_              Label    0000001F
_00544_DS_              Label    00000000
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkBatAD             Label    00000000
_checkOutA              Label    00000000
_chrgCtr                Label    00000000
_chrgTime               Label    00000000
_count1s                Label    00000000
_count200ms             Label    00000000
_count500ms             Label    00000000
_count900s              Label    00000000
_currentDuty            Label    00000000
_debug                  Label    00000000
_delay                  Label    00000000
_duty                   Label    00000000
_F_AIN3_Convert         Label    00000000
_F_AIN4_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_fgCount                Label    00000000
_fgCtr                  Label    00000000
_fgPRD                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IO_Init                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_LED1ON                 Label    00000000
_LED2ON                 Label    00000000
_LED3ON                 Label    00000000
_LED4ON                 Label    00000000
_ledCtr                 Label    00000000
_LedCtr2                Label    00000000
_LedInput               Label    00000000
_ledShow                Label    00000000
_ledStep                Label    00000000
_ledTime                Label    00000000
_lowBat                 Label    00000000
_lowBatTime             Label    00000000
_main                   Label    00000000
_maxDuty                Label    00000000
_OSCCR                  Label    00000000
_overCount              Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerOff               Label    00000000
_preFG                  Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmInit                Label    00000000
_pwmStop                Label    00000000
_pwStep                 Label    00000000
_R_AIN3_DATA            Label    00000000
_R_AIN3_DATA_LB         Label    00000000
_R_AIN4_DATA            Label    00000000
_R_AIN4_DATA_LB         Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sleepTime              Label    00000000
_startStep              Label    00000000
_Status                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStartFlag          Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000049
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102B                 Label    00000000
r0x102C                 Label    00000000
r0x102F                 Label    00000000
r0x1030                 Label    00000000
r0x1033                 Label    00000000
r0x1036                 Label    00000000
r0x1037                 Label    00000000
r0x1038                 Label    00000000
r0x1039                 Label    00000000
r0x103A                 Label    00000000
r0x103B                 Label    00000000
r0x103C                 Label    00000000
r0x103D                 Label    00000000
r0x103E                 Label    00000000
r0x103F                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b061d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B061D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000005FF
DATA ROM     = 0x00000000 - 0x000005FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
