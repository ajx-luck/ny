
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_ADMDbits
                                    1-   23     	extern	_ADRbits
                                    1-   24     	extern	_ADVREFHbits
                                    1-   25     	extern	_ADCRbits
                                    1-   26     	extern	_AWUCONbits
                                    1-   27     	extern	_PACONbits
                                    1-   28     	extern	_INTEDGbits
                                    1-   29     	extern	_ANAENbits
                                    1-   30     	extern	_RFCbits
                                    1-   31     	extern	_INTE2bits
                                    1-   32     	extern	_INDF
                                    1-   33     	extern	_TMR0
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_STATUS
                                    1-   36     	extern	_FSR
                                    1-   37     	extern	_PORTA
                                    1-   38     	extern	_PORTB
                                    1-   39     	extern	_PCON
                                    1-   40     	extern	_BWUCON
                                    1-   41     	extern	_PCHBUF
                                    1-   42     	extern	_ABPLCON
                                    1-   43     	extern	_BPHCON
                                    1-   44     	extern	_INTE
                                    1-   45     	extern	_INTF
                                    1-   46     	extern	_ADMD
                                    1-   47     	extern	_ADR
                                    1-   48     	extern	_ADD
                                    1-   49     	extern	_ADVREFH
                                    1-   50     	extern	_ADCR
                                    1-   51     	extern	_AWUCON
                                    1-   52     	extern	_PACON
                                    1-   53     	extern	_INTEDG
                                    1-   54     	extern	_TMRH
                                    1-   55     	extern	_ANAEN
                                    1-   56     	extern	_RFC
                                    1-   57     	extern	_TM3RH
                                    1-   58     	extern	_INTE2
                                    1-   59     	extern	_TMR1
                                    1-   60     	extern	_T1CR1
                                    1-   61     	extern	_T1CR2
                                    1-   62     	extern	_PWM1DUTY
                                    1-   63     	extern	_PS1CV
                                    1-   64     	extern	_BZ1CR
                                    1-   65     	extern	_IRCR
                                    1-   66     	extern	_TBHP
                                    1-   67     	extern	_TBHD
                                    1-   68     	extern	_TMR2
                                    1-   69     	extern	_T2CR1
                                    1-   70     	extern	_T2CR2
                                    1-   71     	extern	_PWM2DUTY
                                    1-   72     	extern	_PS2CV
                                    1-   73     	extern	_BZ2CR
                                    1-   74     	extern	_OSCCR
                                    1-   75     	extern	_TMR3
                                    1-   76     	extern	_T3CR1
                                    1-   77     	extern	_T3CR2
                                    1-   78     	extern	_PWM3DUTY
                                    1-   79     	extern	_PS3CV
                                    1-   80     	extern	_BZ3CR
                                    1-   81     	extern	_IOSTA
                                    1-   82     	extern	_IOSTB
                                    1-   83     	extern	_APHCON
                                    1-   84     	extern	_PS0CV
                                    1-   85     	extern	_BODCON
                                    1-   86     	extern	_CMPCR
                                    1-   87     	extern	_PCON1
                                    1-   88     	extern	_T0MD
                                    1-   89     	extern	___sdcc_saved_fsr
                                    1-   90     	extern	___sdcc_saved_stk00
                                    1-   91     	extern	___sdcc_saved_stk01
                                    1-   92     	extern	__mulchar
                                    1-   93     	extern	__nyc_ny8_startup
                                    1-   94     ;--------------------------------------------------------
                                    1-   95     ; global declarations
                                    1-   96     ;--------------------------------------------------------
                                    1-   97     	extern	_gotoSleep
                                    1-   98     	extern	_keyCtr
                                    1-   99     	extern	_initSys
                                    1-  100     	extern	_workStop
                                    1-  101     	extern	_fanzhuan
                                    1-  102     	extern	_zhengzhuan
                                    1-  103     	extern	_pwm3Stop
                                    1-  104     	extern	_pwm3Init
                                    1-  105     	extern	_pwm2Stop
                                    1-  106     	extern	_pwm1Stop
                                    1-  107     	extern	_workCtr
                                    1-  108     	extern	_ledOff
                                    1-  109     	extern	_ledOn
                                    1-  110     	extern	_isr
                                    1-  111     	extern	_main
                                    1-  112     	extern	_pwm1Init
                                    1-  113     	extern	_pwm2Init
                                    1-  114     	extern	_keyRead
                                    1-  115     	extern	_Status
                                    1-  116     	extern	_workStartFlag
                                    1-  117     	extern	_keyNub
                                    1-  118     	extern	_keyCount
                                    1-  119     	extern	_intCount
                                    1-  120     	extern	_workStep
                                    1-  121     	extern	_powerStep
                                    1-  122     	extern	_workTime
                                    1-  123     	extern	_delayTime
                                    1-  124     	extern	_resetworkTime
                                    1-  125     	extern	_resetdelayTime
                                    1-  126     	extern	_sleepTime
                                    1-  127     	extern	_count1s
                                    1-  128     	extern	_ledCount
                                    1-  129     	extern	_lastTime
                                    1-  130     	extern	_zfTime
                                    1-  132     	extern PSAVE
                                    1-  133     	extern SSAVE
                                    1-  134     	extern WSAVE
                                    1-  135     	extern STK02
                                    1-  136     	extern STK01
                                    1-  137     	extern STK00
                                    1-  139     .segment "uninit", 0x20000040
 20000040                           1-  140     PSAVE:
                                    1-  141     	.res 1
 20000041                           1-  142     SSAVE:
                                    1-  143     	.res 1
 20000042                           1-  144     WSAVE:
                                    1-  145     	.res 1
 20000043                           1-  146     STK02:
                                    1-  147     	.res 1
 20000044                           1-  148     STK01:
                                    1-  149     	.res 1
 20000045                           1-  150     STK00:
                                    1-  151     	.res 1
                                    1-  153     ;--------------------------------------------------------
                                    1-  154     ; global definitions
                                    1-  155     ;--------------------------------------------------------
                                    1-  156     ;--------------------------------------------------------
                                    1-  157     ; absolute symbol definitions
                                    1-  158     ;--------------------------------------------------------
                                    1-  159     ;--------------------------------------------------------
                                    1-  160     ; compiler-defined variables
                                    1-  161     ;--------------------------------------------------------
                                    1-  162     .segment "uninit"
     0000                           1-  163     r0x101A:
                                    1-  164     	.res	1
                                    1-  165     .segment "uninit"
     0000                           1-  166     r0x1019:
                                    1-  167     	.res	1
                                    1-  168     .segment "uninit"
     0000                           1-  169     r0x1017:
                                    1-  170     	.res	1
                                    1-  171     .segment "uninit"
     0000                           1-  172     r0x1018:
                                    1-  173     	.res	1
                                    1-  174     .segment "uninit"
     0000                           1-  175     r0x1016:
                                    1-  176     	.res	1
                                    1-  177     .segment "uninit"
     0000                           1-  178     r0x1015:
                                    1-  179     	.res	1
                                    1-  180     .segment "uninit"
     0000                           1-  181     r0x1014:
                                    1-  182     	.res	1
                                    1-  183     .segment "uninit"
     0000                           1-  184     r0x1012:
                                    1-  185     	.res	1
                                    1-  186     .segment "uninit"
     0000                           1-  187     r0x1013:
                                    1-  188     	.res	1
                                    1-  189     ;--------------------------------------------------------
                                    1-  190     ; initialized data
                                    1-  191     ;--------------------------------------------------------
                                    1-  193     .segment "idata"
     0000                           1-  194     _Status:
     0000 0000                      1-  195     	dw	0x00
                                    1-  199     .segment "idata"
     0000                           1-  200     _workStartFlag:
     0000 0000                      1-  201     	dw	0x00
                                    1-  205     .segment "idata"
     0000                           1-  206     _keyNub:
     0000 0000                      1-  207     	dw	0x00
                                    1-  211     .segment "idata"
     0000                           1-  212     _keyCount:
     0000 0000                      1-  213     	dw	0x00
                                    1-  217     .segment "idata"
     0000                           1-  218     _intCount:
     0000 0000                      1-  219     	dw	0x00
                                    1-  223     .segment "idata"
     0000                           1-  224     _workStep:
     0000 0000                      1-  225     	dw	0x00
                                    1-  229     .segment "idata"
     0000                           1-  230     _powerStep:
     0000 0000                      1-  231     	dw	0x00
                                    1-  235     .segment "idata"
     0000                           1-  236     _workTime:
     0000 0000                      1-  237     	dw	0x00
                                    1-  241     .segment "idata"
     0000                           1-  242     _delayTime:
     0000 0000                      1-  243     	dw	0x00
                                    1-  247     .segment "idata"
     0000                           1-  248     _resetworkTime:
     0000 0000                      1-  249     	dw	0x00
                                    1-  253     .segment "idata"
     0000                           1-  254     _resetdelayTime:
     0000 0000                      1-  255     	dw	0x00
                                    1-  259     .segment "idata"
     0000                           1-  260     _sleepTime:
     0000 0000                      1-  261     	dw	0x00
                                    1-  265     .segment "idata"
     0000                           1-  266     _count1s:
     0000 0000                      1-  267     	dw	0x00
                                    1-  271     .segment "idata"
     0000                           1-  272     _ledCount:
     0000 0000                      1-  273     	dw	0x00
                                    1-  277     .segment "idata"
     0000                           1-  278     _lastTime:
     0000 0000 0000                 1-  279     	dw	0x00, 0x00
                                    1-  283     .segment "idata"
     0000                           1-  284     _zfTime:
     0000 0000                      1-  285     	dw	0x00
                                    1-  288     ;--------------------------------------------------------
                                    1-  289     ; overlayable items in internal ram 
                                    1-  290     ;--------------------------------------------------------
                                    1-  291     ;	udata_ovr
                                    1-  292     ;--------------------------------------------------------
                                    1-  293     ; reset vector 
                                    1-  294     ;--------------------------------------------------------
                                    1-  295     ORG	0x0000
     0000 3rrr                      1-  296     	LGOTO	__nyc_ny8_startup
                                    1-  297     ;--------------------------------------------------------
                                    1-  298     ; interrupt and initialization code
                                    1-  299     ;--------------------------------------------------------
                                    1-  300     ORG 0x0008
     0008 3rrr                      1-  301     	lgoto	__sdcc_interrupt
                                    1-  303     .segment "code"
     0000                           1-  304     __sdcc_interrupt:
                                    1-  305     ;***
                                    1-  306     ;  pBlock Stats: dbName = I
                                    1-  307     ;***
                                    1-  308     ;2 compiler assigned registers:
                                    1-  309     ;   STK00
                                    1-  310     ;   STK01
                                    1-  311     ;; Starting pCode block
     0000                           1-  312     _isr:
                                    1-  313     ; 0 exit points
                                    1-  314     	.line	45, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  315     	MOVAR	WSAVE
     0001 1503                      1-  316     	SWAPR	STATUS,W
     0002 0283                      1-  317     	CLRR	STATUS
     0003 00rr                      1-  318     	MOVAR	SSAVE
     0004 010A                      1-  319     	MOVR	PCHBUF,W
     0005 028A                      1-  320     	CLRR	PCHBUF
     0006 00rr                      1-  321     	MOVAR	PSAVE
     0007 0104                      1-  322     	MOVR	FSR,W
                                    1-  323     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  324     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  325     	MOVR	STK00,W
                                    1-  326     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  327     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  328     	MOVR	STK01,W
                                    1-  329     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  330     	MOVAR	___sdcc_saved_stk01
                                    1-  331     	.line	47, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  332     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  333     	LGOTO	_00108_DS_
                                    1-  334     	.line	49, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  335     	MOVIA	0x37
     0013 03rr                      1-  336     	ADDAR	_TMR0,F
                                    1-  337     	.line	51, "main.c"; 	if(++intCount >= 100)
                                    1-  338     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  339     	INCR	_intCount,F
                                    1-  340     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  341     	MOVIA	0x64
     0017 04rr                      1-  342     	SUBAR	_intCount,W
     0018 0803                      1-  343     	BTRSS	STATUS,0
     0019 3rrr                      1-  344     	LGOTO	_00108_DS_
                                    1-  345     	.line	53, "main.c"; 	IntFlag = 1;
                                    1-  346     	BANKSEL	_Status
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 18rr                      1-  347     	BSR	_Status,0
                                    1-  348     	.line	54, "main.c"; 	intCount = 0;
                                    1-  349     	BANKSEL	_intCount
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 02rr                      1-  350     	CLRR	_intCount
     001E                           1-  351     _00108_DS_:
                                    1-  352     	.line	61, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  353     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  354     	LGOTO	_00110_DS_
                                    1-  355     	.line	63, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0020 21FD                      1-  356     	MOVIA	0xfd
     0021 00rr                      1-  357     	MOVAR	_INTF
     0022                           1-  358     _00110_DS_:
                                    1-  359     	.line	66, "main.c"; 	INTF = 0;
     0022 02rr                      1-  360     	CLRR	_INTF
                                    1-  361     	.line	68, "main.c"; 	}
                                    1-  362     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  363     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  364     	MOVAR	STK01
                                    1-  365     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  366     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  367     	MOVAR	STK00
                                    1-  368     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  369     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  370     	MOVAR	FSR
     002C 01rr                      1-  371     	MOVR	PSAVE,W
     002D 008A                      1-  372     	MOVAR	PCHBUF
     002E 0283                      1-  373     	CLRR	STATUS
     002F 15rr                      1-  374     	SWAPR	SSAVE,W
     0030 0083                      1-  375     	MOVAR	STATUS
     0031 15rr                      1-  376     	SWAPR	WSAVE,F
     0032 15rr                      1-  377     	SWAPR	WSAVE,W
     0033                           1-  378     END_OF_INTERRUPT:
     0033 0011                      1-  379     	RETIE	
                                    1-  381     ;--------------------------------------------------------
                                    1-  382     ; code
                                    1-  383     ;--------------------------------------------------------
                                    1-  384     ;***
                                    1-  385     ;  pBlock Stats: dbName = M
                                    1-  386     ;***
                                    1-  387     ;has an exit
                                    1-  388     ;functions called:
                                    1-  389     ;   _initSys
                                    1-  390     ;   _ledOn
                                    1-  391     ;   _keyCtr
                                    1-  392     ;   _workStop
                                    1-  393     ;   _ledOff
                                    1-  394     ;   _workCtr
                                    1-  395     ;   _ledOff
                                    1-  396     ;   _pwm1Stop
                                    1-  397     ;   _pwm2Stop
                                    1-  398     ;   _pwm3Stop
                                    1-  399     ;   _ledOn
                                    1-  400     ;   _workStop
                                    1-  401     ;   _ledOff
                                    1-  402     ;   _gotoSleep
                                    1-  403     ;   _initSys
                                    1-  404     ;   _ledOn
                                    1-  405     ;   _keyCtr
                                    1-  406     ;   _workStop
                                    1-  407     ;   _ledOff
                                    1-  408     ;   _workCtr
                                    1-  409     ;   _ledOff
                                    1-  410     ;   _pwm1Stop
                                    1-  411     ;   _pwm2Stop
                                    1-  412     ;   _pwm3Stop
                                    1-  413     ;   _ledOn
                                    1-  414     ;   _workStop
                                    1-  415     ;   _ledOff
                                    1-  416     ;   _gotoSleep
                                    1-  417     ;; Starting pCode block
                                    1-  418     .segment "code"; module=main, function=_main
     0000                           1-  420     _main:
                                    1-  421     ; 2 exit points
                                    1-  422     	.line	74, "main.c"; 	initSys();						
     0000 2rrr                      1-  423     	LCALL	_initSys
                                    1-  424     	.line	75, "main.c"; 	ledOn();
     0001 2rrr                      1-  425     	LCALL	_ledOn
     0002                           1-  426     _00134_DS_:
                                    1-  427     	.line	78, "main.c"; 	CLRWDT();
     0002 0002                      1-  428     	clrwdt
                                    1-  429     	.line	79, "main.c"; 	if(!IntFlag)
                                    1-  430     	BANKSEL	_Status
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 08rr                      1-  431     	BTRSS	_Status,0
     0005 3rrr                      1-  432     	LGOTO	_00134_DS_
                                    1-  433     	.line	81, "main.c"; 	IntFlag = 0;
     0006 1Crr                      1-  434     	BCR	_Status,0
                                    1-  435     	.line	82, "main.c"; 	keyCtr();
     0007 2rrr                      1-  436     	LCALL	_keyCtr
                                    1-  437     	.line	84, "main.c"; 	if(++count1s > 99)
                                    1-  438     	BANKSEL	_count1s
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 05rr                      1-  439     	INCR	_count1s,F
                                    1-  440     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  441     ;;unsigned compare: left >= lit (0x64=100), size=1
     000A 2164                      1-  442     	MOVIA	0x64
     000B 04rr                      1-  443     	SUBAR	_count1s,W
     000C 0803                      1-  444     	BTRSS	STATUS,0
     000D 3rrr                      1-  445     	LGOTO	_00122_DS_
                                    1-  446     	.line	86, "main.c"; 	count1s = 0;
     000E 02rr                      1-  447     	CLRR	_count1s
                                    1-  448     	.line	87, "main.c"; 	if(lastTime > 0)
                                    1-  449     	BANKSEL	_lastTime
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1-  450     	MOVR	_lastTime,W
     0011 11rr                      1-  451     	IORAR	(_lastTime + 1),W
     0012 0D03                      1-  452     	BTRSC	STATUS,2
     0013 3rrr                      1-  453     	LGOTO	_00122_DS_
                                    1-  454     	.line	89, "main.c"; 	--lastTime;
     0014 21FF                      1-  455     	MOVIA	0xff
     0015 03rr                      1-  456     	ADDAR	_lastTime,F
     0016 0803                      1-  457     	BTRSS	STATUS,0
     0017 06rr                      1-  458     	DECR	(_lastTime + 1),F
                                    1-  459     	.line	90, "main.c"; 	if(lastTime == 0)
     0018 01rr                      1-  460     	MOVR	_lastTime,W
     0019 11rr                      1-  461     	IORAR	(_lastTime + 1),W
     001A 0903                      1-  462     	BTRSS	STATUS,2
     001B 3rrr                      1-  463     	LGOTO	_00122_DS_
                                    1-  464     	.line	92, "main.c"; 	workStop();
     001C 2rrr                      1-  465     	LCALL	_workStop
                                    1-  466     	.line	93, "main.c"; 	ledOff();
     001D 2rrr                      1-  467     	LCALL	_ledOff
     001E                           1-  468     _00122_DS_:
                                    1-  469     	.line	98, "main.c"; 	if(powerFlag)
                                    1-  470     	BANKSEL	_Status
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 09rr                      1-  471     	BTRSS	_Status,2
     0020 3rrr                      1-  472     	LGOTO	_00131_DS_
                                    1-  473     	.line	100, "main.c"; 	workCtr();
     0021 2rrr                      1-  474     	LCALL	_workCtr
                                    1-  475     	.line	101, "main.c"; 	if(ledCount > 0)
                                    1-  476     	BANKSEL	_ledCount
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  477     	MOVR	_ledCount,W
     0024 0D03                      1-  478     	BTRSC	STATUS,2
     0025 3rrr                      1-  479     	LGOTO	_00124_DS_
                                    1-  480     	.line	103, "main.c"; 	ledOff();
     0026 2rrr                      1-  481     	LCALL	_ledOff
                                    1-  482     	.line	104, "main.c"; 	ledCount--;
                                    1-  483     	BANKSEL	_ledCount
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 06rr                      1-  484     	DECR	_ledCount,F
                                    1-  485     	.line	105, "main.c"; 	pwm1Stop();
     0029 2rrr                      1-  486     	LCALL	_pwm1Stop
                                    1-  487     	.line	106, "main.c"; 	pwm2Stop();
     002A 2rrr                      1-  488     	LCALL	_pwm2Stop
                                    1-  489     	.line	107, "main.c"; 	pwm3Stop();
     002B 2rrr                      1-  490     	LCALL	_pwm3Stop
                                    1-  491     	.line	108, "main.c"; 	PORTB = 0x00;
     002C 02rr                      1-  492     	CLRR	_PORTB
                                    1-  493     	.line	109, "main.c"; 	PORTA = 0x00;
     002D 02rr                      1-  494     	CLRR	_PORTA
     002E 3rrr                      1-  495     	LGOTO	_00134_DS_
     002F                           1-  496     _00124_DS_:
                                    1-  497     	.line	112, "main.c"; 	ledOn();
     002F 2rrr                      1-  498     	LCALL	_ledOn
     0030 3rrr                      1-  499     	LGOTO	_00134_DS_
     0031                           1-  500     _00131_DS_:
                                    1-  501     	.line	116, "main.c"; 	workStop();
     0031 2rrr                      1-  502     	LCALL	_workStop
                                    1-  503     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  504     ;;unsigned compare: left >= lit (0x60=96), size=1
                                    1-  505     	.line	117, "main.c"; 	if(count1s > 95)
     0032 2160                      1-  506     	MOVIA	0x60
                                    1-  507     	BANKSEL	_count1s
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 04rr                      1-  508     	SUBAR	_count1s,W
     0035 0C03                      1-  509     	BTRSC	STATUS,0
                                    1-  510     	.line	118, "main.c"; 	ledOff();
     0036 2rrr                      1-  511     	LCALL	_ledOff
                                    1-  512     	.line	119, "main.c"; 	if(++sleepTime > 200)
                                    1-  513     	BANKSEL	_sleepTime
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 05rr                      1-  514     	INCR	_sleepTime,F
     0039 21C9                      1-  515     	MOVIA	0xc9
     003A 04rr                      1-  516     	SUBAR	_sleepTime,W
     003B 0803                      1-  517     	BTRSS	STATUS,0
     003C 3rrr                      1-  518     	LGOTO	_00134_DS_
                                    1-  519     	.line	121, "main.c"; 	gotoSleep();
     003D 2rrr                      1-  520     	LCALL	_gotoSleep
     003E 3rrr                      1-  521     	LGOTO	_00134_DS_
                                    1-  522     	.line	125, "main.c"; 	}
                                    1-  523     	RETURN	
     003F 0010                      3-   26 m1      ret
                                    1-  524     ; exit point of _main
                                    1-  526     ;***
                                    1-  527     ;  pBlock Stats: dbName = C
                                    1-  528     ;***
                                    1-  529     ;has an exit
                                    1-  530     ;functions called:
                                    1-  531     ;   _workStop
                                    1-  532     ;   _workStop
                                    1-  533     ;; Starting pCode block
                                    1-  534     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  536     _gotoSleep:
                                    1-  537     ; 2 exit points
                                    1-  538     	.line	446, "main.c"; 	sleepTime = 0;
                                    1-  539     	BANKSEL	_sleepTime
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1-  540     	CLRR	_sleepTime
                                    1-  541     	.line	448, "main.c"; 	workStop();
     0002 2rrr                      1-  542     	LCALL	_workStop
                                    1-  543     	.line	449, "main.c"; 	workStep = 0;
                                    1-  544     	BANKSEL	_workStep
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 02rr                      1-  545     	CLRR	_workStep
                                    1-  546     	.line	450, "main.c"; 	AWUCON = 0x40;
     0005 2140                      1-  547     	MOVIA	0x40
     0006 00rr                      1-  548     	MOVAR	_AWUCON
                                    1-  549     	.line	451, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_TMR1 | C_INT_PABKey;
     0007 210B                      1-  550     	MOVIA	0x0b
     0008 00rr                      1-  551     	MOVAR	_INTE
                                    1-  552     	.line	452, "main.c"; 	PCON =  C_LVR_En | 0x10;	
     0009 2118                      1-  553     	MOVIA	0x18
     000A 00rr                      1-  554     	MOVAR	_PCON
                                    1-  555     	.line	453, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000B 02rr                      1-  556     	CLRR	_INTF
                                    1-  557     	.line	454, "main.c"; 	CLRWDT();
     000C 0002                      1-  558     	clrwdt
                                    1-  559     	.line	455, "main.c"; 	ENI();
     000D 0004                      1-  560     	ENI
                                    1-  561     	.line	456, "main.c"; 	SLEEP();
     000E 0001                      1-  562     	sleep
                                    1-  563     	.line	457, "main.c"; 	AWUCON = 0x00;
     000F 02rr                      1-  564     	CLRR	_AWUCON
                                    1-  565     	.line	458, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     0010 2101                      1-  566     	MOVIA	0x01
     0011 00rr                      1-  567     	MOVAR	_INTE
                                    1-  568     	.line	459, "main.c"; 	INTF = 0;
     0012 02rr                      1-  569     	CLRR	_INTF
                                    1-  570     	.line	461, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En | 0x10;				// Enable WDT ,  Enable LVR
     0013 21B8                      1-  571     	MOVIA	0xb8
     0014 00rr                      1-  572     	MOVAR	_PCON
                                    1-  573     	.line	463, "main.c"; 	}
                                    1-  574     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  575     ; exit point of _gotoSleep
                                    1-  577     ;***
                                    1-  578     ;  pBlock Stats: dbName = C
                                    1-  579     ;***
                                    1-  580     ;has an exit
                                    1-  581     ;functions called:
                                    1-  582     ;   _keyRead
                                    1-  583     ;   _keyRead
                                    1-  584     ;1 compiler assigned register :
                                    1-  585     ;   r0x1013
                                    1-  586     ;; Starting pCode block
                                    1-  587     .segment "code"; module=main, function=_keyCtr
                                    1-  589     ;local variable name mapping:
     0000                           1-  591     _keyCtr:
                                    1-  592     ; 2 exit points
                                    1-  593     	.line	378, "main.c"; 	char kclick = keyRead(0xD0 & (~PORTA));
     0000 07rr                      1-  594     	COMR	_PORTA,W
                                    1-  595     	BANKSEL	r0x1013
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  596     	MOVAR	r0x1013
     0003 21D0                      1-  597     	MOVIA	0xd0
     0004 10rr                      1-  598     	ANDAR	r0x1013,F
     0005 01rr                      1-  599     	MOVR	r0x1013,W
     0006 2rrr                      1-  600     	LCALL	_keyRead
                                    1-  601     	BANKSEL	r0x1013
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  602     	MOVAR	r0x1013
                                    1-  603     	.line	379, "main.c"; 	if(kclick == 1)
     0009 2401                      1-  604     	XORIA	0x01
     000A 0903                      1-  605     	BTRSS	STATUS,2
     000B 3rrr                      1-  606     	LGOTO	_00289_DS_
                                    1-  607     	.line	381, "main.c"; 	if((keyNub & 0x40) && powerFlag)
                                    1-  608     	BANKSEL	_keyNub
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 0Brr                      1-  609     	BTRSS	_keyNub,6
     000E 3rrr                      1-  610     	LGOTO	_00279_DS_
                                    1-  611     	BANKSEL	_Status
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 09rr                      1-  612     	BTRSS	_Status,2
     0011 3rrr                      1-  613     	LGOTO	_00279_DS_
                                    1-  614     	.line	384, "main.c"; 	ledCount = 50;
     0012 2132                      1-  615     	MOVIA	0x32
                                    1-  616     	BANKSEL	_ledCount
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1-  617     	MOVAR	_ledCount
                                    1-  618     	.line	385, "main.c"; 	if(++workStep > 4)
                                    1-  619     	BANKSEL	_workStep
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  620     	INCR	_workStep,F
                                    1-  621     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  622     ;;unsigned compare: left >= lit (0x5=5), size=1
     0017 2105                      1-  623     	MOVIA	0x05
     0018 04rr                      1-  624     	SUBAR	_workStep,W
     0019 0803                      1-  625     	BTRSS	STATUS,0
     001A 3rrr                      1-  626     	LGOTO	_00253_DS_
                                    1-  627     	.line	386, "main.c"; 	workStep = 1;
     001B 2101                      1-  628     	MOVIA	0x01
     001C 00rr                      1-  629     	MOVAR	_workStep
     001D                           1-  630     _00253_DS_:
                                    1-  631     	.line	387, "main.c"; 	if(workStep == 1)
                                    1-  632     	BANKSEL	_workStep
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  633     	MOVR	_workStep,W
     001F 2401                      1-  634     	XORIA	0x01
     0020 0903                      1-  635     	BTRSS	STATUS,2
     0021 3rrr                      1-  636     	LGOTO	_00263_DS_
                                    1-  637     	.line	389, "main.c"; 	resetworkTime   = 120;
     0022 2178                      1-  638     	MOVIA	0x78
                                    1-  639     	BANKSEL	_resetworkTime
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1-  640     	MOVAR	_resetworkTime
                                    1-  641     	.line	390, "main.c"; 	resetdelayTime	= 30;
     0025 211E                      1-  642     	MOVIA	0x1e
                                    1-  643     	BANKSEL	_resetdelayTime
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 00rr                      1-  644     	MOVAR	_resetdelayTime
     0028 3rrr                      1-  645     	LGOTO	_00291_DS_
     0029                           1-  646     _00263_DS_:
                                    1-  647     	.line	392, "main.c"; 	else if(workStep == 2)
                                    1-  648     	BANKSEL	_workStep
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  649     	MOVR	_workStep,W
     002B 2402                      1-  650     	XORIA	0x02
     002C 0903                      1-  651     	BTRSS	STATUS,2
     002D 3rrr                      1-  652     	LGOTO	_00260_DS_
                                    1-  653     	.line	394, "main.c"; 	resetworkTime   = 80;
     002E 2150                      1-  654     	MOVIA	0x50
                                    1-  655     	BANKSEL	_resetworkTime
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 00rr                      1-  656     	MOVAR	_resetworkTime
                                    1-  657     	.line	395, "main.c"; 	resetdelayTime	= 10;
     0031 210A                      1-  658     	MOVIA	0x0a
                                    1-  659     	BANKSEL	_resetdelayTime
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 00rr                      1-  660     	MOVAR	_resetdelayTime
     0034 3rrr                      1-  661     	LGOTO	_00291_DS_
     0035                           1-  662     _00260_DS_:
                                    1-  663     	.line	397, "main.c"; 	else if(workStep == 3)
                                    1-  664     	BANKSEL	_workStep
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 01rr                      1-  665     	MOVR	_workStep,W
     0037 2403                      1-  666     	XORIA	0x03
     0038 0903                      1-  667     	BTRSS	STATUS,2
     0039 3rrr                      1-  668     	LGOTO	_00257_DS_
                                    1-  669     	.line	399, "main.c"; 	resetworkTime   = 40;
     003A 2128                      1-  670     	MOVIA	0x28
                                    1-  671     	BANKSEL	_resetworkTime
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 00rr                      1-  672     	MOVAR	_resetworkTime
                                    1-  673     	.line	400, "main.c"; 	resetdelayTime	= 10;
     003D 210A                      1-  674     	MOVIA	0x0a
                                    1-  675     	BANKSEL	_resetdelayTime
     003E rrrr                      3-   71 m1      .banksel ram_address
     003F 00rr                      1-  676     	MOVAR	_resetdelayTime
     0040 3rrr                      1-  677     	LGOTO	_00291_DS_
     0041                           1-  678     _00257_DS_:
                                    1-  679     	.line	402, "main.c"; 	else if(workStep == 4)
                                    1-  680     	BANKSEL	_workStep
     0041 rrrr                      3-   71 m1      .banksel ram_address
     0042 01rr                      1-  681     	MOVR	_workStep,W
     0043 2404                      1-  682     	XORIA	0x04
     0044 0903                      1-  683     	BTRSS	STATUS,2
     0045 3rrr                      1-  684     	LGOTO	_00291_DS_
                                    1-  685     	.line	404, "main.c"; 	resetworkTime   = 60;
     0046 213C                      1-  686     	MOVIA	0x3c
                                    1-  687     	BANKSEL	_resetworkTime
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 00rr                      1-  688     	MOVAR	_resetworkTime
                                    1-  689     	.line	405, "main.c"; 	resetdelayTime	= 20;
     0049 2114                      1-  690     	MOVIA	0x14
                                    1-  691     	BANKSEL	_resetdelayTime
     004A rrrr                      3-   71 m1      .banksel ram_address
     004B 00rr                      1-  692     	MOVAR	_resetdelayTime
     004C 3rrr                      1-  693     	LGOTO	_00291_DS_
     004D                           1-  694     _00279_DS_:
                                    1-  695     	.line	408, "main.c"; 	else if((keyNub & 0x10) && powerFlag && workStep > 0)
                                    1-  696     	BANKSEL	_keyNub
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 0Arr                      1-  697     	BTRSS	_keyNub,4
     004F 3rrr                      1-  698     	LGOTO	_00274_DS_
                                    1-  699     	BANKSEL	_Status
     0050 rrrr                      3-   71 m1      .banksel ram_address
     0051 09rr                      1-  700     	BTRSS	_Status,2
     0052 3rrr                      1-  701     	LGOTO	_00274_DS_
                                    1-  702     	BANKSEL	_workStep
     0053 rrrr                      3-   71 m1      .banksel ram_address
     0054 01rr                      1-  703     	MOVR	_workStep,W
     0055 0D03                      1-  704     	BTRSC	STATUS,2
     0056 3rrr                      1-  705     	LGOTO	_00274_DS_
                                    1-  706     	.line	411, "main.c"; 	if(++powerStep > 3)
                                    1-  707     	BANKSEL	_powerStep
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 05rr                      1-  708     	INCR	_powerStep,F
                                    1-  709     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  710     ;;unsigned compare: left >= lit (0x4=4), size=1
     0059 2104                      1-  711     	MOVIA	0x04
     005A 04rr                      1-  712     	SUBAR	_powerStep,W
     005B 0803                      1-  713     	BTRSS	STATUS,0
     005C 3rrr                      1-  714     	LGOTO	_00291_DS_
                                    1-  715     	.line	413, "main.c"; 	powerStep = 3;
     005D 2103                      1-  716     	MOVIA	0x03
     005E 00rr                      1-  717     	MOVAR	_powerStep
     005F 3rrr                      1-  718     	LGOTO	_00291_DS_
     0060                           1-  719     _00274_DS_:
                                    1-  720     	.line	416, "main.c"; 	else if((keyNub & 0x80) && powerFlag && workStep > 0)
                                    1-  721     	BANKSEL	_keyNub
     0060 rrrr                      3-   71 m1      .banksel ram_address
     0061 0Brr                      1-  722     	BTRSS	_keyNub,7
     0062 3rrr                      1-  723     	LGOTO	_00291_DS_
                                    1-  724     	BANKSEL	_Status
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 09rr                      1-  725     	BTRSS	_Status,2
     0065 3rrr                      1-  726     	LGOTO	_00291_DS_
                                    1-  727     	BANKSEL	_workStep
     0066 rrrr                      3-   71 m1      .banksel ram_address
     0067 01rr                      1-  728     	MOVR	_workStep,W
     0068 0D03                      1-  729     	BTRSC	STATUS,2
     0069 3rrr                      1-  730     	LGOTO	_00291_DS_
                                    1-  731     	.line	419, "main.c"; 	if(--powerStep < 1)
                                    1-  732     	BANKSEL	_powerStep
     006A rrrr                      3-   71 m1      .banksel ram_address
     006B 06rr                      1-  733     	DECR	_powerStep,F
                                    1-  734     ;;unsigned compare: left < lit (0x1=1), size=1
     006C 2101                      1-  735     	MOVIA	0x01
     006D 04rr                      1-  736     	SUBAR	_powerStep,W
     006E 0C03                      1-  737     	BTRSC	STATUS,0
     006F 3rrr                      1-  738     	LGOTO	_00291_DS_
                                    1-  739     	.line	420, "main.c"; 	powerStep = 1;
     0070 2101                      1-  740     	MOVIA	0x01
     0071 00rr                      1-  741     	MOVAR	_powerStep
     0072 3rrr                      1-  742     	LGOTO	_00291_DS_
     0073                           1-  743     _00289_DS_:
                                    1-  744     	.line	423, "main.c"; 	else if(kclick == 2)
                                    1-  745     	BANKSEL	r0x1013
     0073 rrrr                      3-   71 m1      .banksel ram_address
     0074 01rr                      1-  746     	MOVR	r0x1013,W
     0075 2402                      1-  747     	XORIA	0x02
     0076 0903                      1-  748     	BTRSS	STATUS,2
     0077 3rrr                      1-  749     	LGOTO	_00291_DS_
                                    1-  750     	.line	425, "main.c"; 	sleepTime = 0;
                                    1-  751     	BANKSEL	_sleepTime
     0078 rrrr                      3-   71 m1      .banksel ram_address
     0079 02rr                      1-  752     	CLRR	_sleepTime
                                    1-  753     	.line	426, "main.c"; 	if(keyNub & 0x40)
                                    1-  754     	BANKSEL	_keyNub
     007A rrrr                      3-   71 m1      .banksel ram_address
     007B 0Brr                      1-  755     	BTRSS	_keyNub,6
     007C 3rrr                      1-  756     	LGOTO	_00283_DS_
                                    1-  757     	.line	429, "main.c"; 	powerFlag = !powerFlag;
     007D 2104                      1-  758     	MOVIA	0x04
                                    1-  759     	BANKSEL	_Status
     007E rrrr                      3-   71 m1      .banksel ram_address
     007F 12rr                      1-  760     	XORAR	_Status,F
     0080                           1-  761     _00283_DS_:
                                    1-  762     	.line	431, "main.c"; 	if(powerFlag)
                                    1-  763     	BANKSEL	_Status
     0080 rrrr                      3-   71 m1      .banksel ram_address
     0081 09rr                      1-  764     	BTRSS	_Status,2
     0082 3rrr                      1-  765     	LGOTO	_00291_DS_
                                    1-  766     	.line	433, "main.c"; 	lastTime = 900;
     0083 2184                      1-  767     	MOVIA	0x84
                                    1-  768     	BANKSEL	_lastTime
     0084 rrrr                      3-   71 m1      .banksel ram_address
     0085 00rr                      1-  769     	MOVAR	_lastTime
     0086 2103                      1-  770     	MOVIA	0x03
     0087 00rr                      1-  771     	MOVAR	(_lastTime + 1)
                                    1-  772     	.line	434, "main.c"; 	workStep = 1;
     0088 2101                      1-  773     	MOVIA	0x01
                                    1-  774     	BANKSEL	_workStep
     0089 rrrr                      3-   71 m1      .banksel ram_address
     008A 00rr                      1-  775     	MOVAR	_workStep
                                    1-  776     	.line	435, "main.c"; 	powerStep = 1;
                                    1-  777     	BANKSEL	_powerStep
     008B rrrr                      3-   71 m1      .banksel ram_address
     008C 00rr                      1-  778     	MOVAR	_powerStep
                                    1-  779     	.line	436, "main.c"; 	resetworkTime   = 120;
     008D 2178                      1-  780     	MOVIA	0x78
                                    1-  781     	BANKSEL	_resetworkTime
     008E rrrr                      3-   71 m1      .banksel ram_address
     008F 00rr                      1-  782     	MOVAR	_resetworkTime
                                    1-  783     	.line	437, "main.c"; 	resetdelayTime	= 30;
     0090 211E                      1-  784     	MOVIA	0x1e
                                    1-  785     	BANKSEL	_resetdelayTime
     0091 rrrr                      3-   71 m1      .banksel ram_address
     0092 00rr                      1-  786     	MOVAR	_resetdelayTime
     0093                           1-  787     _00291_DS_:
                                    1-  788     	.line	440, "main.c"; 	}
                                    1-  789     	RETURN	
     0093 0010                      3-   26 m1      ret
                                    1-  790     ; exit point of _keyCtr
                                    1-  792     ;***
                                    1-  793     ;  pBlock Stats: dbName = C
                                    1-  794     ;***
                                    1-  795     ;has an exit
                                    1-  796     ;1 compiler assigned register :
                                    1-  797     ;   r0x1012
                                    1-  798     ;; Starting pCode block
                                    1-  799     .segment "code"; module=main, function=_keyRead
                                    1-  801     ;local variable name mapping:
     0000                           1-  803     _keyRead:
                                    1-  804     ; 2 exit points
                                    1-  805     	.line	340, "main.c"; 	char keyRead(char keyStatus)	
                                    1-  806     	BANKSEL	r0x1012
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  807     	MOVAR	r0x1012
                                    1-  808     	.line	342, "main.c"; 	if(keyStatus)
     0002 01rr                      1-  809     	MOVR	r0x1012,W
     0003 0D03                      1-  810     	BTRSC	STATUS,2
     0004 3rrr                      1-  811     	LGOTO	_00245_DS_
                                    1-  812     	.line	344, "main.c"; 	keyCount++;
                                    1-  813     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  814     	INCR	_keyCount,F
                                    1-  815     	.line	345, "main.c"; 	keyNub = keyStatus;
                                    1-  816     	BANKSEL	r0x1012
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 01rr                      1-  817     	MOVR	r0x1012,W
                                    1-  818     	BANKSEL	_keyNub
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1-  819     	MOVAR	_keyNub
                                    1-  820     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1-  821     	.line	346, "main.c"; 	if(keyCount >= 100)
     000B 2164                      1-  822     	MOVIA	0x64
                                    1-  823     	BANKSEL	_keyCount
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 04rr                      1-  824     	SUBAR	_keyCount,W
     000E 0803                      1-  825     	BTRSS	STATUS,0
     000F 3rrr                      1-  826     	LGOTO	_00246_DS_
                                    1-  827     	.line	348, "main.c"; 	keyCount = 100;
     0010 2164                      1-  828     	MOVIA	0x64
     0011 00rr                      1-  829     	MOVAR	_keyCount
                                    1-  830     	.line	349, "main.c"; 	if(!longPressFlag)
                                    1-  831     	BANKSEL	_Status
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 0Crr                      1-  832     	BTRSC	_Status,1
     0014 3rrr                      1-  833     	LGOTO	_00246_DS_
                                    1-  834     	.line	351, "main.c"; 	longPressFlag = 1;
     0015 18rr                      1-  835     	BSR	_Status,1
                                    1-  836     	.line	352, "main.c"; 	return 2;
     0016 2102                      1-  837     	MOVIA	0x02
     0017 3rrr                      1-  838     	LGOTO	_00247_DS_
                                    1-  839     ;;unsigned compare: left < lit (0x64=100), size=1
     0018                           1-  840     _00245_DS_:
                                    1-  841     	.line	358, "main.c"; 	if(keyCount >= 100)
     0018 2164                      1-  842     	MOVIA	0x64
                                    1-  843     	BANKSEL	_keyCount
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 04rr                      1-  844     	SUBAR	_keyCount,W
     001B 0803                      1-  845     	BTRSS	STATUS,0
     001C 3rrr                      1-  846     	LGOTO	_00242_DS_
                                    1-  847     	.line	360, "main.c"; 	keyCount = 0;
     001D 02rr                      1-  848     	CLRR	_keyCount
                                    1-  849     	.line	361, "main.c"; 	longPressFlag = 0;
                                    1-  850     	BANKSEL	_Status
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 1Crr                      1-  851     	BCR	_Status,1
                                    1-  852     	.line	362, "main.c"; 	return	0;
     0020 2100                      1-  853     	MOVIA	0x00
     0021 3rrr                      1-  854     	LGOTO	_00247_DS_
                                    1-  855     ;;unsigned compare: left < lit (0x8=8), size=1
     0022                           1-  856     _00242_DS_:
                                    1-  857     	.line	364, "main.c"; 	else if(keyCount >= 8)
     0022 2108                      1-  858     	MOVIA	0x08
                                    1-  859     	BANKSEL	_keyCount
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 04rr                      1-  860     	SUBAR	_keyCount,W
     0025 0803                      1-  861     	BTRSS	STATUS,0
     0026 3rrr                      1-  862     	LGOTO	_00243_DS_
                                    1-  863     	.line	366, "main.c"; 	keyCount = 0;
     0027 02rr                      1-  864     	CLRR	_keyCount
                                    1-  865     	.line	367, "main.c"; 	return	1;
     0028 2101                      1-  866     	MOVIA	0x01
     0029 3rrr                      1-  867     	LGOTO	_00247_DS_
     002A                           1-  868     _00243_DS_:
                                    1-  869     	.line	369, "main.c"; 	keyCount = 0;
                                    1-  870     	BANKSEL	_keyCount
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 02rr                      1-  871     	CLRR	_keyCount
     002C                           1-  872     _00246_DS_:
                                    1-  873     	.line	371, "main.c"; 	return 0;
     002C 2100                      1-  874     	MOVIA	0x00
     002D                           1-  875     _00247_DS_:
                                    1-  876     	.line	372, "main.c"; 	}
                                    1-  877     	RETURN	
     002D 0010                      3-   26 m1      ret
                                    1-  878     ; exit point of _keyRead
                                    1-  880     ;***
                                    1-  881     ;  pBlock Stats: dbName = C
                                    1-  882     ;***
                                    1-  883     ;has an exit
                                    1-  884     ;; Starting pCode block
                                    1-  885     .segment "code"; module=main, function=_initSys
     0000                           1-  887     _initSys:
                                    1-  888     ; 2 exit points
                                    1-  889     	.line	312, "main.c"; 	DISI();
     0000 0013                      1-  890     	DISI
                                    1-  891     	.line	313, "main.c"; 	IOSTA = C_PA7_Input | C_PA5_Input | C_PA4_Input | C_PA6_Input;
     0001 21F0                      1-  892     	MOVIA	0xf0
     0002 000r                      1-  893     	IOST	_IOSTA
                                    1-  894     	.line	314, "main.c"; 	IOSTB = C_PB1_Input | C_PB0_Input;
     0003 2103                      1-  895     	MOVIA	0x03
     0004 000r                      1-  896     	IOST	_IOSTB
                                    1-  897     	.line	315, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  898     	CLRR	_PORTB
                                    1-  899     	.line	316, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  900     	CLRR	_PORTA
                                    1-  901     	.line	317, "main.c"; 	APHCON = 0x2F;
     0007 212F                      1-  902     	MOVIA	0x2f
     0008 000r                      1-  903     	IOST	_APHCON
                                    1-  904     	.line	318, "main.c"; 	BPHCON = 0xFC;
     0009 21FC                      1-  905     	MOVIA	0xfc
     000A 00rr                      1-  906     	MOVAR	_BPHCON
                                    1-  907     	.line	319, "main.c"; 	ABPLCON = 0xFF;
     000B 21FF                      1-  908     	MOVIA	0xff
     000C 00rr                      1-  909     	MOVAR	_ABPLCON
                                    1-  910     	.line	321, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1-  911     	MOVIA	0x01
     000E 00rr                      1-  912     	MOVAR	_INTE
                                    1-  913     	.line	323, "main.c"; 	PCON1 = C_TMR0_Dis;
     000F 0200                      1-  914     	CLRA	
     0010 000r                      1-  915     	IOST	_PCON1
                                    1-  916     	.line	325, "main.c"; 	TMR0 = 55;
     0011 2137                      1-  917     	MOVIA	0x37
     0012 00rr                      1-  918     	MOVAR	_TMR0
                                    1-  919     	.line	326, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0013 0200                      1-  920     	CLRA	
     0014 0003                      1-  921     	T0MD	
                                    1-  922     	.line	328, "main.c"; 	PCON1 = C_TMR0_En;
     0015 2101                      1-  923     	MOVIA	0x01
     0016 000r                      1-  924     	IOST	_PCON1
                                    1-  925     	.line	331, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0017 2198                      1-  926     	MOVIA	0x98
     0018 00rr                      1-  927     	MOVAR	_PCON
                                    1-  928     	.line	334, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0019 2101                      1-  929     	MOVIA	0x01
     001A 000r                      1-  930     	IOST	_PCON1
                                    1-  931     	.line	335, "main.c"; 	ENI();
     001B 0004                      1-  932     	ENI
                                    1-  933     	.line	336, "main.c"; 	}
                                    1-  934     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  935     ; exit point of _initSys
                                    1-  937     ;***
                                    1-  938     ;  pBlock Stats: dbName = C
                                    1-  939     ;***
                                    1-  940     ;has an exit
                                    1-  941     ;functions called:
                                    1-  942     ;   _pwm1Stop
                                    1-  943     ;   _pwm2Stop
                                    1-  944     ;   _pwm3Stop
                                    1-  945     ;   _pwm1Stop
                                    1-  946     ;   _pwm2Stop
                                    1-  947     ;   _pwm3Stop
                                    1-  948     ;; Starting pCode block
                                    1-  949     .segment "code"; module=main, function=_workStop
     0000                           1-  951     _workStop:
                                    1-  952     ; 2 exit points
                                    1-  953     	.line	299, "main.c"; 	pwm1Stop();
     0000 2rrr                      1-  954     	LCALL	_pwm1Stop
                                    1-  955     	.line	300, "main.c"; 	pwm2Stop();
     0001 2rrr                      1-  956     	LCALL	_pwm2Stop
                                    1-  957     	.line	301, "main.c"; 	pwm3Stop();
     0002 2rrr                      1-  958     	LCALL	_pwm3Stop
                                    1-  959     	.line	302, "main.c"; 	PORTB = 0x00;
     0003 02rr                      1-  960     	CLRR	_PORTB
                                    1-  961     	.line	303, "main.c"; 	PORTA = 0x00;
     0004 02rr                      1-  962     	CLRR	_PORTA
                                    1-  963     	.line	304, "main.c"; 	powerFlag = 0;
                                    1-  964     	BANKSEL	_Status
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 1Drr                      1-  965     	BCR	_Status,2
                                    1-  966     	.line	305, "main.c"; 	workStep = 0;
                                    1-  967     	BANKSEL	_workStep
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1-  968     	CLRR	_workStep
                                    1-  969     	.line	306, "main.c"; 	powerStep = 0;
                                    1-  970     	BANKSEL	_powerStep
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 02rr                      1-  971     	CLRR	_powerStep
                                    1-  972     	.line	307, "main.c"; 	}
                                    1-  973     	RETURN	
     000B 0010                      3-   26 m1      ret
                                    1-  974     ; exit point of _workStop
                                    1-  976     ;***
                                    1-  977     ;  pBlock Stats: dbName = C
                                    1-  978     ;***
                                    1-  979     ;has an exit
                                    1-  980     ;functions called:
                                    1-  981     ;   _pwm1Stop
                                    1-  982     ;   _pwm2Stop
                                    1-  983     ;   _pwm1Stop
                                    1-  984     ;   _pwm2Stop
                                    1-  985     ;; Starting pCode block
                                    1-  986     .segment "code"; module=main, function=_fanzhuan
     0000                           1-  988     _fanzhuan:
                                    1-  989     ; 2 exit points
                                    1-  990     	.line	290, "main.c"; 	pwm1Stop();
     0000 2rrr                      1-  991     	LCALL	_pwm1Stop
                                    1-  992     	.line	291, "main.c"; 	pwm2Stop();
     0001 2rrr                      1-  993     	LCALL	_pwm2Stop
                                    1-  994     	.line	292, "main.c"; 	PORTB &= 0xF7;
     0002 1Drr                      1-  995     	BCR	_PORTB,3
                                    1-  996     	.line	293, "main.c"; 	PORTB |= 0X04;
     0003 19rr                      1-  997     	BSR	_PORTB,2
                                    1-  998     	.line	295, "main.c"; 	}
                                    1-  999     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1- 1000     ; exit point of _fanzhuan
                                    1- 1002     ;***
                                    1- 1003     ;  pBlock Stats: dbName = C
                                    1- 1004     ;***
                                    1- 1005     ;has an exit
                                    1- 1006     ;functions called:
                                    1- 1007     ;   _pwm1Stop
                                    1- 1008     ;   _pwm2Stop
                                    1- 1009     ;   _pwm1Stop
                                    1- 1010     ;   _pwm2Stop
                                    1- 1011     ;; Starting pCode block
                                    1- 1012     .segment "code"; module=main, function=_zhengzhuan
     0000                           1- 1014     _zhengzhuan:
                                    1- 1015     ; 2 exit points
                                    1- 1016     	.line	280, "main.c"; 	pwm1Stop();
     0000 2rrr                      1- 1017     	LCALL	_pwm1Stop
                                    1- 1018     	.line	281, "main.c"; 	pwm2Stop();
     0001 2rrr                      1- 1019     	LCALL	_pwm2Stop
                                    1- 1020     	.line	282, "main.c"; 	PORTB &= 0xFB;
     0002 1Drr                      1- 1021     	BCR	_PORTB,2
                                    1- 1022     	.line	283, "main.c"; 	PORTB |= 0x08;
     0003 19rr                      1- 1023     	BSR	_PORTB,3
                                    1- 1024     	.line	285, "main.c"; 	}
                                    1- 1025     	RETURN	
     0004 0010                      3-   26 m1      ret
                                    1- 1026     ; exit point of _zhengzhuan
                                    1- 1028     ;***
                                    1- 1029     ;  pBlock Stats: dbName = C
                                    1- 1030     ;***
                                    1- 1031     ;has an exit
                                    1- 1032     ;; Starting pCode block
                                    1- 1033     .segment "code"; module=main, function=_pwm3Stop
     0000                           1- 1035     _pwm3Stop:
                                    1- 1036     ; 2 exit points
                                    1- 1037     	.line	273, "main.c"; 	T3CR1 = C_TMR3_Dis;
     0000 0200                      1- 1038     	CLRA	
     0001 00rr                      1- 1039     	SFUN	_T3CR1
                                    1- 1040     	.line	274, "main.c"; 	}
                                    1- 1041     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1042     ; exit point of _pwm3Stop
                                    1- 1044     ;***
                                    1- 1045     ;  pBlock Stats: dbName = C
                                    1- 1046     ;***
                                    1- 1047     ;has an exit
                                    1- 1048     ;1 compiler assigned register :
                                    1- 1049     ;   r0x1014
                                    1- 1050     ;; Starting pCode block
                                    1- 1051     .segment "code"; module=main, function=_pwm3Init
     0000                           1- 1053     _pwm3Init:
                                    1- 1054     ; 2 exit points
                                    1- 1055     	.line	261, "main.c"; 	if(0x80&T3CR1)
     0000 00rr                      1- 1056     	SFUNR	_T3CR1
                                    1- 1057     	BANKSEL	r0x1014
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1058     	MOVAR	r0x1014
     0003 0Frr                      1- 1059     	BTRSC	r0x1014,7
                                    1- 1060     	.line	262, "main.c"; 	return;
     0004 3rrr                      1- 1061     	LGOTO	_00210_DS_
                                    1- 1062     	.line	263, "main.c"; 	TM3RH = 0x00;
     0005 02rr                      1- 1063     	CLRR	_TM3RH
                                    1- 1064     	.line	264, "main.c"; 	TMR3 = 199;							//频率为110K
     0006 21C7                      1- 1065     	MOVIA	0xc7
     0007 00rr                      1- 1066     	SFUN	_TMR3
                                    1- 1067     	.line	267, "main.c"; 	T3CR2 = C_TMR3_ClkSrc_Inst | C_PS3_Div256;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0008 2107                      1- 1068     	MOVIA	0x07
     0009 00rr                      1- 1069     	SFUN	_T3CR2
                                    1- 1070     	.line	268, "main.c"; 	T3CR1 = C_PWM3_En | C_TMR3_Reload | C_TMR3_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     000A 2183                      1- 1071     	MOVIA	0x83
     000B 00rr                      1- 1072     	SFUN	_T3CR1
     000C                           1- 1073     _00210_DS_:
                                    1- 1074     	.line	269, "main.c"; 	}
                                    1- 1075     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1076     ; exit point of _pwm3Init
                                    1- 1078     ;***
                                    1- 1079     ;  pBlock Stats: dbName = C
                                    1- 1080     ;***
                                    1- 1081     ;has an exit
                                    1- 1082     ;; Starting pCode block
                                    1- 1083     .segment "code"; module=main, function=_pwm2Stop
     0000                           1- 1085     _pwm2Stop:
                                    1- 1086     ; 2 exit points
                                    1- 1087     	.line	255, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1- 1088     	CLRA	
     0001 00rr                      1- 1089     	SFUN	_T2CR1
                                    1- 1090     	.line	256, "main.c"; 	}
                                    1- 1091     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1092     ; exit point of _pwm2Stop
                                    1- 1094     ;***
                                    1- 1095     ;  pBlock Stats: dbName = C
                                    1- 1096     ;***
                                    1- 1097     ;has an exit
                                    1- 1098     ;1 compiler assigned register :
                                    1- 1099     ;   r0x1015
                                    1- 1100     ;; Starting pCode block
                                    1- 1101     .segment "code"; module=main, function=_pwm2Init
     0000                           1- 1103     _pwm2Init:
                                    1- 1104     ; 2 exit points
                                    1- 1105     	.line	243, "main.c"; 	if(0x80&T2CR1)
     0000 00rr                      1- 1106     	SFUNR	_T2CR1
                                    1- 1107     	BANKSEL	r0x1015
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1108     	MOVAR	r0x1015
     0003 0Frr                      1- 1109     	BTRSC	r0x1015,7
                                    1- 1110     	.line	244, "main.c"; 	return;
     0004 3rrr                      1- 1111     	LGOTO	_00199_DS_
                                    1- 1112     	.line	245, "main.c"; 	TMRH = 0x00;
     0005 02rr                      1- 1113     	CLRR	_TMRH
                                    1- 1114     	.line	246, "main.c"; 	TMR2 = 99;							//频率为110K
     0006 2163                      1- 1115     	MOVIA	0x63
     0007 00rr                      1- 1116     	SFUN	_TMR2
                                    1- 1117     	.line	249, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0008 0200                      1- 1118     	CLRA	
     0009 00rr                      1- 1119     	SFUN	_T2CR2
                                    1- 1120     	.line	250, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     000A 2183                      1- 1121     	MOVIA	0x83
     000B 00rr                      1- 1122     	SFUN	_T2CR1
     000C                           1- 1123     _00199_DS_:
                                    1- 1124     	.line	251, "main.c"; 	}
                                    1- 1125     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1126     ; exit point of _pwm2Init
                                    1- 1128     ;***
                                    1- 1129     ;  pBlock Stats: dbName = C
                                    1- 1130     ;***
                                    1- 1131     ;has an exit
                                    1- 1132     ;; Starting pCode block
                                    1- 1133     .segment "code"; module=main, function=_pwm1Stop
     0000                           1- 1135     _pwm1Stop:
                                    1- 1136     ; 2 exit points
                                    1- 1137     	.line	236, "main.c"; 	T1CR1 = C_TMR1_Dis;
     0000 0200                      1- 1138     	CLRA	
     0001 00rr                      1- 1139     	SFUN	_T1CR1
                                    1- 1140     	.line	237, "main.c"; 	}
                                    1- 1141     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1142     ; exit point of _pwm1Stop
                                    1- 1144     ;***
                                    1- 1145     ;  pBlock Stats: dbName = C
                                    1- 1146     ;***
                                    1- 1147     ;has an exit
                                    1- 1148     ;1 compiler assigned register :
                                    1- 1149     ;   r0x1016
                                    1- 1150     ;; Starting pCode block
                                    1- 1151     .segment "code"; module=main, function=_pwm1Init
     0000                           1- 1153     _pwm1Init:
                                    1- 1154     ; 2 exit points
                                    1- 1155     	.line	224, "main.c"; 	if(0x80&T1CR1)
     0000 00rr                      1- 1156     	SFUNR	_T1CR1
                                    1- 1157     	BANKSEL	r0x1016
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1158     	MOVAR	r0x1016
     0003 0Frr                      1- 1159     	BTRSC	r0x1016,7
                                    1- 1160     	.line	225, "main.c"; 	return;
     0004 3rrr                      1- 1161     	LGOTO	_00188_DS_
                                    1- 1162     	.line	226, "main.c"; 	TMRH = 0x00;
     0005 02rr                      1- 1163     	CLRR	_TMRH
                                    1- 1164     	.line	227, "main.c"; 	TMR1 = 99;							//频率为110K
     0006 2163                      1- 1165     	MOVIA	0x63
     0007 00rr                      1- 1166     	SFUN	_TMR1
                                    1- 1167     	.line	230, "main.c"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0008 0200                      1- 1168     	CLRA	
     0009 00rr                      1- 1169     	SFUN	_T1CR2
                                    1- 1170     	.line	231, "main.c"; 	T1CR1 = C_PWM1_En | C_TMR1_Reload | C_TMR1_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     000A 2183                      1- 1171     	MOVIA	0x83
     000B 00rr                      1- 1172     	SFUN	_T1CR1
     000C                           1- 1173     _00188_DS_:
                                    1- 1174     	.line	232, "main.c"; 	}
                                    1- 1175     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1176     ; exit point of _pwm1Init
                                    1- 1178     ;***
                                    1- 1179     ;  pBlock Stats: dbName = C
                                    1- 1180     ;***
                                    1- 1181     ;has an exit
                                    1- 1182     ;functions called:
                                    1- 1183     ;   __mulchar
                                    1- 1184     ;   __mulchar
                                    1- 1185     ;   _pwm3Init
                                    1- 1186     ;   _pwm3Stop
                                    1- 1187     ;   _pwm1Stop
                                    1- 1188     ;   _pwm2Stop
                                    1- 1189     ;   _zhengzhuan
                                    1- 1190     ;   _fanzhuan
                                    1- 1191     ;   __mulchar
                                    1- 1192     ;   __mulchar
                                    1- 1193     ;   _pwm3Init
                                    1- 1194     ;   _pwm3Stop
                                    1- 1195     ;   _pwm1Stop
                                    1- 1196     ;   _pwm2Stop
                                    1- 1197     ;   _zhengzhuan
                                    1- 1198     ;   _fanzhuan
                                    1- 1199     ;3 compiler assigned registers:
                                    1- 1200     ;   STK00
                                    1- 1201     ;   r0x1017
                                    1- 1202     ;   r0x1018
                                    1- 1203     ;; Starting pCode block
                                    1- 1204     .segment "code"; module=main, function=_workCtr
     0000                           1- 1206     _workCtr:
                                    1- 1207     ; 2 exit points
                                    1- 1208     	.line	140, "main.c"; 	if(powerStep > 0)
                                    1- 1209     	BANKSEL	_powerStep
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1210     	MOVR	_powerStep,W
     0002 0D03                      1- 1211     	BTRSC	STATUS,2
     0003 3rrr                      1- 1212     	LGOTO	_00148_DS_
                                    1- 1213     	.line	142, "main.c"; 	TMRH = 0x00;
     0004 02rr                      1- 1214     	CLRR	_TMRH
                                    1- 1215     	.line	143, "main.c"; 	PWM1DUTY = powerStep*30;
     0005 211E                      1- 1216     	MOVIA	0x1e
     0006 00rr                      1- 1217     	MOVAR	STK00
     0007 01rr                      1- 1218     	MOVR	_powerStep,W
     0008 2rrr                      1- 1219     	LCALL	__mulchar
                                    1- 1220     	BANKSEL	r0x1017
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1- 1221     	MOVAR	r0x1017
     000B 00rr                      1- 1222     	SFUN	_PWM1DUTY
                                    1- 1223     	.line	144, "main.c"; 	PWM2DUTY = powerStep*30;
     000C 01rr                      1- 1224     	MOVR	r0x1017,W
     000D 00rr                      1- 1225     	SFUN	_PWM2DUTY
                                    1- 1226     	.line	145, "main.c"; 	TM3RH = 0x00;
     000E 02rr                      1- 1227     	CLRR	_TM3RH
                                    1- 1228     	.line	146, "main.c"; 	PWM3DUTY = powerStep*60;
     000F 213C                      1- 1229     	MOVIA	0x3c
     0010 00rr                      1- 1230     	MOVAR	STK00
                                    1- 1231     	BANKSEL	_powerStep
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 01rr                      1- 1232     	MOVR	_powerStep,W
     0013 2rrr                      1- 1233     	LCALL	__mulchar
                                    1- 1234     	BANKSEL	r0x1017
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1235     	MOVAR	r0x1017
     0016 00rr                      1- 1236     	SFUN	_PWM3DUTY
     0017                           1- 1237     _00148_DS_:
                                    1- 1238     	.line	151, "main.c"; 	if(workStep > 0)
                                    1- 1239     	BANKSEL	_workStep
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1- 1240     	MOVR	_workStep,W
     0019 0D03                      1- 1241     	BTRSC	STATUS,2
     001A 3rrr                      1- 1242     	LGOTO	_00162_DS_
                                    1- 1243     	.line	153, "main.c"; 	if(workTime > 0)
                                    1- 1244     	BANKSEL	_workTime
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 01rr                      1- 1245     	MOVR	_workTime,W
     001D 0D03                      1- 1246     	BTRSC	STATUS,2
     001E 3rrr                      1- 1247     	LGOTO	_00159_DS_
                                    1- 1248     	.line	155, "main.c"; 	if(count1s == 0)
                                    1- 1249     	BANKSEL	_count1s
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1- 1250     	MOVR	_count1s,W
     0021 0903                      1- 1251     	BTRSS	STATUS,2
     0022 3rrr                      1- 1252     	LGOTO	_00001_DS_
                                    1- 1253     	.line	156, "main.c"; 	workTime--;
                                    1- 1254     	BANKSEL	_workTime
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 06rr                      1- 1255     	DECR	_workTime,F
     0025                           1- 1256     _00001_DS_:
                                    1- 1257     	.line	157, "main.c"; 	delayTime = resetdelayTime;
                                    1- 1258     	BANKSEL	_resetdelayTime
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1- 1259     	MOVR	_resetdelayTime,W
                                    1- 1260     	BANKSEL	_delayTime
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 00rr                      1- 1261     	MOVAR	_delayTime
                                    1- 1262     	.line	158, "main.c"; 	PORTA |= 0X03;
     0029 2103                      1- 1263     	MOVIA	0x03
     002A 11rr                      1- 1264     	IORAR	_PORTA,F
                                    1- 1265     	.line	159, "main.c"; 	pwm3Init();
     002B 2rrr                      1- 1266     	LCALL	_pwm3Init
                                    1- 1267     	.line	160, "main.c"; 	PORTA |= 0X08;		//振动电机
     002C 19rr                      1- 1268     	BSR	_PORTA,3
     002D 3rrr                      1- 1269     	LGOTO	_00162_DS_
     002E                           1- 1270     _00159_DS_:
                                    1- 1271     	.line	164, "main.c"; 	PORTA &= 0xFC;
     002E 21FC                      1- 1272     	MOVIA	0xfc
     002F 10rr                      1- 1273     	ANDAR	_PORTA,F
                                    1- 1274     	.line	165, "main.c"; 	pwm3Stop();		//敲打电机
     0030 2rrr                      1- 1275     	LCALL	_pwm3Stop
                                    1- 1276     	.line	166, "main.c"; 	PORTA &= 0xF7;
     0031 1Drr                      1- 1277     	BCR	_PORTA,3
                                    1- 1278     	.line	167, "main.c"; 	if(delayTime > 0)
                                    1- 1279     	BANKSEL	_delayTime
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1- 1280     	MOVR	_delayTime,W
     0034 0D03                      1- 1281     	BTRSC	STATUS,2
     0035 3rrr                      1- 1282     	LGOTO	_00156_DS_
                                    1- 1283     	.line	169, "main.c"; 	if(count1s == 0)
                                    1- 1284     	BANKSEL	_count1s
     0036 rrrr                      3-   71 m1      .banksel ram_address
     0037 01rr                      1- 1285     	MOVR	_count1s,W
     0038 0903                      1- 1286     	BTRSS	STATUS,2
     0039 3rrr                      1- 1287     	LGOTO	_00002_DS_
                                    1- 1288     	.line	170, "main.c"; 	delayTime--;
                                    1- 1289     	BANKSEL	_delayTime
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 17rr                      1- 1290     	DECRSZ	_delayTime,F
     003C                           1- 1291     _00002_DS_:
                                    1- 1292     	.line	171, "main.c"; 	if(delayTime == 0)
     003C 3rrr                      1- 1293     	LGOTO	_00162_DS_
                                    1- 1294     	.line	173, "main.c"; 	workTime = resetworkTime;
                                    1- 1295     	BANKSEL	_resetworkTime
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1- 1296     	MOVR	_resetworkTime,W
                                    1- 1297     	BANKSEL	_workTime
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 00rr                      1- 1298     	MOVAR	_workTime
     0041 3rrr                      1- 1299     	LGOTO	_00162_DS_
     0042                           1- 1300     _00156_DS_:
                                    1- 1301     	.line	178, "main.c"; 	workTime = resetworkTime;
                                    1- 1302     	BANKSEL	_resetworkTime
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 01rr                      1- 1303     	MOVR	_resetworkTime,W
                                    1- 1304     	BANKSEL	_workTime
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 00rr                      1- 1305     	MOVAR	_workTime
     0046                           1- 1306     _00162_DS_:
                                    1- 1307     	.line	182, "main.c"; 	zfTime++;
                                    1- 1308     	BANKSEL	_zfTime
     0046 rrrr                      3-   71 m1      .banksel ram_address
     0047 05rr                      1- 1309     	INCR	_zfTime,F
                                    1- 1310     	.line	183, "main.c"; 	if(0X01 & ~PORTB)
     0048 01rr                      1- 1311     	MOVR	_PORTB,W
                                    1- 1312     	BANKSEL	r0x1017
     0049 rrrr                      3-   71 m1      .banksel ram_address
     004A 00rr                      1- 1313     	MOVAR	r0x1017
                                    1- 1314     	BANKSEL	r0x1018
     004B rrrr                      3-   71 m1      .banksel ram_address
     004C 02rr                      1- 1315     	CLRR	r0x1018
                                    1- 1316     	BANKSEL	r0x1017
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 07rr                      1- 1317     	COMR	r0x1017,W
     004F 00rr                      1- 1318     	MOVAR	r0x1017
                                    1- 1319     	BANKSEL	r0x1018
     0050 rrrr                      3-   71 m1      .banksel ram_address
     0051 07rr                      1- 1320     	COMR	r0x1018,W
     0052 00rr                      1- 1321     	MOVAR	r0x1018
                                    1- 1322     	BANKSEL	r0x1017
     0053 rrrr                      3-   71 m1      .banksel ram_address
     0054 08rr                      1- 1323     	BTRSS	r0x1017,0
     0055 3rrr                      1- 1324     	LGOTO	_00170_DS_
                                    1- 1325     	.line	185, "main.c"; 	if(ZFFlag == 0)
                                    1- 1326     	BANKSEL	_Status
     0056 rrrr                      3-   71 m1      .banksel ram_address
     0057 0Drr                      1- 1327     	BTRSC	_Status,3
     0058 3rrr                      1- 1328     	LGOTO	_00003_DS_
                                    1- 1329     	.line	186, "main.c"; 	zfTime = 0;
                                    1- 1330     	BANKSEL	_zfTime
     0059 rrrr                      3-   71 m1      .banksel ram_address
     005A 02rr                      1- 1331     	CLRR	_zfTime
     005B                           1- 1332     _00003_DS_:
                                    1- 1333     	.line	187, "main.c"; 	ZFFlag = 1;
                                    1- 1334     	BANKSEL	_Status
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 19rr                      1- 1335     	BSR	_Status,3
     005D 3rrr                      1- 1336     	LGOTO	_00171_DS_
     005E                           1- 1337     _00170_DS_:
                                    1- 1338     	.line	190, "main.c"; 	else if(0X02 & ~PORTB)
     005E 01rr                      1- 1339     	MOVR	_PORTB,W
                                    1- 1340     	BANKSEL	r0x1017
     005F rrrr                      3-   71 m1      .banksel ram_address
     0060 00rr                      1- 1341     	MOVAR	r0x1017
                                    1- 1342     	BANKSEL	r0x1018
     0061 rrrr                      3-   71 m1      .banksel ram_address
     0062 02rr                      1- 1343     	CLRR	r0x1018
                                    1- 1344     	BANKSEL	r0x1017
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 07rr                      1- 1345     	COMR	r0x1017,W
     0065 00rr                      1- 1346     	MOVAR	r0x1017
                                    1- 1347     	BANKSEL	r0x1018
     0066 rrrr                      3-   71 m1      .banksel ram_address
     0067 07rr                      1- 1348     	COMR	r0x1018,W
     0068 00rr                      1- 1349     	MOVAR	r0x1018
                                    1- 1350     	BANKSEL	r0x1017
     0069 rrrr                      3-   71 m1      .banksel ram_address
     006A 08rr                      1- 1351     	BTRSS	r0x1017,1
     006B 3rrr                      1- 1352     	LGOTO	_00171_DS_
                                    1- 1353     	.line	192, "main.c"; 	if(ZFFlag == 1)
                                    1- 1354     	BANKSEL	_Status
     006C rrrr                      3-   71 m1      .banksel ram_address
     006D 09rr                      1- 1355     	BTRSS	_Status,3
     006E 3rrr                      1- 1356     	LGOTO	_00004_DS_
                                    1- 1357     	.line	193, "main.c"; 	zfTime = 0;
                                    1- 1358     	BANKSEL	_zfTime
     006F rrrr                      3-   71 m1      .banksel ram_address
     0070 02rr                      1- 1359     	CLRR	_zfTime
     0071                           1- 1360     _00004_DS_:
                                    1- 1361     	.line	194, "main.c"; 	ZFFlag = 0;
                                    1- 1362     	BANKSEL	_Status
     0071 rrrr                      3-   71 m1      .banksel ram_address
     0072 1Drr                      1- 1363     	BCR	_Status,3
     0073                           1- 1364     _00171_DS_:
                                    1- 1365     	.line	196, "main.c"; 	if(zfTime < 50)
     0073 2132                      1- 1366     	MOVIA	0x32
                                    1- 1367     	BANKSEL	_zfTime
     0074 rrrr                      3-   71 m1      .banksel ram_address
     0075 04rr                      1- 1368     	SUBAR	_zfTime,W
     0076 0C03                      1- 1369     	BTRSC	STATUS,0
     0077 3rrr                      1- 1370     	LGOTO	_00173_DS_
                                    1- 1371     	.line	198, "main.c"; 	pwm1Stop();
     0078 2rrr                      1- 1372     	LCALL	_pwm1Stop
                                    1- 1373     	.line	199, "main.c"; 	pwm2Stop();
     0079 2rrr                      1- 1374     	LCALL	_pwm2Stop
                                    1- 1375     	.line	200, "main.c"; 	PORTB &= 0xF3;
     007A 21F3                      1- 1376     	MOVIA	0xf3
     007B 10rr                      1- 1377     	ANDAR	_PORTB,F
     007C                           1- 1378     _00173_DS_:
                                    1- 1379     	.line	202, "main.c"; 	if(ZFFlag)
                                    1- 1380     	BANKSEL	_Status
     007C rrrr                      3-   71 m1      .banksel ram_address
     007D 09rr                      1- 1381     	BTRSS	_Status,3
     007E 3rrr                      1- 1382     	LGOTO	_00179_DS_
                                    1- 1383     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1384     ;;unsigned compare: left >= lit (0x33=51), size=1
                                    1- 1385     	.line	204, "main.c"; 	if(zfTime > 50)
     007F 2133                      1- 1386     	MOVIA	0x33
                                    1- 1387     	BANKSEL	_zfTime
     0080 rrrr                      3-   71 m1      .banksel ram_address
     0081 04rr                      1- 1388     	SUBAR	_zfTime,W
     0082 0803                      1- 1389     	BTRSS	STATUS,0
     0083 3rrr                      1- 1390     	LGOTO	_00181_DS_
                                    1- 1391     	.line	206, "main.c"; 	zhengzhuan();
     0084 2rrr                      1- 1392     	LCALL	_zhengzhuan
                                    1- 1393     	.line	207, "main.c"; 	zfTime = 51;
     0085 2133                      1- 1394     	MOVIA	0x33
                                    1- 1395     	BANKSEL	_zfTime
     0086 rrrr                      3-   71 m1      .banksel ram_address
     0087 00rr                      1- 1396     	MOVAR	_zfTime
     0088 3rrr                      1- 1397     	LGOTO	_00181_DS_
                                    1- 1398     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1399     ;;unsigned compare: left >= lit (0x33=51), size=1
     0089                           1- 1400     _00179_DS_:
                                    1- 1401     	.line	212, "main.c"; 	if(zfTime > 50)
     0089 2133                      1- 1402     	MOVIA	0x33
                                    1- 1403     	BANKSEL	_zfTime
     008A rrrr                      3-   71 m1      .banksel ram_address
     008B 04rr                      1- 1404     	SUBAR	_zfTime,W
     008C 0803                      1- 1405     	BTRSS	STATUS,0
     008D 3rrr                      1- 1406     	LGOTO	_00181_DS_
                                    1- 1407     	.line	214, "main.c"; 	fanzhuan();
     008E 2rrr                      1- 1408     	LCALL	_fanzhuan
                                    1- 1409     	.line	215, "main.c"; 	zfTime = 51;
     008F 2133                      1- 1410     	MOVIA	0x33
                                    1- 1411     	BANKSEL	_zfTime
     0090 rrrr                      3-   71 m1      .banksel ram_address
     0091 00rr                      1- 1412     	MOVAR	_zfTime
     0092                           1- 1413     _00181_DS_:
                                    1- 1414     	.line	220, "main.c"; 	}
                                    1- 1415     	RETURN	
     0092 0010                      3-   26 m1      ret
                                    1- 1416     ; exit point of _workCtr
                                    1- 1418     ;***
                                    1- 1419     ;  pBlock Stats: dbName = C
                                    1- 1420     ;***
                                    1- 1421     ;has an exit
                                    1- 1422     ;1 compiler assigned register :
                                    1- 1423     ;   r0x1019
                                    1- 1424     ;; Starting pCode block
                                    1- 1425     .segment "code"; module=main, function=_ledOff
     0000                           1- 1427     _ledOff:
                                    1- 1428     ; 2 exit points
                                    1- 1429     	.line	135, "main.c"; 	IOSTA |= 0x20;
     0000 001r                      1- 1430     	IOSTR	_IOSTA
                                    1- 1431     	BANKSEL	r0x1019
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1432     	MOVAR	r0x1019
     0003 1Arr                      1- 1433     	BSR	r0x1019,5
     0004 01rr                      1- 1434     	MOVR	r0x1019,W
     0005 000r                      1- 1435     	IOST	_IOSTA
                                    1- 1436     	.line	136, "main.c"; 	}
                                    1- 1437     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1- 1438     ; exit point of _ledOff
                                    1- 1440     ;***
                                    1- 1441     ;  pBlock Stats: dbName = C
                                    1- 1442     ;***
                                    1- 1443     ;has an exit
                                    1- 1444     ;1 compiler assigned register :
                                    1- 1445     ;   r0x101A
                                    1- 1446     ;; Starting pCode block
                                    1- 1447     .segment "code"; module=main, function=_ledOn
     0000                           1- 1449     _ledOn:
                                    1- 1450     ; 2 exit points
                                    1- 1451     	.line	129, "main.c"; 	IOSTA &= 0xDF;
     0000 001r                      1- 1452     	IOSTR	_IOSTA
                                    1- 1453     	BANKSEL	r0x101A
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1454     	MOVAR	r0x101A
     0003 1Err                      1- 1455     	BCR	r0x101A,5
     0004 01rr                      1- 1456     	MOVR	r0x101A,W
     0005 000r                      1- 1457     	IOST	_IOSTA
                                    1- 1458     	.line	130, "main.c"; 	PORTA &= 0xDF;
     0006 1Err                      1- 1459     	BCR	_PORTA,5
                                    1- 1460     	.line	131, "main.c"; 	}
                                    1- 1461     	RETURN	
     0007 0010                      3-   26 m1      ret
                                    1- 1462     ; exit point of _ledOn
                                    1- 1465     ;	code size estimation:
                                    1- 1466     ;	  474+  113 =   587 instructions ( 1400 byte)
                                    1- 1468     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__mulchar               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000025
_00002_DS_              Label    0000003C
_00003_DS_              Label    0000005B
_00004_DS_              Label    00000071
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00122_DS_              Label    0000001E
_00124_DS_              Label    0000002F
_00131_DS_              Label    00000031
_00134_DS_              Label    00000002
_00148_DS_              Label    00000017
_00156_DS_              Label    00000042
_00159_DS_              Label    0000002E
_00162_DS_              Label    00000046
_00170_DS_              Label    0000005E
_00171_DS_              Label    00000073
_00173_DS_              Label    0000007C
_00179_DS_              Label    00000089
_00181_DS_              Label    00000092
_00188_DS_              Label    0000000C
_00199_DS_              Label    0000000C
_00210_DS_              Label    0000000C
_00242_DS_              Label    00000022
_00243_DS_              Label    0000002A
_00245_DS_              Label    00000018
_00246_DS_              Label    0000002C
_00247_DS_              Label    0000002D
_00253_DS_              Label    0000001D
_00257_DS_              Label    00000041
_00260_DS_              Label    00000035
_00263_DS_              Label    00000029
_00274_DS_              Label    00000060
_00279_DS_              Label    0000004D
_00283_DS_              Label    00000080
_00289_DS_              Label    00000073
_00291_DS_              Label    00000093
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_CMPCR                  Label    00000000
_count1s                Label    00000000
_delayTime              Label    00000000
_fanzhuan               Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_initSys                Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyNub                 Label    00000000
_keyRead                Label    00000000
_lastTime               Label    00000000
_ledCount               Label    00000000
_ledOff                 Label    00000000
_ledOn                  Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerStep              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_pwm1Init               Label    00000000
_pwm1Stop               Label    00000000
_PWM2DUTY               Label    00000000
_pwm2Init               Label    00000000
_pwm2Stop               Label    00000000
_PWM3DUTY               Label    00000000
_pwm3Init               Label    00000000
_pwm3Stop               Label    00000000
_resetdelayTime         Label    00000000
_resetworkTime          Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_sleepTime              Label    00000000
_Status                 Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStartFlag          Label    00000000
_workStep               Label    00000000
_workStop               Label    00000000
_workTime               Label    00000000
_zfTime                 Label    00000000
_zhengzhuan             Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1012                 Label    00000000
r0x1013                 Label    00000000
r0x1014                 Label    00000000
r0x1015                 Label    00000000
r0x1016                 Label    00000000
r0x1017                 Label    00000000
r0x1018                 Label    00000000
r0x1019                 Label    00000000
r0x101A                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
