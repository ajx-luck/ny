
                    Nyquest Technology Co., Ltd.

NYASM 2.26

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B061D,c=on
                                    1-    9     	#include "ny8b061d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_showNub
                                    1-   15     	extern	_setHightOutput
                                    1-   16     	extern	_setlowOutput
                                    1-   17     	extern	_setOutput
                                    1-   18     	extern	_setInput
                                    1-   19     	extern	_showNubGewei
                                    1-   20     	extern	_showNubGewei2
                                    1-   21     	extern	_showNubShiwei
                                    1-   22     	extern	_showNubShiwei2
                                    1-   23     	extern	_showBaiwei
                                    1-   24     	extern	_B1
                                    1-   25     	extern	_C1
                                    1-   26     	extern	_A2
                                    1-   27     	extern	_B2
                                    1-   28     	extern	_C2
                                    1-   29     	extern	_D2
                                    1-   30     	extern	_E2
                                    1-   31     	extern	_F2
                                    1-   32     	extern	_G2
                                    1-   33     	extern	_A3
                                    1-   34     	extern	_B3
                                    1-   35     	extern	_C3
                                    1-   36     	extern	_D3
                                    1-   37     	extern	_E3
                                    1-   38     	extern	_F3
                                    1-   39     	extern	_G3
                                    1-   40     	extern	_HIGHT
                                    1-   41     	extern	_MEDIUM
                                    1-   42     	extern	_LOW
                                    1-   43     	extern	_MIN
                                    1-   44     	extern	_delayms
                                    1-   45     	extern	__divuchar
                                    1-   46     	extern	__moduchar
                                    1-   47     	extern	_PORTAbits
                                    1-   48     	extern	_PORTBbits
                                    1-   49     	extern	_PCONbits
                                    1-   50     	extern	_BWUCONbits
                                    1-   51     	extern	_ABPLCONbits
                                    1-   52     	extern	_BPHCONbits
                                    1-   53     	extern	_INTEbits
                                    1-   54     	extern	_INTFbits
                                    1-   55     	extern	_ADMDbits
                                    1-   56     	extern	_ADRbits
                                    1-   57     	extern	_ADVREFHbits
                                    1-   58     	extern	_ADCRbits
                                    1-   59     	extern	_AWUCONbits
                                    1-   60     	extern	_PACONbits
                                    1-   61     	extern	_INTEDGbits
                                    1-   62     	extern	_RFCbits
                                    1-   63     	extern	_INTE2bits
                                    1-   64     	extern	_INDF
                                    1-   65     	extern	_TMR0
                                    1-   66     	extern	_PCL
                                    1-   67     	extern	_STATUS
                                    1-   68     	extern	_FSR
                                    1-   69     	extern	_PORTA
                                    1-   70     	extern	_PORTB
                                    1-   71     	extern	_PCON
                                    1-   72     	extern	_BWUCON
                                    1-   73     	extern	_PCHBUF
                                    1-   74     	extern	_ABPLCON
                                    1-   75     	extern	_BPHCON
                                    1-   76     	extern	_INTE
                                    1-   77     	extern	_INTF
                                    1-   78     	extern	_ADMD
                                    1-   79     	extern	_ADR
                                    1-   80     	extern	_ADD
                                    1-   81     	extern	_ADVREFH
                                    1-   82     	extern	_ADCR
                                    1-   83     	extern	_AWUCON
                                    1-   84     	extern	_PACON
                                    1-   85     	extern	_INTEDG
                                    1-   86     	extern	_TMRH
                                    1-   87     	extern	_RFC
                                    1-   88     	extern	_TM3RH
                                    1-   89     	extern	_INTE2
                                    1-   90     	extern	_TMR1
                                    1-   91     	extern	_T1CR1
                                    1-   92     	extern	_T1CR2
                                    1-   93     	extern	_PWM1DUTY
                                    1-   94     	extern	_PS1CV
                                    1-   95     	extern	_BZ1CR
                                    1-   96     	extern	_IRCR
                                    1-   97     	extern	_TBHP
                                    1-   98     	extern	_TBHD
                                    1-   99     	extern	_TMR2
                                    1-  100     	extern	_T2CR1
                                    1-  101     	extern	_T2CR2
                                    1-  102     	extern	_PWM2DUTY
                                    1-  103     	extern	_PS2CV
                                    1-  104     	extern	_BZ2CR
                                    1-  105     	extern	_OSCCR
                                    1-  106     	extern	_TMR3
                                    1-  107     	extern	_T3CR1
                                    1-  108     	extern	_T3CR2
                                    1-  109     	extern	_PWM3DUTY
                                    1-  110     	extern	_PS3CV
                                    1-  111     	extern	_BZ3CR
                                    1-  112     	extern	_IOSTA
                                    1-  113     	extern	_IOSTB
                                    1-  114     	extern	_APHCON
                                    1-  115     	extern	_PS0CV
                                    1-  116     	extern	_BODCON
                                    1-  117     	extern	_PCON1
                                    1-  118     	extern	_T0MD
                                    1-  119     	extern	___sdcc_saved_fsr
                                    1-  120     	extern	___sdcc_saved_stk00
                                    1-  121     	extern	___sdcc_saved_stk01
                                    1-  122     	extern	__gptrget1
                                    1-  123     	extern	__nyc_ny8_startup
                                    1-  124     ;--------------------------------------------------------
                                    1-  125     ; global declarations
                                    1-  126     ;--------------------------------------------------------
                                    1-  127     	extern	_keyCon
                                    1-  128     	extern	_keyRead2
                                    1-  129     	extern	_keyRead
                                    1-  130     	extern	_gotoSleep
                                    1-  131     	extern	_delay
                                    1-  132     	extern	_F_wait_eoc
                                    1-  133     	extern	_F_AIN5_Convert
                                    1-  134     	extern	_checkMaxAD
                                    1-  135     	extern	_initAD
                                    1-  136     	extern	_setPWMduty
                                    1-  137     	extern	_refreshNub
                                    1-  138     	extern	_isr
                                    1-  139     	extern	_main
                                    1-  140     	extern	_intCount
                                    1-  141     	extern	_IntFlag
                                    1-  142     	extern	_numArray
                                    1-  143     	extern	_tempshiweiNum
                                    1-  144     	extern	_tempgeweiNum
                                    1-  145     	extern	_refreshCount
                                    1-  146     	extern	_shiweiNum
                                    1-  147     	extern	_geweiNum
                                    1-  148     	extern	_overLoadTime
                                    1-  149     	extern	_workStep
                                    1-  150     	extern	_workStep2
                                    1-  151     	extern	_duty
                                    1-  152     	extern	_ledCount
                                    1-  153     	extern	_min
                                    1-  154     	extern	_second
                                    1-  155     	extern	_longPressFlag
                                    1-  156     	extern	_keyCount
                                    1-  157     	extern	_keyCount2
                                    1-  158     	extern	_keyClick
                                    1-  159     	extern	_R_AIN5_DATA
                                    1-  160     	extern	_R_AIN5_DATA_LB
                                    1-  162     	extern PSAVE
                                    1-  163     	extern SSAVE
                                    1-  164     	extern WSAVE
                                    1-  165     	extern STK02
                                    1-  166     	extern STK01
                                    1-  167     	extern STK00
                                    1-  169     .segment "uninit", 0x20000040
 20000040                           1-  170     PSAVE:
                                    1-  171     	.res 1
 20000041                           1-  172     SSAVE:
                                    1-  173     	.res 1
 20000042                           1-  174     WSAVE:
                                    1-  175     	.res 1
 20000043                           1-  176     STK02:
                                    1-  177     	.res 1
 20000044                           1-  178     STK01:
                                    1-  179     	.res 1
 20000045                           1-  180     STK00:
                                    1-  181     	.res 1
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ; global definitions
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     .segment "uninit"
     0000                           1-  187     _R_AIN5_DATA:
                                    1-  188     	.res	2
                                    1-  191     .segment "uninit"
     0000                           1-  192     _R_AIN5_DATA_LB:
                                    1-  193     	.res	1
                                    1-  196     ;--------------------------------------------------------
                                    1-  197     ; absolute symbol definitions
                                    1-  198     ;--------------------------------------------------------
                                    1-  199     ;--------------------------------------------------------
                                    1-  200     ; compiler-defined variables
                                    1-  201     ;--------------------------------------------------------
                                    1-  202     .segment "uninit"
     0000                           1-  203     r0x1034:
                                    1-  204     	.res	1
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x1035:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x1036:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x1032:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x1033:
                                    1-  216     	.res	1
                                    1-  217     .segment "uninit"
     0000                           1-  218     r0x1030:
                                    1-  219     	.res	1
                                    1-  220     .segment "uninit"
     0000                           1-  221     r0x1031:
                                    1-  222     	.res	1
                                    1-  223     .segment "uninit"
     0000                           1-  224     r0x1028:
                                    1-  225     	.res	1
                                    1-  226     .segment "uninit"
     0000                           1-  227     r0x1029:
                                    1-  228     	.res	1
                                    1-  229     .segment "uninit"
     0000                           1-  230     r0x102A:
                                    1-  231     	.res	1
                                    1-  232     .segment "uninit"
     0000                           1-  233     r0x102D:
                                    1-  234     	.res	1
                                    1-  235     .segment "uninit"
     0000                           1-  236     r0x1025:
                                    1-  237     	.res	1
                                    1-  238     .segment "uninit"
     0000                           1-  239     r0x1024:
                                    1-  240     	.res	1
                                    1-  241     .segment "uninit"
     0000                           1-  242     r0x1026:
                                    1-  243     	.res	1
                                    1-  244     .segment "uninit"
     0000                           1-  245     r0x1027:
                                    1-  246     	.res	1
                                    1-  247     .segment "uninit"
     0000                           1-  248     r0x1022:
                                    1-  249     	.res	1
                                    1-  250     .segment "uninit"
     0000                           1-  251     r0x1023:
                                    1-  252     	.res	1
                                    1-  253     ;--------------------------------------------------------
                                    1-  254     ; initialized data
                                    1-  255     ;--------------------------------------------------------
                                    1-  257     .segment "idata"
     0000                           1-  258     _intCount:
     0000 0000                      1-  259     	dw	0x00
                                    1-  263     .segment "idata"
     0000                           1-  264     _IntFlag:
     0000 0000                      1-  265     	dw	0x00
                                    1-  269     .segment "idata"
     0000                           1-  270     _numArray:
     0000 003F                      1-  271     	dw	0x3f
     0001 0006                      1-  272     	dw	0x06
     0002 005B                      1-  273     	dw	0x5b
     0003 004F                      1-  274     	dw	0x4f
     0004 0066                      1-  275     	dw	0x66
     0005 006D                      1-  276     	dw	0x6d
     0006 007D                      1-  277     	dw	0x7d
     0007 0007                      1-  278     	dw	0x07
     0008 007F                      1-  279     	dw	0x7f
     0009 0067                      1-  280     	dw	0x67
                                    1-  284     .segment "idata"
     0000                           1-  285     _tempshiweiNum:
     0000 0000                      1-  286     	dw	0x00
                                    1-  290     .segment "idata"
     0000                           1-  291     _tempgeweiNum:
     0000 0000                      1-  292     	dw	0x00
                                    1-  296     .segment "idata"
     0000                           1-  297     _refreshCount:
     0000 0000                      1-  298     	dw	0x00
                                    1-  302     .segment "idata"
     0000                           1-  303     _shiweiNum:
     0000 0000                      1-  304     	dw	0x00
                                    1-  308     .segment "idata"
     0000                           1-  309     _geweiNum:
     0000 0000                      1-  310     	dw	0x00
                                    1-  314     .segment "idata"
     0000                           1-  315     _overLoadTime:
     0000 0000                      1-  316     	dw	0x00
                                    1-  320     .segment "idata"
     0000                           1-  321     _workStep:
     0000 0000                      1-  322     	dw	0x00
                                    1-  326     .segment "idata"
     0000                           1-  327     _workStep2:
     0000 0000                      1-  328     	dw	0x00
                                    1-  332     .segment "idata"
     0000                           1-  333     _duty:
     0000 0000                      1-  334     	dw	0x00
                                    1-  338     .segment "idata"
     0000                           1-  339     _ledCount:
     0000 0000                      1-  340     	dw	0x00
                                    1-  344     .segment "idata"
     0000                           1-  345     _min:
     0000 0000                      1-  346     	dw	0x00
                                    1-  350     .segment "idata"
     0000                           1-  351     _second:
     0000 0000                      1-  352     	dw	0x00
                                    1-  356     .segment "idata"
     0000                           1-  357     _longPressFlag:
     0000 0000                      1-  358     	dw	0x00
                                    1-  362     .segment "idata"
     0000                           1-  363     _keyCount:
     0000 0000                      1-  364     	dw	0x00
                                    1-  368     .segment "idata"
     0000                           1-  369     _keyCount2:
     0000 0000                      1-  370     	dw	0x00
                                    1-  374     .segment "idata"
     0000                           1-  375     _keyClick:
     0000 0000                      1-  376     	dw	0x00
                                    1-  379     ;--------------------------------------------------------
                                    1-  380     ; overlayable items in internal ram 
                                    1-  381     ;--------------------------------------------------------
                                    1-  382     ;	udata_ovr
                                    1-  383     ;--------------------------------------------------------
                                    1-  384     ; reset vector 
                                    1-  385     ;--------------------------------------------------------
                                    1-  386     ORG	0x0000
     0000 3rrr                      1-  387     	LGOTO	__nyc_ny8_startup
                                    1-  388     ;--------------------------------------------------------
                                    1-  389     ; interrupt and initialization code
                                    1-  390     ;--------------------------------------------------------
                                    1-  391     ORG 0x0008
     0008 3rrr                      1-  392     	lgoto	__sdcc_interrupt
                                    1-  394     .segment "code"
     0000                           1-  395     __sdcc_interrupt:
                                    1-  396     ;***
                                    1-  397     ;  pBlock Stats: dbName = I
                                    1-  398     ;***
                                    1-  399     ;functions called:
                                    1-  400     ;   _setPWMduty
                                    1-  401     ;   _setPWMduty
                                    1-  402     ;2 compiler assigned registers:
                                    1-  403     ;   STK00
                                    1-  404     ;   STK01
                                    1-  405     ;; Starting pCode block
     0000                           1-  406     _isr:
                                    1-  407     ; 0 exit points
                                    1-  408     	.line	45, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  409     	MOVAR	WSAVE
     0001 1503                      1-  410     	SWAPR	STATUS,W
     0002 0283                      1-  411     	CLRR	STATUS
     0003 00rr                      1-  412     	MOVAR	SSAVE
     0004 010A                      1-  413     	MOVR	PCHBUF,W
     0005 028A                      1-  414     	CLRR	PCHBUF
     0006 00rr                      1-  415     	MOVAR	PSAVE
     0007 0104                      1-  416     	MOVR	FSR,W
                                    1-  417     	BANKSEL	___sdcc_saved_fsr
     0008 00rr                      1-  418     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  419     	MOVR	STK00,W
                                    1-  420     	BANKSEL	___sdcc_saved_stk00
     000A 00rr                      1-  421     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  422     	MOVR	STK01,W
                                    1-  423     	BANKSEL	___sdcc_saved_stk01
     000C 00rr                      1-  424     	MOVAR	___sdcc_saved_stk01
                                    1-  425     	.line	47, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  426     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  427     	LGOTO	_00110_DS_
                                    1-  428     	.line	49, "main.c"; 	TMR0 += 58;
     000F 213A                      1-  429     	MOVIA	0x3a
     0010 03rr                      1-  430     	ADDAR	_TMR0,F
                                    1-  431     	.line	50, "main.c"; 	INTF = 0;
     0011 02rr                      1-  432     	CLRR	_INTF
                                    1-  433     	.line	51, "main.c"; 	if(++intCount >= 100)
                                    1-  434     	BANKSEL	_intCount
     0012 05rr                      1-  435     	INCR	_intCount,F
                                    1-  436     ;;unsigned compare: left < lit (0x64=100), size=1
     0013 2164                      1-  437     	MOVIA	0x64
     0014 04rr                      1-  438     	SUBAR	_intCount,W
     0015 0803                      1-  439     	BTRSS	STATUS,0
     0016 3rrr                      1-  440     	LGOTO	_00110_DS_
                                    1-  441     	.line	53, "main.c"; 	intCount = 0;
     0017 02rr                      1-  442     	CLRR	_intCount
                                    1-  443     	.line	54, "main.c"; 	IntFlag = 1;
     0018 2101                      1-  444     	MOVIA	0x01
                                    1-  445     	BANKSEL	_IntFlag
     0019 00rr                      1-  446     	MOVAR	_IntFlag
                                    1-  447     	.line	55, "main.c"; 	ledCount++;
                                    1-  448     	BANKSEL	_ledCount
     001A 05rr                      1-  449     	INCR	_ledCount,F
                                    1-  450     	.line	56, "main.c"; 	if(workStep)
                                    1-  451     	BANKSEL	_workStep
     001B 01rr                      1-  452     	MOVR	_workStep,W
     001C 0D03                      1-  453     	BTRSC	STATUS,2
     001D 3rrr                      1-  454     	LGOTO	_00110_DS_
                                    1-  455     	.line	57, "main.c"; 	setPWMduty(0x08,duty);
                                    1-  456     	BANKSEL	_duty
     001E 01rr                      1-  457     	MOVR	_duty,W
     001F 00rr                      1-  458     	MOVAR	STK00
     0020 2108                      1-  459     	MOVIA	0x08
     0021 2rrr                      1-  460     	LCALL	_setPWMduty
     0022                           1-  461     _00110_DS_:
                                    1-  462     	.line	60, "main.c"; 	if(INTFbits.T0IF)
     0022 08rr                      1-  463     	BTRSS	_INTFbits,0
     0023 3rrr                      1-  464     	LGOTO	_00112_DS_
                                    1-  465     	.line	62, "main.c"; 	INTF = 0;
     0024 02rr                      1-  466     	CLRR	_INTF
     0025                           1-  467     _00112_DS_:
                                    1-  468     	.line	65, "main.c"; 	if(INTFbits.PABIF)
     0025 08rr                      1-  469     	BTRSS	_INTFbits,1
     0026 3rrr                      1-  470     	LGOTO	_00114_DS_
                                    1-  471     	.line	67, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0027 21FD                      1-  472     	MOVIA	0xfd
     0028 00rr                      1-  473     	MOVAR	_INTF
     0029                           1-  474     _00114_DS_:
                                    1-  475     	.line	70, "main.c"; 	INTF = 0;
     0029 02rr                      1-  476     	CLRR	_INTF
                                    1-  477     	.line	72, "main.c"; 	}
                                    1-  478     	BANKSEL	___sdcc_saved_stk01
     002A 01rr                      1-  479     	MOVR	___sdcc_saved_stk01,W
     002B 00rr                      1-  480     	MOVAR	STK01
                                    1-  481     	BANKSEL	___sdcc_saved_stk00
     002C 01rr                      1-  482     	MOVR	___sdcc_saved_stk00,W
     002D 00rr                      1-  483     	MOVAR	STK00
                                    1-  484     	BANKSEL	___sdcc_saved_fsr
     002E 01rr                      1-  485     	MOVR	___sdcc_saved_fsr,W
     002F 0084                      1-  486     	MOVAR	FSR
     0030 01rr                      1-  487     	MOVR	PSAVE,W
     0031 008A                      1-  488     	MOVAR	PCHBUF
     0032 0283                      1-  489     	CLRR	STATUS
     0033 15rr                      1-  490     	SWAPR	SSAVE,W
     0034 0083                      1-  491     	MOVAR	STATUS
     0035 15rr                      1-  492     	SWAPR	WSAVE,F
     0036 15rr                      1-  493     	SWAPR	WSAVE,W
     0037                           1-  494     END_OF_INTERRUPT:
     0037 0011                      1-  495     	RETIE	
                                    1-  497     ;--------------------------------------------------------
                                    1-  498     ; code
                                    1-  499     ;--------------------------------------------------------
                                    1-  500     ;***
                                    1-  501     ;  pBlock Stats: dbName = M
                                    1-  502     ;***
                                    1-  503     ;has an exit
                                    1-  504     ;functions called:
                                    1-  505     ;   _initAD
                                    1-  506     ;   _refreshNub
                                    1-  507     ;   _checkMaxAD
                                    1-  508     ;   _keyCon
                                    1-  509     ;   __divuchar
                                    1-  510     ;   __moduchar
                                    1-  511     ;   _gotoSleep
                                    1-  512     ;   _initAD
                                    1-  513     ;   _refreshNub
                                    1-  514     ;   _checkMaxAD
                                    1-  515     ;   _keyCon
                                    1-  516     ;   __divuchar
                                    1-  517     ;   __moduchar
                                    1-  518     ;   _gotoSleep
                                    1-  519     ;1 compiler assigned register :
                                    1-  520     ;   STK00
                                    1-  521     ;; Starting pCode block
                                    1-  522     .segment "code"; module=main, function=_main
     0000                           1-  524     _main:
                                    1-  525     ; 2 exit points
                                    1-  526     	.line	76, "main.c"; 	DISI();
     0000 0013                      1-  527     	DISI
                                    1-  528     	.line	77, "main.c"; 	IOSTA = C_PA3_Input;
     0001 2108                      1-  529     	MOVIA	0x08
     0002 000r                      1-  530     	IOST	_IOSTA
                                    1-  531     	.line	78, "main.c"; 	IOSTB = C_PB1_Input;
     0003 2102                      1-  532     	MOVIA	0x02
     0004 000r                      1-  533     	IOST	_IOSTB
                                    1-  534     	.line	79, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  535     	CLRR	_PORTB
                                    1-  536     	.line	80, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  537     	CLRR	_PORTA
                                    1-  538     	.line	81, "main.c"; 	APHCON = 0xF7;
     0007 21F7                      1-  539     	MOVIA	0xf7
     0008 000r                      1-  540     	IOST	_APHCON
                                    1-  541     	.line	82, "main.c"; 	BPHCON = 0xFD;
     0009 21FD                      1-  542     	MOVIA	0xfd
     000A 00rr                      1-  543     	MOVAR	_BPHCON
                                    1-  544     	.line	84, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000B 2101                      1-  545     	MOVIA	0x01
     000C 00rr                      1-  546     	MOVAR	_INTE
                                    1-  547     	.line	86, "main.c"; 	PCON1 = C_TMR0_Dis;
     000D 0200                      1-  548     	CLRA	
     000E 000r                      1-  549     	IOST	_PCON1
                                    1-  550     	.line	88, "main.c"; 	TMR0 = 58;
     000F 213A                      1-  551     	MOVIA	0x3a
     0010 00rr                      1-  552     	MOVAR	_TMR0
                                    1-  553     	.line	89, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0011 0200                      1-  554     	CLRA	
     0012 0003                      1-  555     	T0MD	
                                    1-  556     	.line	91, "main.c"; 	PCON1 = C_TMR0_En;
     0013 2101                      1-  557     	MOVIA	0x01
     0014 000r                      1-  558     	IOST	_PCON1
                                    1-  559     	.line	93, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0015 2188                      1-  560     	MOVIA	0x88
     0016 00rr                      1-  561     	MOVAR	_PCON
                                    1-  562     	.line	96, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0017 2101                      1-  563     	MOVIA	0x01
     0018 000r                      1-  564     	IOST	_PCON1
                                    1-  565     	.line	97, "main.c"; 	ENI();
     0019 0004                      1-  566     	ENI
                                    1-  567     	.line	98, "main.c"; 	initAD();
     001A 2rrr                      1-  568     	LCALL	_initAD
     001B                           1-  569     _00127_DS_:
                                    1-  570     	.line	101, "main.c"; 	CLRWDT();
     001B 0002                      1-  571     	clrwdt
                                    1-  572     	.line	102, "main.c"; 	if(workStep)
                                    1-  573     	BANKSEL	_workStep
     001C 01rr                      1-  574     	MOVR	_workStep,W
     001D 0903                      1-  575     	BTRSS	STATUS,2
                                    1-  576     	.line	103, "main.c"; 	refreshNub();
     001E 2rrr                      1-  577     	LCALL	_refreshNub
                                    1-  578     	.line	104, "main.c"; 	if(!IntFlag)
                                    1-  579     	BANKSEL	_IntFlag
     001F 01rr                      1-  580     	MOVR	_IntFlag,W
     0020 0D03                      1-  581     	BTRSC	STATUS,2
     0021 3rrr                      1-  582     	LGOTO	_00127_DS_
                                    1-  583     	.line	106, "main.c"; 	IntFlag = 0;
     0022 02rr                      1-  584     	CLRR	_IntFlag
                                    1-  585     	.line	107, "main.c"; 	checkMaxAD();
     0023 2rrr                      1-  586     	LCALL	_checkMaxAD
                                    1-  587     	.line	108, "main.c"; 	keyCon();
     0024 2rrr                      1-  588     	LCALL	_keyCon
                                    1-  589     	.line	109, "main.c"; 	shiweiNum = min/10;
     0025 210A                      1-  590     	MOVIA	0x0a
     0026 00rr                      1-  591     	MOVAR	STK00
                                    1-  592     	BANKSEL	_min
     0027 01rr                      1-  593     	MOVR	_min,W
     0028 2rrr                      1-  594     	LCALL	__divuchar
                                    1-  595     	BANKSEL	_shiweiNum
     0029 00rr                      1-  596     	MOVAR	_shiweiNum
                                    1-  597     	.line	110, "main.c"; 	geweiNum = min%10;
     002A 210A                      1-  598     	MOVIA	0x0a
     002B 00rr                      1-  599     	MOVAR	STK00
                                    1-  600     	BANKSEL	_min
     002C 01rr                      1-  601     	MOVR	_min,W
     002D 2rrr                      1-  602     	LCALL	__moduchar
                                    1-  603     	BANKSEL	_geweiNum
     002E 00rr                      1-  604     	MOVAR	_geweiNum
                                    1-  605     	.line	111, "main.c"; 	if(workStep == 0 && keyCount == 0)
                                    1-  606     	BANKSEL	_workStep
     002F 01rr                      1-  607     	MOVR	_workStep,W
     0030 0903                      1-  608     	BTRSS	STATUS,2
     0031 3rrr                      1-  609     	LGOTO	_00127_DS_
                                    1-  610     	BANKSEL	_keyCount
     0032 01rr                      1-  611     	MOVR	_keyCount,W
     0033 0903                      1-  612     	BTRSS	STATUS,2
     0034 3rrr                      1-  613     	LGOTO	_00127_DS_
                                    1-  614     	.line	113, "main.c"; 	gotoSleep();
     0035 2rrr                      1-  615     	LCALL	_gotoSleep
     0036 3rrr                      1-  616     	LGOTO	_00127_DS_
                                    1-  617     	.line	117, "main.c"; 	}
                                    1-  618     	RETURN	
     0037 0010                      3-   26 m1      ret
                                    1-  619     ; exit point of _main
                                    1-  621     ;***
                                    1-  622     ;  pBlock Stats: dbName = C
                                    1-  623     ;***
                                    1-  624     ;has an exit
                                    1-  625     ;functions called:
                                    1-  626     ;   _keyRead
                                    1-  627     ;   _gotoSleep
                                    1-  628     ;   _keyRead2
                                    1-  629     ;   _keyRead
                                    1-  630     ;   _gotoSleep
                                    1-  631     ;   _keyRead2
                                    1-  632     ;1 compiler assigned register :
                                    1-  633     ;   r0x1023
                                    1-  634     ;; Starting pCode block
                                    1-  635     .segment "code"; module=main, function=_keyCon
     0000                           1-  637     _keyCon:
                                    1-  638     ; 2 exit points
                                    1-  639     	.line	331, "main.c"; 	keyClick = keyRead(0x08&(~PORTA));
     0000 07rr                      1-  640     	COMR	_PORTA,W
                                    1-  641     	BANKSEL	r0x1023
     0001 00rr                      1-  642     	MOVAR	r0x1023
     0002 2108                      1-  643     	MOVIA	0x08
     0003 10rr                      1-  644     	ANDAR	r0x1023,F
     0004 01rr                      1-  645     	MOVR	r0x1023,W
     0005 2rrr                      1-  646     	LCALL	_keyRead
                                    1-  647     	BANKSEL	_keyClick
     0006 00rr                      1-  648     	MOVAR	_keyClick
                                    1-  649     	.line	333, "main.c"; 	if(keyClick == 1)			//短按
     0007 2401                      1-  650     	XORIA	0x01
     0008 0903                      1-  651     	BTRSS	STATUS,2
     0009 3rrr                      1-  652     	LGOTO	_00287_DS_
                                    1-  653     	.line	335, "main.c"; 	if(++workStep >= 4)
                                    1-  654     	BANKSEL	_workStep
     000A 05rr                      1-  655     	INCR	_workStep,F
                                    1-  656     ;;unsigned compare: left < lit (0x4=4), size=1
     000B 2104                      1-  657     	MOVIA	0x04
     000C 04rr                      1-  658     	SUBAR	_workStep,W
     000D 0803                      1-  659     	BTRSS	STATUS,0
     000E 3rrr                      1-  660     	LGOTO	_00275_DS_
                                    1-  661     	.line	337, "main.c"; 	workStep = 1;
     000F 2101                      1-  662     	MOVIA	0x01
     0010 00rr                      1-  663     	MOVAR	_workStep
     0011                           1-  664     _00275_DS_:
                                    1-  665     	.line	339, "main.c"; 	if(workStep == 1)
                                    1-  666     	BANKSEL	_workStep
     0011 01rr                      1-  667     	MOVR	_workStep,W
     0012 2401                      1-  668     	XORIA	0x01
     0013 0903                      1-  669     	BTRSS	STATUS,2
     0014 3rrr                      1-  670     	LGOTO	_00282_DS_
                                    1-  671     	.line	341, "main.c"; 	duty = 100;
     0015 2164                      1-  672     	MOVIA	0x64
                                    1-  673     	BANKSEL	_duty
     0016 00rr                      1-  674     	MOVAR	_duty
     0017 3rrr                      1-  675     	LGOTO	_00288_DS_
     0018                           1-  676     _00282_DS_:
                                    1-  677     	.line	343, "main.c"; 	else if(workStep == 2)
                                    1-  678     	BANKSEL	_workStep
     0018 01rr                      1-  679     	MOVR	_workStep,W
     0019 2402                      1-  680     	XORIA	0x02
     001A 0903                      1-  681     	BTRSS	STATUS,2
     001B 3rrr                      1-  682     	LGOTO	_00279_DS_
                                    1-  683     	.line	345, "main.c"; 	duty = 75;
     001C 214B                      1-  684     	MOVIA	0x4b
                                    1-  685     	BANKSEL	_duty
     001D 00rr                      1-  686     	MOVAR	_duty
     001E 3rrr                      1-  687     	LGOTO	_00288_DS_
     001F                           1-  688     _00279_DS_:
                                    1-  689     	.line	347, "main.c"; 	else if(workStep == 3)
                                    1-  690     	BANKSEL	_workStep
     001F 01rr                      1-  691     	MOVR	_workStep,W
     0020 2403                      1-  692     	XORIA	0x03
     0021 0903                      1-  693     	BTRSS	STATUS,2
     0022 3rrr                      1-  694     	LGOTO	_00288_DS_
                                    1-  695     	.line	349, "main.c"; 	duty = 50;
     0023 2132                      1-  696     	MOVIA	0x32
                                    1-  697     	BANKSEL	_duty
     0024 00rr                      1-  698     	MOVAR	_duty
     0025 3rrr                      1-  699     	LGOTO	_00288_DS_
     0026                           1-  700     _00287_DS_:
                                    1-  701     	.line	352, "main.c"; 	else if(keyClick == 2)		//长按
                                    1-  702     	BANKSEL	_keyClick
     0026 01rr                      1-  703     	MOVR	_keyClick,W
     0027 2402                      1-  704     	XORIA	0x02
     0028 0903                      1-  705     	BTRSS	STATUS,2
     0029 3rrr                      1-  706     	LGOTO	_00288_DS_
                                    1-  707     	.line	354, "main.c"; 	workStep = 0;
                                    1-  708     	BANKSEL	_workStep
     002A 02rr                      1-  709     	CLRR	_workStep
                                    1-  710     	.line	355, "main.c"; 	gotoSleep();
     002B 2rrr                      1-  711     	LCALL	_gotoSleep
     002C                           1-  712     _00288_DS_:
                                    1-  713     	.line	358, "main.c"; 	if(keyRead2(0x02&(~PORTB)))
     002C 07rr                      1-  714     	COMR	_PORTB,W
                                    1-  715     	BANKSEL	r0x1023
     002D 00rr                      1-  716     	MOVAR	r0x1023
     002E 2102                      1-  717     	MOVIA	0x02
     002F 10rr                      1-  718     	ANDAR	r0x1023,F
     0030 01rr                      1-  719     	MOVR	r0x1023,W
     0031 2rrr                      1-  720     	LCALL	_keyRead2
                                    1-  721     	BANKSEL	r0x1023
     0032 00rr                      1-  722     	MOVAR	r0x1023
     0033 01rr                      1-  723     	MOVR	r0x1023,W
     0034 0D03                      1-  724     	BTRSC	STATUS,2
     0035 3rrr                      1-  725     	LGOTO	_00301_DS_
                                    1-  726     	.line	360, "main.c"; 	if(++workStep2 >= 4)
                                    1-  727     	BANKSEL	_workStep2
     0036 05rr                      1-  728     	INCR	_workStep2,F
                                    1-  729     ;;unsigned compare: left < lit (0x4=4), size=1
     0037 2104                      1-  730     	MOVIA	0x04
     0038 04rr                      1-  731     	SUBAR	_workStep2,W
     0039 0803                      1-  732     	BTRSS	STATUS,0
     003A 3rrr                      1-  733     	LGOTO	_00290_DS_
                                    1-  734     	.line	362, "main.c"; 	workStep2 = 1;
     003B 2101                      1-  735     	MOVIA	0x01
     003C 00rr                      1-  736     	MOVAR	_workStep2
     003D                           1-  737     _00290_DS_:
                                    1-  738     	.line	364, "main.c"; 	if(workStep2 == 1)
                                    1-  739     	BANKSEL	_workStep2
     003D 01rr                      1-  740     	MOVR	_workStep2,W
     003E 2401                      1-  741     	XORIA	0x01
     003F 0903                      1-  742     	BTRSS	STATUS,2
     0040 3rrr                      1-  743     	LGOTO	_00297_DS_
                                    1-  744     	.line	366, "main.c"; 	min = 20;
     0041 2114                      1-  745     	MOVIA	0x14
                                    1-  746     	BANKSEL	_min
     0042 00rr                      1-  747     	MOVAR	_min
     0043 3rrr                      1-  748     	LGOTO	_00301_DS_
     0044                           1-  749     _00297_DS_:
                                    1-  750     	.line	368, "main.c"; 	else if(workStep2 == 2)
                                    1-  751     	BANKSEL	_workStep2
     0044 01rr                      1-  752     	MOVR	_workStep2,W
     0045 2402                      1-  753     	XORIA	0x02
     0046 0903                      1-  754     	BTRSS	STATUS,2
     0047 3rrr                      1-  755     	LGOTO	_00294_DS_
                                    1-  756     	.line	370, "main.c"; 	min = 40;
     0048 2128                      1-  757     	MOVIA	0x28
                                    1-  758     	BANKSEL	_min
     0049 00rr                      1-  759     	MOVAR	_min
     004A 3rrr                      1-  760     	LGOTO	_00301_DS_
     004B                           1-  761     _00294_DS_:
                                    1-  762     	.line	372, "main.c"; 	else if(workStep2 == 3)
                                    1-  763     	BANKSEL	_workStep2
     004B 01rr                      1-  764     	MOVR	_workStep2,W
     004C 2403                      1-  765     	XORIA	0x03
     004D 0903                      1-  766     	BTRSS	STATUS,2
     004E 3rrr                      1-  767     	LGOTO	_00301_DS_
                                    1-  768     	.line	374, "main.c"; 	min = 60;
     004F 213C                      1-  769     	MOVIA	0x3c
                                    1-  770     	BANKSEL	_min
     0050 00rr                      1-  771     	MOVAR	_min
     0051                           1-  772     _00301_DS_:
                                    1-  773     	.line	378, "main.c"; 	}
                                    1-  774     	RETURN	
     0051 0010                      3-   26 m1      ret
                                    1-  775     ; exit point of _keyCon
                                    1-  777     ;***
                                    1-  778     ;  pBlock Stats: dbName = C
                                    1-  779     ;***
                                    1-  780     ;has an exit
                                    1-  781     ;1 compiler assigned register :
                                    1-  782     ;   r0x1022
                                    1-  783     ;; Starting pCode block
                                    1-  784     .segment "code"; module=main, function=_keyRead2
                                    1-  786     ;local variable name mapping:
     0000                           1-  788     _keyRead2:
                                    1-  789     ; 2 exit points
                                    1-  790     	.line	307, "main.c"; 	char keyRead2(char KeyStatus)	
                                    1-  791     	BANKSEL	r0x1022
     0000 00rr                      1-  792     	MOVAR	r0x1022
                                    1-  793     	.line	309, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  794     	MOVR	r0x1022,W
     0002 0D03                      1-  795     	BTRSC	STATUS,2
     0003 3rrr                      1-  796     	LGOTO	_00267_DS_
                                    1-  797     	.line	311, "main.c"; 	keyCount2++;
                                    1-  798     	BANKSEL	_keyCount2
     0004 05rr                      1-  799     	INCR	_keyCount2,F
                                    1-  800     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  801     	.line	312, "main.c"; 	if(keyCount2 >= 200)
     0005 21C8                      1-  802     	MOVIA	0xc8
     0006 04rr                      1-  803     	SUBAR	_keyCount2,W
     0007 0803                      1-  804     	BTRSS	STATUS,0
     0008 3rrr                      1-  805     	LGOTO	_00268_DS_
                                    1-  806     	.line	314, "main.c"; 	keyCount2 = 200;
     0009 21C8                      1-  807     	MOVIA	0xc8
     000A 00rr                      1-  808     	MOVAR	_keyCount2
     000B 3rrr                      1-  809     	LGOTO	_00268_DS_
                                    1-  810     ;;unsigned compare: left < lit (0x4=4), size=1
     000C                           1-  811     _00267_DS_:
                                    1-  812     	.line	319, "main.c"; 	if(keyCount2 >= 4)
     000C 2104                      1-  813     	MOVIA	0x04
                                    1-  814     	BANKSEL	_keyCount2
     000D 04rr                      1-  815     	SUBAR	_keyCount2,W
     000E 0803                      1-  816     	BTRSS	STATUS,0
     000F 3rrr                      1-  817     	LGOTO	_00265_DS_
                                    1-  818     	.line	321, "main.c"; 	keyCount2 = 0;
     0010 02rr                      1-  819     	CLRR	_keyCount2
                                    1-  820     	.line	322, "main.c"; 	return	1;
     0011 2101                      1-  821     	MOVIA	0x01
     0012 3rrr                      1-  822     	LGOTO	_00269_DS_
     0013                           1-  823     _00265_DS_:
                                    1-  824     	.line	324, "main.c"; 	keyCount2 = 0;
                                    1-  825     	BANKSEL	_keyCount2
     0013 02rr                      1-  826     	CLRR	_keyCount2
     0014                           1-  827     _00268_DS_:
                                    1-  828     	.line	326, "main.c"; 	return 0;
     0014 2100                      1-  829     	MOVIA	0x00
     0015                           1-  830     _00269_DS_:
                                    1-  831     	.line	327, "main.c"; 	}
                                    1-  832     	RETURN	
     0015 0010                      3-   26 m1      ret
                                    1-  833     ; exit point of _keyRead2
                                    1-  835     ;***
                                    1-  836     ;  pBlock Stats: dbName = C
                                    1-  837     ;***
                                    1-  838     ;has an exit
                                    1-  839     ;1 compiler assigned register :
                                    1-  840     ;   r0x1022
                                    1-  841     ;; Starting pCode block
                                    1-  842     .segment "code"; module=main, function=_keyRead
                                    1-  844     ;local variable name mapping:
     0000                           1-  846     _keyRead:
                                    1-  847     ; 2 exit points
                                    1-  848     	.line	274, "main.c"; 	char keyRead(char KeyStatus)	
                                    1-  849     	BANKSEL	r0x1022
     0000 00rr                      1-  850     	MOVAR	r0x1022
                                    1-  851     	.line	276, "main.c"; 	if (KeyStatus)
     0001 01rr                      1-  852     	MOVR	r0x1022,W
     0002 0D03                      1-  853     	BTRSC	STATUS,2
     0003 3rrr                      1-  854     	LGOTO	_00255_DS_
                                    1-  855     	.line	278, "main.c"; 	keyCount++;
                                    1-  856     	BANKSEL	_keyCount
     0004 05rr                      1-  857     	INCR	_keyCount,F
                                    1-  858     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  859     	.line	279, "main.c"; 	if(keyCount >= 200)
     0005 21C8                      1-  860     	MOVIA	0xc8
     0006 04rr                      1-  861     	SUBAR	_keyCount,W
     0007 0803                      1-  862     	BTRSS	STATUS,0
     0008 3rrr                      1-  863     	LGOTO	_00256_DS_
                                    1-  864     	.line	281, "main.c"; 	keyCount = 200;
     0009 21C8                      1-  865     	MOVIA	0xc8
     000A 00rr                      1-  866     	MOVAR	_keyCount
                                    1-  867     	.line	282, "main.c"; 	if(!longPressFlag)
                                    1-  868     	BANKSEL	_longPressFlag
     000B 01rr                      1-  869     	MOVR	_longPressFlag,W
     000C 0903                      1-  870     	BTRSS	STATUS,2
     000D 3rrr                      1-  871     	LGOTO	_00256_DS_
                                    1-  872     	.line	284, "main.c"; 	longPressFlag = 1;
     000E 2101                      1-  873     	MOVIA	0x01
     000F 00rr                      1-  874     	MOVAR	_longPressFlag
                                    1-  875     	.line	285, "main.c"; 	return 2;
     0010 2102                      1-  876     	MOVIA	0x02
     0011 3rrr                      1-  877     	LGOTO	_00257_DS_
                                    1-  878     ;;unsigned compare: left < lit (0xC8=200), size=1
     0012                           1-  879     _00255_DS_:
                                    1-  880     	.line	291, "main.c"; 	if(keyCount >= 200)
     0012 21C8                      1-  881     	MOVIA	0xc8
                                    1-  882     	BANKSEL	_keyCount
     0013 04rr                      1-  883     	SUBAR	_keyCount,W
     0014 0803                      1-  884     	BTRSS	STATUS,0
     0015 3rrr                      1-  885     	LGOTO	_00252_DS_
                                    1-  886     	.line	293, "main.c"; 	keyCount = 0;
     0016 02rr                      1-  887     	CLRR	_keyCount
                                    1-  888     	.line	294, "main.c"; 	longPressFlag = 0;
                                    1-  889     	BANKSEL	_longPressFlag
     0017 02rr                      1-  890     	CLRR	_longPressFlag
                                    1-  891     	.line	295, "main.c"; 	return	0;
     0018 2100                      1-  892     	MOVIA	0x00
     0019 3rrr                      1-  893     	LGOTO	_00257_DS_
                                    1-  894     ;;unsigned compare: left < lit (0x4=4), size=1
     001A                           1-  895     _00252_DS_:
                                    1-  896     	.line	297, "main.c"; 	else if(keyCount >= 4)
     001A 2104                      1-  897     	MOVIA	0x04
                                    1-  898     	BANKSEL	_keyCount
     001B 04rr                      1-  899     	SUBAR	_keyCount,W
     001C 0803                      1-  900     	BTRSS	STATUS,0
     001D 3rrr                      1-  901     	LGOTO	_00253_DS_
                                    1-  902     	.line	299, "main.c"; 	keyCount = 0;
     001E 02rr                      1-  903     	CLRR	_keyCount
                                    1-  904     	.line	300, "main.c"; 	return	1;
     001F 2101                      1-  905     	MOVIA	0x01
     0020 3rrr                      1-  906     	LGOTO	_00257_DS_
     0021                           1-  907     _00253_DS_:
                                    1-  908     	.line	302, "main.c"; 	keyCount = 0;
                                    1-  909     	BANKSEL	_keyCount
     0021 02rr                      1-  910     	CLRR	_keyCount
     0022                           1-  911     _00256_DS_:
                                    1-  912     	.line	304, "main.c"; 	return 0;
     0022 2100                      1-  913     	MOVIA	0x00
     0023                           1-  914     _00257_DS_:
                                    1-  915     	.line	305, "main.c"; 	}
                                    1-  916     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  917     ; exit point of _keyRead
                                    1-  919     ;***
                                    1-  920     ;  pBlock Stats: dbName = C
                                    1-  921     ;***
                                    1-  922     ;has an exit
                                    1-  923     ;functions called:
                                    1-  924     ;   _setInput
                                    1-  925     ;   _setInput
                                    1-  926     ;; Starting pCode block
                                    1-  927     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  929     _gotoSleep:
                                    1-  930     ; 2 exit points
                                    1-  931     	.line	250, "main.c"; 	setInput();
     0000 2rrr                      1-  932     	LCALL	_setInput
                                    1-  933     	.line	251, "main.c"; 	workStep = 0;
                                    1-  934     	BANKSEL	_workStep
     0001 02rr                      1-  935     	CLRR	_workStep
                                    1-  936     	.line	252, "main.c"; 	workStep2 = 1;
     0002 2101                      1-  937     	MOVIA	0x01
                                    1-  938     	BANKSEL	_workStep2
     0003 00rr                      1-  939     	MOVAR	_workStep2
                                    1-  940     	.line	253, "main.c"; 	PORTB &= 0xF7;
     0004 1Drr                      1-  941     	BCR	_PORTB,3
                                    1-  942     	.line	254, "main.c"; 	AWUCON = 0x08;
     0005 2108                      1-  943     	MOVIA	0x08
     0006 00rr                      1-  944     	MOVAR	_AWUCON
                                    1-  945     	.line	255, "main.c"; 	duty = 0;
                                    1-  946     	BANKSEL	_duty
     0007 02rr                      1-  947     	CLRR	_duty
                                    1-  948     	.line	256, "main.c"; 	min = 20;
     0008 2114                      1-  949     	MOVIA	0x14
                                    1-  950     	BANKSEL	_min
     0009 00rr                      1-  951     	MOVAR	_min
                                    1-  952     	.line	257, "main.c"; 	tempshiweiNum = 2;
     000A 2102                      1-  953     	MOVIA	0x02
                                    1-  954     	BANKSEL	_tempshiweiNum
     000B 00rr                      1-  955     	MOVAR	_tempshiweiNum
                                    1-  956     	.line	258, "main.c"; 	tempgeweiNum = 0;
                                    1-  957     	BANKSEL	_tempgeweiNum
     000C 02rr                      1-  958     	CLRR	_tempgeweiNum
                                    1-  959     	.line	259, "main.c"; 	second = 0;
                                    1-  960     	BANKSEL	_second
     000D 02rr                      1-  961     	CLRR	_second
                                    1-  962     	.line	260, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     000E 2103                      1-  963     	MOVIA	0x03
     000F 00rr                      1-  964     	MOVAR	_INTE
                                    1-  965     	.line	261, "main.c"; 	PCON =  C_LVR_En;	
     0010 2108                      1-  966     	MOVIA	0x08
     0011 00rr                      1-  967     	MOVAR	_PCON
                                    1-  968     	.line	262, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0012 02rr                      1-  969     	CLRR	_INTF
                                    1-  970     	.line	263, "main.c"; 	CLRWDT();
     0013 0002                      1-  971     	clrwdt
                                    1-  972     	.line	264, "main.c"; 	ENI();
     0014 0004                      1-  973     	ENI
                                    1-  974     	.line	265, "main.c"; 	SLEEP();
     0015 0001                      1-  975     	sleep
                                    1-  976     	.line	266, "main.c"; 	AWUCON = 0x00;
     0016 02rr                      1-  977     	CLRR	_AWUCON
                                    1-  978     	.line	267, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     0017 2101                      1-  979     	MOVIA	0x01
     0018 00rr                      1-  980     	MOVAR	_INTE
                                    1-  981     	.line	268, "main.c"; 	INTF = 0;
     0019 02rr                      1-  982     	CLRR	_INTF
                                    1-  983     	.line	270, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     001A 21A8                      1-  984     	MOVIA	0xa8
     001B 00rr                      1-  985     	MOVAR	_PCON
                                    1-  986     	.line	272, "main.c"; 	}
                                    1-  987     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1-  988     ; exit point of _gotoSleep
                                    1-  990     ;***
                                    1-  991     ;  pBlock Stats: dbName = C
                                    1-  992     ;***
                                    1-  993     ;has an exit
                                    1-  994     ;5 compiler assigned registers:
                                    1-  995     ;   r0x1024
                                    1-  996     ;   STK00
                                    1-  997     ;   r0x1025
                                    1-  998     ;   r0x1026
                                    1-  999     ;   r0x1027
                                    1- 1000     ;; Starting pCode block
                                    1- 1001     .segment "code"; module=main, function=_delay
                                    1- 1003     ;local variable name mapping:
     0000                           1- 1008     _delay:
                                    1- 1009     ; 2 exit points
                                    1- 1010     	.line	243, "main.c"; 	void delay(u16t time)
                                    1- 1011     	BANKSEL	r0x1024
     0000 00rr                      1- 1012     	MOVAR	r0x1024
     0001 01rr                      1- 1013     	MOVR	STK00,W
                                    1- 1014     	BANKSEL	r0x1025
     0002 00rr                      1- 1015     	MOVAR	r0x1025
                                    1- 1016     	.line	245, "main.c"; 	for(u16t i=0;i<time;i++);
                                    1- 1017     	BANKSEL	r0x1026
     0003 02rr                      1- 1018     	CLRR	r0x1026
                                    1- 1019     	BANKSEL	r0x1027
     0004 02rr                      1- 1020     	CLRR	r0x1027
     0005                           1- 1021     _00225_DS_:
                                    1- 1022     	BANKSEL	r0x1024
     0005 01rr                      1- 1023     	MOVR	r0x1024,W
                                    1- 1024     	BANKSEL	r0x1027
     0006 04rr                      1- 1025     	SUBAR	r0x1027,W
     0007 0903                      1- 1026     	BTRSS	STATUS,2
     0008 3rrr                      1- 1027     	LGOTO	_00236_DS_
                                    1- 1028     	BANKSEL	r0x1025
     0009 01rr                      1- 1029     	MOVR	r0x1025,W
                                    1- 1030     	BANKSEL	r0x1026
     000A 04rr                      1- 1031     	SUBAR	r0x1026,W
     000B                           1- 1032     _00236_DS_:
     000B 0C03                      1- 1033     	BTRSC	STATUS,0
     000C 3rrr                      1- 1034     	LGOTO	_00227_DS_
                                    1- 1035     	BANKSEL	r0x1026
     000D 05rr                      1- 1036     	INCR	r0x1026,F
     000E 0903                      1- 1037     	BTRSS	STATUS,2
     000F 3rrr                      1- 1038     	LGOTO	_00001_DS_
                                    1- 1039     	BANKSEL	r0x1027
     0010 05rr                      1- 1040     	INCR	r0x1027,F
     0011                           1- 1041     _00001_DS_:
     0011 3rrr                      1- 1042     	LGOTO	_00225_DS_
     0012                           1- 1043     _00227_DS_:
                                    1- 1044     	.line	246, "main.c"; 	}
                                    1- 1045     	RETURN	
     0012 0010                      3-   26 m1      ret
                                    1- 1046     ; exit point of _delay
                                    1- 1048     ;***
                                    1- 1049     ;  pBlock Stats: dbName = C
                                    1- 1050     ;***
                                    1- 1051     ;has an exit
                                    1- 1052     ;; Starting pCode block
                                    1- 1053     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1- 1055     _F_wait_eoc:
                                    1- 1056     ; 2 exit points
     0000                           1- 1057     _00218_DS_:
                                    1- 1058     	.line	237, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1- 1059     	BTRSS	_ADMDbits,5
     0001 3rrr                      1- 1060     	LGOTO	_00218_DS_
                                    1- 1061     	.line	239, "main.c"; 	}
                                    1- 1062     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1063     ; exit point of _F_wait_eoc
                                    1- 1065     ;***
                                    1- 1066     ;  pBlock Stats: dbName = C
                                    1- 1067     ;***
                                    1- 1068     ;has an exit
                                    1- 1069     ;functions called:
                                    1- 1070     ;   _delay
                                    1- 1071     ;   _F_wait_eoc
                                    1- 1072     ;   _delay
                                    1- 1073     ;   _F_wait_eoc
                                    1- 1074     ;7 compiler assigned registers:
                                    1- 1075     ;   r0x1028
                                    1- 1076     ;   STK00
                                    1- 1077     ;   r0x1029
                                    1- 1078     ;   r0x102A
                                    1- 1079     ;   r0x102B
                                    1- 1080     ;   r0x102C
                                    1- 1081     ;   r0x102D
                                    1- 1082     ;; Starting pCode block
                                    1- 1083     .segment "code"; module=main, function=_F_AIN5_Convert
                                    1- 1085     ;local variable name mapping:
     0000                           1- 1088     _F_AIN5_Convert:
                                    1- 1089     ; 2 exit points
                                    1- 1090     	.line	218, "main.c"; 	void F_AIN5_Convert(char count)
                                    1- 1091     	BANKSEL	r0x1028
     0000 00rr                      1- 1092     	MOVAR	r0x1028
                                    1- 1093     	.line	220, "main.c"; 	R_AIN5_DATA=R_AIN5_DATA_LB=0x00;   
                                    1- 1094     	BANKSEL	_R_AIN5_DATA_LB
     0001 02rr                      1- 1095     	CLRR	_R_AIN5_DATA_LB
                                    1- 1096     	BANKSEL	_R_AIN5_DATA
     0002 02rr                      1- 1097     	CLRR	_R_AIN5_DATA
     0003 02rr                      1- 1098     	CLRR	(_R_AIN5_DATA + 1)
                                    1- 1099     	.line	222, "main.c"; 	ADMD  = 0x90 | C_ADC_PA4;				// Select AIN6(PB1) pad as ADC input
     0004 2194                      1- 1100     	MOVIA	0x94
     0005 00rr                      1- 1101     	MOVAR	_ADMD
                                    1- 1102     	.line	223, "main.c"; 	delay(200);	
     0006 21C8                      1- 1103     	MOVIA	0xc8
     0007 00rr                      1- 1104     	MOVAR	STK00
     0008 2100                      1- 1105     	MOVIA	0x00
     0009 2rrr                      1- 1106     	LCALL	_delay
                                    1- 1107     	.line	224, "main.c"; 	for(i=1;i<=count;i++)
     000A 2101                      1- 1108     	MOVIA	0x01
                                    1- 1109     	BANKSEL	r0x1029
     000B 00rr                      1- 1110     	MOVAR	r0x1029
     000C                           1- 1111     _00211_DS_:
                                    1- 1112     	BANKSEL	r0x1029
     000C 01rr                      1- 1113     	MOVR	r0x1029,W
                                    1- 1114     	BANKSEL	r0x1028
     000D 04rr                      1- 1115     	SUBAR	r0x1028,W
     000E 0803                      1- 1116     	BTRSS	STATUS,0
     000F 3rrr                      1- 1117     	LGOTO	_00213_DS_
                                    1- 1118     	.line	226, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0010 1Brr                      1- 1119     	BSR	_ADMDbits,6
                                    1- 1120     	.line	227, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0011 2rrr                      1- 1121     	LCALL	_F_wait_eoc
                                    1- 1122     	.line	228, "main.c"; 	R_AIN5_DATA_LB += ( 0x0F & ADR); 
     0012 210F                      1- 1123     	MOVIA	0x0f
     0013 10rr                      1- 1124     	ANDAR	_ADR,W
                                    1- 1125     ;;3	MOVAR	r0x102A
                                    1- 1126     	BANKSEL	_R_AIN5_DATA_LB
     0014 03rr                      1- 1127     	ADDAR	_R_AIN5_DATA_LB,F
                                    1- 1128     	.line	229, "main.c"; 	R_AIN5_DATA    += ADD; 
     0015 01rr                      1- 1129     	MOVR	_ADD,W
                                    1- 1130     	BANKSEL	r0x102A
     0016 00rr                      1- 1131     	MOVAR	r0x102A
                                    1- 1132     ;;1	CLRR	r0x102B
                                    1- 1133     ;;102	MOVR	r0x102A,W
                                    1- 1134     ;;100	MOVAR	r0x102C
     0017 2100                      1- 1135     	MOVIA	0x00
                                    1- 1136     	BANKSEL	r0x102D
     0018 00rr                      1- 1137     	MOVAR	r0x102D
                                    1- 1138     ;;101	MOVR	r0x102C,W
                                    1- 1139     	BANKSEL	r0x102A
     0019 01rr                      1- 1140     	MOVR	r0x102A,W
                                    1- 1141     	BANKSEL	_R_AIN5_DATA
     001A 03rr                      1- 1142     	ADDAR	_R_AIN5_DATA,F
                                    1- 1143     	BANKSEL	r0x102D
     001B 01rr                      1- 1144     	MOVR	r0x102D,W
     001C 0C03                      1- 1145     	BTRSC	STATUS,0
     001D 05rr                      1- 1146     	INCR	r0x102D,W
     001E 0D03                      1- 1147     	BTRSC	STATUS,2
     001F 3rrr                      1- 1148     	LGOTO	_00002_DS_
                                    1- 1149     	BANKSEL	_R_AIN5_DATA
     0020 03rr                      1- 1150     	ADDAR	(_R_AIN5_DATA + 1),F
     0021                           1- 1151     _00002_DS_:
                                    1- 1152     	.line	224, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1153     	BANKSEL	r0x1029
     0021 05rr                      1- 1154     	INCR	r0x1029,F
     0022 3rrr                      1- 1155     	LGOTO	_00211_DS_
     0023                           1- 1156     _00213_DS_:
                                    1- 1157     	.line	231, "main.c"; 	}
                                    1- 1158     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1- 1159     ; exit point of _F_AIN5_Convert
                                    1- 1161     ;***
                                    1- 1162     ;  pBlock Stats: dbName = C
                                    1- 1163     ;***
                                    1- 1164     ;has an exit
                                    1- 1165     ;functions called:
                                    1- 1166     ;   _F_AIN5_Convert
                                    1- 1167     ;   _F_AIN5_Convert
                                    1- 1168     ;4 compiler assigned registers:
                                    1- 1169     ;   r0x102E
                                    1- 1170     ;   r0x102F
                                    1- 1171     ;   r0x1030
                                    1- 1172     ;   r0x1031
                                    1- 1173     ;; Starting pCode block
                                    1- 1174     .segment "code"; module=main, function=_checkMaxAD
     0000                           1- 1176     _checkMaxAD:
                                    1- 1177     ; 2 exit points
                                    1- 1178     	.line	192, "main.c"; 	R_AIN5_DATA = R_AIN5_DATA_LB = 0x00;
                                    1- 1179     	BANKSEL	_R_AIN5_DATA_LB
     0000 02rr                      1- 1180     	CLRR	_R_AIN5_DATA_LB
                                    1- 1181     	BANKSEL	_R_AIN5_DATA
     0001 02rr                      1- 1182     	CLRR	_R_AIN5_DATA
     0002 02rr                      1- 1183     	CLRR	(_R_AIN5_DATA + 1)
                                    1- 1184     	.line	193, "main.c"; 	F_AIN5_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1- 1185     	MOVIA	0x08
     0004 2rrr                      1- 1186     	LCALL	_F_AIN5_Convert
                                    1- 1187     	.line	194, "main.c"; 	R_AIN5_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1188     	BANKSEL	_R_AIN5_DATA
     0005 15rr                      1- 1189     	SWAPR	(_R_AIN5_DATA + 1),W
     0006 22F0                      1- 1190     	ANDIA	0xf0
     0007 00rr                      1- 1191     	MOVAR	(_R_AIN5_DATA + 1)
     0008 15rr                      1- 1192     	SWAPR	_R_AIN5_DATA,W
     0009 00rr                      1- 1193     	MOVAR	_R_AIN5_DATA
     000A 220F                      1- 1194     	ANDIA	0x0f
     000B 11rr                      1- 1195     	IORAR	(_R_AIN5_DATA + 1),F
     000C 12rr                      1- 1196     	XORAR	_R_AIN5_DATA,F
                                    1- 1197     	.line	195, "main.c"; 	R_AIN5_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1- 1198     	MOVIA	0xf0
                                    1- 1199     	BANKSEL	_R_AIN5_DATA_LB
     000E 10rr                      1- 1200     	ANDAR	_R_AIN5_DATA_LB,F
                                    1- 1201     	.line	196, "main.c"; 	R_AIN5_DATA += R_AIN5_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1- 1202     	MOVR	_R_AIN5_DATA_LB,W
                                    1- 1203     	BANKSEL	r0x1030
     0010 00rr                      1- 1204     	MOVAR	r0x1030
                                    1- 1205     ;;1	MOVAR	r0x102E
                                    1- 1206     ;;1	CLRR	r0x102F
                                    1- 1207     ;;99	MOVR	r0x102E,W
     0011 2100                      1- 1208     	MOVIA	0x00
                                    1- 1209     	BANKSEL	r0x1031
     0012 00rr                      1- 1210     	MOVAR	r0x1031
                                    1- 1211     	BANKSEL	r0x1030
     0013 01rr                      1- 1212     	MOVR	r0x1030,W
                                    1- 1213     	BANKSEL	_R_AIN5_DATA
     0014 03rr                      1- 1214     	ADDAR	_R_AIN5_DATA,F
                                    1- 1215     	BANKSEL	r0x1031
     0015 01rr                      1- 1216     	MOVR	r0x1031,W
     0016 0C03                      1- 1217     	BTRSC	STATUS,0
     0017 05rr                      1- 1218     	INCR	r0x1031,W
     0018 0D03                      1- 1219     	BTRSC	STATUS,2
     0019 3rrr                      1- 1220     	LGOTO	_00003_DS_
                                    1- 1221     	BANKSEL	_R_AIN5_DATA
     001A 03rr                      1- 1222     	ADDAR	(_R_AIN5_DATA + 1),F
                                    1- 1223     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     001B                           1- 1224     _00003_DS_:
                                    1- 1225     	.line	197, "main.c"; 	R_AIN5_DATA >>=3;					// R_AIN0_DATA divided 8	
     001B 1C03                      1- 1226     	BCR	STATUS,0
                                    1- 1227     	BANKSEL	_R_AIN5_DATA
     001C 13rr                      1- 1228     	RRR	(_R_AIN5_DATA + 1),F
     001D 13rr                      1- 1229     	RRR	_R_AIN5_DATA,F
                                    1- 1230     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     001E 1C03                      1- 1231     	BCR	STATUS,0
     001F 13rr                      1- 1232     	RRR	(_R_AIN5_DATA + 1),F
     0020 13rr                      1- 1233     	RRR	_R_AIN5_DATA,F
                                    1- 1234     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0021 1C03                      1- 1235     	BCR	STATUS,0
     0022 13rr                      1- 1236     	RRR	(_R_AIN5_DATA + 1),F
     0023 13rr                      1- 1237     	RRR	_R_AIN5_DATA,F
                                    1- 1238     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1239     ;;unsigned compare: left >= lit (0x68=104), size=2
                                    1- 1240     	.line	199, "main.c"; 	if(R_AIN5_DATA > 103)
     0024 2100                      1- 1241     	MOVIA	0x00
     0025 04rr                      1- 1242     	SUBAR	(_R_AIN5_DATA + 1),W
     0026 0903                      1- 1243     	BTRSS	STATUS,2
     0027 3rrr                      1- 1244     	LGOTO	_00204_DS_
     0028 2168                      1- 1245     	MOVIA	0x68
     0029 04rr                      1- 1246     	SUBAR	_R_AIN5_DATA,W
     002A                           1- 1247     _00204_DS_:
     002A 0803                      1- 1248     	BTRSS	STATUS,0
     002B 3rrr                      1- 1249     	LGOTO	_00194_DS_
                                    1- 1250     	.line	201, "main.c"; 	if(++overLoadTime>=100)
                                    1- 1251     	BANKSEL	_overLoadTime
     002C 05rr                      1- 1252     	INCR	_overLoadTime,F
                                    1- 1253     ;;unsigned compare: left < lit (0x64=100), size=1
     002D 2164                      1- 1254     	MOVIA	0x64
     002E 04rr                      1- 1255     	SUBAR	_overLoadTime,W
     002F 0803                      1- 1256     	BTRSS	STATUS,0
     0030 3rrr                      1- 1257     	LGOTO	_00196_DS_
                                    1- 1258     	.line	203, "main.c"; 	workStep = 0;
                                    1- 1259     	BANKSEL	_workStep
     0031 02rr                      1- 1260     	CLRR	_workStep
                                    1- 1261     	.line	204, "main.c"; 	overLoadTime = 0;
                                    1- 1262     	BANKSEL	_overLoadTime
     0032 02rr                      1- 1263     	CLRR	_overLoadTime
     0033 3rrr                      1- 1264     	LGOTO	_00196_DS_
     0034                           1- 1265     _00194_DS_:
                                    1- 1266     	.line	209, "main.c"; 	overLoadTime = 0;
                                    1- 1267     	BANKSEL	_overLoadTime
     0034 02rr                      1- 1268     	CLRR	_overLoadTime
     0035                           1- 1269     _00196_DS_:
                                    1- 1270     	.line	212, "main.c"; 	}
                                    1- 1271     	RETURN	
     0035 0010                      3-   26 m1      ret
                                    1- 1272     ; exit point of _checkMaxAD
                                    1- 1274     ;***
                                    1- 1275     ;  pBlock Stats: dbName = C
                                    1- 1276     ;***
                                    1- 1277     ;has an exit
                                    1- 1278     ;functions called:
                                    1- 1279     ;   _delay
                                    1- 1280     ;   _delay
                                    1- 1281     ;1 compiler assigned register :
                                    1- 1282     ;   STK00
                                    1- 1283     ;; Starting pCode block
                                    1- 1284     .segment "code"; module=main, function=_initAD
     0000                           1- 1286     _initAD:
                                    1- 1287     ; 2 exit points
                                    1- 1288     	.line	169, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1- 1289     	MOVIA	0x84
     0001 00rr                      1- 1290     	MOVAR	_ADMD
                                    1- 1291     	.line	174, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1292     	CLRR	_ADVREFH
                                    1- 1293     	.line	179, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1294     	MOVIA	0x10
     0004 00rr                      1- 1295     	MOVAR	_ADR
                                    1- 1296     	.line	181, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1297     	MOVIA	0x03
     0006 00rr                      1- 1298     	MOVAR	_ADCR
                                    1- 1299     	.line	184, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1300     	BSR	_ADMDbits,4
                                    1- 1301     	.line	185, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1302     	MOVIA	0x64
     0009 00rr                      1- 1303     	MOVAR	STK00
     000A 2100                      1- 1304     	MOVIA	0x00
     000B 2rrr                      1- 1305     	LCALL	_delay
                                    1- 1306     	.line	188, "main.c"; 	}
                                    1- 1307     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1308     ; exit point of _initAD
                                    1- 1310     ;***
                                    1- 1311     ;  pBlock Stats: dbName = C
                                    1- 1312     ;***
                                    1- 1313     ;has an exit
                                    1- 1314     ;3 compiler assigned registers:
                                    1- 1315     ;   r0x1032
                                    1- 1316     ;   STK00
                                    1- 1317     ;   r0x1033
                                    1- 1318     ;; Starting pCode block
                                    1- 1319     .segment "code"; module=main, function=_setPWMduty
                                    1- 1321     ;local variable name mapping:
     0000                           1- 1324     _setPWMduty:
                                    1- 1325     ; 2 exit points
                                    1- 1326     	.line	148, "main.c"; 	void setPWMduty(char portPin,char duty)
                                    1- 1327     	BANKSEL	r0x1032
     0000 00rr                      1- 1328     	MOVAR	r0x1032
     0001 01rr                      1- 1329     	MOVR	STK00,W
                                    1- 1330     	BANKSEL	r0x1033
     0002 00rr                      1- 1331     	MOVAR	r0x1033
                                    1- 1332     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1- 1333     	.line	150, "main.c"; 	if(ledCount >= 100)
     0003 2164                      1- 1334     	MOVIA	0x64
                                    1- 1335     	BANKSEL	_ledCount
     0004 04rr                      1- 1336     	SUBAR	_ledCount,W
     0005 0803                      1- 1337     	BTRSS	STATUS,0
     0006 3rrr                      1- 1338     	LGOTO	_00178_DS_
                                    1- 1339     	.line	152, "main.c"; 	ledCount = 0;
     0007 02rr                      1- 1340     	CLRR	_ledCount
                                    1- 1341     	.line	153, "main.c"; 	if(++second >= 60)
                                    1- 1342     	BANKSEL	_second
     0008 05rr                      1- 1343     	INCR	_second,F
                                    1- 1344     ;;unsigned compare: left < lit (0x3C=60), size=1
     0009 213C                      1- 1345     	MOVIA	0x3c
     000A 04rr                      1- 1346     	SUBAR	_second,W
     000B 0803                      1- 1347     	BTRSS	STATUS,0
     000C 3rrr                      1- 1348     	LGOTO	_00178_DS_
                                    1- 1349     	.line	155, "main.c"; 	second = 0;
     000D 02rr                      1- 1350     	CLRR	_second
                                    1- 1351     	.line	156, "main.c"; 	if(--min == 0)
                                    1- 1352     	BANKSEL	_min
     000E 17rr                      1- 1353     	DECRSZ	_min,F
     000F 3rrr                      1- 1354     	LGOTO	_00178_DS_
                                    1- 1355     	.line	157, "main.c"; 	workStep = 0;
                                    1- 1356     	BANKSEL	_workStep
     0010 02rr                      1- 1357     	CLRR	_workStep
     0011                           1- 1358     _00178_DS_:
                                    1- 1359     	.line	160, "main.c"; 	if(ledCount < duty)
                                    1- 1360     	BANKSEL	r0x1033
     0011 01rr                      1- 1361     	MOVR	r0x1033,W
                                    1- 1362     	BANKSEL	_ledCount
     0012 04rr                      1- 1363     	SUBAR	_ledCount,W
     0013 0C03                      1- 1364     	BTRSC	STATUS,0
     0014 3rrr                      1- 1365     	LGOTO	_00180_DS_
                                    1- 1366     	.line	161, "main.c"; 	PORTB |= portPin;
                                    1- 1367     	BANKSEL	r0x1032
     0015 01rr                      1- 1368     	MOVR	r0x1032,W
     0016 11rr                      1- 1369     	IORAR	_PORTB,F
     0017 3rrr                      1- 1370     	LGOTO	_00182_DS_
     0018                           1- 1371     _00180_DS_:
                                    1- 1372     	.line	163, "main.c"; 	PORTB &= (~portPin);
                                    1- 1373     	BANKSEL	r0x1032
     0018 07rr                      1- 1374     	COMR	r0x1032,W
     0019 00rr                      1- 1375     	MOVAR	r0x1032
     001A 10rr                      1- 1376     	ANDAR	_PORTB,F
     001B                           1- 1377     _00182_DS_:
                                    1- 1378     	.line	164, "main.c"; 	}
                                    1- 1379     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1- 1380     ; exit point of _setPWMduty
                                    1- 1382     ;***
                                    1- 1383     ;  pBlock Stats: dbName = C
                                    1- 1384     ;***
                                    1- 1385     ;has an exit
                                    1- 1386     ;functions called:
                                    1- 1387     ;   _MIN
                                    1- 1388     ;   _HIGHT
                                    1- 1389     ;   _MEDIUM
                                    1- 1390     ;   _LOW
                                    1- 1391     ;   __gptrget1
                                    1- 1392     ;   _showNubShiwei
                                    1- 1393     ;   __gptrget1
                                    1- 1394     ;   _showNubGewei
                                    1- 1395     ;   _MIN
                                    1- 1396     ;   _HIGHT
                                    1- 1397     ;   _MEDIUM
                                    1- 1398     ;   _LOW
                                    1- 1399     ;   __gptrget1
                                    1- 1400     ;   _showNubShiwei
                                    1- 1401     ;   __gptrget1
                                    1- 1402     ;   _showNubGewei
                                    1- 1403     ;5 compiler assigned registers:
                                    1- 1404     ;   r0x1034
                                    1- 1405     ;   r0x1035
                                    1- 1406     ;   STK01
                                    1- 1407     ;   STK00
                                    1- 1408     ;   r0x1036
                                    1- 1409     ;; Starting pCode block
                                    1- 1410     .segment "code"; module=main, function=_refreshNub
     0000                           1- 1412     _refreshNub:
                                    1- 1413     ; 2 exit points
                                    1- 1414     	.line	122, "main.c"; 	if(tempshiweiNum != shiweiNum || tempgeweiNum != geweiNum )
                                    1- 1415     	BANKSEL	_shiweiNum
     0000 01rr                      1- 1416     	MOVR	_shiweiNum,W
                                    1- 1417     	BANKSEL	_tempshiweiNum
     0001 12rr                      1- 1418     	XORAR	_tempshiweiNum,W
     0002 0903                      1- 1419     	BTRSS	STATUS,2
     0003 3rrr                      1- 1420     	LGOTO	_00134_DS_
                                    1- 1421     	BANKSEL	_geweiNum
     0004 01rr                      1- 1422     	MOVR	_geweiNum,W
                                    1- 1423     	BANKSEL	_tempgeweiNum
     0005 12rr                      1- 1424     	XORAR	_tempgeweiNum,W
     0006 0D03                      1- 1425     	BTRSC	STATUS,2
     0007 3rrr                      1- 1426     	LGOTO	_00135_DS_
     0008                           1- 1427     _00134_DS_:
                                    1- 1428     	.line	124, "main.c"; 	if(++refreshCount >= 200)
                                    1- 1429     	BANKSEL	_refreshCount
     0008 05rr                      1- 1430     	INCR	_refreshCount,F
     0009 21C8                      1- 1431     	MOVIA	0xc8
     000A 04rr                      1- 1432     	SUBAR	_refreshCount,W
     000B 0803                      1- 1433     	BTRSS	STATUS,0
     000C 3rrr                      1- 1434     	LGOTO	_00136_DS_
                                    1- 1435     	.line	126, "main.c"; 	refreshCount = 0;
     000D 02rr                      1- 1436     	CLRR	_refreshCount
                                    1- 1437     	.line	127, "main.c"; 	tempshiweiNum = shiweiNum;
                                    1- 1438     	BANKSEL	_shiweiNum
     000E 01rr                      1- 1439     	MOVR	_shiweiNum,W
                                    1- 1440     	BANKSEL	_tempshiweiNum
     000F 00rr                      1- 1441     	MOVAR	_tempshiweiNum
                                    1- 1442     	.line	128, "main.c"; 	tempgeweiNum = geweiNum;
                                    1- 1443     	BANKSEL	_geweiNum
     0010 01rr                      1- 1444     	MOVR	_geweiNum,W
                                    1- 1445     	BANKSEL	_tempgeweiNum
     0011 00rr                      1- 1446     	MOVAR	_tempgeweiNum
     0012 3rrr                      1- 1447     	LGOTO	_00136_DS_
     0013                           1- 1448     _00135_DS_:
                                    1- 1449     	.line	133, "main.c"; 	refreshCount = 0;
                                    1- 1450     	BANKSEL	_refreshCount
     0013 02rr                      1- 1451     	CLRR	_refreshCount
     0014                           1- 1452     _00136_DS_:
                                    1- 1453     	.line	135, "main.c"; 	MIN();
     0014 2rrr                      1- 1454     	LCALL	_MIN
                                    1- 1455     	.line	136, "main.c"; 	if(workStep == 1)
                                    1- 1456     	BANKSEL	_workStep
     0015 01rr                      1- 1457     	MOVR	_workStep,W
     0016 2401                      1- 1458     	XORIA	0x01
     0017 0903                      1- 1459     	BTRSS	STATUS,2
     0018 3rrr                      1- 1460     	LGOTO	_00144_DS_
                                    1- 1461     	.line	137, "main.c"; 	HIGHT();
     0019 2rrr                      1- 1462     	LCALL	_HIGHT
     001A 3rrr                      1- 1463     	LGOTO	_00145_DS_
     001B                           1- 1464     _00144_DS_:
                                    1- 1465     	.line	138, "main.c"; 	else if(workStep == 2)
                                    1- 1466     	BANKSEL	_workStep
     001B 01rr                      1- 1467     	MOVR	_workStep,W
     001C 2402                      1- 1468     	XORIA	0x02
     001D 0903                      1- 1469     	BTRSS	STATUS,2
     001E 3rrr                      1- 1470     	LGOTO	_00141_DS_
                                    1- 1471     	.line	139, "main.c"; 	MEDIUM();
     001F 2rrr                      1- 1472     	LCALL	_MEDIUM
     0020 3rrr                      1- 1473     	LGOTO	_00145_DS_
     0021                           1- 1474     _00141_DS_:
                                    1- 1475     	.line	140, "main.c"; 	else if(workStep == 3)
                                    1- 1476     	BANKSEL	_workStep
     0021 01rr                      1- 1477     	MOVR	_workStep,W
     0022 2403                      1- 1478     	XORIA	0x03
     0023 0D03                      1- 1479     	BTRSC	STATUS,2
                                    1- 1480     	.line	141, "main.c"; 	LOW();
     0024 2rrr                      1- 1481     	LCALL	_LOW
     0025                           1- 1482     _00145_DS_:
                                    1- 1483     	.line	142, "main.c"; 	if(tempshiweiNum)
                                    1- 1484     	BANKSEL	_tempshiweiNum
     0025 01rr                      1- 1485     	MOVR	_tempshiweiNum,W
     0026 0D03                      1- 1486     	BTRSC	STATUS,2
     0027 3rrr                      1- 1487     	LGOTO	_00147_DS_
                                    1- 1488     	.line	143, "main.c"; 	showNubShiwei(numArray[tempshiweiNum]);
     0028 01rr                      1- 1489     	MOVR	_tempshiweiNum,W
     0029 25rr                      1- 1490     	ADDIA	(_numArray + 0)
                                    1- 1491     	BANKSEL	r0x1034
     002A 00rr                      1- 1492     	MOVAR	r0x1034
     002B 21rr                      1- 1493     	MOVIA	((_numArray + 0) >> 8) & 0xff
     002C 0C03                      1- 1494     	BTRSC	STATUS,0
     002D 2501                      1- 1495     	ADDIA	0x01
                                    1- 1496     	BANKSEL	r0x1035
     002E 00rr                      1- 1497     	MOVAR	r0x1035
                                    1- 1498     	BANKSEL	r0x1034
     002F 01rr                      1- 1499     	MOVR	r0x1034,W
     0030 00rr                      1- 1500     	MOVAR	STK01
                                    1- 1501     	BANKSEL	r0x1035
     0031 01rr                      1- 1502     	MOVR	r0x1035,W
     0032 00rr                      1- 1503     	MOVAR	STK00
     0033 2100                      1- 1504     	MOVIA	0x00
     0034 2rrr                      1- 1505     	LCALL	__gptrget1
                                    1- 1506     	BANKSEL	r0x1036
     0035 00rr                      1- 1507     	MOVAR	r0x1036
     0036 2rrr                      1- 1508     	LCALL	_showNubShiwei
     0037                           1- 1509     _00147_DS_:
                                    1- 1510     	.line	144, "main.c"; 	showNubGewei(numArray[tempgeweiNum]);
                                    1- 1511     	BANKSEL	_tempgeweiNum
     0037 01rr                      1- 1512     	MOVR	_tempgeweiNum,W
     0038 25rr                      1- 1513     	ADDIA	(_numArray + 0)
                                    1- 1514     	BANKSEL	r0x1034
     0039 00rr                      1- 1515     	MOVAR	r0x1034
     003A 21rr                      1- 1516     	MOVIA	((_numArray + 0) >> 8) & 0xff
     003B 0C03                      1- 1517     	BTRSC	STATUS,0
     003C 2501                      1- 1518     	ADDIA	0x01
                                    1- 1519     	BANKSEL	r0x1035
     003D 00rr                      1- 1520     	MOVAR	r0x1035
                                    1- 1521     	BANKSEL	r0x1034
     003E 01rr                      1- 1522     	MOVR	r0x1034,W
     003F 00rr                      1- 1523     	MOVAR	STK01
                                    1- 1524     	BANKSEL	r0x1035
     0040 01rr                      1- 1525     	MOVR	r0x1035,W
     0041 00rr                      1- 1526     	MOVAR	STK00
     0042 2100                      1- 1527     	MOVIA	0x00
     0043 2rrr                      1- 1528     	LCALL	__gptrget1
                                    1- 1529     	BANKSEL	r0x1036
     0044 00rr                      1- 1530     	MOVAR	r0x1036
     0045 2rrr                      1- 1531     	LCALL	_showNubGewei
                                    1- 1532     	.line	145, "main.c"; 	}
                                    1- 1533     	RETURN	
     0046 0010                      3-   26 m1      ret
                                    1- 1534     ; exit point of _refreshNub
                                    1- 1537     ;	code size estimation:
                                    1- 1538     ;	  499+  131 =   630 instructions ( 1522 byte)
                                    1- 1540     	end
                                    1- 1540     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__divuchar              Label    00000000
__gptrget1              Label    00000000
__moduchar              Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810613
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    00000011
_00002_DS_              Label    00000021
_00003_DS_              Label    0000001B
_00110_DS_              Label    00000022
_00112_DS_              Label    00000025
_00114_DS_              Label    00000029
_00127_DS_              Label    0000001B
_00134_DS_              Label    00000008
_00135_DS_              Label    00000013
_00136_DS_              Label    00000014
_00141_DS_              Label    00000021
_00144_DS_              Label    0000001B
_00145_DS_              Label    00000025
_00147_DS_              Label    00000037
_00178_DS_              Label    00000011
_00180_DS_              Label    00000018
_00182_DS_              Label    0000001B
_00194_DS_              Label    00000034
_00196_DS_              Label    00000035
_00204_DS_              Label    0000002A
_00211_DS_              Label    0000000C
_00213_DS_              Label    00000023
_00218_DS_              Label    00000000
_00225_DS_              Label    00000005
_00227_DS_              Label    00000012
_00236_DS_              Label    0000000B
_00252_DS_              Label    0000001A
_00253_DS_              Label    00000021
_00255_DS_              Label    00000012
_00256_DS_              Label    00000022
_00257_DS_              Label    00000023
_00265_DS_              Label    00000013
_00267_DS_              Label    0000000C
_00268_DS_              Label    00000014
_00269_DS_              Label    00000015
_00275_DS_              Label    00000011
_00279_DS_              Label    0000001F
_00282_DS_              Label    00000018
_00287_DS_              Label    00000026
_00288_DS_              Label    0000002C
_00290_DS_              Label    0000003D
_00294_DS_              Label    0000004B
_00297_DS_              Label    00000044
_00301_DS_              Label    00000051
_A2                     Label    00000000
_A3                     Label    00000000
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_B1                     Label    00000000
_B2                     Label    00000000
_B3                     Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_C1                     Label    00000000
_C2                     Label    00000000
_C3                     Label    00000000
_checkMaxAD             Label    00000000
_D2                     Label    00000000
_D3                     Label    00000000
_delay                  Label    00000000
_delayms                Label    00000000
_duty                   Label    00000000
_E2                     Label    00000000
_E3                     Label    00000000
_F_AIN5_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_F2                     Label    00000000
_F3                     Label    00000000
_FSR                    Label    00000000
_G2                     Label    00000000
_G3                     Label    00000000
_geweiNum               Label    00000000
_gotoSleep              Label    00000000
_HIGHT                  Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyCount2              Label    00000000
_keyRead                Label    00000000
_keyRead2               Label    00000000
_ledCount               Label    00000000
_longPressFlag          Label    00000000
_LOW                    Label    00000000
_main                   Label    00000000
_MEDIUM                 Label    00000000
_min                    Label    00000000
_MIN                    Label    00000000
_numArray               Label    00000000
_OSCCR                  Label    00000000
_overLoadTime           Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN5_DATA            Label    00000000
_R_AIN5_DATA_LB         Label    00000000
_refreshCount           Label    00000000
_refreshNub             Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_second                 Label    00000000
_setHightOutput         Label    00000000
_setInput               Label    00000000
_setlowOutput           Label    00000000
_setOutput              Label    00000000
_setPWMduty             Label    00000000
_shiweiNum              Label    00000000
_showBaiwei             Label    00000000
_showNub                Label    00000000
_showNubGewei           Label    00000000
_showNubGewei2          Label    00000000
_showNubShiwei          Label    00000000
_showNubShiwei2         Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_tempgeweiNum           Label    00000000
_tempshiweiNum          Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workStep               Label    00000000
_workStep2              Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    00000037
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1027                 Label    00000000
r0x1028                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102D                 Label    00000000
r0x1030                 Label    00000000
r0x1031                 Label    00000000
r0x1032                 Label    00000000
r0x1033                 Label    00000000
r0x1034                 Label    00000000
r0x1035                 Label    00000000
r0x1036                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b061d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B061D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000005FF
DATA ROM     = 0x00000000 - 0x000005FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
