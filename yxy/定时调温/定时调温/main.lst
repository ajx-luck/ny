
                    Nyquest Technology Co., Ltd.

NYASM 2.26

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_showNub
                                    1-   15     	extern	_setHightOutput
                                    1-   16     	extern	_setlowOutput
                                    1-   17     	extern	_setOutput
                                    1-   18     	extern	_setInput
                                    1-   19     	extern	_showNubGewei
                                    1-   20     	extern	_showNubGewei2
                                    1-   21     	extern	_showNubShiwei
                                    1-   22     	extern	_showNubShiwei2
                                    1-   23     	extern	_showBaiwei
                                    1-   24     	extern	_B1
                                    1-   25     	extern	_C1
                                    1-   26     	extern	_A2
                                    1-   27     	extern	_B2
                                    1-   28     	extern	_C2
                                    1-   29     	extern	_D2
                                    1-   30     	extern	_E2
                                    1-   31     	extern	_F2
                                    1-   32     	extern	_G2
                                    1-   33     	extern	_A3
                                    1-   34     	extern	_B3
                                    1-   35     	extern	_C3
                                    1-   36     	extern	_D3
                                    1-   37     	extern	_E3
                                    1-   38     	extern	_F3
                                    1-   39     	extern	_G3
                                    1-   40     	extern	_HIGHT
                                    1-   41     	extern	_MEDIUM
                                    1-   42     	extern	_LOW
                                    1-   43     	extern	_MIN
                                    1-   44     	extern	_delayms
                                    1-   45     	extern	__divuchar
                                    1-   46     	extern	__moduchar
                                    1-   47     	extern	_PORTAbits
                                    1-   48     	extern	_PORTBbits
                                    1-   49     	extern	_PCONbits
                                    1-   50     	extern	_BWUCONbits
                                    1-   51     	extern	_ABPLCONbits
                                    1-   52     	extern	_BPHCONbits
                                    1-   53     	extern	_INTEbits
                                    1-   54     	extern	_INTFbits
                                    1-   55     	extern	_ADMDbits
                                    1-   56     	extern	_ADRbits
                                    1-   57     	extern	_ADVREFHbits
                                    1-   58     	extern	_ADCRbits
                                    1-   59     	extern	_AWUCONbits
                                    1-   60     	extern	_PACONbits
                                    1-   61     	extern	_INTEDGbits
                                    1-   62     	extern	_ANAENbits
                                    1-   63     	extern	_RFCbits
                                    1-   64     	extern	_INTE2bits
                                    1-   65     	extern	_INDF
                                    1-   66     	extern	_TMR0
                                    1-   67     	extern	_PCL
                                    1-   68     	extern	_STATUS
                                    1-   69     	extern	_FSR
                                    1-   70     	extern	_PORTA
                                    1-   71     	extern	_PORTB
                                    1-   72     	extern	_PCON
                                    1-   73     	extern	_BWUCON
                                    1-   74     	extern	_PCHBUF
                                    1-   75     	extern	_ABPLCON
                                    1-   76     	extern	_BPHCON
                                    1-   77     	extern	_INTE
                                    1-   78     	extern	_INTF
                                    1-   79     	extern	_ADMD
                                    1-   80     	extern	_ADR
                                    1-   81     	extern	_ADD
                                    1-   82     	extern	_ADVREFH
                                    1-   83     	extern	_ADCR
                                    1-   84     	extern	_AWUCON
                                    1-   85     	extern	_PACON
                                    1-   86     	extern	_INTEDG
                                    1-   87     	extern	_TMRH
                                    1-   88     	extern	_ANAEN
                                    1-   89     	extern	_RFC
                                    1-   90     	extern	_TM3RH
                                    1-   91     	extern	_INTE2
                                    1-   92     	extern	_TMR1
                                    1-   93     	extern	_T1CR1
                                    1-   94     	extern	_T1CR2
                                    1-   95     	extern	_PWM1DUTY
                                    1-   96     	extern	_PS1CV
                                    1-   97     	extern	_BZ1CR
                                    1-   98     	extern	_IRCR
                                    1-   99     	extern	_TBHP
                                    1-  100     	extern	_TBHD
                                    1-  101     	extern	_TMR2
                                    1-  102     	extern	_T2CR1
                                    1-  103     	extern	_T2CR2
                                    1-  104     	extern	_PWM2DUTY
                                    1-  105     	extern	_PS2CV
                                    1-  106     	extern	_BZ2CR
                                    1-  107     	extern	_OSCCR
                                    1-  108     	extern	_TMR3
                                    1-  109     	extern	_T3CR1
                                    1-  110     	extern	_T3CR2
                                    1-  111     	extern	_PWM3DUTY
                                    1-  112     	extern	_PS3CV
                                    1-  113     	extern	_BZ3CR
                                    1-  114     	extern	_IOSTA
                                    1-  115     	extern	_IOSTB
                                    1-  116     	extern	_APHCON
                                    1-  117     	extern	_PS0CV
                                    1-  118     	extern	_BODCON
                                    1-  119     	extern	_CMPCR
                                    1-  120     	extern	_PCON1
                                    1-  121     	extern	_T0MD
                                    1-  122     	extern	___sdcc_saved_fsr
                                    1-  123     	extern	___sdcc_saved_stk00
                                    1-  124     	extern	___sdcc_saved_stk01
                                    1-  125     	extern	__gptrget1
                                    1-  126     	extern	__nyc_ny8_startup
                                    1-  127     ;--------------------------------------------------------
                                    1-  128     ; global declarations
                                    1-  129     ;--------------------------------------------------------
                                    1-  130     	extern	_keyCon
                                    1-  131     	extern	_keyRead2
                                    1-  132     	extern	_keyRead
                                    1-  133     	extern	_gotoSleep
                                    1-  134     	extern	_delay
                                    1-  135     	extern	_F_wait_eoc
                                    1-  136     	extern	_F_AIN5_Convert
                                    1-  137     	extern	_checkMaxAD
                                    1-  138     	extern	_initAD
                                    1-  139     	extern	_setPWMduty
                                    1-  140     	extern	_refreshNub
                                    1-  141     	extern	_isr
                                    1-  142     	extern	_main
                                    1-  143     	extern	_intCount
                                    1-  144     	extern	_IntFlag
                                    1-  145     	extern	_numArray
                                    1-  146     	extern	_tempshiweiNum
                                    1-  147     	extern	_tempgeweiNum
                                    1-  148     	extern	_refreshCount
                                    1-  149     	extern	_shiweiNum
                                    1-  150     	extern	_geweiNum
                                    1-  151     	extern	_overLoadTime
                                    1-  152     	extern	_workStep
                                    1-  153     	extern	_workStep2
                                    1-  154     	extern	_duty
                                    1-  155     	extern	_ledCount
                                    1-  156     	extern	_min
                                    1-  157     	extern	_second
                                    1-  158     	extern	_longPressFlag
                                    1-  159     	extern	_keyCount
                                    1-  160     	extern	_keyCount2
                                    1-  161     	extern	_keyClick
                                    1-  162     	extern	_R_AIN5_DATA
                                    1-  163     	extern	_R_AIN5_DATA_LB
                                    1-  165     	extern PSAVE
                                    1-  166     	extern SSAVE
                                    1-  167     	extern WSAVE
                                    1-  168     	extern STK02
                                    1-  169     	extern STK01
                                    1-  170     	extern STK00
                                    1-  172     .segment "uninit", 0x20000040
 20000040                           1-  173     PSAVE:
                                    1-  174     	.res 1
 20000041                           1-  175     SSAVE:
                                    1-  176     	.res 1
 20000042                           1-  177     WSAVE:
                                    1-  178     	.res 1
 20000043                           1-  179     STK02:
                                    1-  180     	.res 1
 20000044                           1-  181     STK01:
                                    1-  182     	.res 1
 20000045                           1-  183     STK00:
                                    1-  184     	.res 1
                                    1-  186     ;--------------------------------------------------------
                                    1-  187     ; global definitions
                                    1-  188     ;--------------------------------------------------------
                                    1-  189     .segment "uninit"
     0000                           1-  190     _R_AIN5_DATA:
                                    1-  191     	.res	2
                                    1-  194     .segment "uninit"
     0000                           1-  195     _R_AIN5_DATA_LB:
                                    1-  196     	.res	1
                                    1-  199     ;--------------------------------------------------------
                                    1-  200     ; absolute symbol definitions
                                    1-  201     ;--------------------------------------------------------
                                    1-  202     ;--------------------------------------------------------
                                    1-  203     ; compiler-defined variables
                                    1-  204     ;--------------------------------------------------------
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x1034:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x1035:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x1036:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x1032:
                                    1-  216     	.res	1
                                    1-  217     .segment "uninit"
     0000                           1-  218     r0x1033:
                                    1-  219     	.res	1
                                    1-  220     .segment "uninit"
     0000                           1-  221     r0x1030:
                                    1-  222     	.res	1
                                    1-  223     .segment "uninit"
     0000                           1-  224     r0x1031:
                                    1-  225     	.res	1
                                    1-  226     .segment "uninit"
     0000                           1-  227     r0x1028:
                                    1-  228     	.res	1
                                    1-  229     .segment "uninit"
     0000                           1-  230     r0x1029:
                                    1-  231     	.res	1
                                    1-  232     .segment "uninit"
     0000                           1-  233     r0x102A:
                                    1-  234     	.res	1
                                    1-  235     .segment "uninit"
     0000                           1-  236     r0x102D:
                                    1-  237     	.res	1
                                    1-  238     .segment "uninit"
     0000                           1-  239     r0x1025:
                                    1-  240     	.res	1
                                    1-  241     .segment "uninit"
     0000                           1-  242     r0x1024:
                                    1-  243     	.res	1
                                    1-  244     .segment "uninit"
     0000                           1-  245     r0x1026:
                                    1-  246     	.res	1
                                    1-  247     .segment "uninit"
     0000                           1-  248     r0x1027:
                                    1-  249     	.res	1
                                    1-  250     .segment "uninit"
     0000                           1-  251     r0x1022:
                                    1-  252     	.res	1
                                    1-  253     .segment "uninit"
     0000                           1-  254     r0x1023:
                                    1-  255     	.res	1
                                    1-  256     ;--------------------------------------------------------
                                    1-  257     ; initialized data
                                    1-  258     ;--------------------------------------------------------
                                    1-  260     .segment "idata"
     0000                           1-  261     _intCount:
     0000 0000                      1-  262     	dw	0x00
                                    1-  266     .segment "idata"
     0000                           1-  267     _IntFlag:
     0000 0000                      1-  268     	dw	0x00
                                    1-  272     .segment "idata"
     0000                           1-  273     _numArray:
     0000 003F                      1-  274     	dw	0x3f
     0001 0006                      1-  275     	dw	0x06
     0002 005B                      1-  276     	dw	0x5b
     0003 004F                      1-  277     	dw	0x4f
     0004 0066                      1-  278     	dw	0x66
     0005 006D                      1-  279     	dw	0x6d
     0006 007D                      1-  280     	dw	0x7d
     0007 0007                      1-  281     	dw	0x07
     0008 007F                      1-  282     	dw	0x7f
     0009 0067                      1-  283     	dw	0x67
                                    1-  287     .segment "idata"
     0000                           1-  288     _tempshiweiNum:
     0000 0000                      1-  289     	dw	0x00
                                    1-  293     .segment "idata"
     0000                           1-  294     _tempgeweiNum:
     0000 0000                      1-  295     	dw	0x00
                                    1-  299     .segment "idata"
     0000                           1-  300     _refreshCount:
     0000 0000                      1-  301     	dw	0x00
                                    1-  305     .segment "idata"
     0000                           1-  306     _shiweiNum:
     0000 0000                      1-  307     	dw	0x00
                                    1-  311     .segment "idata"
     0000                           1-  312     _geweiNum:
     0000 0000                      1-  313     	dw	0x00
                                    1-  317     .segment "idata"
     0000                           1-  318     _overLoadTime:
     0000 0000                      1-  319     	dw	0x00
                                    1-  323     .segment "idata"
     0000                           1-  324     _workStep:
     0000 0000                      1-  325     	dw	0x00
                                    1-  329     .segment "idata"
     0000                           1-  330     _workStep2:
     0000 0000                      1-  331     	dw	0x00
                                    1-  335     .segment "idata"
     0000                           1-  336     _duty:
     0000 0000                      1-  337     	dw	0x00
                                    1-  341     .segment "idata"
     0000                           1-  342     _ledCount:
     0000 0000                      1-  343     	dw	0x00
                                    1-  347     .segment "idata"
     0000                           1-  348     _min:
     0000 0000                      1-  349     	dw	0x00
                                    1-  353     .segment "idata"
     0000                           1-  354     _second:
     0000 0000                      1-  355     	dw	0x00
                                    1-  359     .segment "idata"
     0000                           1-  360     _longPressFlag:
     0000 0000                      1-  361     	dw	0x00
                                    1-  365     .segment "idata"
     0000                           1-  366     _keyCount:
     0000 0000                      1-  367     	dw	0x00
                                    1-  371     .segment "idata"
     0000                           1-  372     _keyCount2:
     0000 0000                      1-  373     	dw	0x00
                                    1-  377     .segment "idata"
     0000                           1-  378     _keyClick:
     0000 0000                      1-  379     	dw	0x00
                                    1-  382     ;--------------------------------------------------------
                                    1-  383     ; overlayable items in internal ram 
                                    1-  384     ;--------------------------------------------------------
                                    1-  385     ;	udata_ovr
                                    1-  386     ;--------------------------------------------------------
                                    1-  387     ; reset vector 
                                    1-  388     ;--------------------------------------------------------
                                    1-  389     ORG	0x0000
     0000 3rrr                      1-  390     	LGOTO	__nyc_ny8_startup
                                    1-  391     ;--------------------------------------------------------
                                    1-  392     ; interrupt and initialization code
                                    1-  393     ;--------------------------------------------------------
                                    1-  394     ORG 0x0008
     0008 3rrr                      1-  395     	lgoto	__sdcc_interrupt
                                    1-  397     .segment "code"
     0000                           1-  398     __sdcc_interrupt:
                                    1-  399     ;***
                                    1-  400     ;  pBlock Stats: dbName = I
                                    1-  401     ;***
                                    1-  402     ;functions called:
                                    1-  403     ;   _setPWMduty
                                    1-  404     ;   _setPWMduty
                                    1-  405     ;2 compiler assigned registers:
                                    1-  406     ;   STK00
                                    1-  407     ;   STK01
                                    1-  408     ;; Starting pCode block
     0000                           1-  409     _isr:
                                    1-  410     ; 0 exit points
                                    1-  411     	.line	45, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  412     	MOVAR	WSAVE
     0001 1503                      1-  413     	SWAPR	STATUS,W
     0002 0283                      1-  414     	CLRR	STATUS
     0003 00rr                      1-  415     	MOVAR	SSAVE
     0004 010A                      1-  416     	MOVR	PCHBUF,W
     0005 028A                      1-  417     	CLRR	PCHBUF
     0006 00rr                      1-  418     	MOVAR	PSAVE
     0007 0104                      1-  419     	MOVR	FSR,W
                                    1-  420     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  421     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  422     	MOVR	STK00,W
                                    1-  423     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  424     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  425     	MOVR	STK01,W
                                    1-  426     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  427     	MOVAR	___sdcc_saved_stk01
                                    1-  428     	.line	47, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  429     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  430     	LGOTO	_00110_DS_
                                    1-  431     	.line	49, "main.c"; 	TMR0 += 58;
     0012 213A                      1-  432     	MOVIA	0x3a
     0013 03rr                      1-  433     	ADDAR	_TMR0,F
                                    1-  434     	.line	50, "main.c"; 	INTF = 0;
     0014 02rr                      1-  435     	CLRR	_INTF
                                    1-  436     	.line	51, "main.c"; 	if(++intCount >= 100)
                                    1-  437     	BANKSEL	_intCount
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1-  438     	INCR	_intCount,F
                                    1-  439     ;;unsigned compare: left < lit (0x64=100), size=1
     0017 2164                      1-  440     	MOVIA	0x64
     0018 04rr                      1-  441     	SUBAR	_intCount,W
     0019 0803                      1-  442     	BTRSS	STATUS,0
     001A 3rrr                      1-  443     	LGOTO	_00110_DS_
                                    1-  444     	.line	53, "main.c"; 	intCount = 0;
     001B 02rr                      1-  445     	CLRR	_intCount
                                    1-  446     	.line	54, "main.c"; 	IntFlag = 1;
     001C 2101                      1-  447     	MOVIA	0x01
                                    1-  448     	BANKSEL	_IntFlag
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1-  449     	MOVAR	_IntFlag
                                    1-  450     	.line	55, "main.c"; 	ledCount++;
                                    1-  451     	BANKSEL	_ledCount
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 05rr                      1-  452     	INCR	_ledCount,F
                                    1-  453     	.line	56, "main.c"; 	if(workStep)
                                    1-  454     	BANKSEL	_workStep
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 01rr                      1-  455     	MOVR	_workStep,W
     0023 0D03                      1-  456     	BTRSC	STATUS,2
     0024 3rrr                      1-  457     	LGOTO	_00110_DS_
                                    1-  458     	.line	57, "main.c"; 	setPWMduty(0x08,duty);
                                    1-  459     	BANKSEL	_duty
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1-  460     	MOVR	_duty,W
     0027 00rr                      1-  461     	MOVAR	STK00
     0028 2108                      1-  462     	MOVIA	0x08
     0029 2rrr                      1-  463     	LCALL	_setPWMduty
     002A                           1-  464     _00110_DS_:
                                    1-  465     	.line	60, "main.c"; 	if(INTFbits.T0IF)
     002A 08rr                      1-  466     	BTRSS	_INTFbits,0
     002B 3rrr                      1-  467     	LGOTO	_00112_DS_
                                    1-  468     	.line	62, "main.c"; 	INTF = 0;
     002C 02rr                      1-  469     	CLRR	_INTF
     002D                           1-  470     _00112_DS_:
                                    1-  471     	.line	65, "main.c"; 	if(INTFbits.PABIF)
     002D 08rr                      1-  472     	BTRSS	_INTFbits,1
     002E 3rrr                      1-  473     	LGOTO	_00114_DS_
                                    1-  474     	.line	67, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     002F 21FD                      1-  475     	MOVIA	0xfd
     0030 00rr                      1-  476     	MOVAR	_INTF
     0031                           1-  477     _00114_DS_:
                                    1-  478     	.line	70, "main.c"; 	INTF = 0;
     0031 02rr                      1-  479     	CLRR	_INTF
                                    1-  480     	.line	72, "main.c"; 	}
                                    1-  481     	BANKSEL	___sdcc_saved_stk01
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1-  482     	MOVR	___sdcc_saved_stk01,W
     0034 00rr                      1-  483     	MOVAR	STK01
                                    1-  484     	BANKSEL	___sdcc_saved_stk00
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 01rr                      1-  485     	MOVR	___sdcc_saved_stk00,W
     0037 00rr                      1-  486     	MOVAR	STK00
                                    1-  487     	BANKSEL	___sdcc_saved_fsr
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 01rr                      1-  488     	MOVR	___sdcc_saved_fsr,W
     003A 0084                      1-  489     	MOVAR	FSR
     003B 01rr                      1-  490     	MOVR	PSAVE,W
     003C 008A                      1-  491     	MOVAR	PCHBUF
     003D 0283                      1-  492     	CLRR	STATUS
     003E 15rr                      1-  493     	SWAPR	SSAVE,W
     003F 0083                      1-  494     	MOVAR	STATUS
     0040 15rr                      1-  495     	SWAPR	WSAVE,F
     0041 15rr                      1-  496     	SWAPR	WSAVE,W
     0042                           1-  497     END_OF_INTERRUPT:
     0042 0011                      1-  498     	RETIE	
                                    1-  500     ;--------------------------------------------------------
                                    1-  501     ; code
                                    1-  502     ;--------------------------------------------------------
                                    1-  503     ;***
                                    1-  504     ;  pBlock Stats: dbName = M
                                    1-  505     ;***
                                    1-  506     ;has an exit
                                    1-  507     ;functions called:
                                    1-  508     ;   _initAD
                                    1-  509     ;   _refreshNub
                                    1-  510     ;   _checkMaxAD
                                    1-  511     ;   _keyCon
                                    1-  512     ;   __divuchar
                                    1-  513     ;   __moduchar
                                    1-  514     ;   _gotoSleep
                                    1-  515     ;   _initAD
                                    1-  516     ;   _refreshNub
                                    1-  517     ;   _checkMaxAD
                                    1-  518     ;   _keyCon
                                    1-  519     ;   __divuchar
                                    1-  520     ;   __moduchar
                                    1-  521     ;   _gotoSleep
                                    1-  522     ;1 compiler assigned register :
                                    1-  523     ;   STK00
                                    1-  524     ;; Starting pCode block
                                    1-  525     .segment "code"; module=main, function=_main
     0000                           1-  527     _main:
                                    1-  528     ; 2 exit points
                                    1-  529     	.line	76, "main.c"; 	DISI();
     0000 0013                      1-  530     	DISI
                                    1-  531     	.line	77, "main.c"; 	IOSTA = C_PA3_Input;
     0001 2108                      1-  532     	MOVIA	0x08
     0002 000r                      1-  533     	IOST	_IOSTA
                                    1-  534     	.line	78, "main.c"; 	IOSTB = C_PB1_Input;
     0003 2102                      1-  535     	MOVIA	0x02
     0004 000r                      1-  536     	IOST	_IOSTB
                                    1-  537     	.line	79, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  538     	CLRR	_PORTB
                                    1-  539     	.line	80, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  540     	CLRR	_PORTA
                                    1-  541     	.line	81, "main.c"; 	APHCON = 0xF7;
     0007 21F7                      1-  542     	MOVIA	0xf7
     0008 000r                      1-  543     	IOST	_APHCON
                                    1-  544     	.line	82, "main.c"; 	BPHCON = 0xFD;
     0009 21FD                      1-  545     	MOVIA	0xfd
     000A 00rr                      1-  546     	MOVAR	_BPHCON
                                    1-  547     	.line	84, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000B 2101                      1-  548     	MOVIA	0x01
     000C 00rr                      1-  549     	MOVAR	_INTE
                                    1-  550     	.line	86, "main.c"; 	PCON1 = C_TMR0_Dis;
     000D 0200                      1-  551     	CLRA	
     000E 000r                      1-  552     	IOST	_PCON1
                                    1-  553     	.line	88, "main.c"; 	TMR0 = 58;
     000F 213A                      1-  554     	MOVIA	0x3a
     0010 00rr                      1-  555     	MOVAR	_TMR0
                                    1-  556     	.line	89, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0011 0200                      1-  557     	CLRA	
     0012 0003                      1-  558     	T0MD	
                                    1-  559     	.line	91, "main.c"; 	PCON1 = C_TMR0_En;
     0013 2101                      1-  560     	MOVIA	0x01
     0014 000r                      1-  561     	IOST	_PCON1
                                    1-  562     	.line	93, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0015 2188                      1-  563     	MOVIA	0x88
     0016 00rr                      1-  564     	MOVAR	_PCON
                                    1-  565     	.line	96, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0017 2101                      1-  566     	MOVIA	0x01
     0018 000r                      1-  567     	IOST	_PCON1
                                    1-  568     	.line	97, "main.c"; 	ENI();
     0019 0004                      1-  569     	ENI
                                    1-  570     	.line	98, "main.c"; 	initAD();
     001A 2rrr                      1-  571     	LCALL	_initAD
     001B                           1-  572     _00127_DS_:
                                    1-  573     	.line	101, "main.c"; 	CLRWDT();
     001B 0002                      1-  574     	clrwdt
                                    1-  575     	.line	102, "main.c"; 	if(workStep)
                                    1-  576     	BANKSEL	_workStep
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 01rr                      1-  577     	MOVR	_workStep,W
     001E 0903                      1-  578     	BTRSS	STATUS,2
                                    1-  579     	.line	103, "main.c"; 	refreshNub();
     001F 2rrr                      1-  580     	LCALL	_refreshNub
                                    1-  581     	.line	104, "main.c"; 	if(!IntFlag)
                                    1-  582     	BANKSEL	_IntFlag
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1-  583     	MOVR	_IntFlag,W
     0022 0D03                      1-  584     	BTRSC	STATUS,2
     0023 3rrr                      1-  585     	LGOTO	_00127_DS_
                                    1-  586     	.line	106, "main.c"; 	IntFlag = 0;
     0024 02rr                      1-  587     	CLRR	_IntFlag
                                    1-  588     	.line	107, "main.c"; 	checkMaxAD();
     0025 2rrr                      1-  589     	LCALL	_checkMaxAD
                                    1-  590     	.line	108, "main.c"; 	keyCon();
     0026 2rrr                      1-  591     	LCALL	_keyCon
                                    1-  592     	.line	109, "main.c"; 	shiweiNum = min/10;
     0027 210A                      1-  593     	MOVIA	0x0a
     0028 00rr                      1-  594     	MOVAR	STK00
                                    1-  595     	BANKSEL	_min
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  596     	MOVR	_min,W
     002B 2rrr                      1-  597     	LCALL	__divuchar
                                    1-  598     	BANKSEL	_shiweiNum
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 00rr                      1-  599     	MOVAR	_shiweiNum
                                    1-  600     	.line	110, "main.c"; 	geweiNum = min%10;
     002E 210A                      1-  601     	MOVIA	0x0a
     002F 00rr                      1-  602     	MOVAR	STK00
                                    1-  603     	BANKSEL	_min
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 01rr                      1-  604     	MOVR	_min,W
     0032 2rrr                      1-  605     	LCALL	__moduchar
                                    1-  606     	BANKSEL	_geweiNum
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 00rr                      1-  607     	MOVAR	_geweiNum
                                    1-  608     	.line	111, "main.c"; 	if(workStep == 0 && keyCount == 0)
                                    1-  609     	BANKSEL	_workStep
     0035 rrrr                      3-   71 m1      .banksel ram_address
     0036 01rr                      1-  610     	MOVR	_workStep,W
     0037 0903                      1-  611     	BTRSS	STATUS,2
     0038 3rrr                      1-  612     	LGOTO	_00127_DS_
                                    1-  613     	BANKSEL	_keyCount
     0039 rrrr                      3-   71 m1      .banksel ram_address
     003A 01rr                      1-  614     	MOVR	_keyCount,W
     003B 0903                      1-  615     	BTRSS	STATUS,2
     003C 3rrr                      1-  616     	LGOTO	_00127_DS_
                                    1-  617     	.line	113, "main.c"; 	gotoSleep();
     003D 2rrr                      1-  618     	LCALL	_gotoSleep
     003E 3rrr                      1-  619     	LGOTO	_00127_DS_
                                    1-  620     	.line	117, "main.c"; 	}
                                    1-  621     	RETURN	
     003F 0010                      3-   26 m1      ret
                                    1-  622     ; exit point of _main
                                    1-  624     ;***
                                    1-  625     ;  pBlock Stats: dbName = C
                                    1-  626     ;***
                                    1-  627     ;has an exit
                                    1-  628     ;functions called:
                                    1-  629     ;   _keyRead
                                    1-  630     ;   _gotoSleep
                                    1-  631     ;   _keyRead2
                                    1-  632     ;   _keyRead
                                    1-  633     ;   _gotoSleep
                                    1-  634     ;   _keyRead2
                                    1-  635     ;1 compiler assigned register :
                                    1-  636     ;   r0x1023
                                    1-  637     ;; Starting pCode block
                                    1-  638     .segment "code"; module=main, function=_keyCon
     0000                           1-  640     _keyCon:
                                    1-  641     ; 2 exit points
                                    1-  642     	.line	331, "main.c"; 	keyClick = keyRead(0x08&(~PORTA));
     0000 07rr                      1-  643     	COMR	_PORTA,W
                                    1-  644     	BANKSEL	r0x1023
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1-  645     	MOVAR	r0x1023
     0003 2108                      1-  646     	MOVIA	0x08
     0004 10rr                      1-  647     	ANDAR	r0x1023,F
     0005 01rr                      1-  648     	MOVR	r0x1023,W
     0006 2rrr                      1-  649     	LCALL	_keyRead
                                    1-  650     	BANKSEL	_keyClick
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1-  651     	MOVAR	_keyClick
                                    1-  652     	.line	333, "main.c"; 	if(keyClick == 1)			//短按
     0009 2401                      1-  653     	XORIA	0x01
     000A 0903                      1-  654     	BTRSS	STATUS,2
     000B 3rrr                      1-  655     	LGOTO	_00287_DS_
                                    1-  656     	.line	335, "main.c"; 	if(++workStep >= 4)
                                    1-  657     	BANKSEL	_workStep
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 05rr                      1-  658     	INCR	_workStep,F
                                    1-  659     ;;unsigned compare: left < lit (0x4=4), size=1
     000E 2104                      1-  660     	MOVIA	0x04
     000F 04rr                      1-  661     	SUBAR	_workStep,W
     0010 0803                      1-  662     	BTRSS	STATUS,0
     0011 3rrr                      1-  663     	LGOTO	_00275_DS_
                                    1-  664     	.line	337, "main.c"; 	workStep = 1;
     0012 2101                      1-  665     	MOVIA	0x01
     0013 00rr                      1-  666     	MOVAR	_workStep
     0014                           1-  667     _00275_DS_:
                                    1-  668     	.line	339, "main.c"; 	if(workStep == 1)
                                    1-  669     	BANKSEL	_workStep
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 01rr                      1-  670     	MOVR	_workStep,W
     0016 2401                      1-  671     	XORIA	0x01
     0017 0903                      1-  672     	BTRSS	STATUS,2
     0018 3rrr                      1-  673     	LGOTO	_00282_DS_
                                    1-  674     	.line	341, "main.c"; 	duty = 100;
     0019 2164                      1-  675     	MOVIA	0x64
                                    1-  676     	BANKSEL	_duty
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 00rr                      1-  677     	MOVAR	_duty
     001C 3rrr                      1-  678     	LGOTO	_00288_DS_
     001D                           1-  679     _00282_DS_:
                                    1-  680     	.line	343, "main.c"; 	else if(workStep == 2)
                                    1-  681     	BANKSEL	_workStep
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1-  682     	MOVR	_workStep,W
     001F 2402                      1-  683     	XORIA	0x02
     0020 0903                      1-  684     	BTRSS	STATUS,2
     0021 3rrr                      1-  685     	LGOTO	_00279_DS_
                                    1-  686     	.line	345, "main.c"; 	duty = 75;
     0022 214B                      1-  687     	MOVIA	0x4b
                                    1-  688     	BANKSEL	_duty
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 00rr                      1-  689     	MOVAR	_duty
     0025 3rrr                      1-  690     	LGOTO	_00288_DS_
     0026                           1-  691     _00279_DS_:
                                    1-  692     	.line	347, "main.c"; 	else if(workStep == 3)
                                    1-  693     	BANKSEL	_workStep
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  694     	MOVR	_workStep,W
     0028 2403                      1-  695     	XORIA	0x03
     0029 0903                      1-  696     	BTRSS	STATUS,2
     002A 3rrr                      1-  697     	LGOTO	_00288_DS_
                                    1-  698     	.line	349, "main.c"; 	duty = 50;
     002B 2132                      1-  699     	MOVIA	0x32
                                    1-  700     	BANKSEL	_duty
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 00rr                      1-  701     	MOVAR	_duty
     002E 3rrr                      1-  702     	LGOTO	_00288_DS_
     002F                           1-  703     _00287_DS_:
                                    1-  704     	.line	352, "main.c"; 	else if(keyClick == 2)		//长按
                                    1-  705     	BANKSEL	_keyClick
     002F rrrr                      3-   71 m1      .banksel ram_address
     0030 01rr                      1-  706     	MOVR	_keyClick,W
     0031 2402                      1-  707     	XORIA	0x02
     0032 0903                      1-  708     	BTRSS	STATUS,2
     0033 3rrr                      1-  709     	LGOTO	_00288_DS_
                                    1-  710     	.line	354, "main.c"; 	workStep = 0;
                                    1-  711     	BANKSEL	_workStep
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 02rr                      1-  712     	CLRR	_workStep
                                    1-  713     	.line	355, "main.c"; 	gotoSleep();
     0036 2rrr                      1-  714     	LCALL	_gotoSleep
     0037                           1-  715     _00288_DS_:
                                    1-  716     	.line	358, "main.c"; 	if(keyRead2(0x02&(~PORTB)))
     0037 07rr                      1-  717     	COMR	_PORTB,W
                                    1-  718     	BANKSEL	r0x1023
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 00rr                      1-  719     	MOVAR	r0x1023
     003A 2102                      1-  720     	MOVIA	0x02
     003B 10rr                      1-  721     	ANDAR	r0x1023,F
     003C 01rr                      1-  722     	MOVR	r0x1023,W
     003D 2rrr                      1-  723     	LCALL	_keyRead2
                                    1-  724     	BANKSEL	r0x1023
     003E rrrr                      3-   71 m1      .banksel ram_address
     003F 00rr                      1-  725     	MOVAR	r0x1023
     0040 01rr                      1-  726     	MOVR	r0x1023,W
     0041 0D03                      1-  727     	BTRSC	STATUS,2
     0042 3rrr                      1-  728     	LGOTO	_00301_DS_
                                    1-  729     	.line	360, "main.c"; 	if(++workStep2 >= 4)
                                    1-  730     	BANKSEL	_workStep2
     0043 rrrr                      3-   71 m1      .banksel ram_address
     0044 05rr                      1-  731     	INCR	_workStep2,F
                                    1-  732     ;;unsigned compare: left < lit (0x4=4), size=1
     0045 2104                      1-  733     	MOVIA	0x04
     0046 04rr                      1-  734     	SUBAR	_workStep2,W
     0047 0803                      1-  735     	BTRSS	STATUS,0
     0048 3rrr                      1-  736     	LGOTO	_00290_DS_
                                    1-  737     	.line	362, "main.c"; 	workStep2 = 1;
     0049 2101                      1-  738     	MOVIA	0x01
     004A 00rr                      1-  739     	MOVAR	_workStep2
     004B                           1-  740     _00290_DS_:
                                    1-  741     	.line	364, "main.c"; 	if(workStep2 == 1)
                                    1-  742     	BANKSEL	_workStep2
     004B rrrr                      3-   71 m1      .banksel ram_address
     004C 01rr                      1-  743     	MOVR	_workStep2,W
     004D 2401                      1-  744     	XORIA	0x01
     004E 0903                      1-  745     	BTRSS	STATUS,2
     004F 3rrr                      1-  746     	LGOTO	_00297_DS_
                                    1-  747     	.line	366, "main.c"; 	min = 20;
     0050 2114                      1-  748     	MOVIA	0x14
                                    1-  749     	BANKSEL	_min
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 00rr                      1-  750     	MOVAR	_min
     0053 3rrr                      1-  751     	LGOTO	_00301_DS_
     0054                           1-  752     _00297_DS_:
                                    1-  753     	.line	368, "main.c"; 	else if(workStep2 == 2)
                                    1-  754     	BANKSEL	_workStep2
     0054 rrrr                      3-   71 m1      .banksel ram_address
     0055 01rr                      1-  755     	MOVR	_workStep2,W
     0056 2402                      1-  756     	XORIA	0x02
     0057 0903                      1-  757     	BTRSS	STATUS,2
     0058 3rrr                      1-  758     	LGOTO	_00294_DS_
                                    1-  759     	.line	370, "main.c"; 	min = 40;
     0059 2128                      1-  760     	MOVIA	0x28
                                    1-  761     	BANKSEL	_min
     005A rrrr                      3-   71 m1      .banksel ram_address
     005B 00rr                      1-  762     	MOVAR	_min
     005C 3rrr                      1-  763     	LGOTO	_00301_DS_
     005D                           1-  764     _00294_DS_:
                                    1-  765     	.line	372, "main.c"; 	else if(workStep2 == 3)
                                    1-  766     	BANKSEL	_workStep2
     005D rrrr                      3-   71 m1      .banksel ram_address
     005E 01rr                      1-  767     	MOVR	_workStep2,W
     005F 2403                      1-  768     	XORIA	0x03
     0060 0903                      1-  769     	BTRSS	STATUS,2
     0061 3rrr                      1-  770     	LGOTO	_00301_DS_
                                    1-  771     	.line	374, "main.c"; 	min = 60;
     0062 213C                      1-  772     	MOVIA	0x3c
                                    1-  773     	BANKSEL	_min
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 00rr                      1-  774     	MOVAR	_min
     0065                           1-  775     _00301_DS_:
                                    1-  776     	.line	378, "main.c"; 	}
                                    1-  777     	RETURN	
     0065 0010                      3-   26 m1      ret
                                    1-  778     ; exit point of _keyCon
                                    1-  780     ;***
                                    1-  781     ;  pBlock Stats: dbName = C
                                    1-  782     ;***
                                    1-  783     ;has an exit
                                    1-  784     ;1 compiler assigned register :
                                    1-  785     ;   r0x1022
                                    1-  786     ;; Starting pCode block
                                    1-  787     .segment "code"; module=main, function=_keyRead2
                                    1-  789     ;local variable name mapping:
     0000                           1-  791     _keyRead2:
                                    1-  792     ; 2 exit points
                                    1-  793     	.line	307, "main.c"; 	char keyRead2(char KeyStatus)	
                                    1-  794     	BANKSEL	r0x1022
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  795     	MOVAR	r0x1022
                                    1-  796     	.line	309, "main.c"; 	if (KeyStatus)
     0002 01rr                      1-  797     	MOVR	r0x1022,W
     0003 0D03                      1-  798     	BTRSC	STATUS,2
     0004 3rrr                      1-  799     	LGOTO	_00267_DS_
                                    1-  800     	.line	311, "main.c"; 	keyCount2++;
                                    1-  801     	BANKSEL	_keyCount2
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  802     	INCR	_keyCount2,F
                                    1-  803     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  804     	.line	312, "main.c"; 	if(keyCount2 >= 200)
     0007 21C8                      1-  805     	MOVIA	0xc8
     0008 04rr                      1-  806     	SUBAR	_keyCount2,W
     0009 0803                      1-  807     	BTRSS	STATUS,0
     000A 3rrr                      1-  808     	LGOTO	_00268_DS_
                                    1-  809     	.line	314, "main.c"; 	keyCount2 = 200;
     000B 21C8                      1-  810     	MOVIA	0xc8
     000C 00rr                      1-  811     	MOVAR	_keyCount2
     000D 3rrr                      1-  812     	LGOTO	_00268_DS_
                                    1-  813     ;;unsigned compare: left < lit (0x4=4), size=1
     000E                           1-  814     _00267_DS_:
                                    1-  815     	.line	319, "main.c"; 	if(keyCount2 >= 4)
     000E 2104                      1-  816     	MOVIA	0x04
                                    1-  817     	BANKSEL	_keyCount2
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 04rr                      1-  818     	SUBAR	_keyCount2,W
     0011 0803                      1-  819     	BTRSS	STATUS,0
     0012 3rrr                      1-  820     	LGOTO	_00265_DS_
                                    1-  821     	.line	321, "main.c"; 	keyCount2 = 0;
     0013 02rr                      1-  822     	CLRR	_keyCount2
                                    1-  823     	.line	322, "main.c"; 	return	1;
     0014 2101                      1-  824     	MOVIA	0x01
     0015 3rrr                      1-  825     	LGOTO	_00269_DS_
     0016                           1-  826     _00265_DS_:
                                    1-  827     	.line	324, "main.c"; 	keyCount2 = 0;
                                    1-  828     	BANKSEL	_keyCount2
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 02rr                      1-  829     	CLRR	_keyCount2
     0018                           1-  830     _00268_DS_:
                                    1-  831     	.line	326, "main.c"; 	return 0;
     0018 2100                      1-  832     	MOVIA	0x00
     0019                           1-  833     _00269_DS_:
                                    1-  834     	.line	327, "main.c"; 	}
                                    1-  835     	RETURN	
     0019 0010                      3-   26 m1      ret
                                    1-  836     ; exit point of _keyRead2
                                    1-  838     ;***
                                    1-  839     ;  pBlock Stats: dbName = C
                                    1-  840     ;***
                                    1-  841     ;has an exit
                                    1-  842     ;1 compiler assigned register :
                                    1-  843     ;   r0x1022
                                    1-  844     ;; Starting pCode block
                                    1-  845     .segment "code"; module=main, function=_keyRead
                                    1-  847     ;local variable name mapping:
     0000                           1-  849     _keyRead:
                                    1-  850     ; 2 exit points
                                    1-  851     	.line	274, "main.c"; 	char keyRead(char KeyStatus)	
                                    1-  852     	BANKSEL	r0x1022
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1-  853     	MOVAR	r0x1022
                                    1-  854     	.line	276, "main.c"; 	if (KeyStatus)
     0002 01rr                      1-  855     	MOVR	r0x1022,W
     0003 0D03                      1-  856     	BTRSC	STATUS,2
     0004 3rrr                      1-  857     	LGOTO	_00255_DS_
                                    1-  858     	.line	278, "main.c"; 	keyCount++;
                                    1-  859     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1-  860     	INCR	_keyCount,F
                                    1-  861     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  862     	.line	279, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1-  863     	MOVIA	0xc8
     0008 04rr                      1-  864     	SUBAR	_keyCount,W
     0009 0803                      1-  865     	BTRSS	STATUS,0
     000A 3rrr                      1-  866     	LGOTO	_00256_DS_
                                    1-  867     	.line	281, "main.c"; 	keyCount = 200;
     000B 21C8                      1-  868     	MOVIA	0xc8
     000C 00rr                      1-  869     	MOVAR	_keyCount
                                    1-  870     	.line	282, "main.c"; 	if(!longPressFlag)
                                    1-  871     	BANKSEL	_longPressFlag
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 01rr                      1-  872     	MOVR	_longPressFlag,W
     000F 0903                      1-  873     	BTRSS	STATUS,2
     0010 3rrr                      1-  874     	LGOTO	_00256_DS_
                                    1-  875     	.line	284, "main.c"; 	longPressFlag = 1;
     0011 2101                      1-  876     	MOVIA	0x01
     0012 00rr                      1-  877     	MOVAR	_longPressFlag
                                    1-  878     	.line	285, "main.c"; 	return 2;
     0013 2102                      1-  879     	MOVIA	0x02
     0014 3rrr                      1-  880     	LGOTO	_00257_DS_
                                    1-  881     ;;unsigned compare: left < lit (0xC8=200), size=1
     0015                           1-  882     _00255_DS_:
                                    1-  883     	.line	291, "main.c"; 	if(keyCount >= 200)
     0015 21C8                      1-  884     	MOVIA	0xc8
                                    1-  885     	BANKSEL	_keyCount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 04rr                      1-  886     	SUBAR	_keyCount,W
     0018 0803                      1-  887     	BTRSS	STATUS,0
     0019 3rrr                      1-  888     	LGOTO	_00252_DS_
                                    1-  889     	.line	293, "main.c"; 	keyCount = 0;
     001A 02rr                      1-  890     	CLRR	_keyCount
                                    1-  891     	.line	294, "main.c"; 	longPressFlag = 0;
                                    1-  892     	BANKSEL	_longPressFlag
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 02rr                      1-  893     	CLRR	_longPressFlag
                                    1-  894     	.line	295, "main.c"; 	return	0;
     001D 2100                      1-  895     	MOVIA	0x00
     001E 3rrr                      1-  896     	LGOTO	_00257_DS_
                                    1-  897     ;;unsigned compare: left < lit (0x4=4), size=1
     001F                           1-  898     _00252_DS_:
                                    1-  899     	.line	297, "main.c"; 	else if(keyCount >= 4)
     001F 2104                      1-  900     	MOVIA	0x04
                                    1-  901     	BANKSEL	_keyCount
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 04rr                      1-  902     	SUBAR	_keyCount,W
     0022 0803                      1-  903     	BTRSS	STATUS,0
     0023 3rrr                      1-  904     	LGOTO	_00253_DS_
                                    1-  905     	.line	299, "main.c"; 	keyCount = 0;
     0024 02rr                      1-  906     	CLRR	_keyCount
                                    1-  907     	.line	300, "main.c"; 	return	1;
     0025 2101                      1-  908     	MOVIA	0x01
     0026 3rrr                      1-  909     	LGOTO	_00257_DS_
     0027                           1-  910     _00253_DS_:
                                    1-  911     	.line	302, "main.c"; 	keyCount = 0;
                                    1-  912     	BANKSEL	_keyCount
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 02rr                      1-  913     	CLRR	_keyCount
     0029                           1-  914     _00256_DS_:
                                    1-  915     	.line	304, "main.c"; 	return 0;
     0029 2100                      1-  916     	MOVIA	0x00
     002A                           1-  917     _00257_DS_:
                                    1-  918     	.line	305, "main.c"; 	}
                                    1-  919     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1-  920     ; exit point of _keyRead
                                    1-  922     ;***
                                    1-  923     ;  pBlock Stats: dbName = C
                                    1-  924     ;***
                                    1-  925     ;has an exit
                                    1-  926     ;functions called:
                                    1-  927     ;   _setInput
                                    1-  928     ;   _setInput
                                    1-  929     ;; Starting pCode block
                                    1-  930     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  932     _gotoSleep:
                                    1-  933     ; 2 exit points
                                    1-  934     	.line	250, "main.c"; 	setInput();
     0000 2rrr                      1-  935     	LCALL	_setInput
                                    1-  936     	.line	251, "main.c"; 	workStep = 0;
                                    1-  937     	BANKSEL	_workStep
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 02rr                      1-  938     	CLRR	_workStep
                                    1-  939     	.line	252, "main.c"; 	workStep2 = 1;
     0003 2101                      1-  940     	MOVIA	0x01
                                    1-  941     	BANKSEL	_workStep2
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 00rr                      1-  942     	MOVAR	_workStep2
                                    1-  943     	.line	253, "main.c"; 	PORTB &= 0xF7;
     0006 1Drr                      1-  944     	BCR	_PORTB,3
                                    1-  945     	.line	254, "main.c"; 	AWUCON = 0x08;
     0007 2108                      1-  946     	MOVIA	0x08
     0008 00rr                      1-  947     	MOVAR	_AWUCON
                                    1-  948     	.line	255, "main.c"; 	duty = 0;
                                    1-  949     	BANKSEL	_duty
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 02rr                      1-  950     	CLRR	_duty
                                    1-  951     	.line	256, "main.c"; 	min = 20;
     000B 2114                      1-  952     	MOVIA	0x14
                                    1-  953     	BANKSEL	_min
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1-  954     	MOVAR	_min
                                    1-  955     	.line	257, "main.c"; 	tempshiweiNum = 2;
     000E 2102                      1-  956     	MOVIA	0x02
                                    1-  957     	BANKSEL	_tempshiweiNum
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 00rr                      1-  958     	MOVAR	_tempshiweiNum
                                    1-  959     	.line	258, "main.c"; 	tempgeweiNum = 0;
                                    1-  960     	BANKSEL	_tempgeweiNum
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 02rr                      1-  961     	CLRR	_tempgeweiNum
                                    1-  962     	.line	259, "main.c"; 	second = 0;
                                    1-  963     	BANKSEL	_second
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 02rr                      1-  964     	CLRR	_second
                                    1-  965     	.line	260, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     0015 2103                      1-  966     	MOVIA	0x03
     0016 00rr                      1-  967     	MOVAR	_INTE
                                    1-  968     	.line	261, "main.c"; 	PCON =  C_LVR_En;	
     0017 2108                      1-  969     	MOVIA	0x08
     0018 00rr                      1-  970     	MOVAR	_PCON
                                    1-  971     	.line	262, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0019 02rr                      1-  972     	CLRR	_INTF
                                    1-  973     	.line	263, "main.c"; 	CLRWDT();
     001A 0002                      1-  974     	clrwdt
                                    1-  975     	.line	264, "main.c"; 	ENI();
     001B 0004                      1-  976     	ENI
                                    1-  977     	.line	265, "main.c"; 	SLEEP();
     001C 0001                      1-  978     	sleep
                                    1-  979     	.line	266, "main.c"; 	AWUCON = 0x00;
     001D 02rr                      1-  980     	CLRR	_AWUCON
                                    1-  981     	.line	267, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     001E 2101                      1-  982     	MOVIA	0x01
     001F 00rr                      1-  983     	MOVAR	_INTE
                                    1-  984     	.line	268, "main.c"; 	INTF = 0;
     0020 02rr                      1-  985     	CLRR	_INTF
                                    1-  986     	.line	270, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT ,  Enable LVR
     0021 21A8                      1-  987     	MOVIA	0xa8
     0022 00rr                      1-  988     	MOVAR	_PCON
                                    1-  989     	.line	272, "main.c"; 	}
                                    1-  990     	RETURN	
     0023 0010                      3-   26 m1      ret
                                    1-  991     ; exit point of _gotoSleep
                                    1-  993     ;***
                                    1-  994     ;  pBlock Stats: dbName = C
                                    1-  995     ;***
                                    1-  996     ;has an exit
                                    1-  997     ;5 compiler assigned registers:
                                    1-  998     ;   r0x1024
                                    1-  999     ;   STK00
                                    1- 1000     ;   r0x1025
                                    1- 1001     ;   r0x1026
                                    1- 1002     ;   r0x1027
                                    1- 1003     ;; Starting pCode block
                                    1- 1004     .segment "code"; module=main, function=_delay
                                    1- 1006     ;local variable name mapping:
     0000                           1- 1011     _delay:
                                    1- 1012     ; 2 exit points
                                    1- 1013     	.line	243, "main.c"; 	void delay(u16t time)
                                    1- 1014     	BANKSEL	r0x1024
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1015     	MOVAR	r0x1024
     0002 01rr                      1- 1016     	MOVR	STK00,W
                                    1- 1017     	BANKSEL	r0x1025
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 1018     	MOVAR	r0x1025
                                    1- 1019     	.line	245, "main.c"; 	for(u16t i=0;i<time;i++);
                                    1- 1020     	BANKSEL	r0x1026
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1- 1021     	CLRR	r0x1026
                                    1- 1022     	BANKSEL	r0x1027
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1- 1023     	CLRR	r0x1027
     0009                           1- 1024     _00225_DS_:
                                    1- 1025     	BANKSEL	r0x1024
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 01rr                      1- 1026     	MOVR	r0x1024,W
                                    1- 1027     	BANKSEL	r0x1027
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1- 1028     	SUBAR	r0x1027,W
     000D 0903                      1- 1029     	BTRSS	STATUS,2
     000E 3rrr                      1- 1030     	LGOTO	_00236_DS_
                                    1- 1031     	BANKSEL	r0x1025
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 1032     	MOVR	r0x1025,W
                                    1- 1033     	BANKSEL	r0x1026
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 04rr                      1- 1034     	SUBAR	r0x1026,W
     0013                           1- 1035     _00236_DS_:
     0013 0C03                      1- 1036     	BTRSC	STATUS,0
     0014 3rrr                      1- 1037     	LGOTO	_00227_DS_
                                    1- 1038     	BANKSEL	r0x1026
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 05rr                      1- 1039     	INCR	r0x1026,F
     0017 0903                      1- 1040     	BTRSS	STATUS,2
     0018 3rrr                      1- 1041     	LGOTO	_00001_DS_
                                    1- 1042     	BANKSEL	r0x1027
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 05rr                      1- 1043     	INCR	r0x1027,F
     001B                           1- 1044     _00001_DS_:
     001B 3rrr                      1- 1045     	LGOTO	_00225_DS_
     001C                           1- 1046     _00227_DS_:
                                    1- 1047     	.line	246, "main.c"; 	}
                                    1- 1048     	RETURN	
     001C 0010                      3-   26 m1      ret
                                    1- 1049     ; exit point of _delay
                                    1- 1051     ;***
                                    1- 1052     ;  pBlock Stats: dbName = C
                                    1- 1053     ;***
                                    1- 1054     ;has an exit
                                    1- 1055     ;; Starting pCode block
                                    1- 1056     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1- 1058     _F_wait_eoc:
                                    1- 1059     ; 2 exit points
     0000                           1- 1060     _00218_DS_:
                                    1- 1061     	.line	237, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1- 1062     	BTRSS	_ADMDbits,5
     0001 3rrr                      1- 1063     	LGOTO	_00218_DS_
                                    1- 1064     	.line	239, "main.c"; 	}
                                    1- 1065     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1066     ; exit point of _F_wait_eoc
                                    1- 1068     ;***
                                    1- 1069     ;  pBlock Stats: dbName = C
                                    1- 1070     ;***
                                    1- 1071     ;has an exit
                                    1- 1072     ;functions called:
                                    1- 1073     ;   _delay
                                    1- 1074     ;   _F_wait_eoc
                                    1- 1075     ;   _delay
                                    1- 1076     ;   _F_wait_eoc
                                    1- 1077     ;7 compiler assigned registers:
                                    1- 1078     ;   r0x1028
                                    1- 1079     ;   STK00
                                    1- 1080     ;   r0x1029
                                    1- 1081     ;   r0x102A
                                    1- 1082     ;   r0x102B
                                    1- 1083     ;   r0x102C
                                    1- 1084     ;   r0x102D
                                    1- 1085     ;; Starting pCode block
                                    1- 1086     .segment "code"; module=main, function=_F_AIN5_Convert
                                    1- 1088     ;local variable name mapping:
     0000                           1- 1091     _F_AIN5_Convert:
                                    1- 1092     ; 2 exit points
                                    1- 1093     	.line	218, "main.c"; 	void F_AIN5_Convert(char count)
                                    1- 1094     	BANKSEL	r0x1028
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1095     	MOVAR	r0x1028
                                    1- 1096     	.line	220, "main.c"; 	R_AIN5_DATA=R_AIN5_DATA_LB=0x00;   
                                    1- 1097     	BANKSEL	_R_AIN5_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1098     	CLRR	_R_AIN5_DATA_LB
                                    1- 1099     	BANKSEL	_R_AIN5_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1100     	CLRR	_R_AIN5_DATA
     0006 02rr                      1- 1101     	CLRR	(_R_AIN5_DATA + 1)
                                    1- 1102     	.line	222, "main.c"; 	ADMD  = 0x90 | C_ADC_PA4;				// Select AIN6(PB1) pad as ADC input
     0007 2194                      1- 1103     	MOVIA	0x94
     0008 00rr                      1- 1104     	MOVAR	_ADMD
                                    1- 1105     	.line	223, "main.c"; 	delay(200);	
     0009 21C8                      1- 1106     	MOVIA	0xc8
     000A 00rr                      1- 1107     	MOVAR	STK00
     000B 2100                      1- 1108     	MOVIA	0x00
     000C 2rrr                      1- 1109     	LCALL	_delay
                                    1- 1110     	.line	224, "main.c"; 	for(i=1;i<=count;i++)
     000D 2101                      1- 1111     	MOVIA	0x01
                                    1- 1112     	BANKSEL	r0x1029
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1- 1113     	MOVAR	r0x1029
     0010                           1- 1114     _00211_DS_:
                                    1- 1115     	BANKSEL	r0x1029
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 01rr                      1- 1116     	MOVR	r0x1029,W
                                    1- 1117     	BANKSEL	r0x1028
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 04rr                      1- 1118     	SUBAR	r0x1028,W
     0014 0803                      1- 1119     	BTRSS	STATUS,0
     0015 3rrr                      1- 1120     	LGOTO	_00213_DS_
                                    1- 1121     	.line	226, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0016 1Brr                      1- 1122     	BSR	_ADMDbits,6
                                    1- 1123     	.line	227, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0017 2rrr                      1- 1124     	LCALL	_F_wait_eoc
                                    1- 1125     	.line	228, "main.c"; 	R_AIN5_DATA_LB += ( 0x0F & ADR); 
     0018 210F                      1- 1126     	MOVIA	0x0f
     0019 10rr                      1- 1127     	ANDAR	_ADR,W
                                    1- 1128     ;;3	MOVAR	r0x102A
                                    1- 1129     	BANKSEL	_R_AIN5_DATA_LB
     001A rrrr                      3-   71 m1      .banksel ram_address
     001B 03rr                      1- 1130     	ADDAR	_R_AIN5_DATA_LB,F
                                    1- 1131     	.line	229, "main.c"; 	R_AIN5_DATA    += ADD; 
     001C 01rr                      1- 1132     	MOVR	_ADD,W
                                    1- 1133     	BANKSEL	r0x102A
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 00rr                      1- 1134     	MOVAR	r0x102A
                                    1- 1135     ;;1	CLRR	r0x102B
                                    1- 1136     ;;102	MOVR	r0x102A,W
                                    1- 1137     ;;100	MOVAR	r0x102C
     001F 2100                      1- 1138     	MOVIA	0x00
                                    1- 1139     	BANKSEL	r0x102D
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 00rr                      1- 1140     	MOVAR	r0x102D
                                    1- 1141     ;;101	MOVR	r0x102C,W
                                    1- 1142     	BANKSEL	r0x102A
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1- 1143     	MOVR	r0x102A,W
                                    1- 1144     	BANKSEL	_R_AIN5_DATA
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 03rr                      1- 1145     	ADDAR	_R_AIN5_DATA,F
                                    1- 1146     	BANKSEL	r0x102D
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1147     	MOVR	r0x102D,W
     0028 0C03                      1- 1148     	BTRSC	STATUS,0
     0029 05rr                      1- 1149     	INCR	r0x102D,W
     002A 0D03                      1- 1150     	BTRSC	STATUS,2
     002B 3rrr                      1- 1151     	LGOTO	_00002_DS_
                                    1- 1152     	BANKSEL	_R_AIN5_DATA
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 03rr                      1- 1153     	ADDAR	(_R_AIN5_DATA + 1),F
     002E                           1- 1154     _00002_DS_:
                                    1- 1155     	.line	224, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1156     	BANKSEL	r0x1029
     002E rrrr                      3-   71 m1      .banksel ram_address
     002F 05rr                      1- 1157     	INCR	r0x1029,F
     0030 3rrr                      1- 1158     	LGOTO	_00211_DS_
     0031                           1- 1159     _00213_DS_:
                                    1- 1160     	.line	231, "main.c"; 	}
                                    1- 1161     	RETURN	
     0031 0010                      3-   26 m1      ret
                                    1- 1162     ; exit point of _F_AIN5_Convert
                                    1- 1164     ;***
                                    1- 1165     ;  pBlock Stats: dbName = C
                                    1- 1166     ;***
                                    1- 1167     ;has an exit
                                    1- 1168     ;functions called:
                                    1- 1169     ;   _F_AIN5_Convert
                                    1- 1170     ;   _F_AIN5_Convert
                                    1- 1171     ;4 compiler assigned registers:
                                    1- 1172     ;   r0x102E
                                    1- 1173     ;   r0x102F
                                    1- 1174     ;   r0x1030
                                    1- 1175     ;   r0x1031
                                    1- 1176     ;; Starting pCode block
                                    1- 1177     .segment "code"; module=main, function=_checkMaxAD
     0000                           1- 1179     _checkMaxAD:
                                    1- 1180     ; 2 exit points
                                    1- 1181     	.line	192, "main.c"; 	R_AIN5_DATA = R_AIN5_DATA_LB = 0x00;
                                    1- 1182     	BANKSEL	_R_AIN5_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1183     	CLRR	_R_AIN5_DATA_LB
                                    1- 1184     	BANKSEL	_R_AIN5_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1185     	CLRR	_R_AIN5_DATA
     0004 02rr                      1- 1186     	CLRR	(_R_AIN5_DATA + 1)
                                    1- 1187     	.line	193, "main.c"; 	F_AIN5_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1- 1188     	MOVIA	0x08
     0006 2rrr                      1- 1189     	LCALL	_F_AIN5_Convert
                                    1- 1190     	.line	194, "main.c"; 	R_AIN5_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1191     	BANKSEL	_R_AIN5_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1- 1192     	SWAPR	(_R_AIN5_DATA + 1),W
     0009 22F0                      1- 1193     	ANDIA	0xf0
     000A 00rr                      1- 1194     	MOVAR	(_R_AIN5_DATA + 1)
     000B 15rr                      1- 1195     	SWAPR	_R_AIN5_DATA,W
     000C 00rr                      1- 1196     	MOVAR	_R_AIN5_DATA
     000D 220F                      1- 1197     	ANDIA	0x0f
     000E 11rr                      1- 1198     	IORAR	(_R_AIN5_DATA + 1),F
     000F 12rr                      1- 1199     	XORAR	_R_AIN5_DATA,F
                                    1- 1200     	.line	195, "main.c"; 	R_AIN5_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1- 1201     	MOVIA	0xf0
                                    1- 1202     	BANKSEL	_R_AIN5_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1- 1203     	ANDAR	_R_AIN5_DATA_LB,F
                                    1- 1204     	.line	196, "main.c"; 	R_AIN5_DATA += R_AIN5_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1- 1205     	MOVR	_R_AIN5_DATA_LB,W
                                    1- 1206     	BANKSEL	r0x1030
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1207     	MOVAR	r0x1030
                                    1- 1208     ;;1	MOVAR	r0x102E
                                    1- 1209     ;;1	CLRR	r0x102F
                                    1- 1210     ;;99	MOVR	r0x102E,W
     0016 2100                      1- 1211     	MOVIA	0x00
                                    1- 1212     	BANKSEL	r0x1031
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1213     	MOVAR	r0x1031
                                    1- 1214     	BANKSEL	r0x1030
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1- 1215     	MOVR	r0x1030,W
                                    1- 1216     	BANKSEL	_R_AIN5_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1- 1217     	ADDAR	_R_AIN5_DATA,F
                                    1- 1218     	BANKSEL	r0x1031
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1219     	MOVR	r0x1031,W
     001F 0C03                      1- 1220     	BTRSC	STATUS,0
     0020 05rr                      1- 1221     	INCR	r0x1031,W
     0021 0D03                      1- 1222     	BTRSC	STATUS,2
     0022 3rrr                      1- 1223     	LGOTO	_00003_DS_
                                    1- 1224     	BANKSEL	_R_AIN5_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1- 1225     	ADDAR	(_R_AIN5_DATA + 1),F
                                    1- 1226     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1- 1227     _00003_DS_:
                                    1- 1228     	.line	197, "main.c"; 	R_AIN5_DATA >>=3;					// R_AIN0_DATA divided 8	
     0025 1C03                      1- 1229     	BCR	STATUS,0
                                    1- 1230     	BANKSEL	_R_AIN5_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1- 1231     	RRR	(_R_AIN5_DATA + 1),F
     0028 13rr                      1- 1232     	RRR	_R_AIN5_DATA,F
                                    1- 1233     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1- 1234     	BCR	STATUS,0
     002A 13rr                      1- 1235     	RRR	(_R_AIN5_DATA + 1),F
     002B 13rr                      1- 1236     	RRR	_R_AIN5_DATA,F
                                    1- 1237     ;;shiftRight_Left2ResultLit:5589: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1- 1238     	BCR	STATUS,0
     002D 13rr                      1- 1239     	RRR	(_R_AIN5_DATA + 1),F
     002E 13rr                      1- 1240     	RRR	_R_AIN5_DATA,F
                                    1- 1241     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1242     ;;unsigned compare: left >= lit (0x68=104), size=2
                                    1- 1243     	.line	199, "main.c"; 	if(R_AIN5_DATA > 103)
     002F 2100                      1- 1244     	MOVIA	0x00
     0030 04rr                      1- 1245     	SUBAR	(_R_AIN5_DATA + 1),W
     0031 0903                      1- 1246     	BTRSS	STATUS,2
     0032 3rrr                      1- 1247     	LGOTO	_00204_DS_
     0033 2168                      1- 1248     	MOVIA	0x68
     0034 04rr                      1- 1249     	SUBAR	_R_AIN5_DATA,W
     0035                           1- 1250     _00204_DS_:
     0035 0803                      1- 1251     	BTRSS	STATUS,0
     0036 3rrr                      1- 1252     	LGOTO	_00194_DS_
                                    1- 1253     	.line	201, "main.c"; 	if(++overLoadTime>=100)
                                    1- 1254     	BANKSEL	_overLoadTime
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 05rr                      1- 1255     	INCR	_overLoadTime,F
                                    1- 1256     ;;unsigned compare: left < lit (0x64=100), size=1
     0039 2164                      1- 1257     	MOVIA	0x64
     003A 04rr                      1- 1258     	SUBAR	_overLoadTime,W
     003B 0803                      1- 1259     	BTRSS	STATUS,0
     003C 3rrr                      1- 1260     	LGOTO	_00196_DS_
                                    1- 1261     	.line	203, "main.c"; 	workStep = 0;
                                    1- 1262     	BANKSEL	_workStep
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 02rr                      1- 1263     	CLRR	_workStep
                                    1- 1264     	.line	204, "main.c"; 	overLoadTime = 0;
                                    1- 1265     	BANKSEL	_overLoadTime
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 02rr                      1- 1266     	CLRR	_overLoadTime
     0041 3rrr                      1- 1267     	LGOTO	_00196_DS_
     0042                           1- 1268     _00194_DS_:
                                    1- 1269     	.line	209, "main.c"; 	overLoadTime = 0;
                                    1- 1270     	BANKSEL	_overLoadTime
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 02rr                      1- 1271     	CLRR	_overLoadTime
     0044                           1- 1272     _00196_DS_:
                                    1- 1273     	.line	212, "main.c"; 	}
                                    1- 1274     	RETURN	
     0044 0010                      3-   26 m1      ret
                                    1- 1275     ; exit point of _checkMaxAD
                                    1- 1277     ;***
                                    1- 1278     ;  pBlock Stats: dbName = C
                                    1- 1279     ;***
                                    1- 1280     ;has an exit
                                    1- 1281     ;functions called:
                                    1- 1282     ;   _delay
                                    1- 1283     ;   _delay
                                    1- 1284     ;1 compiler assigned register :
                                    1- 1285     ;   STK00
                                    1- 1286     ;; Starting pCode block
                                    1- 1287     .segment "code"; module=main, function=_initAD
     0000                           1- 1289     _initAD:
                                    1- 1290     ; 2 exit points
                                    1- 1291     	.line	169, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1- 1292     	MOVIA	0x84
     0001 00rr                      1- 1293     	MOVAR	_ADMD
                                    1- 1294     	.line	174, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1295     	CLRR	_ADVREFH
                                    1- 1296     	.line	179, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1297     	MOVIA	0x10
     0004 00rr                      1- 1298     	MOVAR	_ADR
                                    1- 1299     	.line	181, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1300     	MOVIA	0x03
     0006 00rr                      1- 1301     	MOVAR	_ADCR
                                    1- 1302     	.line	184, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1303     	BSR	_ADMDbits,4
                                    1- 1304     	.line	185, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1305     	MOVIA	0x64
     0009 00rr                      1- 1306     	MOVAR	STK00
     000A 2100                      1- 1307     	MOVIA	0x00
     000B 2rrr                      1- 1308     	LCALL	_delay
                                    1- 1309     	.line	188, "main.c"; 	}
                                    1- 1310     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1311     ; exit point of _initAD
                                    1- 1313     ;***
                                    1- 1314     ;  pBlock Stats: dbName = C
                                    1- 1315     ;***
                                    1- 1316     ;has an exit
                                    1- 1317     ;3 compiler assigned registers:
                                    1- 1318     ;   r0x1032
                                    1- 1319     ;   STK00
                                    1- 1320     ;   r0x1033
                                    1- 1321     ;; Starting pCode block
                                    1- 1322     .segment "code"; module=main, function=_setPWMduty
                                    1- 1324     ;local variable name mapping:
     0000                           1- 1327     _setPWMduty:
                                    1- 1328     ; 2 exit points
                                    1- 1329     	.line	148, "main.c"; 	void setPWMduty(char portPin,char duty)
                                    1- 1330     	BANKSEL	r0x1032
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1331     	MOVAR	r0x1032
     0002 01rr                      1- 1332     	MOVR	STK00,W
                                    1- 1333     	BANKSEL	r0x1033
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 1334     	MOVAR	r0x1033
                                    1- 1335     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1- 1336     	.line	150, "main.c"; 	if(ledCount >= 100)
     0005 2164                      1- 1337     	MOVIA	0x64
                                    1- 1338     	BANKSEL	_ledCount
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 04rr                      1- 1339     	SUBAR	_ledCount,W
     0008 0803                      1- 1340     	BTRSS	STATUS,0
     0009 3rrr                      1- 1341     	LGOTO	_00178_DS_
                                    1- 1342     	.line	152, "main.c"; 	ledCount = 0;
     000A 02rr                      1- 1343     	CLRR	_ledCount
                                    1- 1344     	.line	153, "main.c"; 	if(++second >= 60)
                                    1- 1345     	BANKSEL	_second
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 05rr                      1- 1346     	INCR	_second,F
                                    1- 1347     ;;unsigned compare: left < lit (0x3C=60), size=1
     000D 213C                      1- 1348     	MOVIA	0x3c
     000E 04rr                      1- 1349     	SUBAR	_second,W
     000F 0803                      1- 1350     	BTRSS	STATUS,0
     0010 3rrr                      1- 1351     	LGOTO	_00178_DS_
                                    1- 1352     	.line	155, "main.c"; 	second = 0;
     0011 02rr                      1- 1353     	CLRR	_second
                                    1- 1354     	.line	156, "main.c"; 	if(--min == 0)
                                    1- 1355     	BANKSEL	_min
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 17rr                      1- 1356     	DECRSZ	_min,F
     0014 3rrr                      1- 1357     	LGOTO	_00178_DS_
                                    1- 1358     	.line	157, "main.c"; 	workStep = 0;
                                    1- 1359     	BANKSEL	_workStep
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 02rr                      1- 1360     	CLRR	_workStep
     0017                           1- 1361     _00178_DS_:
                                    1- 1362     	.line	160, "main.c"; 	if(ledCount < duty)
                                    1- 1363     	BANKSEL	r0x1033
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1- 1364     	MOVR	r0x1033,W
                                    1- 1365     	BANKSEL	_ledCount
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 04rr                      1- 1366     	SUBAR	_ledCount,W
     001B 0C03                      1- 1367     	BTRSC	STATUS,0
     001C 3rrr                      1- 1368     	LGOTO	_00180_DS_
                                    1- 1369     	.line	161, "main.c"; 	PORTB |= portPin;
                                    1- 1370     	BANKSEL	r0x1032
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1371     	MOVR	r0x1032,W
     001F 11rr                      1- 1372     	IORAR	_PORTB,F
     0020 3rrr                      1- 1373     	LGOTO	_00182_DS_
     0021                           1- 1374     _00180_DS_:
                                    1- 1375     	.line	163, "main.c"; 	PORTB &= (~portPin);
                                    1- 1376     	BANKSEL	r0x1032
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 07rr                      1- 1377     	COMR	r0x1032,W
     0023 00rr                      1- 1378     	MOVAR	r0x1032
     0024 10rr                      1- 1379     	ANDAR	_PORTB,F
     0025                           1- 1380     _00182_DS_:
                                    1- 1381     	.line	164, "main.c"; 	}
                                    1- 1382     	RETURN	
     0025 0010                      3-   26 m1      ret
                                    1- 1383     ; exit point of _setPWMduty
                                    1- 1385     ;***
                                    1- 1386     ;  pBlock Stats: dbName = C
                                    1- 1387     ;***
                                    1- 1388     ;has an exit
                                    1- 1389     ;functions called:
                                    1- 1390     ;   _MIN
                                    1- 1391     ;   _HIGHT
                                    1- 1392     ;   _MEDIUM
                                    1- 1393     ;   _LOW
                                    1- 1394     ;   __gptrget1
                                    1- 1395     ;   _showNubShiwei
                                    1- 1396     ;   __gptrget1
                                    1- 1397     ;   _showNubGewei
                                    1- 1398     ;   _MIN
                                    1- 1399     ;   _HIGHT
                                    1- 1400     ;   _MEDIUM
                                    1- 1401     ;   _LOW
                                    1- 1402     ;   __gptrget1
                                    1- 1403     ;   _showNubShiwei
                                    1- 1404     ;   __gptrget1
                                    1- 1405     ;   _showNubGewei
                                    1- 1406     ;5 compiler assigned registers:
                                    1- 1407     ;   r0x1034
                                    1- 1408     ;   r0x1035
                                    1- 1409     ;   STK01
                                    1- 1410     ;   STK00
                                    1- 1411     ;   r0x1036
                                    1- 1412     ;; Starting pCode block
                                    1- 1413     .segment "code"; module=main, function=_refreshNub
     0000                           1- 1415     _refreshNub:
                                    1- 1416     ; 2 exit points
                                    1- 1417     	.line	122, "main.c"; 	if(tempshiweiNum != shiweiNum || tempgeweiNum != geweiNum )
                                    1- 1418     	BANKSEL	_shiweiNum
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 01rr                      1- 1419     	MOVR	_shiweiNum,W
                                    1- 1420     	BANKSEL	_tempshiweiNum
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 12rr                      1- 1421     	XORAR	_tempshiweiNum,W
     0004 0903                      1- 1422     	BTRSS	STATUS,2
     0005 3rrr                      1- 1423     	LGOTO	_00134_DS_
                                    1- 1424     	BANKSEL	_geweiNum
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 01rr                      1- 1425     	MOVR	_geweiNum,W
                                    1- 1426     	BANKSEL	_tempgeweiNum
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 12rr                      1- 1427     	XORAR	_tempgeweiNum,W
     000A 0D03                      1- 1428     	BTRSC	STATUS,2
     000B 3rrr                      1- 1429     	LGOTO	_00135_DS_
     000C                           1- 1430     _00134_DS_:
                                    1- 1431     	.line	124, "main.c"; 	if(++refreshCount >= 200)
                                    1- 1432     	BANKSEL	_refreshCount
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 05rr                      1- 1433     	INCR	_refreshCount,F
     000E 21C8                      1- 1434     	MOVIA	0xc8
     000F 04rr                      1- 1435     	SUBAR	_refreshCount,W
     0010 0803                      1- 1436     	BTRSS	STATUS,0
     0011 3rrr                      1- 1437     	LGOTO	_00136_DS_
                                    1- 1438     	.line	126, "main.c"; 	refreshCount = 0;
     0012 02rr                      1- 1439     	CLRR	_refreshCount
                                    1- 1440     	.line	127, "main.c"; 	tempshiweiNum = shiweiNum;
                                    1- 1441     	BANKSEL	_shiweiNum
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 01rr                      1- 1442     	MOVR	_shiweiNum,W
                                    1- 1443     	BANKSEL	_tempshiweiNum
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 00rr                      1- 1444     	MOVAR	_tempshiweiNum
                                    1- 1445     	.line	128, "main.c"; 	tempgeweiNum = geweiNum;
                                    1- 1446     	BANKSEL	_geweiNum
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1- 1447     	MOVR	_geweiNum,W
                                    1- 1448     	BANKSEL	_tempgeweiNum
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 00rr                      1- 1449     	MOVAR	_tempgeweiNum
     001B 3rrr                      1- 1450     	LGOTO	_00136_DS_
     001C                           1- 1451     _00135_DS_:
                                    1- 1452     	.line	133, "main.c"; 	refreshCount = 0;
                                    1- 1453     	BANKSEL	_refreshCount
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 02rr                      1- 1454     	CLRR	_refreshCount
     001E                           1- 1455     _00136_DS_:
                                    1- 1456     	.line	135, "main.c"; 	MIN();
     001E 2rrr                      1- 1457     	LCALL	_MIN
                                    1- 1458     	.line	136, "main.c"; 	if(workStep == 1)
                                    1- 1459     	BANKSEL	_workStep
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 01rr                      1- 1460     	MOVR	_workStep,W
     0021 2401                      1- 1461     	XORIA	0x01
     0022 0903                      1- 1462     	BTRSS	STATUS,2
     0023 3rrr                      1- 1463     	LGOTO	_00144_DS_
                                    1- 1464     	.line	137, "main.c"; 	HIGHT();
     0024 2rrr                      1- 1465     	LCALL	_HIGHT
     0025 3rrr                      1- 1466     	LGOTO	_00145_DS_
     0026                           1- 1467     _00144_DS_:
                                    1- 1468     	.line	138, "main.c"; 	else if(workStep == 2)
                                    1- 1469     	BANKSEL	_workStep
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1- 1470     	MOVR	_workStep,W
     0028 2402                      1- 1471     	XORIA	0x02
     0029 0903                      1- 1472     	BTRSS	STATUS,2
     002A 3rrr                      1- 1473     	LGOTO	_00141_DS_
                                    1- 1474     	.line	139, "main.c"; 	MEDIUM();
     002B 2rrr                      1- 1475     	LCALL	_MEDIUM
     002C 3rrr                      1- 1476     	LGOTO	_00145_DS_
     002D                           1- 1477     _00141_DS_:
                                    1- 1478     	.line	140, "main.c"; 	else if(workStep == 3)
                                    1- 1479     	BANKSEL	_workStep
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 01rr                      1- 1480     	MOVR	_workStep,W
     002F 2403                      1- 1481     	XORIA	0x03
     0030 0D03                      1- 1482     	BTRSC	STATUS,2
                                    1- 1483     	.line	141, "main.c"; 	LOW();
     0031 2rrr                      1- 1484     	LCALL	_LOW
     0032                           1- 1485     _00145_DS_:
                                    1- 1486     	.line	142, "main.c"; 	if(tempshiweiNum)
                                    1- 1487     	BANKSEL	_tempshiweiNum
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1- 1488     	MOVR	_tempshiweiNum,W
     0034 0D03                      1- 1489     	BTRSC	STATUS,2
     0035 3rrr                      1- 1490     	LGOTO	_00147_DS_
                                    1- 1491     	.line	143, "main.c"; 	showNubShiwei(numArray[tempshiweiNum]);
     0036 01rr                      1- 1492     	MOVR	_tempshiweiNum,W
     0037 25rr                      1- 1493     	ADDIA	(_numArray + 0)
                                    1- 1494     	BANKSEL	r0x1034
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 00rr                      1- 1495     	MOVAR	r0x1034
     003A 21rr                      1- 1496     	MOVIA	((_numArray + 0) >> 8) & 0xff
     003B 0C03                      1- 1497     	BTRSC	STATUS,0
     003C 2501                      1- 1498     	ADDIA	0x01
                                    1- 1499     	BANKSEL	r0x1035
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 00rr                      1- 1500     	MOVAR	r0x1035
                                    1- 1501     	BANKSEL	r0x1034
     003F rrrr                      3-   71 m1      .banksel ram_address
     0040 01rr                      1- 1502     	MOVR	r0x1034,W
     0041 00rr                      1- 1503     	MOVAR	STK01
                                    1- 1504     	BANKSEL	r0x1035
     0042 rrrr                      3-   71 m1      .banksel ram_address
     0043 01rr                      1- 1505     	MOVR	r0x1035,W
     0044 00rr                      1- 1506     	MOVAR	STK00
     0045 2100                      1- 1507     	MOVIA	0x00
     0046 2rrr                      1- 1508     	LCALL	__gptrget1
                                    1- 1509     	BANKSEL	r0x1036
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 00rr                      1- 1510     	MOVAR	r0x1036
     0049 2rrr                      1- 1511     	LCALL	_showNubShiwei
     004A                           1- 1512     _00147_DS_:
                                    1- 1513     	.line	144, "main.c"; 	showNubGewei(numArray[tempgeweiNum]);
                                    1- 1514     	BANKSEL	_tempgeweiNum
     004A rrrr                      3-   71 m1      .banksel ram_address
     004B 01rr                      1- 1515     	MOVR	_tempgeweiNum,W
     004C 25rr                      1- 1516     	ADDIA	(_numArray + 0)
                                    1- 1517     	BANKSEL	r0x1034
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 00rr                      1- 1518     	MOVAR	r0x1034
     004F 21rr                      1- 1519     	MOVIA	((_numArray + 0) >> 8) & 0xff
     0050 0C03                      1- 1520     	BTRSC	STATUS,0
     0051 2501                      1- 1521     	ADDIA	0x01
                                    1- 1522     	BANKSEL	r0x1035
     0052 rrrr                      3-   71 m1      .banksel ram_address
     0053 00rr                      1- 1523     	MOVAR	r0x1035
                                    1- 1524     	BANKSEL	r0x1034
     0054 rrrr                      3-   71 m1      .banksel ram_address
     0055 01rr                      1- 1525     	MOVR	r0x1034,W
     0056 00rr                      1- 1526     	MOVAR	STK01
                                    1- 1527     	BANKSEL	r0x1035
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 01rr                      1- 1528     	MOVR	r0x1035,W
     0059 00rr                      1- 1529     	MOVAR	STK00
     005A 2100                      1- 1530     	MOVIA	0x00
     005B 2rrr                      1- 1531     	LCALL	__gptrget1
                                    1- 1532     	BANKSEL	r0x1036
     005C rrrr                      3-   71 m1      .banksel ram_address
     005D 00rr                      1- 1533     	MOVAR	r0x1036
     005E 2rrr                      1- 1534     	LCALL	_showNubGewei
                                    1- 1535     	.line	145, "main.c"; 	}
                                    1- 1536     	RETURN	
     005F 0010                      3-   26 m1      ret
                                    1- 1537     ; exit point of _refreshNub
                                    1- 1540     ;	code size estimation:
                                    1- 1541     ;	  499+  131 =   630 instructions ( 1522 byte)
                                    1- 1543     	end
                                    1- 1543     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__divuchar              Label    00000000
__gptrget1              Label    00000000
__moduchar              Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000001B
_00002_DS_              Label    0000002E
_00003_DS_              Label    00000025
_00110_DS_              Label    0000002A
_00112_DS_              Label    0000002D
_00114_DS_              Label    00000031
_00127_DS_              Label    0000001B
_00134_DS_              Label    0000000C
_00135_DS_              Label    0000001C
_00136_DS_              Label    0000001E
_00141_DS_              Label    0000002D
_00144_DS_              Label    00000026
_00145_DS_              Label    00000032
_00147_DS_              Label    0000004A
_00178_DS_              Label    00000017
_00180_DS_              Label    00000021
_00182_DS_              Label    00000025
_00194_DS_              Label    00000042
_00196_DS_              Label    00000044
_00204_DS_              Label    00000035
_00211_DS_              Label    00000010
_00213_DS_              Label    00000031
_00218_DS_              Label    00000000
_00225_DS_              Label    00000009
_00227_DS_              Label    0000001C
_00236_DS_              Label    00000013
_00252_DS_              Label    0000001F
_00253_DS_              Label    00000027
_00255_DS_              Label    00000015
_00256_DS_              Label    00000029
_00257_DS_              Label    0000002A
_00265_DS_              Label    00000016
_00267_DS_              Label    0000000E
_00268_DS_              Label    00000018
_00269_DS_              Label    00000019
_00275_DS_              Label    00000014
_00279_DS_              Label    00000026
_00282_DS_              Label    0000001D
_00287_DS_              Label    0000002F
_00288_DS_              Label    00000037
_00290_DS_              Label    0000004B
_00294_DS_              Label    0000005D
_00297_DS_              Label    00000054
_00301_DS_              Label    00000065
_A2                     Label    00000000
_A3                     Label    00000000
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_B1                     Label    00000000
_B2                     Label    00000000
_B3                     Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_C1                     Label    00000000
_C2                     Label    00000000
_C3                     Label    00000000
_checkMaxAD             Label    00000000
_CMPCR                  Label    00000000
_D2                     Label    00000000
_D3                     Label    00000000
_delay                  Label    00000000
_delayms                Label    00000000
_duty                   Label    00000000
_E2                     Label    00000000
_E3                     Label    00000000
_F_AIN5_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_F2                     Label    00000000
_F3                     Label    00000000
_FSR                    Label    00000000
_G2                     Label    00000000
_G3                     Label    00000000
_geweiNum               Label    00000000
_gotoSleep              Label    00000000
_HIGHT                  Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyClick               Label    00000000
_keyCon                 Label    00000000
_keyCount               Label    00000000
_keyCount2              Label    00000000
_keyRead                Label    00000000
_keyRead2               Label    00000000
_ledCount               Label    00000000
_longPressFlag          Label    00000000
_LOW                    Label    00000000
_main                   Label    00000000
_MEDIUM                 Label    00000000
_min                    Label    00000000
_MIN                    Label    00000000
_numArray               Label    00000000
_OSCCR                  Label    00000000
_overLoadTime           Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_R_AIN5_DATA            Label    00000000
_R_AIN5_DATA_LB         Label    00000000
_refreshCount           Label    00000000
_refreshNub             Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_second                 Label    00000000
_setHightOutput         Label    00000000
_setInput               Label    00000000
_setlowOutput           Label    00000000
_setOutput              Label    00000000
_setPWMduty             Label    00000000
_shiweiNum              Label    00000000
_showBaiwei             Label    00000000
_showNub                Label    00000000
_showNubGewei           Label    00000000
_showNubGewei2          Label    00000000
_showNubShiwei          Label    00000000
_showNubShiwei2         Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_tempgeweiNum           Label    00000000
_tempshiweiNum          Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workStep               Label    00000000
_workStep2              Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000042
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1022                 Label    00000000
r0x1023                 Label    00000000
r0x1024                 Label    00000000
r0x1025                 Label    00000000
r0x1026                 Label    00000000
r0x1027                 Label    00000000
r0x1028                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102D                 Label    00000000
r0x1030                 Label    00000000
r0x1031                 Label    00000000
r0x1032                 Label    00000000
r0x1033                 Label    00000000
r0x1034                 Label    00000000
r0x1035                 Label    00000000
r0x1036                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
