
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_gotoSleep
                                    1-   57     	extern	_setLedduty
                                    1-   58     	extern	_keyCtr
                                    1-   59     	extern	_keyRead
                                    1-   60     	extern	_workCtr
                                    1-   61     	extern	_isr
                                    1-   62     	extern	_main
                                    1-   63     	extern	_workTime
                                    1-   64     	extern	_IntFlag
                                    1-   65     	extern	_intCount
                                    1-   66     	extern	_duty0
                                    1-   67     	extern	_duty1
                                    1-   68     	extern	_duty2
                                    1-   69     	extern	_duty3
                                    1-   70     	extern	_powerFlag
                                    1-   71     	extern	_keyCount
                                    1-   72     	extern	_ledCount
                                    1-   73     	extern	_sleepTime
                                    1-   75     	extern PSAVE
                                    1-   76     	extern SSAVE
                                    1-   77     	extern WSAVE
                                    1-   78     	extern STK03
                                    1-   79     	extern STK02
                                    1-   80     	extern STK01
                                    1-   81     	extern STK00
                                    1-   83     .segment "uninit", 0x20000010
 20000010                           1-   84     PSAVE:
                                    1-   85     	.res 1
 20000011                           1-   86     SSAVE:
                                    1-   87     	.res 1
 20000012                           1-   88     WSAVE:
                                    1-   89     	.res 1
 20000013                           1-   90     STK03:
                                    1-   91     	.res 1
 20000014                           1-   92     STK02:
                                    1-   93     	.res 1
 20000015                           1-   94     STK01:
                                    1-   95     	.res 1
 20000016                           1-   96     STK00:
                                    1-   97     	.res 1
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     ; global definitions
                                    1-  101     ;--------------------------------------------------------
                                    1-  102     ;--------------------------------------------------------
                                    1-  103     ; absolute symbol definitions
                                    1-  104     ;--------------------------------------------------------
                                    1-  105     ;--------------------------------------------------------
                                    1-  106     ; compiler-defined variables
                                    1-  107     ;--------------------------------------------------------
                                    1-  108     .segment "uninit"
     0000                           1-  109     r0x1010:
                                    1-  110     	.res	1
                                    1-  111     .segment "uninit"
     0000                           1-  112     r0x1011:
                                    1-  113     	.res	1
                                    1-  114     .segment "uninit"
     0000                           1-  115     r0x100F:
                                    1-  116     	.res	1
                                    1-  117     ;--------------------------------------------------------
                                    1-  118     ; initialized data
                                    1-  119     ;--------------------------------------------------------
                                    1-  121     .segment "idata"
     0000                           1-  122     _workTime:
     0000 0000 0000                 1-  123     	dw	0x00, 0x00
                                    1-  127     .segment "idata"
     0000                           1-  128     _IntFlag:
     0000 0000                      1-  129     	dw	0x00
                                    1-  133     .segment "idata"
     0000                           1-  134     _intCount:
     0000 0000                      1-  135     	dw	0x00
                                    1-  139     .segment "idata"
     0000                           1-  140     _duty0:
     0000 0000                      1-  141     	dw	0x00
                                    1-  145     .segment "idata"
     0000                           1-  146     _duty1:
     0000 0000                      1-  147     	dw	0x00
                                    1-  151     .segment "idata"
     0000                           1-  152     _duty2:
     0000 0000                      1-  153     	dw	0x00
                                    1-  157     .segment "idata"
     0000                           1-  158     _duty3:
     0000 0000                      1-  159     	dw	0x00
                                    1-  163     .segment "idata"
     0000                           1-  164     _powerFlag:
     0000 0000                      1-  165     	dw	0x00
                                    1-  169     .segment "idata"
     0000                           1-  170     _keyCount:
     0000 0000                      1-  171     	dw	0x00
                                    1-  175     .segment "idata"
     0000                           1-  176     _ledCount:
     0000 0000                      1-  177     	dw	0x00
                                    1-  181     .segment "idata"
     0000                           1-  182     _sleepTime:
     0000 0000                      1-  183     	dw	0x00
                                    1-  186     ;--------------------------------------------------------
                                    1-  187     ; overlayable items in internal ram 
                                    1-  188     ;--------------------------------------------------------
                                    1-  189     ;	udata_ovr
                                    1-  190     ;--------------------------------------------------------
                                    1-  191     ; reset vector 
                                    1-  192     ;--------------------------------------------------------
                                    1-  193     ORG	0x0000
     0000 3rrr                      1-  194     	LGOTO	__nyc_ny8_startup
                                    1-  195     ;--------------------------------------------------------
                                    1-  196     ; interrupt and initialization code
                                    1-  197     ;--------------------------------------------------------
                                    1-  198     ORG 0x0008
     0008 3rrr                      1-  199     	lgoto	__sdcc_interrupt
                                    1-  201     .segment "code"
     0000                           1-  202     __sdcc_interrupt:
                                    1-  203     ;***
                                    1-  204     ;  pBlock Stats: dbName = I
                                    1-  205     ;***
                                    1-  206     ;2 compiler assigned registers:
                                    1-  207     ;   STK00
                                    1-  208     ;   STK01
                                    1-  209     ;; Starting pCode block
     0000                           1-  210     _isr:
                                    1-  211     ; 0 exit points
                                    1-  212     	.line	28, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  213     	MOVAR	WSAVE
     0001 1503                      1-  214     	SWAPR	STATUS,W
     0002 0283                      1-  215     	CLRR	STATUS
     0003 00rr                      1-  216     	MOVAR	SSAVE
     0004 010A                      1-  217     	MOVR	PCHBUF,W
     0005 028A                      1-  218     	CLRR	PCHBUF
     0006 00rr                      1-  219     	MOVAR	PSAVE
     0007 0104                      1-  220     	MOVR	FSR,W
     0008 00rr                      1-  221     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  222     	MOVR	STK00,W
     000A 00rr                      1-  223     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  224     	MOVR	STK01,W
     000C 00rr                      1-  225     	MOVAR	___sdcc_saved_stk01
                                    1-  226     	.line	30, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  227     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  228     	LGOTO	_00108_DS_
                                    1-  229     	.line	32, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  230     	MOVIA	0x38
     0010 03rr                      1-  231     	ADDAR	_TMR0,F
                                    1-  232     	.line	33, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  233     	INCR	_intCount,F
                                    1-  234     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  235     	MOVIA	0x64
     0013 04rr                      1-  236     	SUBAR	_intCount,W
     0014 0803                      1-  237     	BTRSS	STATUS,0
     0015 3rrr                      1-  238     	LGOTO	_00108_DS_
                                    1-  239     	.line	35, "main.c"; 	intCount = 0;
     0016 02rr                      1-  240     	CLRR	_intCount
                                    1-  241     	.line	36, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  242     	MOVIA	0x01
     0018 00rr                      1-  243     	MOVAR	_IntFlag
     0019                           1-  244     _00108_DS_:
                                    1-  245     	.line	39, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  246     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  247     	LGOTO	_00110_DS_
                                    1-  248     	.line	41, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  249     	MOVIA	0xfd
     001C 00rr                      1-  250     	MOVAR	_INTF
     001D                           1-  251     _00110_DS_:
                                    1-  252     	.line	44, "main.c"; 	INTF = 0;
     001D 02rr                      1-  253     	CLRR	_INTF
                                    1-  254     	.line	46, "main.c"; 	}
     001E 01rr                      1-  255     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  256     	MOVAR	STK01
     0020 01rr                      1-  257     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  258     	MOVAR	STK00
     0022 01rr                      1-  259     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  260     	MOVAR	FSR
     0024 01rr                      1-  261     	MOVR	PSAVE,W
     0025 008A                      1-  262     	MOVAR	PCHBUF
     0026 0283                      1-  263     	CLRR	STATUS
     0027 15rr                      1-  264     	SWAPR	SSAVE,W
     0028 0083                      1-  265     	MOVAR	STATUS
     0029 15rr                      1-  266     	SWAPR	WSAVE,F
     002A 15rr                      1-  267     	SWAPR	WSAVE,W
     002B                           1-  268     END_OF_INTERRUPT:
     002B 0011                      1-  269     	RETIE	
                                    1-  271     ;--------------------------------------------------------
                                    1-  272     ; code
                                    1-  273     ;--------------------------------------------------------
                                    1-  274     ;***
                                    1-  275     ;  pBlock Stats: dbName = M
                                    1-  276     ;***
                                    1-  277     ;has an exit
                                    1-  278     ;functions called:
                                    1-  279     ;   _gotoSleep
                                    1-  280     ;   _setLedduty
                                    1-  281     ;   _keyCtr
                                    1-  282     ;   _workCtr
                                    1-  283     ;   _gotoSleep
                                    1-  284     ;   _gotoSleep
                                    1-  285     ;   _setLedduty
                                    1-  286     ;   _keyCtr
                                    1-  287     ;   _workCtr
                                    1-  288     ;   _gotoSleep
                                    1-  289     ;; Starting pCode block
                                    1-  290     .segment "code"; module=main, function=_main
     0000                           1-  292     _main:
                                    1-  293     ; 2 exit points
                                    1-  294     	.line	51, "main.c"; 	DISI();
     0000 0013                      1-  295     	DISI
                                    1-  296     	.line	52, "main.c"; 	BPHCON = (unsigned char)~C_PB5_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21DF                      1-  297     	MOVIA	0xdf
     0002 00rr                      1-  298     	MOVAR	_BPHCON
                                    1-  299     	.line	53, "main.c"; 	IOSTB =  C_PB5_Input;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 2120                      1-  300     	MOVIA	0x20
     0004 000r                      1-  301     	IOST	_IOSTB
                                    1-  302     	.line	54, "main.c"; 	PORTB = 0x00;                       // PB2 & PB0 output high
     0005 02rr                      1-  303     	CLRR	_PORTB
                                    1-  304     	.line	55, "main.c"; 	duty0 = duty1 = 0;
     0006 02rr                      1-  305     	CLRR	_duty1
     0007 02rr                      1-  306     	CLRR	_duty0
                                    1-  307     	.line	56, "main.c"; 	INTE =  C_INT_TMR0;
     0008 2101                      1-  308     	MOVIA	0x01
     0009 00rr                      1-  309     	MOVAR	_INTE
                                    1-  310     	.line	57, "main.c"; 	TMR0 = 55;
     000A 2137                      1-  311     	MOVIA	0x37
     000B 00rr                      1-  312     	MOVAR	_TMR0
                                    1-  313     	.line	58, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000C 0200                      1-  314     	CLRA	
     000D 0003                      1-  315     	T0MD	
                                    1-  316     	.line	61, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     000E 2188                      1-  317     	MOVIA	0x88
     000F 00rr                      1-  318     	MOVAR	_PCON
                                    1-  319     	.line	64, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0010 2101                      1-  320     	MOVIA	0x01
     0011 000r                      1-  321     	IOST	_PCON1
                                    1-  322     	.line	65, "main.c"; 	ENI();
     0012 0004                      1-  323     	ENI
                                    1-  324     	.line	66, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  325     	LCALL	_gotoSleep
     0014                           1-  326     _00128_DS_:
                                    1-  327     	.line	69, "main.c"; 	CLRWDT();
     0014 0002                      1-  328     	clrwdt
                                    1-  329     	.line	70, "main.c"; 	if(powerFlag)
     0015 01rr                      1-  330     	MOVR	_powerFlag,W
     0016 0D03                      1-  331     	BTRSC	STATUS,2
     0017 3rrr                      1-  332     	LGOTO	_00116_DS_
                                    1-  333     	.line	71, "main.c"; 	setLedduty();
     0018 2rrr                      1-  334     	LCALL	_setLedduty
     0019 3rrr                      1-  335     	LGOTO	_00117_DS_
     001A                           1-  336     _00116_DS_:
                                    1-  337     	.line	73, "main.c"; 	PORTB = 0x00;
     001A 02rr                      1-  338     	CLRR	_PORTB
     001B                           1-  339     _00117_DS_:
                                    1-  340     	.line	74, "main.c"; 	if(!IntFlag)
     001B 01rr                      1-  341     	MOVR	_IntFlag,W
     001C 0D03                      1-  342     	BTRSC	STATUS,2
     001D 3rrr                      1-  343     	LGOTO	_00128_DS_
                                    1-  344     	.line	76, "main.c"; 	IntFlag = 0;   
     001E 02rr                      1-  345     	CLRR	_IntFlag
                                    1-  346     	.line	77, "main.c"; 	keyCtr();
     001F 2rrr                      1-  347     	LCALL	_keyCtr
                                    1-  348     	.line	78, "main.c"; 	if(powerFlag)
     0020 01rr                      1-  349     	MOVR	_powerFlag,W
     0021 0D03                      1-  350     	BTRSC	STATUS,2
     0022 3rrr                      1-  351     	LGOTO	_00124_DS_
                                    1-  352     	.line	79, "main.c"; 	workCtr();
     0023 2rrr                      1-  353     	LCALL	_workCtr
     0024 3rrr                      1-  354     	LGOTO	_00128_DS_
     0025                           1-  355     _00124_DS_:
                                    1-  356     	.line	82, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0025 01rr                      1-  357     	MOVR	_keyCount,W
     0026 0903                      1-  358     	BTRSS	STATUS,2
     0027 3rrr                      1-  359     	LGOTO	_00128_DS_
     0028 05rr                      1-  360     	INCR	_sleepTime,F
                                    1-  361     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  362     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0029 21C9                      1-  363     	MOVIA	0xc9
     002A 04rr                      1-  364     	SUBAR	_sleepTime,W
     002B 0803                      1-  365     	BTRSS	STATUS,0
     002C 3rrr                      1-  366     	LGOTO	_00128_DS_
                                    1-  367     	.line	83, "main.c"; 	gotoSleep();
     002D 2rrr                      1-  368     	LCALL	_gotoSleep
     002E 3rrr                      1-  369     	LGOTO	_00128_DS_
                                    1-  370     	.line	89, "main.c"; 	}
                                    1-  371     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1-  372     ; exit point of _main
                                    1-  374     ;***
                                    1-  375     ;  pBlock Stats: dbName = C
                                    1-  376     ;***
                                    1-  377     ;has an exit
                                    1-  378     ;; Starting pCode block
                                    1-  379     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  381     _gotoSleep:
                                    1-  382     ; 2 exit points
                                    1-  383     	.line	244, "main.c"; 	sleepTime = 0;
     0000 02rr                      1-  384     	CLRR	_sleepTime
                                    1-  385     	.line	245, "main.c"; 	PORTB = 0x00;
     0001 02rr                      1-  386     	CLRR	_PORTB
                                    1-  387     	.line	246, "main.c"; 	BWUCON = 0x20;
     0002 2120                      1-  388     	MOVIA	0x20
     0003 00rr                      1-  389     	MOVAR	_BWUCON
                                    1-  390     	.line	247, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0004 2103                      1-  391     	MOVIA	0x03
     0005 00rr                      1-  392     	MOVAR	_INTE
                                    1-  393     	.line	248, "main.c"; 	PCON =  C_LVR_En;	
     0006 2108                      1-  394     	MOVIA	0x08
     0007 00rr                      1-  395     	MOVAR	_PCON
                                    1-  396     	.line	249, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0008 02rr                      1-  397     	CLRR	_INTF
                                    1-  398     	.line	250, "main.c"; 	CLRWDT();
     0009 0002                      1-  399     	clrwdt
                                    1-  400     	.line	251, "main.c"; 	ENI();
     000A 0004                      1-  401     	ENI
                                    1-  402     	.line	252, "main.c"; 	SLEEP();
     000B 0001                      1-  403     	sleep
                                    1-  404     	.line	253, "main.c"; 	BWUCON = 0x00;
     000C 02rr                      1-  405     	CLRR	_BWUCON
                                    1-  406     	.line	254, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1-  407     	MOVIA	0x01
     000E 00rr                      1-  408     	MOVAR	_INTE
                                    1-  409     	.line	255, "main.c"; 	INTF = 0;
     000F 02rr                      1-  410     	CLRR	_INTF
                                    1-  411     	.line	257, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0010 2188                      1-  412     	MOVIA	0x88
     0011 00rr                      1-  413     	MOVAR	_PCON
                                    1-  414     	.line	259, "main.c"; 	}
                                    1-  415     	RETURN	
     0012 0010                      3-   26 m1      ret
                                    1-  416     ; exit point of _gotoSleep
                                    1-  418     ;***
                                    1-  419     ;  pBlock Stats: dbName = C
                                    1-  420     ;***
                                    1-  421     ;1 compiler assigned register :
                                    1-  422     ;   r0x100F
                                    1-  423     ;; Starting pCode block
                                    1-  424     .segment "code"; module=main, function=_setLedduty
     0000                           1-  426     _setLedduty:
                                    1-  427     ; 0 exit points
                                    1-  428     	.line	197, "main.c"; 	if(ledCount <= duty0)
     0000 01rr                      1-  429     	MOVR	_ledCount,W
     0001 04rr                      1-  430     	SUBAR	_duty0,W
     0002 0803                      1-  431     	BTRSS	STATUS,0
     0003 3rrr                      1-  432     	LGOTO	_00295_DS_
                                    1-  433     	.line	199, "main.c"; 	IOSTB &= 0xFE;
     0004 001r                      1-  434     	IOSTR	_IOSTB
     0005 00rr                      1-  435     	MOVAR	r0x100F
     0006 1Crr                      1-  436     	BCR	r0x100F,0
     0007 01rr                      1-  437     	MOVR	r0x100F,W
     0008 000r                      1-  438     	IOST	_IOSTB
                                    1-  439     	.line	200, "main.c"; 	PORTB &= 0xFE;
     0009 1Crr                      1-  440     	BCR	_PORTB,0
     000A 3rrr                      1-  441     	LGOTO	_00296_DS_
     000B                           1-  442     _00295_DS_:
                                    1-  443     	.line	204, "main.c"; 	IOSTB |= 0x01;
     000B 001r                      1-  444     	IOSTR	_IOSTB
     000C 00rr                      1-  445     	MOVAR	r0x100F
     000D 18rr                      1-  446     	BSR	r0x100F,0
     000E 01rr                      1-  447     	MOVR	r0x100F,W
     000F 000r                      1-  448     	IOST	_IOSTB
                                    1-  449     	.line	205, "main.c"; 	PORTB |= 0x01;
     0010 18rr                      1-  450     	BSR	_PORTB,0
     0011                           1-  451     _00296_DS_:
                                    1-  452     	.line	207, "main.c"; 	if(ledCount <= duty1)
     0011 01rr                      1-  453     	MOVR	_ledCount,W
     0012 04rr                      1-  454     	SUBAR	_duty1,W
     0013 0803                      1-  455     	BTRSS	STATUS,0
     0014 3rrr                      1-  456     	LGOTO	_00298_DS_
                                    1-  457     	.line	209, "main.c"; 	IOSTB &= 0xFD;
     0015 001r                      1-  458     	IOSTR	_IOSTB
     0016 00rr                      1-  459     	MOVAR	r0x100F
     0017 1Crr                      1-  460     	BCR	r0x100F,1
     0018 01rr                      1-  461     	MOVR	r0x100F,W
     0019 000r                      1-  462     	IOST	_IOSTB
                                    1-  463     	.line	210, "main.c"; 	PORTB &= 0xFD;
     001A 1Crr                      1-  464     	BCR	_PORTB,1
     001B 3rrr                      1-  465     	LGOTO	_00299_DS_
     001C                           1-  466     _00298_DS_:
                                    1-  467     	.line	214, "main.c"; 	IOSTB |= 0x02;
     001C 001r                      1-  468     	IOSTR	_IOSTB
     001D 00rr                      1-  469     	MOVAR	r0x100F
     001E 18rr                      1-  470     	BSR	r0x100F,1
     001F 01rr                      1-  471     	MOVR	r0x100F,W
     0020 000r                      1-  472     	IOST	_IOSTB
                                    1-  473     	.line	215, "main.c"; 	PORTB |= 0x02;
     0021 18rr                      1-  474     	BSR	_PORTB,1
     0022                           1-  475     _00299_DS_:
                                    1-  476     	.line	217, "main.c"; 	if(ledCount <= duty2)
     0022 01rr                      1-  477     	MOVR	_ledCount,W
     0023 04rr                      1-  478     	SUBAR	_duty2,W
     0024 0803                      1-  479     	BTRSS	STATUS,0
     0025 3rrr                      1-  480     	LGOTO	_00301_DS_
                                    1-  481     	.line	219, "main.c"; 	IOSTB &= 0xFB;
     0026 001r                      1-  482     	IOSTR	_IOSTB
     0027 00rr                      1-  483     	MOVAR	r0x100F
     0028 1Drr                      1-  484     	BCR	r0x100F,2
     0029 01rr                      1-  485     	MOVR	r0x100F,W
     002A 000r                      1-  486     	IOST	_IOSTB
                                    1-  487     	.line	220, "main.c"; 	PORTB &= 0xFB;
     002B 1Drr                      1-  488     	BCR	_PORTB,2
     002C 3rrr                      1-  489     	LGOTO	_00302_DS_
     002D                           1-  490     _00301_DS_:
                                    1-  491     	.line	224, "main.c"; 	IOSTB |= 0x04;
     002D 001r                      1-  492     	IOSTR	_IOSTB
     002E 00rr                      1-  493     	MOVAR	r0x100F
     002F 19rr                      1-  494     	BSR	r0x100F,2
     0030 01rr                      1-  495     	MOVR	r0x100F,W
     0031 000r                      1-  496     	IOST	_IOSTB
                                    1-  497     	.line	225, "main.c"; 	PORTB |= 0x04;
     0032 19rr                      1-  498     	BSR	_PORTB,2
     0033                           1-  499     _00302_DS_:
                                    1-  500     	.line	227, "main.c"; 	if(ledCount <= duty3)
     0033 01rr                      1-  501     	MOVR	_ledCount,W
     0034 04rr                      1-  502     	SUBAR	_duty3,W
     0035 0803                      1-  503     	BTRSS	STATUS,0
     0036 3rrr                      1-  504     	LGOTO	_00304_DS_
                                    1-  505     	.line	229, "main.c"; 	IOSTB &= 0xE7;
     0037 001r                      1-  506     	IOSTR	_IOSTB
     0038 00rr                      1-  507     	MOVAR	r0x100F
     0039 21E7                      1-  508     	MOVIA	0xe7
     003A 10rr                      1-  509     	ANDAR	r0x100F,F
     003B 01rr                      1-  510     	MOVR	r0x100F,W
     003C 000r                      1-  511     	IOST	_IOSTB
                                    1-  512     	.line	230, "main.c"; 	PORTB &= 0xE7;
     003D 21E7                      1-  513     	MOVIA	0xe7
     003E 10rr                      1-  514     	ANDAR	_PORTB,F
     003F 3rrr                      1-  515     	LGOTO	_00305_DS_
     0040                           1-  516     _00304_DS_:
                                    1-  517     	.line	234, "main.c"; 	IOSTB |= 0x18;
     0040 001r                      1-  518     	IOSTR	_IOSTB
     0041 00rr                      1-  519     	MOVAR	r0x100F
     0042 2118                      1-  520     	MOVIA	0x18
     0043 11rr                      1-  521     	IORAR	r0x100F,F
     0044 01rr                      1-  522     	MOVR	r0x100F,W
     0045 000r                      1-  523     	IOST	_IOSTB
                                    1-  524     	.line	235, "main.c"; 	PORTB |= 0x18;
     0046 2118                      1-  525     	MOVIA	0x18
     0047 11rr                      1-  526     	IORAR	_PORTB,F
     0048                           1-  527     _00305_DS_:
                                    1-  528     	.line	237, "main.c"; 	if(++ledCount >= 100)
     0048 05rr                      1-  529     	INCR	_ledCount,F
                                    1-  530     ;;unsigned compare: left < lit (0x64=100), size=1
     0049 2164                      1-  531     	MOVIA	0x64
     004A 04rr                      1-  532     	SUBAR	_ledCount,W
     004B 0C03                      1-  533     	BTRSC	STATUS,0
                                    1-  534     	.line	238, "main.c"; 	ledCount = 0;
     004C 02rr                      1-  535     	CLRR	_ledCount
                                    1-  536     	.line	239, "main.c"; 	}
                                    1-  537     	RETURN	
     004D 0010                      3-   26 m1      ret
                                    1-  539     ;***
                                    1-  540     ;  pBlock Stats: dbName = C
                                    1-  541     ;***
                                    1-  542     ;has an exit
                                    1-  543     ;functions called:
                                    1-  544     ;   _keyRead
                                    1-  545     ;   _keyRead
                                    1-  546     ;1 compiler assigned register :
                                    1-  547     ;   r0x1011
                                    1-  548     ;; Starting pCode block
                                    1-  549     .segment "code"; module=main, function=_keyCtr
     0000                           1-  551     _keyCtr:
                                    1-  552     ; 2 exit points
                                    1-  553     	.line	177, "main.c"; 	if(keyRead(0x20 & ~PORTB))
     0000 07rr                      1-  554     	COMR	_PORTB,W
     0001 00rr                      1-  555     	MOVAR	r0x1011
     0002 2120                      1-  556     	MOVIA	0x20
     0003 10rr                      1-  557     	ANDAR	r0x1011,F
     0004 01rr                      1-  558     	MOVR	r0x1011,W
     0005 2rrr                      1-  559     	LCALL	_keyRead
     0006 00rr                      1-  560     	MOVAR	r0x1011
     0007 01rr                      1-  561     	MOVR	r0x1011,W
     0008 0D03                      1-  562     	BTRSC	STATUS,2
     0009 3rrr                      1-  563     	LGOTO	_00289_DS_
                                    1-  564     	.line	179, "main.c"; 	workTime = 0;
     000A 02rr                      1-  565     	CLRR	_workTime
     000B 02rr                      1-  566     	CLRR	(_workTime + 1)
                                    1-  567     	.line	180, "main.c"; 	duty0 = duty1 = duty2 = duty3 = 0;
     000C 02rr                      1-  568     	CLRR	_duty3
     000D 02rr                      1-  569     	CLRR	_duty2
     000E 02rr                      1-  570     	CLRR	_duty1
     000F 02rr                      1-  571     	CLRR	_duty0
                                    1-  572     	.line	181, "main.c"; 	ledCount = 0;
     0010 02rr                      1-  573     	CLRR	_ledCount
                                    1-  574     	.line	182, "main.c"; 	if(powerFlag)
     0011 01rr                      1-  575     	MOVR	_powerFlag,W
     0012 0D03                      1-  576     	BTRSC	STATUS,2
     0013 3rrr                      1-  577     	LGOTO	_00285_DS_
                                    1-  578     	.line	184, "main.c"; 	powerFlag = 0;
     0014 02rr                      1-  579     	CLRR	_powerFlag
     0015 3rrr                      1-  580     	LGOTO	_00289_DS_
     0016                           1-  581     _00285_DS_:
                                    1-  582     	.line	188, "main.c"; 	powerFlag = 1;
     0016 2101                      1-  583     	MOVIA	0x01
     0017 00rr                      1-  584     	MOVAR	_powerFlag
     0018                           1-  585     _00289_DS_:
                                    1-  586     	.line	191, "main.c"; 	}
                                    1-  587     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  588     ; exit point of _keyCtr
                                    1-  590     ;***
                                    1-  591     ;  pBlock Stats: dbName = C
                                    1-  592     ;***
                                    1-  593     ;has an exit
                                    1-  594     ;1 compiler assigned register :
                                    1-  595     ;   r0x1010
                                    1-  596     ;; Starting pCode block
                                    1-  597     .segment "code"; module=main, function=_keyRead
                                    1-  599     ;local variable name mapping:
     0000                           1-  601     _keyRead:
                                    1-  602     ; 2 exit points
                                    1-  603     	.line	150, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  604     	MOVAR	r0x1010
                                    1-  605     	.line	152, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  606     	MOVR	r0x1010,W
     0002 0D03                      1-  607     	BTRSC	STATUS,2
     0003 3rrr                      1-  608     	LGOTO	_00277_DS_
                                    1-  609     	.line	154, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  610     	CLRR	_sleepTime
                                    1-  611     	.line	155, "main.c"; 	keyCount++;
     0005 05rr                      1-  612     	INCR	_keyCount,F
                                    1-  613     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  614     	.line	156, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  615     	MOVIA	0xc8
     0007 04rr                      1-  616     	SUBAR	_keyCount,W
     0008 0803                      1-  617     	BTRSS	STATUS,0
     0009 3rrr                      1-  618     	LGOTO	_00278_DS_
                                    1-  619     	.line	158, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  620     	MOVIA	0xc8
     000B 00rr                      1-  621     	MOVAR	_keyCount
     000C 3rrr                      1-  622     	LGOTO	_00278_DS_
                                    1-  623     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  624     _00277_DS_:
                                    1-  625     	.line	163, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  626     	MOVIA	0x08
     000E 04rr                      1-  627     	SUBAR	_keyCount,W
     000F 0803                      1-  628     	BTRSS	STATUS,0
     0010 3rrr                      1-  629     	LGOTO	_00275_DS_
                                    1-  630     	.line	165, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  631     	CLRR	_keyCount
                                    1-  632     	.line	166, "main.c"; 	return	1;
     0012 2101                      1-  633     	MOVIA	0x01
     0013 3rrr                      1-  634     	LGOTO	_00279_DS_
     0014                           1-  635     _00275_DS_:
                                    1-  636     	.line	168, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  637     	CLRR	_keyCount
     0015                           1-  638     _00278_DS_:
                                    1-  639     	.line	170, "main.c"; 	return 0;
     0015 2100                      1-  640     	MOVIA	0x00
     0016                           1-  641     _00279_DS_:
                                    1-  642     	.line	171, "main.c"; 	}
                                    1-  643     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  644     ; exit point of _keyRead
                                    1-  646     ;***
                                    1-  647     ;  pBlock Stats: dbName = C
                                    1-  648     ;***
                                    1-  649     ;; Starting pCode block
                                    1-  650     .segment "code"; module=main, function=_workCtr
     0000                           1-  652     _workCtr:
                                    1-  653     ; 0 exit points
                                    1-  654     	.line	93, "main.c"; 	if(++workTime >= 1600)
     0000 05rr                      1-  655     	INCR	_workTime,F
     0001 0D03                      1-  656     	BTRSC	STATUS,2
     0002 05rr                      1-  657     	INCR	(_workTime + 1),F
                                    1-  658     ;;unsigned compare: left < lit (0x640=1600), size=2
     0003 2106                      1-  659     	MOVIA	0x06
     0004 04rr                      1-  660     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  661     	BTRSS	STATUS,2
     0006 3rrr                      1-  662     	LGOTO	_00251_DS_
     0007 2140                      1-  663     	MOVIA	0x40
     0008 04rr                      1-  664     	SUBAR	_workTime,W
     0009                           1-  665     _00251_DS_:
     0009 0803                      1-  666     	BTRSS	STATUS,0
     000A 3rrr                      1-  667     	LGOTO	_00134_DS_
                                    1-  668     	.line	94, "main.c"; 	workTime = 0;
     000B 02rr                      1-  669     	CLRR	_workTime
     000C 02rr                      1-  670     	CLRR	(_workTime + 1)
                                    1-  671     ;;unsigned compare: left < lit (0x96=150), size=2
     000D                           1-  672     _00134_DS_:
                                    1-  673     	.line	95, "main.c"; 	if(workTime < 150)
     000D 2100                      1-  674     	MOVIA	0x00
     000E 04rr                      1-  675     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  676     	BTRSS	STATUS,2
     0010 3rrr                      1-  677     	LGOTO	_00252_DS_
     0011 2196                      1-  678     	MOVIA	0x96
     0012 04rr                      1-  679     	SUBAR	_workTime,W
     0013                           1-  680     _00252_DS_:
     0013 0C03                      1-  681     	BTRSC	STATUS,0
     0014 3rrr                      1-  682     	LGOTO	_00184_DS_
                                    1-  683     	.line	97, "main.c"; 	duty1 = duty2 = duty3 = 0;
     0015 02rr                      1-  684     	CLRR	_duty3
     0016 02rr                      1-  685     	CLRR	_duty2
     0017 02rr                      1-  686     	CLRR	_duty1
                                    1-  687     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  688     	.line	98, "main.c"; 	if(duty0 < MAXDUTY)
     0018 2196                      1-  689     	MOVIA	0x96
     0019 04rr                      1-  690     	SUBAR	_duty0,W
     001A 0C03                      1-  691     	BTRSC	STATUS,0
     001B 3rrr                      1-  692     	LGOTO	_00186_DS_
                                    1-  693     	.line	99, "main.c"; 	++duty0;
     001C 05rr                      1-  694     	INCR	_duty0,F
     001D 3rrr                      1-  695     	LGOTO	_00186_DS_
                                    1-  696     ;;unsigned compare: left < lit (0xFA=250), size=2
     001E                           1-  697     _00184_DS_:
                                    1-  698     	.line	101, "main.c"; 	else if(workTime < 250)
     001E 2100                      1-  699     	MOVIA	0x00
     001F 04rr                      1-  700     	SUBAR	(_workTime + 1),W
     0020 0903                      1-  701     	BTRSS	STATUS,2
     0021 3rrr                      1-  702     	LGOTO	_00254_DS_
     0022 21FA                      1-  703     	MOVIA	0xfa
     0023 04rr                      1-  704     	SUBAR	_workTime,W
     0024                           1-  705     _00254_DS_:
     0024 0C03                      1-  706     	BTRSC	STATUS,0
     0025 3rrr                      1-  707     	LGOTO	_00181_DS_
                                    1-  708     	.line	102, "main.c"; 	duty0 = MAXDUTY;
     0026 2196                      1-  709     	MOVIA	0x96
     0027 00rr                      1-  710     	MOVAR	_duty0
     0028 3rrr                      1-  711     	LGOTO	_00186_DS_
                                    1-  712     ;;unsigned compare: left < lit (0x190=400), size=2
     0029                           1-  713     _00181_DS_:
                                    1-  714     	.line	103, "main.c"; 	else if(workTime < 400)
     0029 2101                      1-  715     	MOVIA	0x01
     002A 04rr                      1-  716     	SUBAR	(_workTime + 1),W
     002B 0903                      1-  717     	BTRSS	STATUS,2
     002C 3rrr                      1-  718     	LGOTO	_00255_DS_
     002D 2190                      1-  719     	MOVIA	0x90
     002E 04rr                      1-  720     	SUBAR	_workTime,W
     002F                           1-  721     _00255_DS_:
     002F 0C03                      1-  722     	BTRSC	STATUS,0
     0030 3rrr                      1-  723     	LGOTO	_00178_DS_
                                    1-  724     	.line	105, "main.c"; 	if(duty0 > 0)
     0031 01rr                      1-  725     	MOVR	_duty0,W
     0032 0D03                      1-  726     	BTRSC	STATUS,2
     0033 3rrr                      1-  727     	LGOTO	_00186_DS_
                                    1-  728     	.line	106, "main.c"; 	--duty0;
     0034 06rr                      1-  729     	DECR	_duty0,F
     0035 3rrr                      1-  730     	LGOTO	_00186_DS_
                                    1-  731     ;;unsigned compare: left < lit (0x226=550), size=2
     0036                           1-  732     _00178_DS_:
                                    1-  733     	.line	108, "main.c"; 	else if(workTime < 550)
     0036 2102                      1-  734     	MOVIA	0x02
     0037 04rr                      1-  735     	SUBAR	(_workTime + 1),W
     0038 0903                      1-  736     	BTRSS	STATUS,2
     0039 3rrr                      1-  737     	LGOTO	_00256_DS_
     003A 2126                      1-  738     	MOVIA	0x26
     003B 04rr                      1-  739     	SUBAR	_workTime,W
     003C                           1-  740     _00256_DS_:
     003C 0C03                      1-  741     	BTRSC	STATUS,0
     003D 3rrr                      1-  742     	LGOTO	_00175_DS_
                                    1-  743     	.line	110, "main.c"; 	duty0 = 0;
     003E 02rr                      1-  744     	CLRR	_duty0
                                    1-  745     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  746     	.line	111, "main.c"; 	if(duty1 < MAXDUTY)
     003F 2196                      1-  747     	MOVIA	0x96
     0040 04rr                      1-  748     	SUBAR	_duty1,W
     0041 0C03                      1-  749     	BTRSC	STATUS,0
     0042 3rrr                      1-  750     	LGOTO	_00186_DS_
                                    1-  751     	.line	112, "main.c"; 	++duty1;
     0043 05rr                      1-  752     	INCR	_duty1,F
     0044 3rrr                      1-  753     	LGOTO	_00186_DS_
                                    1-  754     ;;unsigned compare: left < lit (0x28A=650), size=2
     0045                           1-  755     _00175_DS_:
                                    1-  756     	.line	114, "main.c"; 	else if(workTime < 650)
     0045 2102                      1-  757     	MOVIA	0x02
     0046 04rr                      1-  758     	SUBAR	(_workTime + 1),W
     0047 0903                      1-  759     	BTRSS	STATUS,2
     0048 3rrr                      1-  760     	LGOTO	_00258_DS_
     0049 218A                      1-  761     	MOVIA	0x8a
     004A 04rr                      1-  762     	SUBAR	_workTime,W
     004B                           1-  763     _00258_DS_:
     004B 0C03                      1-  764     	BTRSC	STATUS,0
     004C 3rrr                      1-  765     	LGOTO	_00172_DS_
                                    1-  766     	.line	115, "main.c"; 	duty1 = MAXDUTY;
     004D 2196                      1-  767     	MOVIA	0x96
     004E 00rr                      1-  768     	MOVAR	_duty1
     004F 3rrr                      1-  769     	LGOTO	_00186_DS_
                                    1-  770     ;;unsigned compare: left < lit (0x320=800), size=2
     0050                           1-  771     _00172_DS_:
                                    1-  772     	.line	116, "main.c"; 	else if(workTime < 800)
     0050 2103                      1-  773     	MOVIA	0x03
     0051 04rr                      1-  774     	SUBAR	(_workTime + 1),W
     0052 0903                      1-  775     	BTRSS	STATUS,2
     0053 3rrr                      1-  776     	LGOTO	_00259_DS_
     0054 2120                      1-  777     	MOVIA	0x20
     0055 04rr                      1-  778     	SUBAR	_workTime,W
     0056                           1-  779     _00259_DS_:
     0056 0C03                      1-  780     	BTRSC	STATUS,0
     0057 3rrr                      1-  781     	LGOTO	_00169_DS_
                                    1-  782     	.line	118, "main.c"; 	if(duty1 > 0)
     0058 01rr                      1-  783     	MOVR	_duty1,W
     0059 0D03                      1-  784     	BTRSC	STATUS,2
     005A 3rrr                      1-  785     	LGOTO	_00186_DS_
                                    1-  786     	.line	119, "main.c"; 	--duty1;
     005B 06rr                      1-  787     	DECR	_duty1,F
     005C 3rrr                      1-  788     	LGOTO	_00186_DS_
                                    1-  789     ;;unsigned compare: left < lit (0x3B6=950), size=2
     005D                           1-  790     _00169_DS_:
                                    1-  791     	.line	121, "main.c"; 	else if(workTime < 950)
     005D 2103                      1-  792     	MOVIA	0x03
     005E 04rr                      1-  793     	SUBAR	(_workTime + 1),W
     005F 0903                      1-  794     	BTRSS	STATUS,2
     0060 3rrr                      1-  795     	LGOTO	_00260_DS_
     0061 21B6                      1-  796     	MOVIA	0xb6
     0062 04rr                      1-  797     	SUBAR	_workTime,W
     0063                           1-  798     _00260_DS_:
     0063 0C03                      1-  799     	BTRSC	STATUS,0
     0064 3rrr                      1-  800     	LGOTO	_00166_DS_
                                    1-  801     	.line	123, "main.c"; 	duty1 = 0;
     0065 02rr                      1-  802     	CLRR	_duty1
                                    1-  803     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  804     	.line	124, "main.c"; 	if(duty2 < MAXDUTY)
     0066 2196                      1-  805     	MOVIA	0x96
     0067 04rr                      1-  806     	SUBAR	_duty2,W
     0068 0C03                      1-  807     	BTRSC	STATUS,0
     0069 3rrr                      1-  808     	LGOTO	_00186_DS_
                                    1-  809     	.line	125, "main.c"; 	++duty2;
     006A 05rr                      1-  810     	INCR	_duty2,F
     006B 3rrr                      1-  811     	LGOTO	_00186_DS_
                                    1-  812     ;;unsigned compare: left < lit (0x41A=1050), size=2
     006C                           1-  813     _00166_DS_:
                                    1-  814     	.line	127, "main.c"; 	else if(workTime < 1050)
     006C 2104                      1-  815     	MOVIA	0x04
     006D 04rr                      1-  816     	SUBAR	(_workTime + 1),W
     006E 0903                      1-  817     	BTRSS	STATUS,2
     006F 3rrr                      1-  818     	LGOTO	_00262_DS_
     0070 211A                      1-  819     	MOVIA	0x1a
     0071 04rr                      1-  820     	SUBAR	_workTime,W
     0072                           1-  821     _00262_DS_:
     0072 0C03                      1-  822     	BTRSC	STATUS,0
     0073 3rrr                      1-  823     	LGOTO	_00163_DS_
                                    1-  824     	.line	128, "main.c"; 	duty2 = MAXDUTY;
     0074 2196                      1-  825     	MOVIA	0x96
     0075 00rr                      1-  826     	MOVAR	_duty2
     0076 3rrr                      1-  827     	LGOTO	_00186_DS_
                                    1-  828     ;;unsigned compare: left < lit (0x4B0=1200), size=2
     0077                           1-  829     _00163_DS_:
                                    1-  830     	.line	129, "main.c"; 	else if(workTime < 1200)
     0077 2104                      1-  831     	MOVIA	0x04
     0078 04rr                      1-  832     	SUBAR	(_workTime + 1),W
     0079 0903                      1-  833     	BTRSS	STATUS,2
     007A 3rrr                      1-  834     	LGOTO	_00263_DS_
     007B 21B0                      1-  835     	MOVIA	0xb0
     007C 04rr                      1-  836     	SUBAR	_workTime,W
     007D                           1-  837     _00263_DS_:
     007D 0C03                      1-  838     	BTRSC	STATUS,0
     007E 3rrr                      1-  839     	LGOTO	_00160_DS_
                                    1-  840     	.line	131, "main.c"; 	if(duty2 > 0)
     007F 01rr                      1-  841     	MOVR	_duty2,W
     0080 0D03                      1-  842     	BTRSC	STATUS,2
     0081 3rrr                      1-  843     	LGOTO	_00186_DS_
                                    1-  844     	.line	132, "main.c"; 	--duty2;
     0082 06rr                      1-  845     	DECR	_duty2,F
     0083 3rrr                      1-  846     	LGOTO	_00186_DS_
                                    1-  847     ;;unsigned compare: left < lit (0x546=1350), size=2
     0084                           1-  848     _00160_DS_:
                                    1-  849     	.line	134, "main.c"; 	else if(workTime < 1350)
     0084 2105                      1-  850     	MOVIA	0x05
     0085 04rr                      1-  851     	SUBAR	(_workTime + 1),W
     0086 0903                      1-  852     	BTRSS	STATUS,2
     0087 3rrr                      1-  853     	LGOTO	_00264_DS_
     0088 2146                      1-  854     	MOVIA	0x46
     0089 04rr                      1-  855     	SUBAR	_workTime,W
     008A                           1-  856     _00264_DS_:
     008A 0C03                      1-  857     	BTRSC	STATUS,0
     008B 3rrr                      1-  858     	LGOTO	_00157_DS_
                                    1-  859     	.line	136, "main.c"; 	duty2 = 0;
     008C 02rr                      1-  860     	CLRR	_duty2
                                    1-  861     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  862     	.line	137, "main.c"; 	if(duty3 < MAXDUTY)
     008D 2196                      1-  863     	MOVIA	0x96
     008E 04rr                      1-  864     	SUBAR	_duty3,W
     008F 0C03                      1-  865     	BTRSC	STATUS,0
     0090 3rrr                      1-  866     	LGOTO	_00186_DS_
                                    1-  867     	.line	138, "main.c"; 	++duty3;
     0091 05rr                      1-  868     	INCR	_duty3,F
     0092 3rrr                      1-  869     	LGOTO	_00186_DS_
                                    1-  870     ;;unsigned compare: left < lit (0x5AA=1450), size=2
     0093                           1-  871     _00157_DS_:
                                    1-  872     	.line	140, "main.c"; 	else if(workTime < 1450)
     0093 2105                      1-  873     	MOVIA	0x05
     0094 04rr                      1-  874     	SUBAR	(_workTime + 1),W
     0095 0903                      1-  875     	BTRSS	STATUS,2
     0096 3rrr                      1-  876     	LGOTO	_00266_DS_
     0097 21AA                      1-  877     	MOVIA	0xaa
     0098 04rr                      1-  878     	SUBAR	_workTime,W
     0099                           1-  879     _00266_DS_:
     0099 0C03                      1-  880     	BTRSC	STATUS,0
     009A 3rrr                      1-  881     	LGOTO	_00154_DS_
                                    1-  882     	.line	141, "main.c"; 	duty3 = MAXDUTY;
     009B 2196                      1-  883     	MOVIA	0x96
     009C 00rr                      1-  884     	MOVAR	_duty3
     009D 3rrr                      1-  885     	LGOTO	_00186_DS_
                                    1-  886     ;;unsigned compare: left < lit (0x640=1600), size=2
     009E                           1-  887     _00154_DS_:
                                    1-  888     	.line	142, "main.c"; 	else if(workTime < 1600)
     009E 2106                      1-  889     	MOVIA	0x06
     009F 04rr                      1-  890     	SUBAR	(_workTime + 1),W
     00A0 0903                      1-  891     	BTRSS	STATUS,2
     00A1 3rrr                      1-  892     	LGOTO	_00267_DS_
     00A2 2140                      1-  893     	MOVIA	0x40
     00A3 04rr                      1-  894     	SUBAR	_workTime,W
     00A4                           1-  895     _00267_DS_:
     00A4 0C03                      1-  896     	BTRSC	STATUS,0
     00A5 3rrr                      1-  897     	LGOTO	_00186_DS_
                                    1-  898     	.line	144, "main.c"; 	if(duty3 > 0)
     00A6 01rr                      1-  899     	MOVR	_duty3,W
     00A7 0903                      1-  900     	BTRSS	STATUS,2
                                    1-  901     	.line	145, "main.c"; 	--duty3;
     00A8 06rr                      1-  902     	DECR	_duty3,F
     00A9                           1-  903     _00186_DS_:
                                    1-  904     	.line	147, "main.c"; 	}
                                    1-  905     	RETURN	
     00A9 0010                      3-   26 m1      ret
                                    1-  908     ;	code size estimation:
                                    1-  909     ;	  401+    0 =   401 instructions (  802 byte)
                                    1-  911     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00116_DS_              Label    0000001A
_00117_DS_              Label    0000001B
_00124_DS_              Label    00000025
_00128_DS_              Label    00000014
_00134_DS_              Label    0000000D
_00154_DS_              Label    0000009E
_00157_DS_              Label    00000093
_00160_DS_              Label    00000084
_00163_DS_              Label    00000077
_00166_DS_              Label    0000006C
_00169_DS_              Label    0000005D
_00172_DS_              Label    00000050
_00175_DS_              Label    00000045
_00178_DS_              Label    00000036
_00181_DS_              Label    00000029
_00184_DS_              Label    0000001E
_00186_DS_              Label    000000A9
_00251_DS_              Label    00000009
_00252_DS_              Label    00000013
_00254_DS_              Label    00000024
_00255_DS_              Label    0000002F
_00256_DS_              Label    0000003C
_00258_DS_              Label    0000004B
_00259_DS_              Label    00000056
_00260_DS_              Label    00000063
_00262_DS_              Label    00000072
_00263_DS_              Label    0000007D
_00264_DS_              Label    0000008A
_00266_DS_              Label    00000099
_00267_DS_              Label    000000A4
_00275_DS_              Label    00000014
_00277_DS_              Label    0000000D
_00278_DS_              Label    00000015
_00279_DS_              Label    00000016
_00285_DS_              Label    00000016
_00289_DS_              Label    00000018
_00295_DS_              Label    0000000B
_00296_DS_              Label    00000011
_00298_DS_              Label    0000001C
_00299_DS_              Label    00000022
_00301_DS_              Label    0000002D
_00302_DS_              Label    00000033
_00304_DS_              Label    00000040
_00305_DS_              Label    00000048
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_duty0                  Label    00000000
_duty1                  Label    00000000
_duty2                  Label    00000000
_duty3                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_ledCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setLedduty             Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workCtr                Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100F                 Label    00000000
r0x1010                 Label    00000000
r0x1011                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000006
STK01                   Label    00000005
STK02                   Label    00000004
STK03                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
