
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_gotoSleep
                                    1-   57     	extern	_setLedduty
                                    1-   58     	extern	_keyCtr
                                    1-   59     	extern	_keyRead
                                    1-   60     	extern	_workCtr
                                    1-   61     	extern	_isr
                                    1-   62     	extern	_main
                                    1-   63     	extern	_workTime
                                    1-   64     	extern	_IntFlag
                                    1-   65     	extern	_intCount
                                    1-   66     	extern	_duty0
                                    1-   67     	extern	_duty1
                                    1-   68     	extern	_duty2
                                    1-   69     	extern	_duty3
                                    1-   70     	extern	_powerFlag
                                    1-   71     	extern	_keyCount
                                    1-   72     	extern	_ledCount
                                    1-   73     	extern	_sleepTime
                                    1-   75     	extern PSAVE
                                    1-   76     	extern SSAVE
                                    1-   77     	extern WSAVE
                                    1-   78     	extern STK03
                                    1-   79     	extern STK02
                                    1-   80     	extern STK01
                                    1-   81     	extern STK00
                                    1-   83     .segment "uninit", 0x20000010
 20000010                           1-   84     PSAVE:
                                    1-   85     	.res 1
 20000011                           1-   86     SSAVE:
                                    1-   87     	.res 1
 20000012                           1-   88     WSAVE:
                                    1-   89     	.res 1
 20000013                           1-   90     STK03:
                                    1-   91     	.res 1
 20000014                           1-   92     STK02:
                                    1-   93     	.res 1
 20000015                           1-   94     STK01:
                                    1-   95     	.res 1
 20000016                           1-   96     STK00:
                                    1-   97     	.res 1
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     ; global definitions
                                    1-  101     ;--------------------------------------------------------
                                    1-  102     ;--------------------------------------------------------
                                    1-  103     ; absolute symbol definitions
                                    1-  104     ;--------------------------------------------------------
                                    1-  105     ;--------------------------------------------------------
                                    1-  106     ; compiler-defined variables
                                    1-  107     ;--------------------------------------------------------
                                    1-  108     .segment "uninit"
     0000                           1-  109     r0x1010:
                                    1-  110     	.res	1
                                    1-  111     .segment "uninit"
     0000                           1-  112     r0x1011:
                                    1-  113     	.res	1
                                    1-  114     .segment "uninit"
     0000                           1-  115     r0x100F:
                                    1-  116     	.res	1
                                    1-  117     ;--------------------------------------------------------
                                    1-  118     ; initialized data
                                    1-  119     ;--------------------------------------------------------
                                    1-  121     .segment "idata"
     0000                           1-  122     _workTime:
     0000 0000 0000                 1-  123     	dw	0x00, 0x00
                                    1-  127     .segment "idata"
     0000                           1-  128     _IntFlag:
     0000 0000                      1-  129     	dw	0x00
                                    1-  133     .segment "idata"
     0000                           1-  134     _intCount:
     0000 0000                      1-  135     	dw	0x00
                                    1-  139     .segment "idata"
     0000                           1-  140     _duty0:
     0000 0000                      1-  141     	dw	0x00
                                    1-  145     .segment "idata"
     0000                           1-  146     _duty1:
     0000 0000                      1-  147     	dw	0x00
                                    1-  151     .segment "idata"
     0000                           1-  152     _duty2:
     0000 0000                      1-  153     	dw	0x00
                                    1-  157     .segment "idata"
     0000                           1-  158     _duty3:
     0000 0000                      1-  159     	dw	0x00
                                    1-  163     .segment "idata"
     0000                           1-  164     _powerFlag:
     0000 0000                      1-  165     	dw	0x00
                                    1-  169     .segment "idata"
     0000                           1-  170     _keyCount:
     0000 0000                      1-  171     	dw	0x00
                                    1-  175     .segment "idata"
     0000                           1-  176     _ledCount:
     0000 0000                      1-  177     	dw	0x00
                                    1-  181     .segment "idata"
     0000                           1-  182     _sleepTime:
     0000 0000                      1-  183     	dw	0x00
                                    1-  186     ;--------------------------------------------------------
                                    1-  187     ; overlayable items in internal ram 
                                    1-  188     ;--------------------------------------------------------
                                    1-  189     ;	udata_ovr
                                    1-  190     ;--------------------------------------------------------
                                    1-  191     ; reset vector 
                                    1-  192     ;--------------------------------------------------------
                                    1-  193     ORG	0x0000
     0000 3rrr                      1-  194     	LGOTO	__nyc_ny8_startup
                                    1-  195     ;--------------------------------------------------------
                                    1-  196     ; interrupt and initialization code
                                    1-  197     ;--------------------------------------------------------
                                    1-  198     ORG 0x0008
     0008 3rrr                      1-  199     	lgoto	__sdcc_interrupt
                                    1-  201     .segment "code"
     0000                           1-  202     __sdcc_interrupt:
                                    1-  203     ;***
                                    1-  204     ;  pBlock Stats: dbName = I
                                    1-  205     ;***
                                    1-  206     ;2 compiler assigned registers:
                                    1-  207     ;   STK00
                                    1-  208     ;   STK01
                                    1-  209     ;; Starting pCode block
     0000                           1-  210     _isr:
                                    1-  211     ; 0 exit points
                                    1-  212     	.line	28, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  213     	MOVAR	WSAVE
     0001 1503                      1-  214     	SWAPR	STATUS,W
     0002 0283                      1-  215     	CLRR	STATUS
     0003 00rr                      1-  216     	MOVAR	SSAVE
     0004 010A                      1-  217     	MOVR	PCHBUF,W
     0005 028A                      1-  218     	CLRR	PCHBUF
     0006 00rr                      1-  219     	MOVAR	PSAVE
     0007 0104                      1-  220     	MOVR	FSR,W
     0008 00rr                      1-  221     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  222     	MOVR	STK00,W
     000A 00rr                      1-  223     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  224     	MOVR	STK01,W
     000C 00rr                      1-  225     	MOVAR	___sdcc_saved_stk01
                                    1-  226     	.line	30, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  227     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  228     	LGOTO	_00108_DS_
                                    1-  229     	.line	32, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  230     	MOVIA	0x38
     0010 03rr                      1-  231     	ADDAR	_TMR0,F
                                    1-  232     	.line	33, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  233     	INCR	_intCount,F
                                    1-  234     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  235     	MOVIA	0x64
     0013 04rr                      1-  236     	SUBAR	_intCount,W
     0014 0803                      1-  237     	BTRSS	STATUS,0
     0015 3rrr                      1-  238     	LGOTO	_00108_DS_
                                    1-  239     	.line	35, "main.c"; 	intCount = 0;
     0016 02rr                      1-  240     	CLRR	_intCount
                                    1-  241     	.line	36, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  242     	MOVIA	0x01
     0018 00rr                      1-  243     	MOVAR	_IntFlag
     0019                           1-  244     _00108_DS_:
                                    1-  245     	.line	39, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  246     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  247     	LGOTO	_00110_DS_
                                    1-  248     	.line	41, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  249     	MOVIA	0xfd
     001C 00rr                      1-  250     	MOVAR	_INTF
     001D                           1-  251     _00110_DS_:
                                    1-  252     	.line	44, "main.c"; 	INTF = 0;
     001D 02rr                      1-  253     	CLRR	_INTF
                                    1-  254     	.line	46, "main.c"; 	}
     001E 01rr                      1-  255     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  256     	MOVAR	STK01
     0020 01rr                      1-  257     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  258     	MOVAR	STK00
     0022 01rr                      1-  259     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  260     	MOVAR	FSR
     0024 01rr                      1-  261     	MOVR	PSAVE,W
     0025 008A                      1-  262     	MOVAR	PCHBUF
     0026 0283                      1-  263     	CLRR	STATUS
     0027 15rr                      1-  264     	SWAPR	SSAVE,W
     0028 0083                      1-  265     	MOVAR	STATUS
     0029 15rr                      1-  266     	SWAPR	WSAVE,F
     002A 15rr                      1-  267     	SWAPR	WSAVE,W
     002B                           1-  268     END_OF_INTERRUPT:
     002B 0011                      1-  269     	RETIE	
                                    1-  271     ;--------------------------------------------------------
                                    1-  272     ; code
                                    1-  273     ;--------------------------------------------------------
                                    1-  274     ;***
                                    1-  275     ;  pBlock Stats: dbName = M
                                    1-  276     ;***
                                    1-  277     ;has an exit
                                    1-  278     ;functions called:
                                    1-  279     ;   _gotoSleep
                                    1-  280     ;   _setLedduty
                                    1-  281     ;   _keyCtr
                                    1-  282     ;   _workCtr
                                    1-  283     ;   _gotoSleep
                                    1-  284     ;   _gotoSleep
                                    1-  285     ;   _setLedduty
                                    1-  286     ;   _keyCtr
                                    1-  287     ;   _workCtr
                                    1-  288     ;   _gotoSleep
                                    1-  289     ;; Starting pCode block
                                    1-  290     .segment "code"; module=main, function=_main
     0000                           1-  292     _main:
                                    1-  293     ; 2 exit points
                                    1-  294     	.line	51, "main.c"; 	DISI();
     0000 0013                      1-  295     	DISI
                                    1-  296     	.line	52, "main.c"; 	BPHCON = (unsigned char)~C_PB5_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21DF                      1-  297     	MOVIA	0xdf
     0002 00rr                      1-  298     	MOVAR	_BPHCON
                                    1-  299     	.line	53, "main.c"; 	IOSTB =  0x3F;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 213F                      1-  300     	MOVIA	0x3f
     0004 000r                      1-  301     	IOST	_IOSTB
                                    1-  302     	.line	54, "main.c"; 	PORTB = 0x3F;                       // PB2 & PB0 output high
     0005 00rr                      1-  303     	MOVAR	_PORTB
                                    1-  304     	.line	55, "main.c"; 	duty0 = duty1 = duty2 = duty3 = 0;
     0006 02rr                      1-  305     	CLRR	_duty3
     0007 02rr                      1-  306     	CLRR	_duty2
     0008 02rr                      1-  307     	CLRR	_duty1
     0009 02rr                      1-  308     	CLRR	_duty0
                                    1-  309     	.line	56, "main.c"; 	INTE =  C_INT_TMR0;
     000A 2101                      1-  310     	MOVIA	0x01
     000B 00rr                      1-  311     	MOVAR	_INTE
                                    1-  312     	.line	57, "main.c"; 	TMR0 = 55;
     000C 2137                      1-  313     	MOVIA	0x37
     000D 00rr                      1-  314     	MOVAR	_TMR0
                                    1-  315     	.line	58, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000E 0200                      1-  316     	CLRA	
     000F 0003                      1-  317     	T0MD	
                                    1-  318     	.line	61, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0010 2188                      1-  319     	MOVIA	0x88
     0011 00rr                      1-  320     	MOVAR	_PCON
                                    1-  321     	.line	64, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0012 2101                      1-  322     	MOVIA	0x01
     0013 000r                      1-  323     	IOST	_PCON1
                                    1-  324     	.line	65, "main.c"; 	ENI();
     0014 0004                      1-  325     	ENI
                                    1-  326     	.line	66, "main.c"; 	gotoSleep();
     0015 2rrr                      1-  327     	LCALL	_gotoSleep
     0016                           1-  328     _00128_DS_:
                                    1-  329     	.line	69, "main.c"; 	CLRWDT();
     0016 0002                      1-  330     	clrwdt
                                    1-  331     	.line	70, "main.c"; 	if(powerFlag)
     0017 01rr                      1-  332     	MOVR	_powerFlag,W
     0018 0D03                      1-  333     	BTRSC	STATUS,2
     0019 3rrr                      1-  334     	LGOTO	_00116_DS_
                                    1-  335     	.line	71, "main.c"; 	setLedduty();
     001A 2rrr                      1-  336     	LCALL	_setLedduty
     001B 3rrr                      1-  337     	LGOTO	_00117_DS_
     001C                           1-  338     _00116_DS_:
                                    1-  339     	.line	74, "main.c"; 	PORTB = 0x3F;
     001C 213F                      1-  340     	MOVIA	0x3f
     001D 00rr                      1-  341     	MOVAR	_PORTB
                                    1-  342     	.line	75, "main.c"; 	IOSTB = 0x3F;
     001E 000r                      1-  343     	IOST	_IOSTB
     001F                           1-  344     _00117_DS_:
                                    1-  345     	.line	77, "main.c"; 	if(!IntFlag)
     001F 01rr                      1-  346     	MOVR	_IntFlag,W
     0020 0D03                      1-  347     	BTRSC	STATUS,2
     0021 3rrr                      1-  348     	LGOTO	_00128_DS_
                                    1-  349     	.line	79, "main.c"; 	IntFlag = 0;   
     0022 02rr                      1-  350     	CLRR	_IntFlag
                                    1-  351     	.line	80, "main.c"; 	keyCtr();
     0023 2rrr                      1-  352     	LCALL	_keyCtr
                                    1-  353     	.line	81, "main.c"; 	if(powerFlag)
     0024 01rr                      1-  354     	MOVR	_powerFlag,W
     0025 0D03                      1-  355     	BTRSC	STATUS,2
     0026 3rrr                      1-  356     	LGOTO	_00124_DS_
                                    1-  357     	.line	82, "main.c"; 	workCtr();
     0027 2rrr                      1-  358     	LCALL	_workCtr
     0028 3rrr                      1-  359     	LGOTO	_00128_DS_
     0029                           1-  360     _00124_DS_:
                                    1-  361     	.line	85, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0029 01rr                      1-  362     	MOVR	_keyCount,W
     002A 0903                      1-  363     	BTRSS	STATUS,2
     002B 3rrr                      1-  364     	LGOTO	_00128_DS_
     002C 05rr                      1-  365     	INCR	_sleepTime,F
                                    1-  366     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  367     ;;unsigned compare: left >= lit (0xC9=201), size=1
     002D 21C9                      1-  368     	MOVIA	0xc9
     002E 04rr                      1-  369     	SUBAR	_sleepTime,W
     002F 0803                      1-  370     	BTRSS	STATUS,0
     0030 3rrr                      1-  371     	LGOTO	_00128_DS_
                                    1-  372     	.line	86, "main.c"; 	gotoSleep();
     0031 2rrr                      1-  373     	LCALL	_gotoSleep
     0032 3rrr                      1-  374     	LGOTO	_00128_DS_
                                    1-  375     	.line	92, "main.c"; 	}
                                    1-  376     	RETURN	
     0033 0010                      3-   26 m1      ret
                                    1-  377     ; exit point of _main
                                    1-  379     ;***
                                    1-  380     ;  pBlock Stats: dbName = C
                                    1-  381     ;***
                                    1-  382     ;has an exit
                                    1-  383     ;; Starting pCode block
                                    1-  384     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  386     _gotoSleep:
                                    1-  387     ; 2 exit points
                                    1-  388     	.line	247, "main.c"; 	sleepTime = 0;
     0000 02rr                      1-  389     	CLRR	_sleepTime
                                    1-  390     	.line	248, "main.c"; 	IOSTB = 0x3F;
     0001 213F                      1-  391     	MOVIA	0x3f
     0002 000r                      1-  392     	IOST	_IOSTB
                                    1-  393     	.line	249, "main.c"; 	PORTB = 0x00;
     0003 02rr                      1-  394     	CLRR	_PORTB
                                    1-  395     	.line	250, "main.c"; 	BWUCON = 0x20;
     0004 2120                      1-  396     	MOVIA	0x20
     0005 00rr                      1-  397     	MOVAR	_BWUCON
                                    1-  398     	.line	251, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0006 2103                      1-  399     	MOVIA	0x03
     0007 00rr                      1-  400     	MOVAR	_INTE
                                    1-  401     	.line	252, "main.c"; 	PCON =  C_LVR_En;	
     0008 2108                      1-  402     	MOVIA	0x08
     0009 00rr                      1-  403     	MOVAR	_PCON
                                    1-  404     	.line	253, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000A 02rr                      1-  405     	CLRR	_INTF
                                    1-  406     	.line	254, "main.c"; 	CLRWDT();
     000B 0002                      1-  407     	clrwdt
                                    1-  408     	.line	255, "main.c"; 	ENI();
     000C 0004                      1-  409     	ENI
                                    1-  410     	.line	256, "main.c"; 	SLEEP();
     000D 0001                      1-  411     	sleep
                                    1-  412     	.line	257, "main.c"; 	BWUCON = 0x00;
     000E 02rr                      1-  413     	CLRR	_BWUCON
                                    1-  414     	.line	258, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000F 2101                      1-  415     	MOVIA	0x01
     0010 00rr                      1-  416     	MOVAR	_INTE
                                    1-  417     	.line	259, "main.c"; 	INTF = 0;
     0011 02rr                      1-  418     	CLRR	_INTF
                                    1-  419     	.line	261, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0012 2188                      1-  420     	MOVIA	0x88
     0013 00rr                      1-  421     	MOVAR	_PCON
                                    1-  422     	.line	263, "main.c"; 	}
                                    1-  423     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  424     ; exit point of _gotoSleep
                                    1-  426     ;***
                                    1-  427     ;  pBlock Stats: dbName = C
                                    1-  428     ;***
                                    1-  429     ;1 compiler assigned register :
                                    1-  430     ;   r0x100F
                                    1-  431     ;; Starting pCode block
                                    1-  432     .segment "code"; module=main, function=_setLedduty
     0000                           1-  434     _setLedduty:
                                    1-  435     ; 0 exit points
                                    1-  436     	.line	200, "main.c"; 	if(ledCount < duty0)
     0000 01rr                      1-  437     	MOVR	_duty0,W
     0001 04rr                      1-  438     	SUBAR	_ledCount,W
     0002 0C03                      1-  439     	BTRSC	STATUS,0
     0003 3rrr                      1-  440     	LGOTO	_00295_DS_
                                    1-  441     	.line	202, "main.c"; 	IOSTB &= 0xFE;
     0004 001r                      1-  442     	IOSTR	_IOSTB
     0005 00rr                      1-  443     	MOVAR	r0x100F
     0006 1Crr                      1-  444     	BCR	r0x100F,0
     0007 01rr                      1-  445     	MOVR	r0x100F,W
     0008 000r                      1-  446     	IOST	_IOSTB
                                    1-  447     	.line	203, "main.c"; 	PORTB &= 0xFE;
     0009 1Crr                      1-  448     	BCR	_PORTB,0
     000A 3rrr                      1-  449     	LGOTO	_00296_DS_
     000B                           1-  450     _00295_DS_:
                                    1-  451     	.line	207, "main.c"; 	IOSTB |= 0x01;
     000B 001r                      1-  452     	IOSTR	_IOSTB
     000C 00rr                      1-  453     	MOVAR	r0x100F
     000D 18rr                      1-  454     	BSR	r0x100F,0
     000E 01rr                      1-  455     	MOVR	r0x100F,W
     000F 000r                      1-  456     	IOST	_IOSTB
                                    1-  457     	.line	208, "main.c"; 	PORTB |= 0x01;
     0010 18rr                      1-  458     	BSR	_PORTB,0
     0011                           1-  459     _00296_DS_:
                                    1-  460     	.line	210, "main.c"; 	if(ledCount < duty1)
     0011 01rr                      1-  461     	MOVR	_duty1,W
     0012 04rr                      1-  462     	SUBAR	_ledCount,W
     0013 0C03                      1-  463     	BTRSC	STATUS,0
     0014 3rrr                      1-  464     	LGOTO	_00298_DS_
                                    1-  465     	.line	212, "main.c"; 	IOSTB &= 0xFD;
     0015 001r                      1-  466     	IOSTR	_IOSTB
     0016 00rr                      1-  467     	MOVAR	r0x100F
     0017 1Crr                      1-  468     	BCR	r0x100F,1
     0018 01rr                      1-  469     	MOVR	r0x100F,W
     0019 000r                      1-  470     	IOST	_IOSTB
                                    1-  471     	.line	213, "main.c"; 	PORTB &= 0xFD;
     001A 1Crr                      1-  472     	BCR	_PORTB,1
     001B 3rrr                      1-  473     	LGOTO	_00299_DS_
     001C                           1-  474     _00298_DS_:
                                    1-  475     	.line	217, "main.c"; 	IOSTB |= 0x02;
     001C 001r                      1-  476     	IOSTR	_IOSTB
     001D 00rr                      1-  477     	MOVAR	r0x100F
     001E 18rr                      1-  478     	BSR	r0x100F,1
     001F 01rr                      1-  479     	MOVR	r0x100F,W
     0020 000r                      1-  480     	IOST	_IOSTB
                                    1-  481     	.line	218, "main.c"; 	PORTB |= 0x02;
     0021 18rr                      1-  482     	BSR	_PORTB,1
     0022                           1-  483     _00299_DS_:
                                    1-  484     	.line	220, "main.c"; 	if(ledCount < duty2)
     0022 01rr                      1-  485     	MOVR	_duty2,W
     0023 04rr                      1-  486     	SUBAR	_ledCount,W
     0024 0C03                      1-  487     	BTRSC	STATUS,0
     0025 3rrr                      1-  488     	LGOTO	_00301_DS_
                                    1-  489     	.line	222, "main.c"; 	IOSTB &= 0xFB;
     0026 001r                      1-  490     	IOSTR	_IOSTB
     0027 00rr                      1-  491     	MOVAR	r0x100F
     0028 1Drr                      1-  492     	BCR	r0x100F,2
     0029 01rr                      1-  493     	MOVR	r0x100F,W
     002A 000r                      1-  494     	IOST	_IOSTB
                                    1-  495     	.line	223, "main.c"; 	PORTB &= 0xFB;
     002B 1Drr                      1-  496     	BCR	_PORTB,2
     002C 3rrr                      1-  497     	LGOTO	_00302_DS_
     002D                           1-  498     _00301_DS_:
                                    1-  499     	.line	227, "main.c"; 	IOSTB |= 0x04;
     002D 001r                      1-  500     	IOSTR	_IOSTB
     002E 00rr                      1-  501     	MOVAR	r0x100F
     002F 19rr                      1-  502     	BSR	r0x100F,2
     0030 01rr                      1-  503     	MOVR	r0x100F,W
     0031 000r                      1-  504     	IOST	_IOSTB
                                    1-  505     	.line	228, "main.c"; 	PORTB |= 0x04;
     0032 19rr                      1-  506     	BSR	_PORTB,2
     0033                           1-  507     _00302_DS_:
                                    1-  508     	.line	230, "main.c"; 	if(ledCount < duty3)
     0033 01rr                      1-  509     	MOVR	_duty3,W
     0034 04rr                      1-  510     	SUBAR	_ledCount,W
     0035 0C03                      1-  511     	BTRSC	STATUS,0
     0036 3rrr                      1-  512     	LGOTO	_00304_DS_
                                    1-  513     	.line	232, "main.c"; 	IOSTB &= 0xE7;
     0037 001r                      1-  514     	IOSTR	_IOSTB
     0038 00rr                      1-  515     	MOVAR	r0x100F
     0039 21E7                      1-  516     	MOVIA	0xe7
     003A 10rr                      1-  517     	ANDAR	r0x100F,F
     003B 01rr                      1-  518     	MOVR	r0x100F,W
     003C 000r                      1-  519     	IOST	_IOSTB
                                    1-  520     	.line	233, "main.c"; 	PORTB &= 0xE7;
     003D 21E7                      1-  521     	MOVIA	0xe7
     003E 10rr                      1-  522     	ANDAR	_PORTB,F
     003F 3rrr                      1-  523     	LGOTO	_00305_DS_
     0040                           1-  524     _00304_DS_:
                                    1-  525     	.line	237, "main.c"; 	IOSTB |= 0x18;
     0040 001r                      1-  526     	IOSTR	_IOSTB
     0041 00rr                      1-  527     	MOVAR	r0x100F
     0042 2118                      1-  528     	MOVIA	0x18
     0043 11rr                      1-  529     	IORAR	r0x100F,F
     0044 01rr                      1-  530     	MOVR	r0x100F,W
     0045 000r                      1-  531     	IOST	_IOSTB
                                    1-  532     	.line	238, "main.c"; 	PORTB |= 0x18;
     0046 2118                      1-  533     	MOVIA	0x18
     0047 11rr                      1-  534     	IORAR	_PORTB,F
     0048                           1-  535     _00305_DS_:
                                    1-  536     	.line	240, "main.c"; 	if(++ledCount >= 150)
     0048 05rr                      1-  537     	INCR	_ledCount,F
                                    1-  538     ;;unsigned compare: left < lit (0x96=150), size=1
     0049 2196                      1-  539     	MOVIA	0x96
     004A 04rr                      1-  540     	SUBAR	_ledCount,W
     004B 0C03                      1-  541     	BTRSC	STATUS,0
                                    1-  542     	.line	241, "main.c"; 	ledCount = 0;
     004C 02rr                      1-  543     	CLRR	_ledCount
                                    1-  544     	.line	242, "main.c"; 	}
                                    1-  545     	RETURN	
     004D 0010                      3-   26 m1      ret
                                    1-  547     ;***
                                    1-  548     ;  pBlock Stats: dbName = C
                                    1-  549     ;***
                                    1-  550     ;has an exit
                                    1-  551     ;functions called:
                                    1-  552     ;   _keyRead
                                    1-  553     ;   _keyRead
                                    1-  554     ;1 compiler assigned register :
                                    1-  555     ;   r0x1011
                                    1-  556     ;; Starting pCode block
                                    1-  557     .segment "code"; module=main, function=_keyCtr
     0000                           1-  559     _keyCtr:
                                    1-  560     ; 2 exit points
                                    1-  561     	.line	180, "main.c"; 	if(keyRead(0x20 & ~PORTB))
     0000 07rr                      1-  562     	COMR	_PORTB,W
     0001 00rr                      1-  563     	MOVAR	r0x1011
     0002 2120                      1-  564     	MOVIA	0x20
     0003 10rr                      1-  565     	ANDAR	r0x1011,F
     0004 01rr                      1-  566     	MOVR	r0x1011,W
     0005 2rrr                      1-  567     	LCALL	_keyRead
     0006 00rr                      1-  568     	MOVAR	r0x1011
     0007 01rr                      1-  569     	MOVR	r0x1011,W
     0008 0D03                      1-  570     	BTRSC	STATUS,2
     0009 3rrr                      1-  571     	LGOTO	_00289_DS_
                                    1-  572     	.line	182, "main.c"; 	workTime = 0;
     000A 02rr                      1-  573     	CLRR	_workTime
     000B 02rr                      1-  574     	CLRR	(_workTime + 1)
                                    1-  575     	.line	183, "main.c"; 	duty0 = duty1 = duty2 = duty3 = 0;
     000C 02rr                      1-  576     	CLRR	_duty3
     000D 02rr                      1-  577     	CLRR	_duty2
     000E 02rr                      1-  578     	CLRR	_duty1
     000F 02rr                      1-  579     	CLRR	_duty0
                                    1-  580     	.line	184, "main.c"; 	ledCount = 0;
     0010 02rr                      1-  581     	CLRR	_ledCount
                                    1-  582     	.line	185, "main.c"; 	if(powerFlag)
     0011 01rr                      1-  583     	MOVR	_powerFlag,W
     0012 0D03                      1-  584     	BTRSC	STATUS,2
     0013 3rrr                      1-  585     	LGOTO	_00285_DS_
                                    1-  586     	.line	187, "main.c"; 	powerFlag = 0;
     0014 02rr                      1-  587     	CLRR	_powerFlag
     0015 3rrr                      1-  588     	LGOTO	_00289_DS_
     0016                           1-  589     _00285_DS_:
                                    1-  590     	.line	191, "main.c"; 	powerFlag = 1;
     0016 2101                      1-  591     	MOVIA	0x01
     0017 00rr                      1-  592     	MOVAR	_powerFlag
     0018                           1-  593     _00289_DS_:
                                    1-  594     	.line	194, "main.c"; 	}
                                    1-  595     	RETURN	
     0018 0010                      3-   26 m1      ret
                                    1-  596     ; exit point of _keyCtr
                                    1-  598     ;***
                                    1-  599     ;  pBlock Stats: dbName = C
                                    1-  600     ;***
                                    1-  601     ;has an exit
                                    1-  602     ;1 compiler assigned register :
                                    1-  603     ;   r0x1010
                                    1-  604     ;; Starting pCode block
                                    1-  605     .segment "code"; module=main, function=_keyRead
                                    1-  607     ;local variable name mapping:
     0000                           1-  609     _keyRead:
                                    1-  610     ; 2 exit points
                                    1-  611     	.line	153, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  612     	MOVAR	r0x1010
                                    1-  613     	.line	155, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  614     	MOVR	r0x1010,W
     0002 0D03                      1-  615     	BTRSC	STATUS,2
     0003 3rrr                      1-  616     	LGOTO	_00277_DS_
                                    1-  617     	.line	157, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  618     	CLRR	_sleepTime
                                    1-  619     	.line	158, "main.c"; 	keyCount++;
     0005 05rr                      1-  620     	INCR	_keyCount,F
                                    1-  621     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  622     	.line	159, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  623     	MOVIA	0xc8
     0007 04rr                      1-  624     	SUBAR	_keyCount,W
     0008 0803                      1-  625     	BTRSS	STATUS,0
     0009 3rrr                      1-  626     	LGOTO	_00278_DS_
                                    1-  627     	.line	161, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  628     	MOVIA	0xc8
     000B 00rr                      1-  629     	MOVAR	_keyCount
     000C 3rrr                      1-  630     	LGOTO	_00278_DS_
                                    1-  631     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  632     _00277_DS_:
                                    1-  633     	.line	166, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  634     	MOVIA	0x08
     000E 04rr                      1-  635     	SUBAR	_keyCount,W
     000F 0803                      1-  636     	BTRSS	STATUS,0
     0010 3rrr                      1-  637     	LGOTO	_00275_DS_
                                    1-  638     	.line	168, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  639     	CLRR	_keyCount
                                    1-  640     	.line	169, "main.c"; 	return	1;
     0012 2101                      1-  641     	MOVIA	0x01
     0013 3rrr                      1-  642     	LGOTO	_00279_DS_
     0014                           1-  643     _00275_DS_:
                                    1-  644     	.line	171, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  645     	CLRR	_keyCount
     0015                           1-  646     _00278_DS_:
                                    1-  647     	.line	173, "main.c"; 	return 0;
     0015 2100                      1-  648     	MOVIA	0x00
     0016                           1-  649     _00279_DS_:
                                    1-  650     	.line	174, "main.c"; 	}
                                    1-  651     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  652     ; exit point of _keyRead
                                    1-  654     ;***
                                    1-  655     ;  pBlock Stats: dbName = C
                                    1-  656     ;***
                                    1-  657     ;; Starting pCode block
                                    1-  658     .segment "code"; module=main, function=_workCtr
     0000                           1-  660     _workCtr:
                                    1-  661     ; 0 exit points
                                    1-  662     	.line	96, "main.c"; 	if(++workTime >= 1600)
     0000 05rr                      1-  663     	INCR	_workTime,F
     0001 0D03                      1-  664     	BTRSC	STATUS,2
     0002 05rr                      1-  665     	INCR	(_workTime + 1),F
                                    1-  666     ;;unsigned compare: left < lit (0x640=1600), size=2
     0003 2106                      1-  667     	MOVIA	0x06
     0004 04rr                      1-  668     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  669     	BTRSS	STATUS,2
     0006 3rrr                      1-  670     	LGOTO	_00251_DS_
     0007 2140                      1-  671     	MOVIA	0x40
     0008 04rr                      1-  672     	SUBAR	_workTime,W
     0009                           1-  673     _00251_DS_:
     0009 0803                      1-  674     	BTRSS	STATUS,0
     000A 3rrr                      1-  675     	LGOTO	_00134_DS_
                                    1-  676     	.line	97, "main.c"; 	workTime = 0;
     000B 02rr                      1-  677     	CLRR	_workTime
     000C 02rr                      1-  678     	CLRR	(_workTime + 1)
                                    1-  679     ;;unsigned compare: left < lit (0x96=150), size=2
     000D                           1-  680     _00134_DS_:
                                    1-  681     	.line	98, "main.c"; 	if(workTime < 150)
     000D 2100                      1-  682     	MOVIA	0x00
     000E 04rr                      1-  683     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  684     	BTRSS	STATUS,2
     0010 3rrr                      1-  685     	LGOTO	_00252_DS_
     0011 2196                      1-  686     	MOVIA	0x96
     0012 04rr                      1-  687     	SUBAR	_workTime,W
     0013                           1-  688     _00252_DS_:
     0013 0C03                      1-  689     	BTRSC	STATUS,0
     0014 3rrr                      1-  690     	LGOTO	_00184_DS_
                                    1-  691     	.line	100, "main.c"; 	duty1 = duty2 = duty3 = 0;
     0015 02rr                      1-  692     	CLRR	_duty3
     0016 02rr                      1-  693     	CLRR	_duty2
     0017 02rr                      1-  694     	CLRR	_duty1
                                    1-  695     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  696     	.line	101, "main.c"; 	if(duty0 < MAXDUTY)
     0018 2196                      1-  697     	MOVIA	0x96
     0019 04rr                      1-  698     	SUBAR	_duty0,W
     001A 0C03                      1-  699     	BTRSC	STATUS,0
     001B 3rrr                      1-  700     	LGOTO	_00186_DS_
                                    1-  701     	.line	102, "main.c"; 	++duty0;
     001C 05rr                      1-  702     	INCR	_duty0,F
     001D 3rrr                      1-  703     	LGOTO	_00186_DS_
                                    1-  704     ;;unsigned compare: left < lit (0xFA=250), size=2
     001E                           1-  705     _00184_DS_:
                                    1-  706     	.line	104, "main.c"; 	else if(workTime < 250)
     001E 2100                      1-  707     	MOVIA	0x00
     001F 04rr                      1-  708     	SUBAR	(_workTime + 1),W
     0020 0903                      1-  709     	BTRSS	STATUS,2
     0021 3rrr                      1-  710     	LGOTO	_00254_DS_
     0022 21FA                      1-  711     	MOVIA	0xfa
     0023 04rr                      1-  712     	SUBAR	_workTime,W
     0024                           1-  713     _00254_DS_:
     0024 0C03                      1-  714     	BTRSC	STATUS,0
     0025 3rrr                      1-  715     	LGOTO	_00181_DS_
                                    1-  716     	.line	105, "main.c"; 	duty0 = MAXDUTY;
     0026 2196                      1-  717     	MOVIA	0x96
     0027 00rr                      1-  718     	MOVAR	_duty0
     0028 3rrr                      1-  719     	LGOTO	_00186_DS_
                                    1-  720     ;;unsigned compare: left < lit (0x190=400), size=2
     0029                           1-  721     _00181_DS_:
                                    1-  722     	.line	106, "main.c"; 	else if(workTime < 400)
     0029 2101                      1-  723     	MOVIA	0x01
     002A 04rr                      1-  724     	SUBAR	(_workTime + 1),W
     002B 0903                      1-  725     	BTRSS	STATUS,2
     002C 3rrr                      1-  726     	LGOTO	_00255_DS_
     002D 2190                      1-  727     	MOVIA	0x90
     002E 04rr                      1-  728     	SUBAR	_workTime,W
     002F                           1-  729     _00255_DS_:
     002F 0C03                      1-  730     	BTRSC	STATUS,0
     0030 3rrr                      1-  731     	LGOTO	_00178_DS_
                                    1-  732     	.line	108, "main.c"; 	if(duty0 > 0)
     0031 01rr                      1-  733     	MOVR	_duty0,W
     0032 0D03                      1-  734     	BTRSC	STATUS,2
     0033 3rrr                      1-  735     	LGOTO	_00186_DS_
                                    1-  736     	.line	109, "main.c"; 	--duty0;
     0034 06rr                      1-  737     	DECR	_duty0,F
     0035 3rrr                      1-  738     	LGOTO	_00186_DS_
                                    1-  739     ;;unsigned compare: left < lit (0x226=550), size=2
     0036                           1-  740     _00178_DS_:
                                    1-  741     	.line	111, "main.c"; 	else if(workTime < 550)
     0036 2102                      1-  742     	MOVIA	0x02
     0037 04rr                      1-  743     	SUBAR	(_workTime + 1),W
     0038 0903                      1-  744     	BTRSS	STATUS,2
     0039 3rrr                      1-  745     	LGOTO	_00256_DS_
     003A 2126                      1-  746     	MOVIA	0x26
     003B 04rr                      1-  747     	SUBAR	_workTime,W
     003C                           1-  748     _00256_DS_:
     003C 0C03                      1-  749     	BTRSC	STATUS,0
     003D 3rrr                      1-  750     	LGOTO	_00175_DS_
                                    1-  751     	.line	113, "main.c"; 	duty0 = 0;
     003E 02rr                      1-  752     	CLRR	_duty0
                                    1-  753     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  754     	.line	114, "main.c"; 	if(duty1 < MAXDUTY)
     003F 2196                      1-  755     	MOVIA	0x96
     0040 04rr                      1-  756     	SUBAR	_duty1,W
     0041 0C03                      1-  757     	BTRSC	STATUS,0
     0042 3rrr                      1-  758     	LGOTO	_00186_DS_
                                    1-  759     	.line	115, "main.c"; 	++duty1;
     0043 05rr                      1-  760     	INCR	_duty1,F
     0044 3rrr                      1-  761     	LGOTO	_00186_DS_
                                    1-  762     ;;unsigned compare: left < lit (0x28A=650), size=2
     0045                           1-  763     _00175_DS_:
                                    1-  764     	.line	117, "main.c"; 	else if(workTime < 650)
     0045 2102                      1-  765     	MOVIA	0x02
     0046 04rr                      1-  766     	SUBAR	(_workTime + 1),W
     0047 0903                      1-  767     	BTRSS	STATUS,2
     0048 3rrr                      1-  768     	LGOTO	_00258_DS_
     0049 218A                      1-  769     	MOVIA	0x8a
     004A 04rr                      1-  770     	SUBAR	_workTime,W
     004B                           1-  771     _00258_DS_:
     004B 0C03                      1-  772     	BTRSC	STATUS,0
     004C 3rrr                      1-  773     	LGOTO	_00172_DS_
                                    1-  774     	.line	118, "main.c"; 	duty1 = MAXDUTY;
     004D 2196                      1-  775     	MOVIA	0x96
     004E 00rr                      1-  776     	MOVAR	_duty1
     004F 3rrr                      1-  777     	LGOTO	_00186_DS_
                                    1-  778     ;;unsigned compare: left < lit (0x320=800), size=2
     0050                           1-  779     _00172_DS_:
                                    1-  780     	.line	119, "main.c"; 	else if(workTime < 800)
     0050 2103                      1-  781     	MOVIA	0x03
     0051 04rr                      1-  782     	SUBAR	(_workTime + 1),W
     0052 0903                      1-  783     	BTRSS	STATUS,2
     0053 3rrr                      1-  784     	LGOTO	_00259_DS_
     0054 2120                      1-  785     	MOVIA	0x20
     0055 04rr                      1-  786     	SUBAR	_workTime,W
     0056                           1-  787     _00259_DS_:
     0056 0C03                      1-  788     	BTRSC	STATUS,0
     0057 3rrr                      1-  789     	LGOTO	_00169_DS_
                                    1-  790     	.line	121, "main.c"; 	if(duty1 > 0)
     0058 01rr                      1-  791     	MOVR	_duty1,W
     0059 0D03                      1-  792     	BTRSC	STATUS,2
     005A 3rrr                      1-  793     	LGOTO	_00186_DS_
                                    1-  794     	.line	122, "main.c"; 	--duty1;
     005B 06rr                      1-  795     	DECR	_duty1,F
     005C 3rrr                      1-  796     	LGOTO	_00186_DS_
                                    1-  797     ;;unsigned compare: left < lit (0x3B6=950), size=2
     005D                           1-  798     _00169_DS_:
                                    1-  799     	.line	124, "main.c"; 	else if(workTime < 950)
     005D 2103                      1-  800     	MOVIA	0x03
     005E 04rr                      1-  801     	SUBAR	(_workTime + 1),W
     005F 0903                      1-  802     	BTRSS	STATUS,2
     0060 3rrr                      1-  803     	LGOTO	_00260_DS_
     0061 21B6                      1-  804     	MOVIA	0xb6
     0062 04rr                      1-  805     	SUBAR	_workTime,W
     0063                           1-  806     _00260_DS_:
     0063 0C03                      1-  807     	BTRSC	STATUS,0
     0064 3rrr                      1-  808     	LGOTO	_00166_DS_
                                    1-  809     	.line	126, "main.c"; 	duty1 = 0;
     0065 02rr                      1-  810     	CLRR	_duty1
                                    1-  811     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  812     	.line	127, "main.c"; 	if(duty2 < MAXDUTY)
     0066 2196                      1-  813     	MOVIA	0x96
     0067 04rr                      1-  814     	SUBAR	_duty2,W
     0068 0C03                      1-  815     	BTRSC	STATUS,0
     0069 3rrr                      1-  816     	LGOTO	_00186_DS_
                                    1-  817     	.line	128, "main.c"; 	++duty2;
     006A 05rr                      1-  818     	INCR	_duty2,F
     006B 3rrr                      1-  819     	LGOTO	_00186_DS_
                                    1-  820     ;;unsigned compare: left < lit (0x41A=1050), size=2
     006C                           1-  821     _00166_DS_:
                                    1-  822     	.line	130, "main.c"; 	else if(workTime < 1050)
     006C 2104                      1-  823     	MOVIA	0x04
     006D 04rr                      1-  824     	SUBAR	(_workTime + 1),W
     006E 0903                      1-  825     	BTRSS	STATUS,2
     006F 3rrr                      1-  826     	LGOTO	_00262_DS_
     0070 211A                      1-  827     	MOVIA	0x1a
     0071 04rr                      1-  828     	SUBAR	_workTime,W
     0072                           1-  829     _00262_DS_:
     0072 0C03                      1-  830     	BTRSC	STATUS,0
     0073 3rrr                      1-  831     	LGOTO	_00163_DS_
                                    1-  832     	.line	131, "main.c"; 	duty2 = MAXDUTY;
     0074 2196                      1-  833     	MOVIA	0x96
     0075 00rr                      1-  834     	MOVAR	_duty2
     0076 3rrr                      1-  835     	LGOTO	_00186_DS_
                                    1-  836     ;;unsigned compare: left < lit (0x4B0=1200), size=2
     0077                           1-  837     _00163_DS_:
                                    1-  838     	.line	132, "main.c"; 	else if(workTime < 1200)
     0077 2104                      1-  839     	MOVIA	0x04
     0078 04rr                      1-  840     	SUBAR	(_workTime + 1),W
     0079 0903                      1-  841     	BTRSS	STATUS,2
     007A 3rrr                      1-  842     	LGOTO	_00263_DS_
     007B 21B0                      1-  843     	MOVIA	0xb0
     007C 04rr                      1-  844     	SUBAR	_workTime,W
     007D                           1-  845     _00263_DS_:
     007D 0C03                      1-  846     	BTRSC	STATUS,0
     007E 3rrr                      1-  847     	LGOTO	_00160_DS_
                                    1-  848     	.line	134, "main.c"; 	if(duty2 > 0)
     007F 01rr                      1-  849     	MOVR	_duty2,W
     0080 0D03                      1-  850     	BTRSC	STATUS,2
     0081 3rrr                      1-  851     	LGOTO	_00186_DS_
                                    1-  852     	.line	135, "main.c"; 	--duty2;
     0082 06rr                      1-  853     	DECR	_duty2,F
     0083 3rrr                      1-  854     	LGOTO	_00186_DS_
                                    1-  855     ;;unsigned compare: left < lit (0x546=1350), size=2
     0084                           1-  856     _00160_DS_:
                                    1-  857     	.line	137, "main.c"; 	else if(workTime < 1350)
     0084 2105                      1-  858     	MOVIA	0x05
     0085 04rr                      1-  859     	SUBAR	(_workTime + 1),W
     0086 0903                      1-  860     	BTRSS	STATUS,2
     0087 3rrr                      1-  861     	LGOTO	_00264_DS_
     0088 2146                      1-  862     	MOVIA	0x46
     0089 04rr                      1-  863     	SUBAR	_workTime,W
     008A                           1-  864     _00264_DS_:
     008A 0C03                      1-  865     	BTRSC	STATUS,0
     008B 3rrr                      1-  866     	LGOTO	_00157_DS_
                                    1-  867     	.line	139, "main.c"; 	duty2 = 0;
     008C 02rr                      1-  868     	CLRR	_duty2
                                    1-  869     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  870     	.line	140, "main.c"; 	if(duty3 < MAXDUTY)
     008D 2196                      1-  871     	MOVIA	0x96
     008E 04rr                      1-  872     	SUBAR	_duty3,W
     008F 0C03                      1-  873     	BTRSC	STATUS,0
     0090 3rrr                      1-  874     	LGOTO	_00186_DS_
                                    1-  875     	.line	141, "main.c"; 	++duty3;
     0091 05rr                      1-  876     	INCR	_duty3,F
     0092 3rrr                      1-  877     	LGOTO	_00186_DS_
                                    1-  878     ;;unsigned compare: left < lit (0x5AA=1450), size=2
     0093                           1-  879     _00157_DS_:
                                    1-  880     	.line	143, "main.c"; 	else if(workTime < 1450)
     0093 2105                      1-  881     	MOVIA	0x05
     0094 04rr                      1-  882     	SUBAR	(_workTime + 1),W
     0095 0903                      1-  883     	BTRSS	STATUS,2
     0096 3rrr                      1-  884     	LGOTO	_00266_DS_
     0097 21AA                      1-  885     	MOVIA	0xaa
     0098 04rr                      1-  886     	SUBAR	_workTime,W
     0099                           1-  887     _00266_DS_:
     0099 0C03                      1-  888     	BTRSC	STATUS,0
     009A 3rrr                      1-  889     	LGOTO	_00154_DS_
                                    1-  890     	.line	144, "main.c"; 	duty3 = MAXDUTY;
     009B 2196                      1-  891     	MOVIA	0x96
     009C 00rr                      1-  892     	MOVAR	_duty3
     009D 3rrr                      1-  893     	LGOTO	_00186_DS_
                                    1-  894     ;;unsigned compare: left < lit (0x640=1600), size=2
     009E                           1-  895     _00154_DS_:
                                    1-  896     	.line	145, "main.c"; 	else if(workTime < 1600)
     009E 2106                      1-  897     	MOVIA	0x06
     009F 04rr                      1-  898     	SUBAR	(_workTime + 1),W
     00A0 0903                      1-  899     	BTRSS	STATUS,2
     00A1 3rrr                      1-  900     	LGOTO	_00267_DS_
     00A2 2140                      1-  901     	MOVIA	0x40
     00A3 04rr                      1-  902     	SUBAR	_workTime,W
     00A4                           1-  903     _00267_DS_:
     00A4 0C03                      1-  904     	BTRSC	STATUS,0
     00A5 3rrr                      1-  905     	LGOTO	_00186_DS_
                                    1-  906     	.line	147, "main.c"; 	if(duty3 > 0)
     00A6 01rr                      1-  907     	MOVR	_duty3,W
     00A7 0903                      1-  908     	BTRSS	STATUS,2
                                    1-  909     	.line	148, "main.c"; 	--duty3;
     00A8 06rr                      1-  910     	DECR	_duty3,F
     00A9                           1-  911     _00186_DS_:
                                    1-  912     	.line	150, "main.c"; 	}
                                    1-  913     	RETURN	
     00A9 0010                      3-   26 m1      ret
                                    1-  916     ;	code size estimation:
                                    1-  917     ;	  407+    0 =   407 instructions (  814 byte)
                                    1-  919     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00116_DS_              Label    0000001C
_00117_DS_              Label    0000001F
_00124_DS_              Label    00000029
_00128_DS_              Label    00000016
_00134_DS_              Label    0000000D
_00154_DS_              Label    0000009E
_00157_DS_              Label    00000093
_00160_DS_              Label    00000084
_00163_DS_              Label    00000077
_00166_DS_              Label    0000006C
_00169_DS_              Label    0000005D
_00172_DS_              Label    00000050
_00175_DS_              Label    00000045
_00178_DS_              Label    00000036
_00181_DS_              Label    00000029
_00184_DS_              Label    0000001E
_00186_DS_              Label    000000A9
_00251_DS_              Label    00000009
_00252_DS_              Label    00000013
_00254_DS_              Label    00000024
_00255_DS_              Label    0000002F
_00256_DS_              Label    0000003C
_00258_DS_              Label    0000004B
_00259_DS_              Label    00000056
_00260_DS_              Label    00000063
_00262_DS_              Label    00000072
_00263_DS_              Label    0000007D
_00264_DS_              Label    0000008A
_00266_DS_              Label    00000099
_00267_DS_              Label    000000A4
_00275_DS_              Label    00000014
_00277_DS_              Label    0000000D
_00278_DS_              Label    00000015
_00279_DS_              Label    00000016
_00285_DS_              Label    00000016
_00289_DS_              Label    00000018
_00295_DS_              Label    0000000B
_00296_DS_              Label    00000011
_00298_DS_              Label    0000001C
_00299_DS_              Label    00000022
_00301_DS_              Label    0000002D
_00302_DS_              Label    00000033
_00304_DS_              Label    00000040
_00305_DS_              Label    00000048
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_duty0                  Label    00000000
_duty1                  Label    00000000
_duty2                  Label    00000000
_duty3                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_ledCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setLedduty             Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workCtr                Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100F                 Label    00000000
r0x1010                 Label    00000000
r0x1011                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000006
STK01                   Label    00000005
STK02                   Label    00000004
STK03                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
