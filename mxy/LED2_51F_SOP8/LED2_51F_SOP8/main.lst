
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_gotoSleep
                                    1-   57     	extern	_setLedduty
                                    1-   58     	extern	_keyCtr
                                    1-   59     	extern	_keyRead
                                    1-   60     	extern	_workCtr
                                    1-   61     	extern	_isr
                                    1-   62     	extern	_main
                                    1-   63     	extern	_workTime
                                    1-   64     	extern	_IntFlag
                                    1-   65     	extern	_intCount
                                    1-   66     	extern	_duty0
                                    1-   67     	extern	_duty1
                                    1-   68     	extern	_powerFlag
                                    1-   69     	extern	_keyCount
                                    1-   70     	extern	_ledCount
                                    1-   71     	extern	_sleepTime
                                    1-   73     	extern PSAVE
                                    1-   74     	extern SSAVE
                                    1-   75     	extern WSAVE
                                    1-   76     	extern STK02
                                    1-   77     	extern STK01
                                    1-   78     	extern STK00
                                    1-   80     .segment "uninit", 0x20000010
 20000010                           1-   81     PSAVE:
                                    1-   82     	.res 1
 20000011                           1-   83     SSAVE:
                                    1-   84     	.res 1
 20000012                           1-   85     WSAVE:
                                    1-   86     	.res 1
 20000013                           1-   87     STK02:
                                    1-   88     	.res 1
 20000014                           1-   89     STK01:
                                    1-   90     	.res 1
 20000015                           1-   91     STK00:
                                    1-   92     	.res 1
                                    1-   94     ;--------------------------------------------------------
                                    1-   95     ; global definitions
                                    1-   96     ;--------------------------------------------------------
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ; absolute symbol definitions
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     ;--------------------------------------------------------
                                    1-  101     ; compiler-defined variables
                                    1-  102     ;--------------------------------------------------------
                                    1-  103     .segment "uninit"
     0000                           1-  104     r0x100D:
                                    1-  105     	.res	1
                                    1-  106     .segment "uninit"
     0000                           1-  107     r0x100E:
                                    1-  108     	.res	1
                                    1-  109     ;--------------------------------------------------------
                                    1-  110     ; initialized data
                                    1-  111     ;--------------------------------------------------------
                                    1-  113     .segment "idata"
     0000                           1-  114     _workTime:
     0000 0000 0000                 1-  115     	dw	0x00, 0x00
                                    1-  119     .segment "idata"
     0000                           1-  120     _IntFlag:
     0000 0000                      1-  121     	dw	0x00
                                    1-  125     .segment "idata"
     0000                           1-  126     _intCount:
     0000 0000                      1-  127     	dw	0x00
                                    1-  131     .segment "idata"
     0000                           1-  132     _duty0:
     0000 0000                      1-  133     	dw	0x00
                                    1-  137     .segment "idata"
     0000                           1-  138     _duty1:
     0000 0000                      1-  139     	dw	0x00
                                    1-  143     .segment "idata"
     0000                           1-  144     _powerFlag:
     0000 0000                      1-  145     	dw	0x00
                                    1-  149     .segment "idata"
     0000                           1-  150     _keyCount:
     0000 0000                      1-  151     	dw	0x00
                                    1-  155     .segment "idata"
     0000                           1-  156     _ledCount:
     0000 0000                      1-  157     	dw	0x00
                                    1-  161     .segment "idata"
     0000                           1-  162     _sleepTime:
     0000 0000                      1-  163     	dw	0x00
                                    1-  166     ;--------------------------------------------------------
                                    1-  167     ; overlayable items in internal ram 
                                    1-  168     ;--------------------------------------------------------
                                    1-  169     ;	udata_ovr
                                    1-  170     ;--------------------------------------------------------
                                    1-  171     ; reset vector 
                                    1-  172     ;--------------------------------------------------------
                                    1-  173     ORG	0x0000
     0000 3rrr                      1-  174     	LGOTO	__nyc_ny8_startup
                                    1-  175     ;--------------------------------------------------------
                                    1-  176     ; interrupt and initialization code
                                    1-  177     ;--------------------------------------------------------
                                    1-  178     ORG 0x0008
     0008 3rrr                      1-  179     	lgoto	__sdcc_interrupt
                                    1-  181     .segment "code"
     0000                           1-  182     __sdcc_interrupt:
                                    1-  183     ;***
                                    1-  184     ;  pBlock Stats: dbName = I
                                    1-  185     ;***
                                    1-  186     ;2 compiler assigned registers:
                                    1-  187     ;   STK00
                                    1-  188     ;   STK01
                                    1-  189     ;; Starting pCode block
     0000                           1-  190     _isr:
                                    1-  191     ; 0 exit points
                                    1-  192     	.line	25, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  193     	MOVAR	WSAVE
     0001 1503                      1-  194     	SWAPR	STATUS,W
     0002 0283                      1-  195     	CLRR	STATUS
     0003 00rr                      1-  196     	MOVAR	SSAVE
     0004 010A                      1-  197     	MOVR	PCHBUF,W
     0005 028A                      1-  198     	CLRR	PCHBUF
     0006 00rr                      1-  199     	MOVAR	PSAVE
     0007 0104                      1-  200     	MOVR	FSR,W
     0008 00rr                      1-  201     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  202     	MOVR	STK00,W
     000A 00rr                      1-  203     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  204     	MOVR	STK01,W
     000C 00rr                      1-  205     	MOVAR	___sdcc_saved_stk01
                                    1-  206     	.line	27, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  207     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  208     	LGOTO	_00108_DS_
                                    1-  209     	.line	29, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  210     	MOVIA	0x38
     0010 03rr                      1-  211     	ADDAR	_TMR0,F
                                    1-  212     	.line	30, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  213     	INCR	_intCount,F
                                    1-  214     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  215     	MOVIA	0x64
     0013 04rr                      1-  216     	SUBAR	_intCount,W
     0014 0803                      1-  217     	BTRSS	STATUS,0
     0015 3rrr                      1-  218     	LGOTO	_00108_DS_
                                    1-  219     	.line	32, "main.c"; 	intCount = 0;
     0016 02rr                      1-  220     	CLRR	_intCount
                                    1-  221     	.line	33, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  222     	MOVIA	0x01
     0018 00rr                      1-  223     	MOVAR	_IntFlag
     0019                           1-  224     _00108_DS_:
                                    1-  225     	.line	36, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  226     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  227     	LGOTO	_00110_DS_
                                    1-  228     	.line	38, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  229     	MOVIA	0xfd
     001C 00rr                      1-  230     	MOVAR	_INTF
     001D                           1-  231     _00110_DS_:
                                    1-  232     	.line	41, "main.c"; 	INTF = 0;
     001D 02rr                      1-  233     	CLRR	_INTF
                                    1-  234     	.line	43, "main.c"; 	}
     001E 01rr                      1-  235     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  236     	MOVAR	STK01
     0020 01rr                      1-  237     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  238     	MOVAR	STK00
     0022 01rr                      1-  239     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  240     	MOVAR	FSR
     0024 01rr                      1-  241     	MOVR	PSAVE,W
     0025 008A                      1-  242     	MOVAR	PCHBUF
     0026 0283                      1-  243     	CLRR	STATUS
     0027 15rr                      1-  244     	SWAPR	SSAVE,W
     0028 0083                      1-  245     	MOVAR	STATUS
     0029 15rr                      1-  246     	SWAPR	WSAVE,F
     002A 15rr                      1-  247     	SWAPR	WSAVE,W
     002B                           1-  248     END_OF_INTERRUPT:
     002B 0011                      1-  249     	RETIE	
                                    1-  251     ;--------------------------------------------------------
                                    1-  252     ; code
                                    1-  253     ;--------------------------------------------------------
                                    1-  254     ;***
                                    1-  255     ;  pBlock Stats: dbName = M
                                    1-  256     ;***
                                    1-  257     ;has an exit
                                    1-  258     ;functions called:
                                    1-  259     ;   _gotoSleep
                                    1-  260     ;   _setLedduty
                                    1-  261     ;   _keyCtr
                                    1-  262     ;   _workCtr
                                    1-  263     ;   _gotoSleep
                                    1-  264     ;   _gotoSleep
                                    1-  265     ;   _setLedduty
                                    1-  266     ;   _keyCtr
                                    1-  267     ;   _workCtr
                                    1-  268     ;   _gotoSleep
                                    1-  269     ;; Starting pCode block
                                    1-  270     .segment "code"; module=main, function=_main
     0000                           1-  272     _main:
                                    1-  273     ; 2 exit points
                                    1-  274     	.line	48, "main.c"; 	DISI();
     0000 0013                      1-  275     	DISI
                                    1-  276     	.line	49, "main.c"; 	BPHCON = (unsigned char)~C_PB5_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21DF                      1-  277     	MOVIA	0xdf
     0002 00rr                      1-  278     	MOVAR	_BPHCON
                                    1-  279     	.line	50, "main.c"; 	IOSTB =  C_PB5_Input;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 2120                      1-  280     	MOVIA	0x20
     0004 000r                      1-  281     	IOST	_IOSTB
                                    1-  282     	.line	51, "main.c"; 	PORTB = 0x00;                       // PB2 & PB0 output high
     0005 02rr                      1-  283     	CLRR	_PORTB
                                    1-  284     	.line	52, "main.c"; 	duty0 = duty1 = 0;
     0006 02rr                      1-  285     	CLRR	_duty1
     0007 02rr                      1-  286     	CLRR	_duty0
                                    1-  287     	.line	53, "main.c"; 	INTE =  C_INT_TMR0;
     0008 2101                      1-  288     	MOVIA	0x01
     0009 00rr                      1-  289     	MOVAR	_INTE
                                    1-  290     	.line	54, "main.c"; 	TMR0 = 55;
     000A 2137                      1-  291     	MOVIA	0x37
     000B 00rr                      1-  292     	MOVAR	_TMR0
                                    1-  293     	.line	55, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000C 0200                      1-  294     	CLRA	
     000D 0003                      1-  295     	T0MD	
                                    1-  296     	.line	58, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     000E 2188                      1-  297     	MOVIA	0x88
     000F 00rr                      1-  298     	MOVAR	_PCON
                                    1-  299     	.line	61, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0010 2101                      1-  300     	MOVIA	0x01
     0011 000r                      1-  301     	IOST	_PCON1
                                    1-  302     	.line	62, "main.c"; 	ENI();
     0012 0004                      1-  303     	ENI
                                    1-  304     	.line	63, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  305     	LCALL	_gotoSleep
     0014                           1-  306     _00128_DS_:
                                    1-  307     	.line	66, "main.c"; 	CLRWDT();
     0014 0002                      1-  308     	clrwdt
                                    1-  309     	.line	67, "main.c"; 	if(powerFlag)
     0015 01rr                      1-  310     	MOVR	_powerFlag,W
     0016 0D03                      1-  311     	BTRSC	STATUS,2
     0017 3rrr                      1-  312     	LGOTO	_00116_DS_
                                    1-  313     	.line	68, "main.c"; 	setLedduty();
     0018 2rrr                      1-  314     	LCALL	_setLedduty
     0019 3rrr                      1-  315     	LGOTO	_00117_DS_
     001A                           1-  316     _00116_DS_:
                                    1-  317     	.line	70, "main.c"; 	PORTB = 0x00;
     001A 02rr                      1-  318     	CLRR	_PORTB
     001B                           1-  319     _00117_DS_:
                                    1-  320     	.line	71, "main.c"; 	if(!IntFlag)
     001B 01rr                      1-  321     	MOVR	_IntFlag,W
     001C 0D03                      1-  322     	BTRSC	STATUS,2
     001D 3rrr                      1-  323     	LGOTO	_00128_DS_
                                    1-  324     	.line	73, "main.c"; 	IntFlag = 0;   
     001E 02rr                      1-  325     	CLRR	_IntFlag
                                    1-  326     	.line	74, "main.c"; 	keyCtr();
     001F 2rrr                      1-  327     	LCALL	_keyCtr
                                    1-  328     	.line	75, "main.c"; 	if(powerFlag)
     0020 01rr                      1-  329     	MOVR	_powerFlag,W
     0021 0D03                      1-  330     	BTRSC	STATUS,2
     0022 3rrr                      1-  331     	LGOTO	_00124_DS_
                                    1-  332     	.line	76, "main.c"; 	workCtr();
     0023 2rrr                      1-  333     	LCALL	_workCtr
     0024 3rrr                      1-  334     	LGOTO	_00128_DS_
     0025                           1-  335     _00124_DS_:
                                    1-  336     	.line	79, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0025 01rr                      1-  337     	MOVR	_keyCount,W
     0026 0903                      1-  338     	BTRSS	STATUS,2
     0027 3rrr                      1-  339     	LGOTO	_00128_DS_
     0028 05rr                      1-  340     	INCR	_sleepTime,F
                                    1-  341     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  342     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0029 21C9                      1-  343     	MOVIA	0xc9
     002A 04rr                      1-  344     	SUBAR	_sleepTime,W
     002B 0803                      1-  345     	BTRSS	STATUS,0
     002C 3rrr                      1-  346     	LGOTO	_00128_DS_
                                    1-  347     	.line	80, "main.c"; 	gotoSleep();
     002D 2rrr                      1-  348     	LCALL	_gotoSleep
     002E 3rrr                      1-  349     	LGOTO	_00128_DS_
                                    1-  350     	.line	86, "main.c"; 	}
                                    1-  351     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1-  352     ; exit point of _main
                                    1-  354     ;***
                                    1-  355     ;  pBlock Stats: dbName = C
                                    1-  356     ;***
                                    1-  357     ;has an exit
                                    1-  358     ;; Starting pCode block
                                    1-  359     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  361     _gotoSleep:
                                    1-  362     ; 2 exit points
                                    1-  363     	.line	183, "main.c"; 	sleepTime = 0;
     0000 02rr                      1-  364     	CLRR	_sleepTime
                                    1-  365     	.line	184, "main.c"; 	PORTB = 0x00;
     0001 02rr                      1-  366     	CLRR	_PORTB
                                    1-  367     	.line	185, "main.c"; 	BWUCON = 0x20;
     0002 2120                      1-  368     	MOVIA	0x20
     0003 00rr                      1-  369     	MOVAR	_BWUCON
                                    1-  370     	.line	186, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0004 2103                      1-  371     	MOVIA	0x03
     0005 00rr                      1-  372     	MOVAR	_INTE
                                    1-  373     	.line	187, "main.c"; 	PCON =  C_LVR_En;	
     0006 2108                      1-  374     	MOVIA	0x08
     0007 00rr                      1-  375     	MOVAR	_PCON
                                    1-  376     	.line	188, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0008 02rr                      1-  377     	CLRR	_INTF
                                    1-  378     	.line	189, "main.c"; 	CLRWDT();
     0009 0002                      1-  379     	clrwdt
                                    1-  380     	.line	190, "main.c"; 	ENI();
     000A 0004                      1-  381     	ENI
                                    1-  382     	.line	191, "main.c"; 	SLEEP();
     000B 0001                      1-  383     	sleep
                                    1-  384     	.line	192, "main.c"; 	BWUCON = 0x00;
     000C 02rr                      1-  385     	CLRR	_BWUCON
                                    1-  386     	.line	193, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1-  387     	MOVIA	0x01
     000E 00rr                      1-  388     	MOVAR	_INTE
                                    1-  389     	.line	194, "main.c"; 	INTF = 0;
     000F 02rr                      1-  390     	CLRR	_INTF
                                    1-  391     	.line	196, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0010 2188                      1-  392     	MOVIA	0x88
     0011 00rr                      1-  393     	MOVAR	_PCON
                                    1-  394     	.line	198, "main.c"; 	}
                                    1-  395     	RETURN	
     0012 0010                      3-   26 m1      ret
                                    1-  396     ; exit point of _gotoSleep
                                    1-  398     ;***
                                    1-  399     ;  pBlock Stats: dbName = C
                                    1-  400     ;***
                                    1-  401     ;; Starting pCode block
                                    1-  402     .segment "code"; module=main, function=_setLedduty
     0000                           1-  404     _setLedduty:
                                    1-  405     ; 0 exit points
                                    1-  406     	.line	168, "main.c"; 	if(ledCount >= duty0)
     0000 01rr                      1-  407     	MOVR	_duty0,W
     0001 04rr                      1-  408     	SUBAR	_ledCount,W
     0002 0803                      1-  409     	BTRSS	STATUS,0
     0003 3rrr                      1-  410     	LGOTO	_00231_DS_
                                    1-  411     	.line	169, "main.c"; 	PORTB &= 0xFE;
     0004 1Crr                      1-  412     	BCR	_PORTB,0
     0005 3rrr                      1-  413     	LGOTO	_00232_DS_
     0006                           1-  414     _00231_DS_:
                                    1-  415     	.line	171, "main.c"; 	PORTB |= 0x01;
     0006 18rr                      1-  416     	BSR	_PORTB,0
     0007                           1-  417     _00232_DS_:
                                    1-  418     	.line	172, "main.c"; 	if(ledCount >= duty1)
     0007 01rr                      1-  419     	MOVR	_duty1,W
     0008 04rr                      1-  420     	SUBAR	_ledCount,W
     0009 0803                      1-  421     	BTRSS	STATUS,0
     000A 3rrr                      1-  422     	LGOTO	_00234_DS_
                                    1-  423     	.line	173, "main.c"; 	PORTB &= 0xFD;
     000B 1Crr                      1-  424     	BCR	_PORTB,1
     000C 3rrr                      1-  425     	LGOTO	_00235_DS_
     000D                           1-  426     _00234_DS_:
                                    1-  427     	.line	175, "main.c"; 	PORTB |= 0x02;
     000D 18rr                      1-  428     	BSR	_PORTB,1
     000E                           1-  429     _00235_DS_:
                                    1-  430     	.line	176, "main.c"; 	if(++ledCount >= 100)
     000E 05rr                      1-  431     	INCR	_ledCount,F
                                    1-  432     ;;unsigned compare: left < lit (0x64=100), size=1
     000F 2164                      1-  433     	MOVIA	0x64
     0010 04rr                      1-  434     	SUBAR	_ledCount,W
     0011 0C03                      1-  435     	BTRSC	STATUS,0
                                    1-  436     	.line	177, "main.c"; 	ledCount = 0;
     0012 02rr                      1-  437     	CLRR	_ledCount
                                    1-  438     	.line	178, "main.c"; 	}
                                    1-  439     	RETURN	
     0013 0010                      3-   26 m1      ret
                                    1-  441     ;***
                                    1-  442     ;  pBlock Stats: dbName = C
                                    1-  443     ;***
                                    1-  444     ;has an exit
                                    1-  445     ;functions called:
                                    1-  446     ;   _keyRead
                                    1-  447     ;   _keyRead
                                    1-  448     ;1 compiler assigned register :
                                    1-  449     ;   r0x100E
                                    1-  450     ;; Starting pCode block
                                    1-  451     .segment "code"; module=main, function=_keyCtr
     0000                           1-  453     _keyCtr:
                                    1-  454     ; 2 exit points
                                    1-  455     	.line	148, "main.c"; 	if(keyRead(0x20 & ~PORTB))
     0000 07rr                      1-  456     	COMR	_PORTB,W
     0001 00rr                      1-  457     	MOVAR	r0x100E
     0002 2120                      1-  458     	MOVIA	0x20
     0003 10rr                      1-  459     	ANDAR	r0x100E,F
     0004 01rr                      1-  460     	MOVR	r0x100E,W
     0005 2rrr                      1-  461     	LCALL	_keyRead
     0006 00rr                      1-  462     	MOVAR	r0x100E
     0007 01rr                      1-  463     	MOVR	r0x100E,W
     0008 0D03                      1-  464     	BTRSC	STATUS,2
     0009 3rrr                      1-  465     	LGOTO	_00225_DS_
                                    1-  466     	.line	150, "main.c"; 	workTime = 0;
     000A 02rr                      1-  467     	CLRR	_workTime
     000B 02rr                      1-  468     	CLRR	(_workTime + 1)
                                    1-  469     	.line	151, "main.c"; 	duty0 = duty1 = 0;
     000C 02rr                      1-  470     	CLRR	_duty1
     000D 02rr                      1-  471     	CLRR	_duty0
                                    1-  472     	.line	152, "main.c"; 	ledCount = 0;
     000E 02rr                      1-  473     	CLRR	_ledCount
                                    1-  474     	.line	153, "main.c"; 	if(powerFlag)
     000F 01rr                      1-  475     	MOVR	_powerFlag,W
     0010 0D03                      1-  476     	BTRSC	STATUS,2
     0011 3rrr                      1-  477     	LGOTO	_00221_DS_
                                    1-  478     	.line	155, "main.c"; 	powerFlag = 0;
     0012 02rr                      1-  479     	CLRR	_powerFlag
     0013 3rrr                      1-  480     	LGOTO	_00225_DS_
     0014                           1-  481     _00221_DS_:
                                    1-  482     	.line	159, "main.c"; 	powerFlag = 1;
     0014 2101                      1-  483     	MOVIA	0x01
     0015 00rr                      1-  484     	MOVAR	_powerFlag
     0016                           1-  485     _00225_DS_:
                                    1-  486     	.line	162, "main.c"; 	}
                                    1-  487     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  488     ; exit point of _keyCtr
                                    1-  490     ;***
                                    1-  491     ;  pBlock Stats: dbName = C
                                    1-  492     ;***
                                    1-  493     ;has an exit
                                    1-  494     ;1 compiler assigned register :
                                    1-  495     ;   r0x100D
                                    1-  496     ;; Starting pCode block
                                    1-  497     .segment "code"; module=main, function=_keyRead
                                    1-  499     ;local variable name mapping:
     0000                           1-  501     _keyRead:
                                    1-  502     ; 2 exit points
                                    1-  503     	.line	121, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  504     	MOVAR	r0x100D
                                    1-  505     	.line	123, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  506     	MOVR	r0x100D,W
     0002 0D03                      1-  507     	BTRSC	STATUS,2
     0003 3rrr                      1-  508     	LGOTO	_00213_DS_
                                    1-  509     	.line	125, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  510     	CLRR	_sleepTime
                                    1-  511     	.line	126, "main.c"; 	keyCount++;
     0005 05rr                      1-  512     	INCR	_keyCount,F
                                    1-  513     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  514     	.line	127, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  515     	MOVIA	0xc8
     0007 04rr                      1-  516     	SUBAR	_keyCount,W
     0008 0803                      1-  517     	BTRSS	STATUS,0
     0009 3rrr                      1-  518     	LGOTO	_00214_DS_
                                    1-  519     	.line	129, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  520     	MOVIA	0xc8
     000B 00rr                      1-  521     	MOVAR	_keyCount
     000C 3rrr                      1-  522     	LGOTO	_00214_DS_
                                    1-  523     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  524     _00213_DS_:
                                    1-  525     	.line	134, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  526     	MOVIA	0x08
     000E 04rr                      1-  527     	SUBAR	_keyCount,W
     000F 0803                      1-  528     	BTRSS	STATUS,0
     0010 3rrr                      1-  529     	LGOTO	_00211_DS_
                                    1-  530     	.line	136, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  531     	CLRR	_keyCount
                                    1-  532     	.line	137, "main.c"; 	return	1;
     0012 2101                      1-  533     	MOVIA	0x01
     0013 3rrr                      1-  534     	LGOTO	_00215_DS_
     0014                           1-  535     _00211_DS_:
                                    1-  536     	.line	139, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  537     	CLRR	_keyCount
     0015                           1-  538     _00214_DS_:
                                    1-  539     	.line	141, "main.c"; 	return 0;
     0015 2100                      1-  540     	MOVIA	0x00
     0016                           1-  541     _00215_DS_:
                                    1-  542     	.line	142, "main.c"; 	}
                                    1-  543     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  544     ; exit point of _keyRead
                                    1-  546     ;***
                                    1-  547     ;  pBlock Stats: dbName = C
                                    1-  548     ;***
                                    1-  549     ;; Starting pCode block
                                    1-  550     .segment "code"; module=main, function=_workCtr
     0000                           1-  552     _workCtr:
                                    1-  553     ; 0 exit points
                                    1-  554     	.line	90, "main.c"; 	if(++workTime >= 600)
     0000 05rr                      1-  555     	INCR	_workTime,F
     0001 0D03                      1-  556     	BTRSC	STATUS,2
     0002 05rr                      1-  557     	INCR	(_workTime + 1),F
                                    1-  558     ;;unsigned compare: left < lit (0x258=600), size=2
     0003 2102                      1-  559     	MOVIA	0x02
     0004 04rr                      1-  560     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  561     	BTRSS	STATUS,2
     0006 3rrr                      1-  562     	LGOTO	_00195_DS_
     0007 2158                      1-  563     	MOVIA	0x58
     0008 04rr                      1-  564     	SUBAR	_workTime,W
     0009                           1-  565     _00195_DS_:
     0009 0803                      1-  566     	BTRSS	STATUS,0
     000A 3rrr                      1-  567     	LGOTO	_00134_DS_
                                    1-  568     	.line	91, "main.c"; 	workTime = 0;
     000B 02rr                      1-  569     	CLRR	_workTime
     000C 02rr                      1-  570     	CLRR	(_workTime + 1)
                                    1-  571     ;;unsigned compare: left < lit (0x64=100), size=2
     000D                           1-  572     _00134_DS_:
                                    1-  573     	.line	92, "main.c"; 	if(workTime < 100)
     000D 2100                      1-  574     	MOVIA	0x00
     000E 04rr                      1-  575     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  576     	BTRSS	STATUS,2
     0010 3rrr                      1-  577     	LGOTO	_00196_DS_
     0011 2164                      1-  578     	MOVIA	0x64
     0012 04rr                      1-  579     	SUBAR	_workTime,W
     0013                           1-  580     _00196_DS_:
     0013 0C03                      1-  581     	BTRSC	STATUS,0
     0014 3rrr                      1-  582     	LGOTO	_00158_DS_
                                    1-  583     	.line	94, "main.c"; 	duty1 = 0;
     0015 02rr                      1-  584     	CLRR	_duty1
                                    1-  585     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1-  586     	.line	95, "main.c"; 	if(duty0 < 100)
     0016 2164                      1-  587     	MOVIA	0x64
     0017 04rr                      1-  588     	SUBAR	_duty0,W
     0018 0C03                      1-  589     	BTRSC	STATUS,0
     0019 3rrr                      1-  590     	LGOTO	_00160_DS_
                                    1-  591     	.line	96, "main.c"; 	++duty0;
     001A 05rr                      1-  592     	INCR	_duty0,F
     001B 3rrr                      1-  593     	LGOTO	_00160_DS_
                                    1-  594     ;;unsigned compare: left < lit (0xC8=200), size=2
     001C                           1-  595     _00158_DS_:
                                    1-  596     	.line	98, "main.c"; 	else if(workTime < 200)
     001C 2100                      1-  597     	MOVIA	0x00
     001D 04rr                      1-  598     	SUBAR	(_workTime + 1),W
     001E 0903                      1-  599     	BTRSS	STATUS,2
     001F 3rrr                      1-  600     	LGOTO	_00198_DS_
     0020 21C8                      1-  601     	MOVIA	0xc8
     0021 04rr                      1-  602     	SUBAR	_workTime,W
     0022                           1-  603     _00198_DS_:
     0022 0C03                      1-  604     	BTRSC	STATUS,0
     0023 3rrr                      1-  605     	LGOTO	_00155_DS_
                                    1-  606     	.line	99, "main.c"; 	duty0 = 100;
     0024 2164                      1-  607     	MOVIA	0x64
     0025 00rr                      1-  608     	MOVAR	_duty0
     0026 3rrr                      1-  609     	LGOTO	_00160_DS_
                                    1-  610     ;;unsigned compare: left < lit (0x12C=300), size=2
     0027                           1-  611     _00155_DS_:
                                    1-  612     	.line	100, "main.c"; 	else if(workTime < 300)
     0027 2101                      1-  613     	MOVIA	0x01
     0028 04rr                      1-  614     	SUBAR	(_workTime + 1),W
     0029 0903                      1-  615     	BTRSS	STATUS,2
     002A 3rrr                      1-  616     	LGOTO	_00199_DS_
     002B 212C                      1-  617     	MOVIA	0x2c
     002C 04rr                      1-  618     	SUBAR	_workTime,W
     002D                           1-  619     _00199_DS_:
     002D 0C03                      1-  620     	BTRSC	STATUS,0
     002E 3rrr                      1-  621     	LGOTO	_00152_DS_
                                    1-  622     	.line	102, "main.c"; 	if(duty0 > 0)
     002F 01rr                      1-  623     	MOVR	_duty0,W
     0030 0D03                      1-  624     	BTRSC	STATUS,2
     0031 3rrr                      1-  625     	LGOTO	_00160_DS_
                                    1-  626     	.line	103, "main.c"; 	--duty0;
     0032 06rr                      1-  627     	DECR	_duty0,F
     0033 3rrr                      1-  628     	LGOTO	_00160_DS_
                                    1-  629     ;;unsigned compare: left < lit (0x190=400), size=2
     0034                           1-  630     _00152_DS_:
                                    1-  631     	.line	105, "main.c"; 	else if(workTime < 400)
     0034 2101                      1-  632     	MOVIA	0x01
     0035 04rr                      1-  633     	SUBAR	(_workTime + 1),W
     0036 0903                      1-  634     	BTRSS	STATUS,2
     0037 3rrr                      1-  635     	LGOTO	_00200_DS_
     0038 2190                      1-  636     	MOVIA	0x90
     0039 04rr                      1-  637     	SUBAR	_workTime,W
     003A                           1-  638     _00200_DS_:
     003A 0C03                      1-  639     	BTRSC	STATUS,0
     003B 3rrr                      1-  640     	LGOTO	_00149_DS_
                                    1-  641     	.line	107, "main.c"; 	duty0 = 0;
     003C 02rr                      1-  642     	CLRR	_duty0
                                    1-  643     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1-  644     	.line	108, "main.c"; 	if(duty1 < 100)
     003D 2164                      1-  645     	MOVIA	0x64
     003E 04rr                      1-  646     	SUBAR	_duty1,W
     003F 0C03                      1-  647     	BTRSC	STATUS,0
     0040 3rrr                      1-  648     	LGOTO	_00160_DS_
                                    1-  649     	.line	109, "main.c"; 	++duty1;
     0041 05rr                      1-  650     	INCR	_duty1,F
     0042 3rrr                      1-  651     	LGOTO	_00160_DS_
                                    1-  652     ;;unsigned compare: left < lit (0x1F4=500), size=2
     0043                           1-  653     _00149_DS_:
                                    1-  654     	.line	111, "main.c"; 	else if(workTime < 500)
     0043 2101                      1-  655     	MOVIA	0x01
     0044 04rr                      1-  656     	SUBAR	(_workTime + 1),W
     0045 0903                      1-  657     	BTRSS	STATUS,2
     0046 3rrr                      1-  658     	LGOTO	_00202_DS_
     0047 21F4                      1-  659     	MOVIA	0xf4
     0048 04rr                      1-  660     	SUBAR	_workTime,W
     0049                           1-  661     _00202_DS_:
     0049 0C03                      1-  662     	BTRSC	STATUS,0
     004A 3rrr                      1-  663     	LGOTO	_00146_DS_
                                    1-  664     	.line	112, "main.c"; 	duty1 = 100;
     004B 2164                      1-  665     	MOVIA	0x64
     004C 00rr                      1-  666     	MOVAR	_duty1
     004D 3rrr                      1-  667     	LGOTO	_00160_DS_
                                    1-  668     ;;unsigned compare: left < lit (0x258=600), size=2
     004E                           1-  669     _00146_DS_:
                                    1-  670     	.line	113, "main.c"; 	else if(workTime < 600)
     004E 2102                      1-  671     	MOVIA	0x02
     004F 04rr                      1-  672     	SUBAR	(_workTime + 1),W
     0050 0903                      1-  673     	BTRSS	STATUS,2
     0051 3rrr                      1-  674     	LGOTO	_00203_DS_
     0052 2158                      1-  675     	MOVIA	0x58
     0053 04rr                      1-  676     	SUBAR	_workTime,W
     0054                           1-  677     _00203_DS_:
     0054 0C03                      1-  678     	BTRSC	STATUS,0
     0055 3rrr                      1-  679     	LGOTO	_00160_DS_
                                    1-  680     	.line	115, "main.c"; 	if(duty1 > 0)
     0056 01rr                      1-  681     	MOVR	_duty1,W
     0057 0903                      1-  682     	BTRSS	STATUS,2
                                    1-  683     	.line	116, "main.c"; 	--duty1;
     0058 06rr                      1-  684     	DECR	_duty1,F
     0059                           1-  685     _00160_DS_:
                                    1-  686     	.line	118, "main.c"; 	}
                                    1-  687     	RETURN	
     0059 0010                      3-   26 m1      ret
                                    1-  690     ;	code size estimation:
                                    1-  691     ;	  261+    0 =   261 instructions (  522 byte)
                                    1-  693     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00116_DS_              Label    0000001A
_00117_DS_              Label    0000001B
_00124_DS_              Label    00000025
_00128_DS_              Label    00000014
_00134_DS_              Label    0000000D
_00146_DS_              Label    0000004E
_00149_DS_              Label    00000043
_00152_DS_              Label    00000034
_00155_DS_              Label    00000027
_00158_DS_              Label    0000001C
_00160_DS_              Label    00000059
_00195_DS_              Label    00000009
_00196_DS_              Label    00000013
_00198_DS_              Label    00000022
_00199_DS_              Label    0000002D
_00200_DS_              Label    0000003A
_00202_DS_              Label    00000049
_00203_DS_              Label    00000054
_00211_DS_              Label    00000014
_00213_DS_              Label    0000000D
_00214_DS_              Label    00000015
_00215_DS_              Label    00000016
_00221_DS_              Label    00000014
_00225_DS_              Label    00000016
_00231_DS_              Label    00000006
_00232_DS_              Label    00000007
_00234_DS_              Label    0000000D
_00235_DS_              Label    0000000E
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_duty0                  Label    00000000
_duty1                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_ledCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setLedduty             Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workCtr                Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
