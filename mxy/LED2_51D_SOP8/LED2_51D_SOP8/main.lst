
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_gotoSleep
                                    1-   57     	extern	_setLedduty
                                    1-   58     	extern	_keyCtr
                                    1-   59     	extern	_keyRead
                                    1-   60     	extern	_workCtr
                                    1-   61     	extern	_isr
                                    1-   62     	extern	_main
                                    1-   63     	extern	_workTime
                                    1-   64     	extern	_IntFlag
                                    1-   65     	extern	_intCount
                                    1-   66     	extern	_duty0
                                    1-   67     	extern	_duty1
                                    1-   68     	extern	_powerFlag
                                    1-   69     	extern	_keyCount
                                    1-   70     	extern	_ledCount
                                    1-   71     	extern	_sleepTime
                                    1-   73     	extern PSAVE
                                    1-   74     	extern SSAVE
                                    1-   75     	extern WSAVE
                                    1-   76     	extern STK02
                                    1-   77     	extern STK01
                                    1-   78     	extern STK00
                                    1-   80     .segment "uninit", 0x20000010
 20000010                           1-   81     PSAVE:
                                    1-   82     	.res 1
 20000011                           1-   83     SSAVE:
                                    1-   84     	.res 1
 20000012                           1-   85     WSAVE:
                                    1-   86     	.res 1
 20000013                           1-   87     STK02:
                                    1-   88     	.res 1
 20000014                           1-   89     STK01:
                                    1-   90     	.res 1
 20000015                           1-   91     STK00:
                                    1-   92     	.res 1
                                    1-   94     ;--------------------------------------------------------
                                    1-   95     ; global definitions
                                    1-   96     ;--------------------------------------------------------
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ; absolute symbol definitions
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     ;--------------------------------------------------------
                                    1-  101     ; compiler-defined variables
                                    1-  102     ;--------------------------------------------------------
                                    1-  103     .segment "uninit"
     0000                           1-  104     r0x100E:
                                    1-  105     	.res	1
                                    1-  106     .segment "uninit"
     0000                           1-  107     r0x100F:
                                    1-  108     	.res	1
                                    1-  109     .segment "uninit"
     0000                           1-  110     r0x100D:
                                    1-  111     	.res	1
                                    1-  112     ;--------------------------------------------------------
                                    1-  113     ; initialized data
                                    1-  114     ;--------------------------------------------------------
                                    1-  116     .segment "idata"
     0000                           1-  117     _workTime:
     0000 0000 0000                 1-  118     	dw	0x00, 0x00
                                    1-  122     .segment "idata"
     0000                           1-  123     _IntFlag:
     0000 0000                      1-  124     	dw	0x00
                                    1-  128     .segment "idata"
     0000                           1-  129     _intCount:
     0000 0000                      1-  130     	dw	0x00
                                    1-  134     .segment "idata"
     0000                           1-  135     _duty0:
     0000 0000                      1-  136     	dw	0x00
                                    1-  140     .segment "idata"
     0000                           1-  141     _duty1:
     0000 0000                      1-  142     	dw	0x00
                                    1-  146     .segment "idata"
     0000                           1-  147     _powerFlag:
     0000 0000                      1-  148     	dw	0x00
                                    1-  152     .segment "idata"
     0000                           1-  153     _keyCount:
     0000 0000                      1-  154     	dw	0x00
                                    1-  158     .segment "idata"
     0000                           1-  159     _ledCount:
     0000 0000                      1-  160     	dw	0x00
                                    1-  164     .segment "idata"
     0000                           1-  165     _sleepTime:
     0000 0000                      1-  166     	dw	0x00
                                    1-  169     ;--------------------------------------------------------
                                    1-  170     ; overlayable items in internal ram 
                                    1-  171     ;--------------------------------------------------------
                                    1-  172     ;	udata_ovr
                                    1-  173     ;--------------------------------------------------------
                                    1-  174     ; reset vector 
                                    1-  175     ;--------------------------------------------------------
                                    1-  176     ORG	0x0000
     0000 3rrr                      1-  177     	LGOTO	__nyc_ny8_startup
                                    1-  178     ;--------------------------------------------------------
                                    1-  179     ; interrupt and initialization code
                                    1-  180     ;--------------------------------------------------------
                                    1-  181     ORG 0x0008
     0008 3rrr                      1-  182     	lgoto	__sdcc_interrupt
                                    1-  184     .segment "code"
     0000                           1-  185     __sdcc_interrupt:
                                    1-  186     ;***
                                    1-  187     ;  pBlock Stats: dbName = I
                                    1-  188     ;***
                                    1-  189     ;2 compiler assigned registers:
                                    1-  190     ;   STK00
                                    1-  191     ;   STK01
                                    1-  192     ;; Starting pCode block
     0000                           1-  193     _isr:
                                    1-  194     ; 0 exit points
                                    1-  195     	.line	27, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  196     	MOVAR	WSAVE
     0001 1503                      1-  197     	SWAPR	STATUS,W
     0002 0283                      1-  198     	CLRR	STATUS
     0003 00rr                      1-  199     	MOVAR	SSAVE
     0004 010A                      1-  200     	MOVR	PCHBUF,W
     0005 028A                      1-  201     	CLRR	PCHBUF
     0006 00rr                      1-  202     	MOVAR	PSAVE
     0007 0104                      1-  203     	MOVR	FSR,W
     0008 00rr                      1-  204     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  205     	MOVR	STK00,W
     000A 00rr                      1-  206     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  207     	MOVR	STK01,W
     000C 00rr                      1-  208     	MOVAR	___sdcc_saved_stk01
                                    1-  209     	.line	29, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  210     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  211     	LGOTO	_00108_DS_
                                    1-  212     	.line	31, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  213     	MOVIA	0x38
     0010 03rr                      1-  214     	ADDAR	_TMR0,F
                                    1-  215     	.line	32, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  216     	INCR	_intCount,F
                                    1-  217     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  218     	MOVIA	0x64
     0013 04rr                      1-  219     	SUBAR	_intCount,W
     0014 0803                      1-  220     	BTRSS	STATUS,0
     0015 3rrr                      1-  221     	LGOTO	_00108_DS_
                                    1-  222     	.line	34, "main.c"; 	intCount = 0;
     0016 02rr                      1-  223     	CLRR	_intCount
                                    1-  224     	.line	35, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  225     	MOVIA	0x01
     0018 00rr                      1-  226     	MOVAR	_IntFlag
     0019                           1-  227     _00108_DS_:
                                    1-  228     	.line	38, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  229     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  230     	LGOTO	_00110_DS_
                                    1-  231     	.line	40, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  232     	MOVIA	0xfd
     001C 00rr                      1-  233     	MOVAR	_INTF
     001D                           1-  234     _00110_DS_:
                                    1-  235     	.line	43, "main.c"; 	INTF = 0;
     001D 02rr                      1-  236     	CLRR	_INTF
                                    1-  237     	.line	45, "main.c"; 	}
     001E 01rr                      1-  238     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  239     	MOVAR	STK01
     0020 01rr                      1-  240     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  241     	MOVAR	STK00
     0022 01rr                      1-  242     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  243     	MOVAR	FSR
     0024 01rr                      1-  244     	MOVR	PSAVE,W
     0025 008A                      1-  245     	MOVAR	PCHBUF
     0026 0283                      1-  246     	CLRR	STATUS
     0027 15rr                      1-  247     	SWAPR	SSAVE,W
     0028 0083                      1-  248     	MOVAR	STATUS
     0029 15rr                      1-  249     	SWAPR	WSAVE,F
     002A 15rr                      1-  250     	SWAPR	WSAVE,W
     002B                           1-  251     END_OF_INTERRUPT:
     002B 0011                      1-  252     	RETIE	
                                    1-  254     ;--------------------------------------------------------
                                    1-  255     ; code
                                    1-  256     ;--------------------------------------------------------
                                    1-  257     ;***
                                    1-  258     ;  pBlock Stats: dbName = M
                                    1-  259     ;***
                                    1-  260     ;has an exit
                                    1-  261     ;functions called:
                                    1-  262     ;   _gotoSleep
                                    1-  263     ;   _setLedduty
                                    1-  264     ;   _keyCtr
                                    1-  265     ;   _workCtr
                                    1-  266     ;   _gotoSleep
                                    1-  267     ;   _gotoSleep
                                    1-  268     ;   _setLedduty
                                    1-  269     ;   _keyCtr
                                    1-  270     ;   _workCtr
                                    1-  271     ;   _gotoSleep
                                    1-  272     ;; Starting pCode block
                                    1-  273     .segment "code"; module=main, function=_main
     0000                           1-  275     _main:
                                    1-  276     ; 2 exit points
                                    1-  277     	.line	50, "main.c"; 	DISI();
     0000 0013                      1-  278     	DISI
                                    1-  279     	.line	51, "main.c"; 	BPHCON = (unsigned char)~C_PB5_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21DF                      1-  280     	MOVIA	0xdf
     0002 00rr                      1-  281     	MOVAR	_BPHCON
                                    1-  282     	.line	52, "main.c"; 	IOSTB =  C_PB5_Input;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 2120                      1-  283     	MOVIA	0x20
     0004 000r                      1-  284     	IOST	_IOSTB
                                    1-  285     	.line	53, "main.c"; 	PORTB = 0x00;                       // PB2 & PB0 output high
     0005 02rr                      1-  286     	CLRR	_PORTB
                                    1-  287     	.line	54, "main.c"; 	duty0 = duty1 = 0;
     0006 02rr                      1-  288     	CLRR	_duty1
     0007 02rr                      1-  289     	CLRR	_duty0
                                    1-  290     	.line	55, "main.c"; 	INTE =  C_INT_TMR0;
     0008 2101                      1-  291     	MOVIA	0x01
     0009 00rr                      1-  292     	MOVAR	_INTE
                                    1-  293     	.line	56, "main.c"; 	TMR0 = 55;
     000A 2137                      1-  294     	MOVIA	0x37
     000B 00rr                      1-  295     	MOVAR	_TMR0
                                    1-  296     	.line	57, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000C 0200                      1-  297     	CLRA	
     000D 0003                      1-  298     	T0MD	
                                    1-  299     	.line	60, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     000E 2188                      1-  300     	MOVIA	0x88
     000F 00rr                      1-  301     	MOVAR	_PCON
                                    1-  302     	.line	63, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0010 2101                      1-  303     	MOVIA	0x01
     0011 000r                      1-  304     	IOST	_PCON1
                                    1-  305     	.line	64, "main.c"; 	ENI();
     0012 0004                      1-  306     	ENI
                                    1-  307     	.line	65, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  308     	LCALL	_gotoSleep
     0014                           1-  309     _00128_DS_:
                                    1-  310     	.line	68, "main.c"; 	CLRWDT();
     0014 0002                      1-  311     	clrwdt
                                    1-  312     	.line	69, "main.c"; 	if(powerFlag)
     0015 01rr                      1-  313     	MOVR	_powerFlag,W
     0016 0D03                      1-  314     	BTRSC	STATUS,2
     0017 3rrr                      1-  315     	LGOTO	_00116_DS_
                                    1-  316     	.line	70, "main.c"; 	setLedduty();
     0018 2rrr                      1-  317     	LCALL	_setLedduty
     0019 3rrr                      1-  318     	LGOTO	_00117_DS_
     001A                           1-  319     _00116_DS_:
                                    1-  320     	.line	72, "main.c"; 	PORTB = 0x00;
     001A 02rr                      1-  321     	CLRR	_PORTB
     001B                           1-  322     _00117_DS_:
                                    1-  323     	.line	73, "main.c"; 	if(!IntFlag)
     001B 01rr                      1-  324     	MOVR	_IntFlag,W
     001C 0D03                      1-  325     	BTRSC	STATUS,2
     001D 3rrr                      1-  326     	LGOTO	_00128_DS_
                                    1-  327     	.line	75, "main.c"; 	IntFlag = 0;   
     001E 02rr                      1-  328     	CLRR	_IntFlag
                                    1-  329     	.line	76, "main.c"; 	keyCtr();
     001F 2rrr                      1-  330     	LCALL	_keyCtr
                                    1-  331     	.line	77, "main.c"; 	if(powerFlag)
     0020 01rr                      1-  332     	MOVR	_powerFlag,W
     0021 0D03                      1-  333     	BTRSC	STATUS,2
     0022 3rrr                      1-  334     	LGOTO	_00124_DS_
                                    1-  335     	.line	78, "main.c"; 	workCtr();
     0023 2rrr                      1-  336     	LCALL	_workCtr
     0024 3rrr                      1-  337     	LGOTO	_00128_DS_
     0025                           1-  338     _00124_DS_:
                                    1-  339     	.line	81, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0025 01rr                      1-  340     	MOVR	_keyCount,W
     0026 0903                      1-  341     	BTRSS	STATUS,2
     0027 3rrr                      1-  342     	LGOTO	_00128_DS_
     0028 05rr                      1-  343     	INCR	_sleepTime,F
                                    1-  344     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  345     ;;unsigned compare: left >= lit (0xC9=201), size=1
     0029 21C9                      1-  346     	MOVIA	0xc9
     002A 04rr                      1-  347     	SUBAR	_sleepTime,W
     002B 0803                      1-  348     	BTRSS	STATUS,0
     002C 3rrr                      1-  349     	LGOTO	_00128_DS_
                                    1-  350     	.line	82, "main.c"; 	gotoSleep();
     002D 2rrr                      1-  351     	LCALL	_gotoSleep
     002E 3rrr                      1-  352     	LGOTO	_00128_DS_
                                    1-  353     	.line	88, "main.c"; 	}
                                    1-  354     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1-  355     ; exit point of _main
                                    1-  357     ;***
                                    1-  358     ;  pBlock Stats: dbName = C
                                    1-  359     ;***
                                    1-  360     ;has an exit
                                    1-  361     ;; Starting pCode block
                                    1-  362     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  364     _gotoSleep:
                                    1-  365     ; 2 exit points
                                    1-  366     	.line	197, "main.c"; 	sleepTime = 0;
     0000 02rr                      1-  367     	CLRR	_sleepTime
                                    1-  368     	.line	198, "main.c"; 	PORTB = 0x00;
     0001 02rr                      1-  369     	CLRR	_PORTB
                                    1-  370     	.line	199, "main.c"; 	BWUCON = 0x20;
     0002 2120                      1-  371     	MOVIA	0x20
     0003 00rr                      1-  372     	MOVAR	_BWUCON
                                    1-  373     	.line	200, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0004 2103                      1-  374     	MOVIA	0x03
     0005 00rr                      1-  375     	MOVAR	_INTE
                                    1-  376     	.line	201, "main.c"; 	PCON =  C_LVR_En;	
     0006 2108                      1-  377     	MOVIA	0x08
     0007 00rr                      1-  378     	MOVAR	_PCON
                                    1-  379     	.line	202, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0008 02rr                      1-  380     	CLRR	_INTF
                                    1-  381     	.line	203, "main.c"; 	CLRWDT();
     0009 0002                      1-  382     	clrwdt
                                    1-  383     	.line	204, "main.c"; 	ENI();
     000A 0004                      1-  384     	ENI
                                    1-  385     	.line	205, "main.c"; 	SLEEP();
     000B 0001                      1-  386     	sleep
                                    1-  387     	.line	206, "main.c"; 	BWUCON = 0x00;
     000C 02rr                      1-  388     	CLRR	_BWUCON
                                    1-  389     	.line	207, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000D 2101                      1-  390     	MOVIA	0x01
     000E 00rr                      1-  391     	MOVAR	_INTE
                                    1-  392     	.line	208, "main.c"; 	INTF = 0;
     000F 02rr                      1-  393     	CLRR	_INTF
                                    1-  394     	.line	210, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0010 2188                      1-  395     	MOVIA	0x88
     0011 00rr                      1-  396     	MOVAR	_PCON
                                    1-  397     	.line	212, "main.c"; 	}
                                    1-  398     	RETURN	
     0012 0010                      3-   26 m1      ret
                                    1-  399     ; exit point of _gotoSleep
                                    1-  401     ;***
                                    1-  402     ;  pBlock Stats: dbName = C
                                    1-  403     ;***
                                    1-  404     ;1 compiler assigned register :
                                    1-  405     ;   r0x100D
                                    1-  406     ;; Starting pCode block
                                    1-  407     .segment "code"; module=main, function=_setLedduty
     0000                           1-  409     _setLedduty:
                                    1-  410     ; 0 exit points
                                    1-  411     	.line	170, "main.c"; 	if(ledCount >= duty0)
     0000 01rr                      1-  412     	MOVR	_duty0,W
     0001 04rr                      1-  413     	SUBAR	_ledCount,W
     0002 0803                      1-  414     	BTRSS	STATUS,0
     0003 3rrr                      1-  415     	LGOTO	_00231_DS_
                                    1-  416     	.line	172, "main.c"; 	IOSTB |= 0x01;
     0004 001r                      1-  417     	IOSTR	_IOSTB
     0005 00rr                      1-  418     	MOVAR	r0x100D
     0006 18rr                      1-  419     	BSR	r0x100D,0
     0007 01rr                      1-  420     	MOVR	r0x100D,W
     0008 000r                      1-  421     	IOST	_IOSTB
                                    1-  422     	.line	173, "main.c"; 	PORTB |= 0x01;
     0009 18rr                      1-  423     	BSR	_PORTB,0
     000A 3rrr                      1-  424     	LGOTO	_00232_DS_
     000B                           1-  425     _00231_DS_:
                                    1-  426     	.line	177, "main.c"; 	IOSTB &= 0xFE;
     000B 001r                      1-  427     	IOSTR	_IOSTB
     000C 00rr                      1-  428     	MOVAR	r0x100D
     000D 1Crr                      1-  429     	BCR	r0x100D,0
     000E 01rr                      1-  430     	MOVR	r0x100D,W
     000F 000r                      1-  431     	IOST	_IOSTB
                                    1-  432     	.line	178, "main.c"; 	PORTB &= 0xFE;
     0010 1Crr                      1-  433     	BCR	_PORTB,0
     0011                           1-  434     _00232_DS_:
                                    1-  435     	.line	180, "main.c"; 	if(ledCount >= duty1)
     0011 01rr                      1-  436     	MOVR	_duty1,W
     0012 04rr                      1-  437     	SUBAR	_ledCount,W
     0013 0803                      1-  438     	BTRSS	STATUS,0
     0014 3rrr                      1-  439     	LGOTO	_00234_DS_
                                    1-  440     	.line	182, "main.c"; 	IOSTB |= 0x02;
     0015 001r                      1-  441     	IOSTR	_IOSTB
     0016 00rr                      1-  442     	MOVAR	r0x100D
     0017 18rr                      1-  443     	BSR	r0x100D,1
     0018 01rr                      1-  444     	MOVR	r0x100D,W
     0019 000r                      1-  445     	IOST	_IOSTB
                                    1-  446     	.line	183, "main.c"; 	PORTB |= 0x02;
     001A 18rr                      1-  447     	BSR	_PORTB,1
     001B 3rrr                      1-  448     	LGOTO	_00235_DS_
     001C                           1-  449     _00234_DS_:
                                    1-  450     	.line	187, "main.c"; 	IOSTB &= 0xFD;
     001C 001r                      1-  451     	IOSTR	_IOSTB
     001D 00rr                      1-  452     	MOVAR	r0x100D
     001E 1Crr                      1-  453     	BCR	r0x100D,1
     001F 01rr                      1-  454     	MOVR	r0x100D,W
     0020 000r                      1-  455     	IOST	_IOSTB
                                    1-  456     	.line	188, "main.c"; 	PORTB &= 0xFD;
     0021 1Crr                      1-  457     	BCR	_PORTB,1
     0022                           1-  458     _00235_DS_:
                                    1-  459     	.line	190, "main.c"; 	if(++ledCount >= MAXDUTY)
     0022 05rr                      1-  460     	INCR	_ledCount,F
                                    1-  461     ;;unsigned compare: left < lit (0x96=150), size=1
     0023 2196                      1-  462     	MOVIA	0x96
     0024 04rr                      1-  463     	SUBAR	_ledCount,W
     0025 0C03                      1-  464     	BTRSC	STATUS,0
                                    1-  465     	.line	191, "main.c"; 	ledCount = 0;
     0026 02rr                      1-  466     	CLRR	_ledCount
                                    1-  467     	.line	192, "main.c"; 	}
                                    1-  468     	RETURN	
     0027 0010                      3-   26 m1      ret
                                    1-  470     ;***
                                    1-  471     ;  pBlock Stats: dbName = C
                                    1-  472     ;***
                                    1-  473     ;has an exit
                                    1-  474     ;functions called:
                                    1-  475     ;   _keyRead
                                    1-  476     ;   _keyRead
                                    1-  477     ;1 compiler assigned register :
                                    1-  478     ;   r0x100F
                                    1-  479     ;; Starting pCode block
                                    1-  480     .segment "code"; module=main, function=_keyCtr
     0000                           1-  482     _keyCtr:
                                    1-  483     ; 2 exit points
                                    1-  484     	.line	150, "main.c"; 	if(keyRead(0x20 & ~PORTB))
     0000 07rr                      1-  485     	COMR	_PORTB,W
     0001 00rr                      1-  486     	MOVAR	r0x100F
     0002 2120                      1-  487     	MOVIA	0x20
     0003 10rr                      1-  488     	ANDAR	r0x100F,F
     0004 01rr                      1-  489     	MOVR	r0x100F,W
     0005 2rrr                      1-  490     	LCALL	_keyRead
     0006 00rr                      1-  491     	MOVAR	r0x100F
     0007 01rr                      1-  492     	MOVR	r0x100F,W
     0008 0D03                      1-  493     	BTRSC	STATUS,2
     0009 3rrr                      1-  494     	LGOTO	_00225_DS_
                                    1-  495     	.line	152, "main.c"; 	workTime = 0;
     000A 02rr                      1-  496     	CLRR	_workTime
     000B 02rr                      1-  497     	CLRR	(_workTime + 1)
                                    1-  498     	.line	153, "main.c"; 	duty0 = duty1 = 0;
     000C 02rr                      1-  499     	CLRR	_duty1
     000D 02rr                      1-  500     	CLRR	_duty0
                                    1-  501     	.line	154, "main.c"; 	ledCount = 0;
     000E 02rr                      1-  502     	CLRR	_ledCount
                                    1-  503     	.line	155, "main.c"; 	if(powerFlag)
     000F 01rr                      1-  504     	MOVR	_powerFlag,W
     0010 0D03                      1-  505     	BTRSC	STATUS,2
     0011 3rrr                      1-  506     	LGOTO	_00221_DS_
                                    1-  507     	.line	157, "main.c"; 	powerFlag = 0;
     0012 02rr                      1-  508     	CLRR	_powerFlag
     0013 3rrr                      1-  509     	LGOTO	_00225_DS_
     0014                           1-  510     _00221_DS_:
                                    1-  511     	.line	161, "main.c"; 	powerFlag = 1;
     0014 2101                      1-  512     	MOVIA	0x01
     0015 00rr                      1-  513     	MOVAR	_powerFlag
     0016                           1-  514     _00225_DS_:
                                    1-  515     	.line	164, "main.c"; 	}
                                    1-  516     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  517     ; exit point of _keyCtr
                                    1-  519     ;***
                                    1-  520     ;  pBlock Stats: dbName = C
                                    1-  521     ;***
                                    1-  522     ;has an exit
                                    1-  523     ;1 compiler assigned register :
                                    1-  524     ;   r0x100E
                                    1-  525     ;; Starting pCode block
                                    1-  526     .segment "code"; module=main, function=_keyRead
                                    1-  528     ;local variable name mapping:
     0000                           1-  530     _keyRead:
                                    1-  531     ; 2 exit points
                                    1-  532     	.line	123, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  533     	MOVAR	r0x100E
                                    1-  534     	.line	125, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  535     	MOVR	r0x100E,W
     0002 0D03                      1-  536     	BTRSC	STATUS,2
     0003 3rrr                      1-  537     	LGOTO	_00213_DS_
                                    1-  538     	.line	127, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  539     	CLRR	_sleepTime
                                    1-  540     	.line	128, "main.c"; 	keyCount++;
     0005 05rr                      1-  541     	INCR	_keyCount,F
                                    1-  542     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  543     	.line	129, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  544     	MOVIA	0xc8
     0007 04rr                      1-  545     	SUBAR	_keyCount,W
     0008 0803                      1-  546     	BTRSS	STATUS,0
     0009 3rrr                      1-  547     	LGOTO	_00214_DS_
                                    1-  548     	.line	131, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  549     	MOVIA	0xc8
     000B 00rr                      1-  550     	MOVAR	_keyCount
     000C 3rrr                      1-  551     	LGOTO	_00214_DS_
                                    1-  552     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  553     _00213_DS_:
                                    1-  554     	.line	136, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  555     	MOVIA	0x08
     000E 04rr                      1-  556     	SUBAR	_keyCount,W
     000F 0803                      1-  557     	BTRSS	STATUS,0
     0010 3rrr                      1-  558     	LGOTO	_00211_DS_
                                    1-  559     	.line	138, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  560     	CLRR	_keyCount
                                    1-  561     	.line	139, "main.c"; 	return	1;
     0012 2101                      1-  562     	MOVIA	0x01
     0013 3rrr                      1-  563     	LGOTO	_00215_DS_
     0014                           1-  564     _00211_DS_:
                                    1-  565     	.line	141, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  566     	CLRR	_keyCount
     0015                           1-  567     _00214_DS_:
                                    1-  568     	.line	143, "main.c"; 	return 0;
     0015 2100                      1-  569     	MOVIA	0x00
     0016                           1-  570     _00215_DS_:
                                    1-  571     	.line	144, "main.c"; 	}
                                    1-  572     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  573     ; exit point of _keyRead
                                    1-  575     ;***
                                    1-  576     ;  pBlock Stats: dbName = C
                                    1-  577     ;***
                                    1-  578     ;; Starting pCode block
                                    1-  579     .segment "code"; module=main, function=_workCtr
     0000                           1-  581     _workCtr:
                                    1-  582     ; 0 exit points
                                    1-  583     	.line	92, "main.c"; 	if(++workTime >= 800)
     0000 05rr                      1-  584     	INCR	_workTime,F
     0001 0D03                      1-  585     	BTRSC	STATUS,2
     0002 05rr                      1-  586     	INCR	(_workTime + 1),F
                                    1-  587     ;;unsigned compare: left < lit (0x320=800), size=2
     0003 2103                      1-  588     	MOVIA	0x03
     0004 04rr                      1-  589     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  590     	BTRSS	STATUS,2
     0006 3rrr                      1-  591     	LGOTO	_00195_DS_
     0007 2120                      1-  592     	MOVIA	0x20
     0008 04rr                      1-  593     	SUBAR	_workTime,W
     0009                           1-  594     _00195_DS_:
     0009 0803                      1-  595     	BTRSS	STATUS,0
     000A 3rrr                      1-  596     	LGOTO	_00134_DS_
                                    1-  597     	.line	93, "main.c"; 	workTime = 0;
     000B 02rr                      1-  598     	CLRR	_workTime
     000C 02rr                      1-  599     	CLRR	(_workTime + 1)
                                    1-  600     ;;unsigned compare: left < lit (0x96=150), size=2
     000D                           1-  601     _00134_DS_:
                                    1-  602     	.line	94, "main.c"; 	if(workTime < 150)
     000D 2100                      1-  603     	MOVIA	0x00
     000E 04rr                      1-  604     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  605     	BTRSS	STATUS,2
     0010 3rrr                      1-  606     	LGOTO	_00196_DS_
     0011 2196                      1-  607     	MOVIA	0x96
     0012 04rr                      1-  608     	SUBAR	_workTime,W
     0013                           1-  609     _00196_DS_:
     0013 0C03                      1-  610     	BTRSC	STATUS,0
     0014 3rrr                      1-  611     	LGOTO	_00158_DS_
                                    1-  612     	.line	96, "main.c"; 	duty1 = 0;
     0015 02rr                      1-  613     	CLRR	_duty1
                                    1-  614     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  615     	.line	97, "main.c"; 	if(duty0 < MAXDUTY)
     0016 2196                      1-  616     	MOVIA	0x96
     0017 04rr                      1-  617     	SUBAR	_duty0,W
     0018 0C03                      1-  618     	BTRSC	STATUS,0
     0019 3rrr                      1-  619     	LGOTO	_00160_DS_
                                    1-  620     	.line	98, "main.c"; 	++duty0;
     001A 05rr                      1-  621     	INCR	_duty0,F
     001B 3rrr                      1-  622     	LGOTO	_00160_DS_
                                    1-  623     ;;unsigned compare: left < lit (0xFA=250), size=2
     001C                           1-  624     _00158_DS_:
                                    1-  625     	.line	100, "main.c"; 	else if(workTime < 250)
     001C 2100                      1-  626     	MOVIA	0x00
     001D 04rr                      1-  627     	SUBAR	(_workTime + 1),W
     001E 0903                      1-  628     	BTRSS	STATUS,2
     001F 3rrr                      1-  629     	LGOTO	_00198_DS_
     0020 21FA                      1-  630     	MOVIA	0xfa
     0021 04rr                      1-  631     	SUBAR	_workTime,W
     0022                           1-  632     _00198_DS_:
     0022 0C03                      1-  633     	BTRSC	STATUS,0
     0023 3rrr                      1-  634     	LGOTO	_00155_DS_
                                    1-  635     	.line	101, "main.c"; 	duty0 = MAXDUTY;
     0024 2196                      1-  636     	MOVIA	0x96
     0025 00rr                      1-  637     	MOVAR	_duty0
     0026 3rrr                      1-  638     	LGOTO	_00160_DS_
                                    1-  639     ;;unsigned compare: left < lit (0x190=400), size=2
     0027                           1-  640     _00155_DS_:
                                    1-  641     	.line	102, "main.c"; 	else if(workTime < 400)
     0027 2101                      1-  642     	MOVIA	0x01
     0028 04rr                      1-  643     	SUBAR	(_workTime + 1),W
     0029 0903                      1-  644     	BTRSS	STATUS,2
     002A 3rrr                      1-  645     	LGOTO	_00199_DS_
     002B 2190                      1-  646     	MOVIA	0x90
     002C 04rr                      1-  647     	SUBAR	_workTime,W
     002D                           1-  648     _00199_DS_:
     002D 0C03                      1-  649     	BTRSC	STATUS,0
     002E 3rrr                      1-  650     	LGOTO	_00152_DS_
                                    1-  651     	.line	104, "main.c"; 	if(duty0 > 0)
     002F 01rr                      1-  652     	MOVR	_duty0,W
     0030 0D03                      1-  653     	BTRSC	STATUS,2
     0031 3rrr                      1-  654     	LGOTO	_00160_DS_
                                    1-  655     	.line	105, "main.c"; 	--duty0;
     0032 06rr                      1-  656     	DECR	_duty0,F
     0033 3rrr                      1-  657     	LGOTO	_00160_DS_
                                    1-  658     ;;unsigned compare: left < lit (0x226=550), size=2
     0034                           1-  659     _00152_DS_:
                                    1-  660     	.line	107, "main.c"; 	else if(workTime < 550)
     0034 2102                      1-  661     	MOVIA	0x02
     0035 04rr                      1-  662     	SUBAR	(_workTime + 1),W
     0036 0903                      1-  663     	BTRSS	STATUS,2
     0037 3rrr                      1-  664     	LGOTO	_00200_DS_
     0038 2126                      1-  665     	MOVIA	0x26
     0039 04rr                      1-  666     	SUBAR	_workTime,W
     003A                           1-  667     _00200_DS_:
     003A 0C03                      1-  668     	BTRSC	STATUS,0
     003B 3rrr                      1-  669     	LGOTO	_00149_DS_
                                    1-  670     	.line	109, "main.c"; 	duty0 = 0;
     003C 02rr                      1-  671     	CLRR	_duty0
                                    1-  672     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  673     	.line	110, "main.c"; 	if(duty1 < MAXDUTY)
     003D 2196                      1-  674     	MOVIA	0x96
     003E 04rr                      1-  675     	SUBAR	_duty1,W
     003F 0C03                      1-  676     	BTRSC	STATUS,0
     0040 3rrr                      1-  677     	LGOTO	_00160_DS_
                                    1-  678     	.line	111, "main.c"; 	++duty1;
     0041 05rr                      1-  679     	INCR	_duty1,F
     0042 3rrr                      1-  680     	LGOTO	_00160_DS_
                                    1-  681     ;;unsigned compare: left < lit (0x28A=650), size=2
     0043                           1-  682     _00149_DS_:
                                    1-  683     	.line	113, "main.c"; 	else if(workTime < 650)
     0043 2102                      1-  684     	MOVIA	0x02
     0044 04rr                      1-  685     	SUBAR	(_workTime + 1),W
     0045 0903                      1-  686     	BTRSS	STATUS,2
     0046 3rrr                      1-  687     	LGOTO	_00202_DS_
     0047 218A                      1-  688     	MOVIA	0x8a
     0048 04rr                      1-  689     	SUBAR	_workTime,W
     0049                           1-  690     _00202_DS_:
     0049 0C03                      1-  691     	BTRSC	STATUS,0
     004A 3rrr                      1-  692     	LGOTO	_00146_DS_
                                    1-  693     	.line	114, "main.c"; 	duty1 = MAXDUTY;
     004B 2196                      1-  694     	MOVIA	0x96
     004C 00rr                      1-  695     	MOVAR	_duty1
     004D 3rrr                      1-  696     	LGOTO	_00160_DS_
                                    1-  697     ;;unsigned compare: left < lit (0x320=800), size=2
     004E                           1-  698     _00146_DS_:
                                    1-  699     	.line	115, "main.c"; 	else if(workTime < 800)
     004E 2103                      1-  700     	MOVIA	0x03
     004F 04rr                      1-  701     	SUBAR	(_workTime + 1),W
     0050 0903                      1-  702     	BTRSS	STATUS,2
     0051 3rrr                      1-  703     	LGOTO	_00203_DS_
     0052 2120                      1-  704     	MOVIA	0x20
     0053 04rr                      1-  705     	SUBAR	_workTime,W
     0054                           1-  706     _00203_DS_:
     0054 0C03                      1-  707     	BTRSC	STATUS,0
     0055 3rrr                      1-  708     	LGOTO	_00160_DS_
                                    1-  709     	.line	117, "main.c"; 	if(duty1 > 0)
     0056 01rr                      1-  710     	MOVR	_duty1,W
     0057 0903                      1-  711     	BTRSS	STATUS,2
                                    1-  712     	.line	118, "main.c"; 	--duty1;
     0058 06rr                      1-  713     	DECR	_duty1,F
     0059                           1-  714     _00160_DS_:
                                    1-  715     	.line	120, "main.c"; 	}
                                    1-  716     	RETURN	
     0059 0010                      3-   26 m1      ret
                                    1-  719     ;	code size estimation:
                                    1-  720     ;	  281+    0 =   281 instructions (  562 byte)
                                    1-  722     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00116_DS_              Label    0000001A
_00117_DS_              Label    0000001B
_00124_DS_              Label    00000025
_00128_DS_              Label    00000014
_00134_DS_              Label    0000000D
_00146_DS_              Label    0000004E
_00149_DS_              Label    00000043
_00152_DS_              Label    00000034
_00155_DS_              Label    00000027
_00158_DS_              Label    0000001C
_00160_DS_              Label    00000059
_00195_DS_              Label    00000009
_00196_DS_              Label    00000013
_00198_DS_              Label    00000022
_00199_DS_              Label    0000002D
_00200_DS_              Label    0000003A
_00202_DS_              Label    00000049
_00203_DS_              Label    00000054
_00211_DS_              Label    00000014
_00213_DS_              Label    0000000D
_00214_DS_              Label    00000015
_00215_DS_              Label    00000016
_00221_DS_              Label    00000014
_00225_DS_              Label    00000016
_00231_DS_              Label    0000000B
_00232_DS_              Label    00000011
_00234_DS_              Label    0000001C
_00235_DS_              Label    00000022
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_duty0                  Label    00000000
_duty1                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_ledCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setLedduty             Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workCtr                Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
r0x100F                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
