
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051D,c=on
                                    1-    9     	#include "ny8a051d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TMR1
                                    1-   35     	extern	_T1CR1
                                    1-   36     	extern	_T1CR2
                                    1-   37     	extern	_PWM1DUTY
                                    1-   38     	extern	_PS1CV
                                    1-   39     	extern	_BZ1CR
                                    1-   40     	extern	_IRCR
                                    1-   41     	extern	_TBHP
                                    1-   42     	extern	_TBHD
                                    1-   43     	extern	_OSCCR
                                    1-   44     	extern	_IOSTB
                                    1-   45     	extern	_PS0CV
                                    1-   46     	extern	_BODCON
                                    1-   47     	extern	_PCON1
                                    1-   48     	extern	_T0MD
                                    1-   49     	extern	___sdcc_saved_fsr
                                    1-   50     	extern	___sdcc_saved_stk00
                                    1-   51     	extern	___sdcc_saved_stk01
                                    1-   52     	extern	__nyc_ny8_startup
                                    1-   53     ;--------------------------------------------------------
                                    1-   54     ; global declarations
                                    1-   55     ;--------------------------------------------------------
                                    1-   56     	extern	_gotoSleep
                                    1-   57     	extern	_setLedduty
                                    1-   58     	extern	_keyCtr
                                    1-   59     	extern	_keyRead
                                    1-   60     	extern	_workCtr
                                    1-   61     	extern	_isr
                                    1-   62     	extern	_main
                                    1-   63     	extern	_workTime
                                    1-   64     	extern	_IntFlag
                                    1-   65     	extern	_intCount
                                    1-   66     	extern	_duty0
                                    1-   67     	extern	_duty1
                                    1-   68     	extern	_powerFlag
                                    1-   69     	extern	_keyCount
                                    1-   70     	extern	_ledCount
                                    1-   71     	extern	_sleepTime
                                    1-   73     	extern PSAVE
                                    1-   74     	extern SSAVE
                                    1-   75     	extern WSAVE
                                    1-   76     	extern STK02
                                    1-   77     	extern STK01
                                    1-   78     	extern STK00
                                    1-   80     .segment "uninit", 0x20000010
 20000010                           1-   81     PSAVE:
                                    1-   82     	.res 1
 20000011                           1-   83     SSAVE:
                                    1-   84     	.res 1
 20000012                           1-   85     WSAVE:
                                    1-   86     	.res 1
 20000013                           1-   87     STK02:
                                    1-   88     	.res 1
 20000014                           1-   89     STK01:
                                    1-   90     	.res 1
 20000015                           1-   91     STK00:
                                    1-   92     	.res 1
                                    1-   94     ;--------------------------------------------------------
                                    1-   95     ; global definitions
                                    1-   96     ;--------------------------------------------------------
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ; absolute symbol definitions
                                    1-   99     ;--------------------------------------------------------
                                    1-  100     ;--------------------------------------------------------
                                    1-  101     ; compiler-defined variables
                                    1-  102     ;--------------------------------------------------------
                                    1-  103     .segment "uninit"
     0000                           1-  104     r0x100E:
                                    1-  105     	.res	1
                                    1-  106     .segment "uninit"
     0000                           1-  107     r0x100F:
                                    1-  108     	.res	1
                                    1-  109     .segment "uninit"
     0000                           1-  110     r0x100D:
                                    1-  111     	.res	1
                                    1-  112     ;--------------------------------------------------------
                                    1-  113     ; initialized data
                                    1-  114     ;--------------------------------------------------------
                                    1-  116     .segment "idata"
     0000                           1-  117     _workTime:
     0000 0000 0000                 1-  118     	dw	0x00, 0x00
                                    1-  122     .segment "idata"
     0000                           1-  123     _IntFlag:
     0000 0000                      1-  124     	dw	0x00
                                    1-  128     .segment "idata"
     0000                           1-  129     _intCount:
     0000 0000                      1-  130     	dw	0x00
                                    1-  134     .segment "idata"
     0000                           1-  135     _duty0:
     0000 0000                      1-  136     	dw	0x00
                                    1-  140     .segment "idata"
     0000                           1-  141     _duty1:
     0000 0000                      1-  142     	dw	0x00
                                    1-  146     .segment "idata"
     0000                           1-  147     _powerFlag:
     0000 0000                      1-  148     	dw	0x00
                                    1-  152     .segment "idata"
     0000                           1-  153     _keyCount:
     0000 0000                      1-  154     	dw	0x00
                                    1-  158     .segment "idata"
     0000                           1-  159     _ledCount:
     0000 0000                      1-  160     	dw	0x00
                                    1-  164     .segment "idata"
     0000                           1-  165     _sleepTime:
     0000 0000                      1-  166     	dw	0x00
                                    1-  169     ;--------------------------------------------------------
                                    1-  170     ; overlayable items in internal ram 
                                    1-  171     ;--------------------------------------------------------
                                    1-  172     ;	udata_ovr
                                    1-  173     ;--------------------------------------------------------
                                    1-  174     ; reset vector 
                                    1-  175     ;--------------------------------------------------------
                                    1-  176     ORG	0x0000
     0000 3rrr                      1-  177     	LGOTO	__nyc_ny8_startup
                                    1-  178     ;--------------------------------------------------------
                                    1-  179     ; interrupt and initialization code
                                    1-  180     ;--------------------------------------------------------
                                    1-  181     ORG 0x0008
     0008 3rrr                      1-  182     	lgoto	__sdcc_interrupt
                                    1-  184     .segment "code"
     0000                           1-  185     __sdcc_interrupt:
                                    1-  186     ;***
                                    1-  187     ;  pBlock Stats: dbName = I
                                    1-  188     ;***
                                    1-  189     ;2 compiler assigned registers:
                                    1-  190     ;   STK00
                                    1-  191     ;   STK01
                                    1-  192     ;; Starting pCode block
     0000                           1-  193     _isr:
                                    1-  194     ; 0 exit points
                                    1-  195     	.line	27, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  196     	MOVAR	WSAVE
     0001 1503                      1-  197     	SWAPR	STATUS,W
     0002 0283                      1-  198     	CLRR	STATUS
     0003 00rr                      1-  199     	MOVAR	SSAVE
     0004 010A                      1-  200     	MOVR	PCHBUF,W
     0005 028A                      1-  201     	CLRR	PCHBUF
     0006 00rr                      1-  202     	MOVAR	PSAVE
     0007 0104                      1-  203     	MOVR	FSR,W
     0008 00rr                      1-  204     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  205     	MOVR	STK00,W
     000A 00rr                      1-  206     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  207     	MOVR	STK01,W
     000C 00rr                      1-  208     	MOVAR	___sdcc_saved_stk01
                                    1-  209     	.line	29, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  210     	BTRSS	_INTFbits,0
     000E 3rrr                      1-  211     	LGOTO	_00108_DS_
                                    1-  212     	.line	31, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  213     	MOVIA	0x38
     0010 03rr                      1-  214     	ADDAR	_TMR0,F
                                    1-  215     	.line	32, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  216     	INCR	_intCount,F
                                    1-  217     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  218     	MOVIA	0x64
     0013 04rr                      1-  219     	SUBAR	_intCount,W
     0014 0803                      1-  220     	BTRSS	STATUS,0
     0015 3rrr                      1-  221     	LGOTO	_00108_DS_
                                    1-  222     	.line	34, "main.c"; 	intCount = 0;
     0016 02rr                      1-  223     	CLRR	_intCount
                                    1-  224     	.line	35, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  225     	MOVIA	0x01
     0018 00rr                      1-  226     	MOVAR	_IntFlag
     0019                           1-  227     _00108_DS_:
                                    1-  228     	.line	38, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  229     	BTRSS	_INTFbits,1
     001A 3rrr                      1-  230     	LGOTO	_00110_DS_
                                    1-  231     	.line	40, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  232     	MOVIA	0xfd
     001C 00rr                      1-  233     	MOVAR	_INTF
     001D                           1-  234     _00110_DS_:
                                    1-  235     	.line	43, "main.c"; 	INTF = 0;
     001D 02rr                      1-  236     	CLRR	_INTF
                                    1-  237     	.line	45, "main.c"; 	}
     001E 01rr                      1-  238     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  239     	MOVAR	STK01
     0020 01rr                      1-  240     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  241     	MOVAR	STK00
     0022 01rr                      1-  242     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  243     	MOVAR	FSR
     0024 01rr                      1-  244     	MOVR	PSAVE,W
     0025 008A                      1-  245     	MOVAR	PCHBUF
     0026 0283                      1-  246     	CLRR	STATUS
     0027 15rr                      1-  247     	SWAPR	SSAVE,W
     0028 0083                      1-  248     	MOVAR	STATUS
     0029 15rr                      1-  249     	SWAPR	WSAVE,F
     002A 15rr                      1-  250     	SWAPR	WSAVE,W
     002B                           1-  251     END_OF_INTERRUPT:
     002B 0011                      1-  252     	RETIE	
                                    1-  254     ;--------------------------------------------------------
                                    1-  255     ; code
                                    1-  256     ;--------------------------------------------------------
                                    1-  257     ;***
                                    1-  258     ;  pBlock Stats: dbName = M
                                    1-  259     ;***
                                    1-  260     ;has an exit
                                    1-  261     ;functions called:
                                    1-  262     ;   _gotoSleep
                                    1-  263     ;   _setLedduty
                                    1-  264     ;   _keyCtr
                                    1-  265     ;   _workCtr
                                    1-  266     ;   _gotoSleep
                                    1-  267     ;   _gotoSleep
                                    1-  268     ;   _setLedduty
                                    1-  269     ;   _keyCtr
                                    1-  270     ;   _workCtr
                                    1-  271     ;   _gotoSleep
                                    1-  272     ;; Starting pCode block
                                    1-  273     .segment "code"; module=main, function=_main
     0000                           1-  275     _main:
                                    1-  276     ; 2 exit points
                                    1-  277     	.line	50, "main.c"; 	DISI();
     0000 0013                      1-  278     	DISI
                                    1-  279     	.line	51, "main.c"; 	BPHCON = (unsigned char)~C_PB5_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21DF                      1-  280     	MOVIA	0xdf
     0002 00rr                      1-  281     	MOVAR	_BPHCON
                                    1-  282     	.line	52, "main.c"; 	IOSTB =  C_PB5_Input | C_PB0_Input | C_PB1_Input;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 2123                      1-  283     	MOVIA	0x23
     0004 000r                      1-  284     	IOST	_IOSTB
                                    1-  285     	.line	53, "main.c"; 	PORTB = 0x00;                       // PB2 & PB0 output high
     0005 02rr                      1-  286     	CLRR	_PORTB
                                    1-  287     	.line	54, "main.c"; 	duty0 = duty1 = 0;
     0006 02rr                      1-  288     	CLRR	_duty1
     0007 02rr                      1-  289     	CLRR	_duty0
                                    1-  290     	.line	55, "main.c"; 	INTE =  C_INT_TMR0;
     0008 2101                      1-  291     	MOVIA	0x01
     0009 00rr                      1-  292     	MOVAR	_INTE
                                    1-  293     	.line	56, "main.c"; 	TMR0 = 55;
     000A 2137                      1-  294     	MOVIA	0x37
     000B 00rr                      1-  295     	MOVAR	_TMR0
                                    1-  296     	.line	57, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000C 0200                      1-  297     	CLRA	
     000D 0003                      1-  298     	T0MD	
                                    1-  299     	.line	60, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     000E 2188                      1-  300     	MOVIA	0x88
     000F 00rr                      1-  301     	MOVAR	_PCON
                                    1-  302     	.line	63, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0010 2101                      1-  303     	MOVIA	0x01
     0011 000r                      1-  304     	IOST	_PCON1
                                    1-  305     	.line	64, "main.c"; 	ENI();
     0012 0004                      1-  306     	ENI
                                    1-  307     	.line	65, "main.c"; 	gotoSleep();
     0013 2rrr                      1-  308     	LCALL	_gotoSleep
     0014                           1-  309     _00128_DS_:
                                    1-  310     	.line	68, "main.c"; 	CLRWDT();
     0014 0002                      1-  311     	clrwdt
                                    1-  312     	.line	69, "main.c"; 	if(powerFlag)
     0015 01rr                      1-  313     	MOVR	_powerFlag,W
     0016 0D03                      1-  314     	BTRSC	STATUS,2
     0017 3rrr                      1-  315     	LGOTO	_00116_DS_
                                    1-  316     	.line	70, "main.c"; 	setLedduty();
     0018 2rrr                      1-  317     	LCALL	_setLedduty
     0019 3rrr                      1-  318     	LGOTO	_00117_DS_
     001A                           1-  319     _00116_DS_:
                                    1-  320     	.line	73, "main.c"; 	IOSTB =  C_PB5_Input | C_PB0_Input | C_PB1_Input;
     001A 2123                      1-  321     	MOVIA	0x23
     001B 000r                      1-  322     	IOST	_IOSTB
                                    1-  323     	.line	74, "main.c"; 	PORTB = 0x00;
     001C 02rr                      1-  324     	CLRR	_PORTB
     001D                           1-  325     _00117_DS_:
                                    1-  326     	.line	76, "main.c"; 	if(!IntFlag)
     001D 01rr                      1-  327     	MOVR	_IntFlag,W
     001E 0D03                      1-  328     	BTRSC	STATUS,2
     001F 3rrr                      1-  329     	LGOTO	_00128_DS_
                                    1-  330     	.line	78, "main.c"; 	IntFlag = 0;   
     0020 02rr                      1-  331     	CLRR	_IntFlag
                                    1-  332     	.line	79, "main.c"; 	keyCtr();
     0021 2rrr                      1-  333     	LCALL	_keyCtr
                                    1-  334     	.line	80, "main.c"; 	if(powerFlag)
     0022 01rr                      1-  335     	MOVR	_powerFlag,W
     0023 0D03                      1-  336     	BTRSC	STATUS,2
     0024 3rrr                      1-  337     	LGOTO	_00124_DS_
                                    1-  338     	.line	81, "main.c"; 	workCtr();
     0025 2rrr                      1-  339     	LCALL	_workCtr
     0026 3rrr                      1-  340     	LGOTO	_00128_DS_
     0027                           1-  341     _00124_DS_:
                                    1-  342     	.line	84, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0027 01rr                      1-  343     	MOVR	_keyCount,W
     0028 0903                      1-  344     	BTRSS	STATUS,2
     0029 3rrr                      1-  345     	LGOTO	_00128_DS_
     002A 05rr                      1-  346     	INCR	_sleepTime,F
                                    1-  347     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  348     ;;unsigned compare: left >= lit (0xC9=201), size=1
     002B 21C9                      1-  349     	MOVIA	0xc9
     002C 04rr                      1-  350     	SUBAR	_sleepTime,W
     002D 0803                      1-  351     	BTRSS	STATUS,0
     002E 3rrr                      1-  352     	LGOTO	_00128_DS_
                                    1-  353     	.line	85, "main.c"; 	gotoSleep();
     002F 2rrr                      1-  354     	LCALL	_gotoSleep
     0030 3rrr                      1-  355     	LGOTO	_00128_DS_
                                    1-  356     	.line	91, "main.c"; 	}
                                    1-  357     	RETURN	
     0031 0010                      3-   26 m1      ret
                                    1-  358     ; exit point of _main
                                    1-  360     ;***
                                    1-  361     ;  pBlock Stats: dbName = C
                                    1-  362     ;***
                                    1-  363     ;has an exit
                                    1-  364     ;; Starting pCode block
                                    1-  365     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  367     _gotoSleep:
                                    1-  368     ; 2 exit points
                                    1-  369     	.line	200, "main.c"; 	sleepTime = 0;
     0000 02rr                      1-  370     	CLRR	_sleepTime
                                    1-  371     	.line	201, "main.c"; 	IOSTB =  C_PB5_Input | C_PB0_Input | C_PB1_Input;
     0001 2123                      1-  372     	MOVIA	0x23
     0002 000r                      1-  373     	IOST	_IOSTB
                                    1-  374     	.line	202, "main.c"; 	PORTB = 0x00;
     0003 02rr                      1-  375     	CLRR	_PORTB
                                    1-  376     	.line	203, "main.c"; 	BWUCON = 0x20;
     0004 2120                      1-  377     	MOVIA	0x20
     0005 00rr                      1-  378     	MOVAR	_BWUCON
                                    1-  379     	.line	204, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0006 2103                      1-  380     	MOVIA	0x03
     0007 00rr                      1-  381     	MOVAR	_INTE
                                    1-  382     	.line	205, "main.c"; 	PCON =  C_LVR_En;	
     0008 2108                      1-  383     	MOVIA	0x08
     0009 00rr                      1-  384     	MOVAR	_PCON
                                    1-  385     	.line	206, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000A 02rr                      1-  386     	CLRR	_INTF
                                    1-  387     	.line	207, "main.c"; 	CLRWDT();
     000B 0002                      1-  388     	clrwdt
                                    1-  389     	.line	208, "main.c"; 	ENI();
     000C 0004                      1-  390     	ENI
                                    1-  391     	.line	209, "main.c"; 	SLEEP();
     000D 0001                      1-  392     	sleep
                                    1-  393     	.line	210, "main.c"; 	BWUCON = 0x00;
     000E 02rr                      1-  394     	CLRR	_BWUCON
                                    1-  395     	.line	211, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000F 2101                      1-  396     	MOVIA	0x01
     0010 00rr                      1-  397     	MOVAR	_INTE
                                    1-  398     	.line	212, "main.c"; 	INTF = 0;
     0011 02rr                      1-  399     	CLRR	_INTF
                                    1-  400     	.line	214, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0012 2188                      1-  401     	MOVIA	0x88
     0013 00rr                      1-  402     	MOVAR	_PCON
                                    1-  403     	.line	216, "main.c"; 	}
                                    1-  404     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1-  405     ; exit point of _gotoSleep
                                    1-  407     ;***
                                    1-  408     ;  pBlock Stats: dbName = C
                                    1-  409     ;***
                                    1-  410     ;1 compiler assigned register :
                                    1-  411     ;   r0x100D
                                    1-  412     ;; Starting pCode block
                                    1-  413     .segment "code"; module=main, function=_setLedduty
     0000                           1-  415     _setLedduty:
                                    1-  416     ; 0 exit points
                                    1-  417     	.line	173, "main.c"; 	if(ledCount >= duty0)
     0000 01rr                      1-  418     	MOVR	_duty0,W
     0001 04rr                      1-  419     	SUBAR	_ledCount,W
     0002 0803                      1-  420     	BTRSS	STATUS,0
     0003 3rrr                      1-  421     	LGOTO	_00231_DS_
                                    1-  422     	.line	175, "main.c"; 	IOSTB |= 0x01;
     0004 001r                      1-  423     	IOSTR	_IOSTB
     0005 00rr                      1-  424     	MOVAR	r0x100D
     0006 18rr                      1-  425     	BSR	r0x100D,0
     0007 01rr                      1-  426     	MOVR	r0x100D,W
     0008 000r                      1-  427     	IOST	_IOSTB
                                    1-  428     	.line	176, "main.c"; 	PORTB |= 0x01;
     0009 18rr                      1-  429     	BSR	_PORTB,0
     000A 3rrr                      1-  430     	LGOTO	_00232_DS_
     000B                           1-  431     _00231_DS_:
                                    1-  432     	.line	180, "main.c"; 	IOSTB &= 0xFE;
     000B 001r                      1-  433     	IOSTR	_IOSTB
     000C 00rr                      1-  434     	MOVAR	r0x100D
     000D 1Crr                      1-  435     	BCR	r0x100D,0
     000E 01rr                      1-  436     	MOVR	r0x100D,W
     000F 000r                      1-  437     	IOST	_IOSTB
                                    1-  438     	.line	181, "main.c"; 	PORTB &= 0xFE;
     0010 1Crr                      1-  439     	BCR	_PORTB,0
     0011                           1-  440     _00232_DS_:
                                    1-  441     	.line	183, "main.c"; 	if(ledCount >= duty1)
     0011 01rr                      1-  442     	MOVR	_duty1,W
     0012 04rr                      1-  443     	SUBAR	_ledCount,W
     0013 0803                      1-  444     	BTRSS	STATUS,0
     0014 3rrr                      1-  445     	LGOTO	_00234_DS_
                                    1-  446     	.line	185, "main.c"; 	IOSTB |= 0x02;
     0015 001r                      1-  447     	IOSTR	_IOSTB
     0016 00rr                      1-  448     	MOVAR	r0x100D
     0017 18rr                      1-  449     	BSR	r0x100D,1
     0018 01rr                      1-  450     	MOVR	r0x100D,W
     0019 000r                      1-  451     	IOST	_IOSTB
                                    1-  452     	.line	186, "main.c"; 	PORTB |= 0x02;
     001A 18rr                      1-  453     	BSR	_PORTB,1
     001B 3rrr                      1-  454     	LGOTO	_00235_DS_
     001C                           1-  455     _00234_DS_:
                                    1-  456     	.line	190, "main.c"; 	IOSTB &= 0xFD;
     001C 001r                      1-  457     	IOSTR	_IOSTB
     001D 00rr                      1-  458     	MOVAR	r0x100D
     001E 1Crr                      1-  459     	BCR	r0x100D,1
     001F 01rr                      1-  460     	MOVR	r0x100D,W
     0020 000r                      1-  461     	IOST	_IOSTB
                                    1-  462     	.line	191, "main.c"; 	PORTB &= 0xFD;
     0021 1Crr                      1-  463     	BCR	_PORTB,1
     0022                           1-  464     _00235_DS_:
                                    1-  465     	.line	193, "main.c"; 	if(++ledCount >= MAXDUTY)
     0022 05rr                      1-  466     	INCR	_ledCount,F
                                    1-  467     ;;unsigned compare: left < lit (0x96=150), size=1
     0023 2196                      1-  468     	MOVIA	0x96
     0024 04rr                      1-  469     	SUBAR	_ledCount,W
     0025 0C03                      1-  470     	BTRSC	STATUS,0
                                    1-  471     	.line	194, "main.c"; 	ledCount = 0;
     0026 02rr                      1-  472     	CLRR	_ledCount
                                    1-  473     	.line	195, "main.c"; 	}
                                    1-  474     	RETURN	
     0027 0010                      3-   26 m1      ret
                                    1-  476     ;***
                                    1-  477     ;  pBlock Stats: dbName = C
                                    1-  478     ;***
                                    1-  479     ;has an exit
                                    1-  480     ;functions called:
                                    1-  481     ;   _keyRead
                                    1-  482     ;   _keyRead
                                    1-  483     ;1 compiler assigned register :
                                    1-  484     ;   r0x100F
                                    1-  485     ;; Starting pCode block
                                    1-  486     .segment "code"; module=main, function=_keyCtr
     0000                           1-  488     _keyCtr:
                                    1-  489     ; 2 exit points
                                    1-  490     	.line	153, "main.c"; 	if(keyRead(0x20 & ~PORTB))
     0000 07rr                      1-  491     	COMR	_PORTB,W
     0001 00rr                      1-  492     	MOVAR	r0x100F
     0002 2120                      1-  493     	MOVIA	0x20
     0003 10rr                      1-  494     	ANDAR	r0x100F,F
     0004 01rr                      1-  495     	MOVR	r0x100F,W
     0005 2rrr                      1-  496     	LCALL	_keyRead
     0006 00rr                      1-  497     	MOVAR	r0x100F
     0007 01rr                      1-  498     	MOVR	r0x100F,W
     0008 0D03                      1-  499     	BTRSC	STATUS,2
     0009 3rrr                      1-  500     	LGOTO	_00225_DS_
                                    1-  501     	.line	155, "main.c"; 	workTime = 0;
     000A 02rr                      1-  502     	CLRR	_workTime
     000B 02rr                      1-  503     	CLRR	(_workTime + 1)
                                    1-  504     	.line	156, "main.c"; 	duty0 = duty1 = 0;
     000C 02rr                      1-  505     	CLRR	_duty1
     000D 02rr                      1-  506     	CLRR	_duty0
                                    1-  507     	.line	157, "main.c"; 	ledCount = 0;
     000E 02rr                      1-  508     	CLRR	_ledCount
                                    1-  509     	.line	158, "main.c"; 	if(powerFlag)
     000F 01rr                      1-  510     	MOVR	_powerFlag,W
     0010 0D03                      1-  511     	BTRSC	STATUS,2
     0011 3rrr                      1-  512     	LGOTO	_00221_DS_
                                    1-  513     	.line	160, "main.c"; 	powerFlag = 0;
     0012 02rr                      1-  514     	CLRR	_powerFlag
     0013 3rrr                      1-  515     	LGOTO	_00225_DS_
     0014                           1-  516     _00221_DS_:
                                    1-  517     	.line	164, "main.c"; 	powerFlag = 1;
     0014 2101                      1-  518     	MOVIA	0x01
     0015 00rr                      1-  519     	MOVAR	_powerFlag
     0016                           1-  520     _00225_DS_:
                                    1-  521     	.line	167, "main.c"; 	}
                                    1-  522     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  523     ; exit point of _keyCtr
                                    1-  525     ;***
                                    1-  526     ;  pBlock Stats: dbName = C
                                    1-  527     ;***
                                    1-  528     ;has an exit
                                    1-  529     ;1 compiler assigned register :
                                    1-  530     ;   r0x100E
                                    1-  531     ;; Starting pCode block
                                    1-  532     .segment "code"; module=main, function=_keyRead
                                    1-  534     ;local variable name mapping:
     0000                           1-  536     _keyRead:
                                    1-  537     ; 2 exit points
                                    1-  538     	.line	126, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  539     	MOVAR	r0x100E
                                    1-  540     	.line	128, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  541     	MOVR	r0x100E,W
     0002 0D03                      1-  542     	BTRSC	STATUS,2
     0003 3rrr                      1-  543     	LGOTO	_00213_DS_
                                    1-  544     	.line	130, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  545     	CLRR	_sleepTime
                                    1-  546     	.line	131, "main.c"; 	keyCount++;
     0005 05rr                      1-  547     	INCR	_keyCount,F
                                    1-  548     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  549     	.line	132, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  550     	MOVIA	0xc8
     0007 04rr                      1-  551     	SUBAR	_keyCount,W
     0008 0803                      1-  552     	BTRSS	STATUS,0
     0009 3rrr                      1-  553     	LGOTO	_00214_DS_
                                    1-  554     	.line	134, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  555     	MOVIA	0xc8
     000B 00rr                      1-  556     	MOVAR	_keyCount
     000C 3rrr                      1-  557     	LGOTO	_00214_DS_
                                    1-  558     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  559     _00213_DS_:
                                    1-  560     	.line	139, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  561     	MOVIA	0x08
     000E 04rr                      1-  562     	SUBAR	_keyCount,W
     000F 0803                      1-  563     	BTRSS	STATUS,0
     0010 3rrr                      1-  564     	LGOTO	_00211_DS_
                                    1-  565     	.line	141, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  566     	CLRR	_keyCount
                                    1-  567     	.line	142, "main.c"; 	return	1;
     0012 2101                      1-  568     	MOVIA	0x01
     0013 3rrr                      1-  569     	LGOTO	_00215_DS_
     0014                           1-  570     _00211_DS_:
                                    1-  571     	.line	144, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  572     	CLRR	_keyCount
     0015                           1-  573     _00214_DS_:
                                    1-  574     	.line	146, "main.c"; 	return 0;
     0015 2100                      1-  575     	MOVIA	0x00
     0016                           1-  576     _00215_DS_:
                                    1-  577     	.line	147, "main.c"; 	}
                                    1-  578     	RETURN	
     0016 0010                      3-   26 m1      ret
                                    1-  579     ; exit point of _keyRead
                                    1-  581     ;***
                                    1-  582     ;  pBlock Stats: dbName = C
                                    1-  583     ;***
                                    1-  584     ;; Starting pCode block
                                    1-  585     .segment "code"; module=main, function=_workCtr
     0000                           1-  587     _workCtr:
                                    1-  588     ; 0 exit points
                                    1-  589     	.line	95, "main.c"; 	if(++workTime >= 800)
     0000 05rr                      1-  590     	INCR	_workTime,F
     0001 0D03                      1-  591     	BTRSC	STATUS,2
     0002 05rr                      1-  592     	INCR	(_workTime + 1),F
                                    1-  593     ;;unsigned compare: left < lit (0x320=800), size=2
     0003 2103                      1-  594     	MOVIA	0x03
     0004 04rr                      1-  595     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  596     	BTRSS	STATUS,2
     0006 3rrr                      1-  597     	LGOTO	_00195_DS_
     0007 2120                      1-  598     	MOVIA	0x20
     0008 04rr                      1-  599     	SUBAR	_workTime,W
     0009                           1-  600     _00195_DS_:
     0009 0803                      1-  601     	BTRSS	STATUS,0
     000A 3rrr                      1-  602     	LGOTO	_00134_DS_
                                    1-  603     	.line	96, "main.c"; 	workTime = 0;
     000B 02rr                      1-  604     	CLRR	_workTime
     000C 02rr                      1-  605     	CLRR	(_workTime + 1)
                                    1-  606     ;;unsigned compare: left < lit (0x96=150), size=2
     000D                           1-  607     _00134_DS_:
                                    1-  608     	.line	97, "main.c"; 	if(workTime < 150)
     000D 2100                      1-  609     	MOVIA	0x00
     000E 04rr                      1-  610     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  611     	BTRSS	STATUS,2
     0010 3rrr                      1-  612     	LGOTO	_00196_DS_
     0011 2196                      1-  613     	MOVIA	0x96
     0012 04rr                      1-  614     	SUBAR	_workTime,W
     0013                           1-  615     _00196_DS_:
     0013 0C03                      1-  616     	BTRSC	STATUS,0
     0014 3rrr                      1-  617     	LGOTO	_00158_DS_
                                    1-  618     	.line	99, "main.c"; 	duty1 = 0;
     0015 02rr                      1-  619     	CLRR	_duty1
                                    1-  620     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  621     	.line	100, "main.c"; 	if(duty0 < MAXDUTY)
     0016 2196                      1-  622     	MOVIA	0x96
     0017 04rr                      1-  623     	SUBAR	_duty0,W
     0018 0C03                      1-  624     	BTRSC	STATUS,0
     0019 3rrr                      1-  625     	LGOTO	_00160_DS_
                                    1-  626     	.line	101, "main.c"; 	++duty0;
     001A 05rr                      1-  627     	INCR	_duty0,F
     001B 3rrr                      1-  628     	LGOTO	_00160_DS_
                                    1-  629     ;;unsigned compare: left < lit (0xFA=250), size=2
     001C                           1-  630     _00158_DS_:
                                    1-  631     	.line	103, "main.c"; 	else if(workTime < 250)
     001C 2100                      1-  632     	MOVIA	0x00
     001D 04rr                      1-  633     	SUBAR	(_workTime + 1),W
     001E 0903                      1-  634     	BTRSS	STATUS,2
     001F 3rrr                      1-  635     	LGOTO	_00198_DS_
     0020 21FA                      1-  636     	MOVIA	0xfa
     0021 04rr                      1-  637     	SUBAR	_workTime,W
     0022                           1-  638     _00198_DS_:
     0022 0C03                      1-  639     	BTRSC	STATUS,0
     0023 3rrr                      1-  640     	LGOTO	_00155_DS_
                                    1-  641     	.line	104, "main.c"; 	duty0 = MAXDUTY;
     0024 2196                      1-  642     	MOVIA	0x96
     0025 00rr                      1-  643     	MOVAR	_duty0
     0026 3rrr                      1-  644     	LGOTO	_00160_DS_
                                    1-  645     ;;unsigned compare: left < lit (0x190=400), size=2
     0027                           1-  646     _00155_DS_:
                                    1-  647     	.line	105, "main.c"; 	else if(workTime < 400)
     0027 2101                      1-  648     	MOVIA	0x01
     0028 04rr                      1-  649     	SUBAR	(_workTime + 1),W
     0029 0903                      1-  650     	BTRSS	STATUS,2
     002A 3rrr                      1-  651     	LGOTO	_00199_DS_
     002B 2190                      1-  652     	MOVIA	0x90
     002C 04rr                      1-  653     	SUBAR	_workTime,W
     002D                           1-  654     _00199_DS_:
     002D 0C03                      1-  655     	BTRSC	STATUS,0
     002E 3rrr                      1-  656     	LGOTO	_00152_DS_
                                    1-  657     	.line	107, "main.c"; 	if(duty0 > 0)
     002F 01rr                      1-  658     	MOVR	_duty0,W
     0030 0D03                      1-  659     	BTRSC	STATUS,2
     0031 3rrr                      1-  660     	LGOTO	_00160_DS_
                                    1-  661     	.line	108, "main.c"; 	--duty0;
     0032 06rr                      1-  662     	DECR	_duty0,F
     0033 3rrr                      1-  663     	LGOTO	_00160_DS_
                                    1-  664     ;;unsigned compare: left < lit (0x226=550), size=2
     0034                           1-  665     _00152_DS_:
                                    1-  666     	.line	110, "main.c"; 	else if(workTime < 550)
     0034 2102                      1-  667     	MOVIA	0x02
     0035 04rr                      1-  668     	SUBAR	(_workTime + 1),W
     0036 0903                      1-  669     	BTRSS	STATUS,2
     0037 3rrr                      1-  670     	LGOTO	_00200_DS_
     0038 2126                      1-  671     	MOVIA	0x26
     0039 04rr                      1-  672     	SUBAR	_workTime,W
     003A                           1-  673     _00200_DS_:
     003A 0C03                      1-  674     	BTRSC	STATUS,0
     003B 3rrr                      1-  675     	LGOTO	_00149_DS_
                                    1-  676     	.line	112, "main.c"; 	duty0 = 0;
     003C 02rr                      1-  677     	CLRR	_duty0
                                    1-  678     ;;unsigned compare: left < lit (0x96=150), size=1
                                    1-  679     	.line	113, "main.c"; 	if(duty1 < MAXDUTY)
     003D 2196                      1-  680     	MOVIA	0x96
     003E 04rr                      1-  681     	SUBAR	_duty1,W
     003F 0C03                      1-  682     	BTRSC	STATUS,0
     0040 3rrr                      1-  683     	LGOTO	_00160_DS_
                                    1-  684     	.line	114, "main.c"; 	++duty1;
     0041 05rr                      1-  685     	INCR	_duty1,F
     0042 3rrr                      1-  686     	LGOTO	_00160_DS_
                                    1-  687     ;;unsigned compare: left < lit (0x28A=650), size=2
     0043                           1-  688     _00149_DS_:
                                    1-  689     	.line	116, "main.c"; 	else if(workTime < 650)
     0043 2102                      1-  690     	MOVIA	0x02
     0044 04rr                      1-  691     	SUBAR	(_workTime + 1),W
     0045 0903                      1-  692     	BTRSS	STATUS,2
     0046 3rrr                      1-  693     	LGOTO	_00202_DS_
     0047 218A                      1-  694     	MOVIA	0x8a
     0048 04rr                      1-  695     	SUBAR	_workTime,W
     0049                           1-  696     _00202_DS_:
     0049 0C03                      1-  697     	BTRSC	STATUS,0
     004A 3rrr                      1-  698     	LGOTO	_00146_DS_
                                    1-  699     	.line	117, "main.c"; 	duty1 = MAXDUTY;
     004B 2196                      1-  700     	MOVIA	0x96
     004C 00rr                      1-  701     	MOVAR	_duty1
     004D 3rrr                      1-  702     	LGOTO	_00160_DS_
                                    1-  703     ;;unsigned compare: left < lit (0x320=800), size=2
     004E                           1-  704     _00146_DS_:
                                    1-  705     	.line	118, "main.c"; 	else if(workTime < 800)
     004E 2103                      1-  706     	MOVIA	0x03
     004F 04rr                      1-  707     	SUBAR	(_workTime + 1),W
     0050 0903                      1-  708     	BTRSS	STATUS,2
     0051 3rrr                      1-  709     	LGOTO	_00203_DS_
     0052 2120                      1-  710     	MOVIA	0x20
     0053 04rr                      1-  711     	SUBAR	_workTime,W
     0054                           1-  712     _00203_DS_:
     0054 0C03                      1-  713     	BTRSC	STATUS,0
     0055 3rrr                      1-  714     	LGOTO	_00160_DS_
                                    1-  715     	.line	120, "main.c"; 	if(duty1 > 0)
     0056 01rr                      1-  716     	MOVR	_duty1,W
     0057 0903                      1-  717     	BTRSS	STATUS,2
                                    1-  718     	.line	121, "main.c"; 	--duty1;
     0058 06rr                      1-  719     	DECR	_duty1,F
     0059                           1-  720     _00160_DS_:
                                    1-  721     	.line	123, "main.c"; 	}
                                    1-  722     	RETURN	
     0059 0010                      3-   26 m1      ret
                                    1-  725     ;	code size estimation:
                                    1-  726     ;	  285+    0 =   285 instructions (  570 byte)
                                    1-  728     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800513
__sdcc_interrupt        Label    00000000
_00108_DS_              Label    00000019
_00110_DS_              Label    0000001D
_00116_DS_              Label    0000001A
_00117_DS_              Label    0000001D
_00124_DS_              Label    00000027
_00128_DS_              Label    00000014
_00134_DS_              Label    0000000D
_00146_DS_              Label    0000004E
_00149_DS_              Label    00000043
_00152_DS_              Label    00000034
_00155_DS_              Label    00000027
_00158_DS_              Label    0000001C
_00160_DS_              Label    00000059
_00195_DS_              Label    00000009
_00196_DS_              Label    00000013
_00198_DS_              Label    00000022
_00199_DS_              Label    0000002D
_00200_DS_              Label    0000003A
_00202_DS_              Label    00000049
_00203_DS_              Label    00000054
_00211_DS_              Label    00000014
_00213_DS_              Label    0000000D
_00214_DS_              Label    00000015
_00215_DS_              Label    00000016
_00221_DS_              Label    00000014
_00225_DS_              Label    00000016
_00231_DS_              Label    0000000B
_00232_DS_              Label    00000011
_00234_DS_              Label    0000001C
_00235_DS_              Label    00000022
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BPLCON                 Label    00000000
_BPLCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_duty0                  Label    00000000
_duty1                  Label    00000000
_FSR                    Label    00000000
_gotoSleep              Label    00000000
_INDF                   Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTEbits               Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_ledCount               Label    00000000
_main                   Label    00000000
_OSCCR                  Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_powerFlag              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PWM1DUTY               Label    00000000
_setLedduty             Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_workCtr                Label    00000000
_workTime               Label    00000000
ENABLE_RAM_BANK         Variable 00000000
END_OF_INTERRUPT        Label    0000002B
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x100D                 Label    00000000
r0x100E                 Label    00000000
r0x100F                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8a051d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A051D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
